export interface ALO {
    operator: string;
    supported: string[];
    description: string;
    versions: string[];
}

const v1_35_3_36_0 = ["1.35.3", "1.36.0"]

export const AccessLogOperators: ALO[] = [
    {
        operator: "%START_TIME%",
        supported: ["HTTP", "THRIFT", "TCP", "UDP"],
        description: "Request start time including milliseconds.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%EMIT_TIME%",
        supported: ["HTTP", "THRIFT", "TCP", "UDP"],
        description: "The time when log entry is emitted including milliseconds.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%START_TIME_LOCAL%",
        supported: ["HTTP", "THRIFT", "TCP", "UDP"],
        description: "Request start time in local timezone including milliseconds.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%EMIT_TIME_LOCAL%",
        supported: ["HTTP", "THRIFT", "TCP", "UDP"],
        description: "The time when log entry is emitted in local timezone including milliseconds.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%REQUEST_HEADERS_BYTES%",
        supported: ["HTTP"],
        description: "Uncompressed bytes of request headers.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%BYTES_RECEIVED%",
        supported: ["HTTP", "THRIFT", "TCP"],
        description: "Body bytes received.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%BYTES_RETRANSMITTED%",
        supported: ["HTTP/3"],
        description: "Body bytes retransmitted.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%PACKETS_RETRANSMITTED%",
        supported: ["HTTP/3"],
        description: "Number of packets retransmitted.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%PROTOCOL%",
        supported: ["HTTP"],
        description: "Protocol. Currently either HTTP/1.1 HTTP/2 or HTTP/3.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PROTOCOL%",
        supported: ["HTTP"],
        description: "Upstream protocol. Currently either HTTP/1.1 HTTP/2 or HTTP/3.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESPONSE_CODE%",
        supported: ["HTTP"],
        description: `HTTP response code. Note that a response code of 0 means that the server never sent the beginning of a response. This generally means that the (downstream) client disconnected.\n Note that in the case of 100-continue responses, only the response code of the final headers will be logged. If a 100-continue is followed by a 200, the logged response will be 200. If a 100-continue results in a disconnect, the 100 will be logged.`,
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESPONSE_CODE_DETAILS%",
        supported: ["HTTP"],
        description: "HTTP response code details provides additional information about the response code, such as who set it (the upstream or envoy) and why.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%CONNECTION_TERMINATION_DETAILS%",
        supported: ["HTTP", "TCP"],
        description: "Connection termination details may provide additional information about why the connection was terminated by Envoy for L4 reasons.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESPONSE_HEADERS_BYTES%",
        supported: ["HTTP"],
        description: "Uncompressed bytes of response headers.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESPONSE_TRAILERS_BYTES%",
        supported: ["HTTP"],
        description: "Uncompressed bytes of response trailers.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%BYTES_SENT%",
        supported: ["HTTP", "THRIFT", "TCP"],
        description: "Body bytes sent. For WebSocket connection it will also include response header bytes.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_REQUEST_ATTEMPT_COUNT%",
        supported: ["HTTP", "TCP"],
        description: "Number of times the request is attempted upstream. Note that an attempt count of 0 means that the request was never attempted upstream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_WIRE_BYTES_SENT%",
        supported: ["HTTP", "TCP"],
        description: "Total number of bytes sent to the upstream by the http stream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_WIRE_BYTES_RECEIVED%",
        supported: ["HTTP", "TCP"],
        description: "Total number of bytes received from the upstream by the http stream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_HEADER_BYTES_SENT%",
        supported: ["HTTP"],
        description: "Number of header bytes sent to the upstream by the http stream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_HEADER_BYTES_RECEIVED%",
        supported: ["HTTP"],
        description: "Number of header bytes received from the upstream by the http stream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_WIRE_BYTES_SENT%",
        supported: ["HTTP", "TCP"],
        description: "Total number of bytes sent to the downstream by the http stream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_WIRE_BYTES_RECEIVED%",
        supported: ["HTTP", "TCP"],
        description: "Total number of bytes received from the downstream by the http stream. Envoy over counts sizes of received HTTP/1.1 pipelined requests by adding up bytes of requests in the pipeline to the one currently being processed.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_HEADER_BYTES_SENT%",
        supported: ["HTTP"],
        description: "Number of header bytes sent to the downstream by the http stream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_HEADER_BYTES_RECEIVED%",
        supported: ["HTTP"],
        description: "Number of header bytes received from the downstream by the http stream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DURATION%",
        supported: ["HTTP", "THRIFT", "TCP"],
        description: "Total duration in milliseconds of the request from the start time to the last byte out.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%COMMON_DURATION(START:END:PRECISION)%",
        supported: ["HTTP"],
        description: "Total duration between the START time point and the END time point in specific PRECISION. The START and END time points are specified by the following values (NOTE: all values here are case-sensitive).",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%REQUEST_DURATION%",
        supported: ["HTTP"],
        description: "Total duration in milliseconds of the request from the start time to the last byte of the request received from the downstream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%REQUEST_TX_DURATION%",
        supported: ["HTTP"],
        description: "Total duration in milliseconds of the request from the start time to the last byte sent upstream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESPONSE_DURATION%",
        supported: ["HTTP"],
        description: "Total duration in milliseconds of the request from the start time to the first byte read from the upstream host.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%ROUNDTRIP_DURATION%",
        supported: ["HTTP/3"],
        description: "Total duration in milliseconds of the request from the start time to receiving the final ack from the downstream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESPONSE_TX_DURATION%",
        supported: ["HTTP"],
        description: "Total duration in milliseconds of the request from the first byte read from the upstream host to the last byte sent downstream.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_HANDSHAKE_DURATION%",
        supported: ["TCP"],
        description: "Total duration in milliseconds from the start of the connection to the TLS handshake being completed.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_CONNECTION_POOL_READY_DURATION%",
        supported: ["HTTP", "TCP"],
        description: "Total duration in milliseconds from when the upstream request was created to when the connection pool is ready.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESPONSE_FLAGS% / %RESPONSE_FLAGS_LONG%",
        supported: ["HTTP", "TCP"],
        description: "Additional details about the response or connection, if any. For TCP connections, the response codes mentioned in the descriptions do not apply. %RESPONSE_FLAGS% will output a short string. %RESPONSE_FLAGS_LONG% will output a Pascal case string.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%ROUTE_NAME%",
        supported: ["HTTP", "TCP"],
        description: "Name of the route.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%VIRTUAL_CLUSTER_NAME%",
        supported: ["HTTP"],
        description: "Name of the matched Virtual Cluster.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_HOST%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "Main address of upstream host.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_HOST_NAME%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "Upstream host name (e.g., DNS name). If no DNS name is available, the main address of the upstream host (e.g., ip:port for TCP connections) will be used.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_CLUSTER%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "Upstream cluster to which the upstream host belongs to. alt_stat_name will be used if provided.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_CLUSTER_RAW%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "Upstream cluster to which the upstream host belongs to. alt_stat_name does NOT modify this value.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_LOCAL_ADDRESS%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "Local address of the upstream connection. If the address is an IP address it includes both address and port.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_LOCAL_ADDRESS_WITHOUT_PORT%",
        supported: [],
        description: "Local address of the upstream connection, without any port component. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_LOCAL_PORT%",
        supported: [],
        description: "Local port of the upstream connection. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_REMOTE_ADDRESS%",
        supported: [],
        description: "Remote address of the upstream connection. If the address is an IP address it includes both address and port. Identical to the UPSTREAM_HOST value if the upstream host only has one address and connection is established successfully.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%",
        supported: [],
        description: "Remote address of the upstream connection, without any port component. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_REMOTE_PORT%",
        supported: [],
        description: "Remote port of the upstream connection. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_TRANSPORT_FAILURE_REASON%",
        supported: ["HTTP"],
        description: "If upstream connection failed due to transport socket (e.g. TLS handshake), provides the failure reason from the transport socket. The format of this field depends on the configured upstream transport socket. Common TLS failures are in TLS trouble shooting.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_TRANSPORT_FAILURE_REASON%",
        supported: ["HTTP", "TCP"],
        description: "If downstream connection failed due to transport socket (e.g. TLS handshake), provides the failure reason from the transport socket. The format of this field depends on the configured downstream transport socket. Common TLS failures are in TLS trouble shooting. Note: it only works in listener access config, and the HTTP or TCP access logs would observe empty values.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_REMOTE_ADDRESS%",
        supported: ["HTTP", "TCP", "THRIFT", "UDP"],
        description: "Remote address of the downstream connection. If the address is an IP address it includes both address and port.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%",
        supported: [],
        description: "Remote address of the downstream connection, without any port component. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_REMOTE_PORT%",
        supported: [],
        description: "Remote port of the downstream connection. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS%",
        supported: [],
        description: "Direct remote address of the downstream connection. If the address is an IP address it includes both address and port.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_DIRECT_REMOTE_ADDRESS_WITHOUT_PORT%",
        supported: [],
        description: "Direct remote address of the downstream connection, without any port component. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_DIRECT_REMOTE_PORT%",
        supported: [],
        description: "Direct remote port of the downstream connection. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_LOCAL_ADDRESS%",
        supported: ["HTTP", "TCP", "THRIFT", "UDP"],
        description: "Local address of the downstream connection. If the address is an IP address it includes both address and port.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_LOCAL_ADDRESS_WITHOUT_PORT%",
        supported: [],
        description: "Local address of the downstream connection, without any port component. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_LOCAL_PORT%",
        supported: [],
        description: "Local port of the downstream connection. IP addresses are the only address type with a port component.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%CONNECTION_ID%",
        supported: ["HTTP", "TCP", "UDP"],
        description: "An identifier for the downstream connection. It can be used to cross-reference TCP access logs across multiple log sinks, or to cross-reference timer-based reports for the same connection. The identifier is unique with high likelihood within an execution, but can duplicate across multiple instances or between restarts.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_CONNECTION_ID%",
        supported: [],
        description: "An identifier for the upstream connection. It can be used to cross-reference TCP access logs across multiple log sinks, or to cross-reference timer-based reports for the same connection. The identifier is unique with high likelihood within an execution, but can duplicate across multiple instances or between restarts.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%STREAM_ID%",
        supported: [],
        description: "An identifier for the stream (HTTP request, long-live HTTP2 stream, TCP connection, etc.). It can be used to cross-reference TCP access logs across multiple log sinks, or to cross-reference timer-based reports for the same connection. Different with %CONNECTION_ID%, the identifier should be unique across multiple instances or between restarts. And it's value should be same with %REQ(X-REQUEST-ID)% for HTTP request. This should be used to replace %CONNECTION_ID% and %REQ(X-REQUEST-ID)% in most cases.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%GRPC_STATUS(X)%",
        supported: ["HTTP"],
        description: "gRPC status code formatted according to the optional parameter X, which can be CAMEL_STRING, SNAKE_STRING and NUMBER. For example, if the grpc status is INVALID_ARGUMENT (represented by number 3), the formatter will return InvalidArgument for CAMEL_STRING, INVALID_ARGUMENT for SNAKE_STRING and 3 for NUMBER. If X isn't provided, CAMEL_STRING will be used.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%GRPC_STATUS_NUMBER%",
        supported: [],
        description: "gRPC status code.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%REQ(X?Y):Z%",
        supported: ["HTTP"],
        description: "An HTTP request header where X is the main HTTP header, Y is the alternative one, and Z is an optional parameter denoting string truncation up to Z characters long. The value is taken from the HTTP request header named X first and if it's not set, then request header Y is used. If none of the headers are present '-' symbol will be in the log.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%RESP(X?Y):Z%",
        supported: ["HTTP"],
        description: "Same as %REQ(X?Y):Z% but taken from HTTP response headers.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%TRAILER(X?Y):Z%",
        supported: ["HTTP"],
        description: "Same as %REQ(X?Y):Z% but taken from HTTP response trailers.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DYNAMIC_METADATA(NAMESPACE:KEY*):Z%",
        supported: ["HTTP", "UDP", "THRIFT"],
        description: "Dynamic Metadata info, where NAMESPACE is the filter namespace used when setting the metadata, KEY is an optional lookup key in the namespace with the option of specifying nested keys separated by ':', and Z is an optional parameter denoting string truncation up to Z characters long. Dynamic Metadata can be set by filters using the StreamInfo API: setDynamicMetadata. The data will be logged as a JSON string.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%CLUSTER_METADATA(NAMESPACE:KEY*):Z%",
        supported: ["HTTP"],
        description: "Upstream cluster Metadata info, where NAMESPACE is the filter namespace used when setting the metadata, KEY is an optional lookup key in the namespace with the option of specifying nested keys separated by ':', and Z is an optional parameter denoting string truncation up to Z characters long. The data will be logged as a JSON string.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_METADATA(NAMESPACE:KEY*):Z%",
        supported: ["HTTP", "TCP"],
        description: "Upstream host Metadata info, where NAMESPACE is the filter namespace used when setting the metadata, KEY is an optional lookup key in the namespace with the option of specifying nested keys separated by ':', and Z is an optional parameter denoting string truncation up to Z characters long. The data will be logged as a JSON string.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%FILTER_STATE(KEY:F:FIELD?):Z%",
        supported: ["HTTP", "TCP", "UDP"],
        description: "Filter State info, where the KEY is required to look up the filter state object. The serialized proto will be logged as JSON string if possible. If the serialized proto is unknown to Envoy it will be logged as protobuf debug string. Z is an optional parameter denoting string truncation up to Z characters long. F is an optional parameter used to indicate which method FilterState uses for serialization. If 'PLAIN' is set, the filter state object will be serialized as an unstructured string. If 'TYPED' is set or no F provided, the filter state object will be serialized as an JSON string. If F is set to 'FIELD', the filter state object field with the name FIELD will be serialized. FIELD parameter should only be used with F set to 'FIELD'.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_FILTER_STATE(KEY:F:FIELD?):Z%",
        supported: ["HTTP"],
        description: "Extracts filter state from upstream components like cluster or transport socket extensions.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%REQUESTED_SERVER_NAME%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "String value set on ssl connection socket for Server Name Indication (SNI).",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_LOCAL_IP_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The ip addresses present in the SAN of the local certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_IP_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The ip addresses present in the SAN of the peer certificate received from the downstream client to establish the TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_LOCAL_DNS_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The DNS names present in the SAN of the local certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_DNS_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The DNS names present in the SAN of the peer certificate received from the downstream client to establish the TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_LOCAL_URI_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The URIs present in the SAN of the local certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_URI_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The URIs present in the SAN of the peer certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_LOCAL_SUBJECT%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The subject present in the local certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_SUBJECT%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The subject present in the peer certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_ISSUER%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The issuer present in the peer certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_TLS_SESSION_ID%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The session ID for the established downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_TLS_CIPHER%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The OpenSSL name for the set of ciphers used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_TLS_VERSION%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The TLS version (e.g., TLSv1.2, TLSv1.3) used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_FINGERPRINT_256%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The hex-encoded SHA256 fingerprint of the client certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_FINGERPRINT_1%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The hex-encoded SHA1 fingerprint of the client certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_SERIAL%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The serial number of the client certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_CERT%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The client certificate in the URL-encoded PEM format used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_CERT_V_START%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The validity start date of the client certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%DOWNSTREAM_PEER_CERT_V_END%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The validity end date of the client certificate used to establish the downstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_SUBJECT%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The subject present in the peer certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_ISSUER%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The issuer present in the peer certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_TLS_SESSION_ID%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The session ID for the established upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_TLS_CIPHER%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The OpenSSL name for the set of ciphers used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_TLS_VERSION%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The TLS version (e.g., TLSv1.2, TLSv1.3) used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_CERT%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The server certificate in the URL-encoded PEM format used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_CERT_V_START%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The validity start date of the upstream server certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_CERT_V_END%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The validity end date of the upstream server certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_URI_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The URIs present in the SAN of the peer certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_DNS_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The DNS names present in the SAN of the peer certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_PEER_IP_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The ip addresses present in the SAN of the peer certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_LOCAL_URI_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The URIs present in the SAN of the local certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_LOCAL_DNS_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The DNS names present in the SAN of the local certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UPSTREAM_LOCAL_IP_SAN%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The ip addresses present in the SAN of the local certificate used to establish the upstream TLS connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%HOSTNAME%",
        supported: ["HTTP", "TCP", "THRIFT", "UDP"],
        description: "The system hostname.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%LOCAL_REPLY_BODY%",
        supported: [],
        description: "The body text for the requests rejected by the Envoy.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%FILTER_CHAIN_NAME%",
        supported: [],
        description: "The network filter chain name of the downstream connection.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%ACCESS_LOG_TYPE%",
        supported: [],
        description: "The type of the access log, which indicates when the access log was recorded. If a non-supported log (from the list below), uses this substitution string, then the value will be an empty string.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%UNIQUE_ID%",
        supported: [],
        description: "A unique identifier (UUID) that is generated dynamically.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%ENVIRONMENT(X):Z%",
        supported: ["HTTP", "TCP", "THRIFT", "UDP"],
        description: "Environment value of environment variable X. If no valid environment variable X, '-' symbol will be used. Z is an optional parameter denoting string truncation up to Z characters long.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%TRACE_ID%",
        supported: ["HTTP"],
        description: "The trace ID of the request. If the request does not have a trace ID, this will be an empty string.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%TLS_JA3_FINGERPRINT%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The JA3 fingerprint hash of the downstream TLS Client Hello message.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%TLS_JA4_FINGERPRINT%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "The JA4 fingerprint hash of the downstream TLS Client Hello message.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%QUERY_PARAM(X):Z%",
        supported: ["HTTP"],
        description: "HTTP query parameter value where X is the parameter name and Z is an optional parameter denoting string truncation up to Z characters long. If the parameter is not present, '-' will be logged.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%OTEL_TRACE_ID%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "OpenTelemetry trace ID. If OpenTelemetry is not configured or no trace is present, this will be an empty string.",
        versions: v1_35_3_36_0,
    },
    {
        operator: "%OTEL_SPAN_ID%",
        supported: ["HTTP", "TCP", "THRIFT"],
        description: "OpenTelemetry span ID. If OpenTelemetry is not configured or no span is present, this will be an empty string.",
        versions: v1_35_3_36_0,
    },
]
