/* eslint-disable no-unused-vars */
export enum GTypes {
    // APITypePrefix = "type.googleapis.com/",
    BootStrap = "envoy.config.bootstrap.v3.Bootstrap",
    Listener = "envoy.config.listener.v3.Listener",
    HTTPConnectionManager = "envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
    Router = "envoy.extensions.filters.http.router.v3.Router",
    Cluster = "envoy.config.cluster.v3.Cluster",
    Endpoint = "envoy.config.endpoint.v3.ClusterLoadAssignment",
    Route = "envoy.config.route.v3.RouteConfiguration",
    VirtualHost = "envoy.config.route.v3.VirtualHost",
    TcpProxy = "envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy",
    FluentdAccessLog = "envoy.extensions.access_loggers.fluentd.v3.FluentdAccessLogConfig",
    FileAccessLog = "envoy.extensions.access_loggers.file.v3.FileAccessLog",
    StdoutAccessLog = "envoy.extensions.access_loggers.stream.v3.StdoutAccessLog",
    StdErrAccessLog = "envoy.extensions.access_loggers.stream.v3.StderrAccessLog",
    DownstreamTlsContext = "envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext",
    UpstreamTlsContext = "envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext",
    TlsCertificate = "envoy.extensions.transport_sockets.tls.v3.TlsCertificate",
    CertificateValidationContext = "envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext",
    GenericSecret = "envoy.extensions.transport_sockets.tls.v3.GenericSecret",
    HttpRBAC = "envoy.extensions.filters.http.rbac.v3.RBAC",
    HttpRBACPerRoute = "envoy.extensions.filters.http.rbac.v3.RBACPerRoute",
    NetworkRBAC = "envoy.extensions.filters.network.rbac.v3.RBAC",
    HCEFS = "envoy.extensions.health_check.event_sinks.file.v3.HealthCheckEventFileSink",
    UTM = "envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig",
    BasicAuth = "envoy.extensions.filters.http.basic_auth.v3.BasicAuth",
    BasicAuthPerRoute = "envoy.extensions.filters.http.basic_auth.v3.BasicAuthPerRoute",
    Cors = "envoy.extensions.filters.http.cors.v3.Cors",
    CorsPolicy = "envoy.extensions.filters.http.cors.v3.CorsPolicy",
    BandwidthLimit = "envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit",
    Compressor = "envoy.extensions.filters.http.compressor.v3.Compressor",
    CompressorPerRoute = "envoy.extensions.filters.http.compressor.v3.CompressorPerRoute",
    GzipCompressor = "envoy.extensions.compression.gzip.compressor.v3.Gzip",
    BrotliCompressor = "envoy.extensions.compression.brotli.compressor.v3.Brotli",
    ZstdCompressor = "envoy.extensions.compression.zstd.compressor.v3.Zstd",
    HttpProtocolOptions = "envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
    Lua = "envoy.extensions.filters.http.lua.v3.Lua",
    LuaPerRoute = "envoy.extensions.filters.http.lua.v3.LuaPerRoute",
    Buffer = "envoy.extensions.filters.http.buffer.v3.Buffer",
    BufferPerRoute = "envoy.extensions.filters.http.buffer.v3.BufferPerRoute",
    AdaptiveConcurrency = "envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency",
    AdmissionControl = "envoy.extensions.filters.http.admission_control.v3.AdmissionControl",
    StatefulSession = "envoy.extensions.filters.http.stateful_session.v3.StatefulSession",
    StatefulSessionPerRoute = "envoy.extensions.filters.http.stateful_session.v3.StatefulSessionPerRoute",
    HeaderBasedSessionState = "envoy.extensions.http.stateful_session.header.v3.HeaderBasedSessionState",
    CookieBasedSessionState = "envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState",
    CsrfPolicy = "envoy.extensions.filters.http.csrf.v3.CsrfPolicy",
    ListenerLocalRateLimit = "envoy.extensions.filters.listener.local_ratelimit.v3.LocalRateLimit",
    ListenerHttpInspector = "envoy.extensions.filters.listener.http_inspector.v3.HttpInspector",
    ListenerOriginalDst = "envoy.extensions.filters.listener.original_dst.v3.OriginalDst",
    ListenerOriginalSrc = "envoy.extensions.filters.listener.original_dst.v3.OriginalSrc",
    ListenerTlsInspector = "envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector",
    ListenerDnsFilter = "envoy.extensions.filters.udp.dns_filter.v3.DnsFilterConfig",
    ListenerProxyProtocol = "envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol",
    ConnectionLimit = "envoy.extensions.filters.network.connection_limit.v3.ConnectionLimit",
    NetworkLocalRatelimit = "envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit",
    HttpLocalRatelimit = "envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit",
    TLSSessionTicketKeys = "envoy.extensions.transport_sockets.tls.v3.TlsSessionTicketKeys",
    OAuth2 = "envoy.extensions.filters.http.oauth2.v3.OAuth2",
    OpenTelemetry = "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig",
}

export const resourceMapping: Record<string, GTypes> = {
    bootstrap: GTypes.BootStrap,
    listener: GTypes.Listener,
    cluster: GTypes.Cluster,
    endpoint: GTypes.Endpoint,
    route: GTypes.Route,
    virtual_host: GTypes.VirtualHost,
    hcm: GTypes.HTTPConnectionManager,
    http_router: GTypes.Router,
    tcp_proxy: GTypes.TcpProxy,
    http_rbac: GTypes.HttpRBAC,
    http_rbac_per_route: GTypes.HttpRBACPerRoute,
    network_rbac: GTypes.NetworkRBAC,
    basic_auth: GTypes.BasicAuth,
    tls: GTypes.DownstreamTlsContext,
    secret: GTypes.TlsCertificate,
    access_log: GTypes.FileAccessLog,
    stat_sinks: GTypes.OpenTelemetry,
    hcefs: GTypes.HCEFS,
    cors: GTypes.Cors,
    bandwidth_limit: GTypes.BandwidthLimit,
    compressor: GTypes.Compressor,
    compressor_library: GTypes.GzipCompressor,
    http_protocol_options: GTypes.HttpProtocolOptions,
    lua: GTypes.Lua,
    lua_per_route: GTypes.LuaPerRoute,
    buffer: GTypes.Buffer,
    buffer_per_route: GTypes.BufferPerRoute,
    adaptive_concurrency: GTypes.AdaptiveConcurrency,
    utm: GTypes.UTM,
    admission_control: GTypes.AdmissionControl,
    stateful_session: GTypes.StatefulSession,
    stateful_session_per_route: GTypes.StatefulSessionPerRoute,
    session_state: GTypes.HeaderBasedSessionState,
    csrf_policy: GTypes.CsrfPolicy,
    l_local_ratelimit: GTypes.ListenerLocalRateLimit,
    l_http_inspector: GTypes.ListenerHttpInspector,
    l_original_dst: GTypes.ListenerOriginalDst,
    l_original_src: GTypes.ListenerOriginalSrc,
    l_tls_inspector: GTypes.ListenerTlsInspector,
    l_dns_filter: GTypes.ListenerDnsFilter,
    l_proxy_protocol: GTypes.ListenerProxyProtocol,
    connection_limit: GTypes.ConnectionLimit,
    n_local_ratelimit: GTypes.NetworkLocalRatelimit,
    h_local_ratelimit: GTypes.HttpLocalRatelimit,
    oauth2: GTypes.OAuth2,
    open_telemetry: GTypes.OpenTelemetry,
};

type EnvoyVersion = string;
const AVAILABLE_VERSIONS = window.APP_CONFIG.AVAILABLE_VERSIONS;
const METADATA_DEFAULT: Record<string, any> = {};
const EXTENSIONS_PATH = "eo/filters/filters";
const XDS_PATH = "xds";

export interface GTypeFieldsBase {
    backendPath: string;
    createPath: string;
    prettyName: string;
    listPage: string;
    collection: string;
    type: string;
    canonicalName: string;
    module: string;
    initialValue: any;
    category: string;
    availableVersions: EnvoyVersion[];
    metadata: Record<string, any>;
}

const gtypeFieldMap: Record<GTypes, GTypeFieldsBase> = {
    [GTypes.BootStrap]: {
        backendPath: `${XDS_PATH}/bootstrap`,
        createPath: '/create/bootstrap',
        prettyName: 'Bootstrap',
        listPage: '/resource/bootstrap',
        collection: "bootstrap",
        type: "bootstrap",
        canonicalName: "config.bootstrap.v3.Bootstrap",
        category: "bootstrap",
        module: 'bootstrap/Bootstrap',
        initialValue: {},
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.Listener]: {
        backendPath: `${XDS_PATH}/listeners`,
        createPath: '/create/listener',
        prettyName: 'Listener',
        listPage: '/resource/listener',
        collection: "listeners",
        type: "listener",
        canonicalName: "config.listener.v3.Listener",
        module: 'listener/Listener',
        initialValue: [],
        category: "listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.HTTPConnectionManager]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.network.http_connection_manager`,
        createPath: '/create/hcm',
        prettyName: 'Http Connection Manager',
        listPage: '/filters/network/hcm',
        collection: "filters",
        type: "network_filter",
        canonicalName: "envoy.filters.network.http_connection_manager",
        module: 'filters/network/hcm/HttpConnectionManager',
        initialValue: {},
        category: "envoy.filters.network",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.Router]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.router`,
        createPath: '/create/http_router',
        prettyName: 'Router',
        listPage: '/filters/http/http_router',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.router",
        module: 'filters/http/router/Router',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.Cluster]: {
        backendPath: `${XDS_PATH}/clusters`,
        createPath: '/create/cluster',
        prettyName: 'Cluster',
        listPage: '/resource/cluster',
        collection: "clusters",
        type: "cluster",
        canonicalName: "config.cluster.v3.Cluster",
        module: 'cluster/Cluster',
        initialValue: { name: 'cluster' },
        category: "cluster",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.Endpoint]: {
        backendPath: `${XDS_PATH}/endpoints`,
        createPath: '/create/endpoint',
        prettyName: 'Endpoint',
        listPage: '/resource/endpoint',
        collection: "endpoints",
        type: "endpoint",
        canonicalName: "config.endpoint.v3.Endpoint",
        module: 'endpoint/Endpoint',
        initialValue: { cluster_name: 'endpoint' },
        category: "endpoint",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.Route]: {
        backendPath: `${XDS_PATH}/routes`,
        createPath: '/create/route',
        prettyName: 'Route',
        listPage: '/resource/route',
        collection: "routes",
        type: "route",
        canonicalName: "config.route.v3.RouteConfiguration",
        module: 'route/Route',
        initialValue: { name: 'route' },
        category: "route",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.VirtualHost]: {
        backendPath: `${XDS_PATH}/virtual_hosts`,
        createPath: '/create/virtual_host',
        prettyName: 'Virtual Host',
        listPage: '/resource/virtual_host',
        collection: "virtual_hosts",
        type: "virtual_host",
        canonicalName: "config.route.v3.VirtualHost",
        module: 'vhds/VHDS',
        initialValue: [],
        category: "virtual_host",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.TcpProxy]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.network.tcp_proxy`,
        createPath: '/create/tcp_proxy',
        prettyName: 'TCP Proxy',
        listPage: '/filters/network/tcp_proxy',
        collection: "filters",
        type: "network_filter",
        canonicalName: "envoy.filters.network.tcp_proxy",
        module: 'filters/network/tcp-proxy/TcpProxy',
        initialValue: {},
        category: "envoy.filters.network",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.FluentdAccessLog]: {
        backendPath: 'eo/extensions/extensions/access_log',
        createPath: '/create/access_log',
        prettyName: 'Fluentd Acces Log',
        listPage: '/extensions/access_log',
        collection: "extensions",
        type: "access_log",
        canonicalName: "envoy.access_loggers.fluentd",
        module: 'extension/access-log/AccessLog',
        initialValue: {},
        category: "envoy.access_loggers",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.FileAccessLog]: {
        backendPath: 'eo/extensions/extensions/access_log',
        createPath: '/create/access_log',
        prettyName: 'File Access Log',
        listPage: '/extensions/access_log',
        collection: "extensions",
        type: "access_log",
        canonicalName: "envoy.access_loggers.file",
        module: 'extension/access-log/AccessLog',
        initialValue: {},
        category: "envoy.access_loggers",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.StdoutAccessLog]: {
        backendPath: 'eo/extensions/extensions/access_log',
        createPath: '/create/access_log',
        prettyName: 'Stdout Access Log',
        listPage: '/extensions/access_log',
        collection: "extensions",
        type: "access_log",
        canonicalName: "envoy.access_loggers.stdout",
        module: 'extension/access-log/AccessLog',
        initialValue: {},
        category: "envoy.access_loggers",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.StdErrAccessLog]: {
        backendPath: 'eo/extensions/extensions/access_log',
        createPath: '/create/access_log',
        prettyName: 'StdErr Access Log',
        listPage: '/extensions/access_log',
        collection: "extensions",
        type: "access_log",
        canonicalName: "envoy.access_loggers.stderr",
        module: 'extension/access-log/AccessLog',
        initialValue: {},
        category: "envoy.access_loggers",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.DownstreamTlsContext]: {
        backendPath: `${XDS_PATH}/tls`,
        createPath: '/create/tls',
        prettyName: 'Downstream TLS',
        listPage: '/resource/tls',
        collection: "tls",
        type: "tls",
        canonicalName: "envoy.transport_sockets.downstream",
        module: 'tls/TLS',
        initialValue: {},
        category: "envoy.transport_sockets.tls",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.UpstreamTlsContext]: {
        backendPath: `${XDS_PATH}/tls`,
        createPath: '/create/tls',
        prettyName: 'Upstream TLS',
        listPage: '/resource/tls',
        collection: "tls",
        type: "secret",
        canonicalName: "envoy.transport_sockets.upstream",
        module: 'tls/TLS',
        initialValue: {},
        category: "envoy.transport_sockets.tls",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.TlsCertificate]: {
        backendPath: `${XDS_PATH}/secrets`,
        createPath: '/create/secret',
        prettyName: 'TLS Certificate',
        listPage: '/resource/secret',
        collection: "secrets",
        type: "secret",
        canonicalName: "envoy.transport_sockets.tls_certificate",
        module: 'secret/Secret',
        initialValue: [],
        category: "envoy.transport_sockets.tls",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.GenericSecret]: {
        backendPath: `${XDS_PATH}/secrets`,
        createPath: '/create/secret',
        prettyName: 'Generic Secret',
        listPage: '/resource/secret',
        collection: "secrets",
        type: "secret",
        canonicalName: "envoy.transport_sockets.GenericSecret",
        module: 'secret/Secret',
        initialValue: {},
        category: "envoy.transport_sockets.tls",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.TLSSessionTicketKeys]: {
        backendPath: `${XDS_PATH}/secrets`,
        createPath: '/create/secret',
        prettyName: 'TLS Session Tickey Keys',
        listPage: '/resource/secret',
        collection: "secrets",
        type: "secret",
        canonicalName: "envoy.transport_sockets.TlsSessionTicketKeys",
        module: 'secret/Secret',
        initialValue: {},
        category: "envoy.transport_sockets.tls",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.CertificateValidationContext]: {
        backendPath: `${XDS_PATH}/secrets`,
        createPath: '/create/secret',
        prettyName: 'Certificate Validation',
        listPage: '/resource/secret',
        collection: "secrets",
        type: "secret",
        canonicalName: "envoy.transport_sockets.validation_context",
        module: 'secret/Secret',
        initialValue: {},
        category: "envoy.transport_sockets.tls",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.HttpRBAC]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.rbac`,
        createPath: '/create/http_rbac',
        prettyName: 'Http RBAC',
        listPage: '/filters/http/http_rbac',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.rbac",
        module: 'filters/http/rbac/Rbacs',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.HttpRBACPerRoute]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.rbac`,
        createPath: '/create/http_rbac',
        prettyName: 'Http RBAC Per Route',
        listPage: '/filters/http/http_rbac',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.rbac",
        module: 'filters/http/rbac/rbacs',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'per-route' }
    },
    [GTypes.NetworkRBAC]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.network.rbac`,
        createPath: '/create/network_rbac',
        prettyName: 'Network RBAC',
        listPage: '/filters/network/network_rbac',
        collection: "filters",
        type: "network_filter",
        canonicalName: "envoy.filters.network.rbac",
        module: 'filters/network/rbac/RBAC',
        initialValue: {},
        category: "envoy.filters.network",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.HCEFS]: {
        backendPath: 'eo/extensions/extensions/hcefs',
        createPath: '/create/hcefs',
        prettyName: 'Health Check Event File Sink',
        listPage: '/extensions/hcefs',
        collection: "extensions",
        type: "hcefs",
        canonicalName: "envoy.health_check.event_sinks",
        module: 'extension/hcefs/Hcefs',
        initialValue: {},
        category: "envoy.health_check.event_sinks",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.UTM]: {
        backendPath: 'eo/extensions/extensions/utm',
        createPath: '/create/utm',
        prettyName: 'Uri Template Match',
        listPage: '/extensions/utm',
        collection: "extensions",
        type: "utm",
        canonicalName: "envoy.path.match.uri_template.uri_template_matcher",
        module: 'extension/utm/UTM',
        initialValue: {},
        category: "envoy.path.match.uri_template.uri_template_matcher",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.BasicAuth]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.basic_auth`,
        createPath: '/create/basic_auth',
        prettyName: 'Basic Auth',
        listPage: '/filters/http/basic_auth',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.basic_auth",
        module: 'filters/http/basic-auth/BasicAuths',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.BasicAuthPerRoute]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.basic_auth`,
        createPath: '/create/basic_auth',
        prettyName: 'Basic Auth Per Route',
        listPage: '/filters/http/basic_auth',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.basic_auth",
        module: 'filters/http/basic-auth/BasicAuths',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'per-route' }
    },
    [GTypes.Cors]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.cors`,
        createPath: '/create/cors',
        prettyName: 'Cors',
        listPage: '/filters/http/cors',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.cors",
        module: 'filters/http/cors/Corses',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.CorsPolicy]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.cors`,
        createPath: '/create/cors',
        prettyName: 'Cors',
        listPage: '/filters/http/cors',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.cors",
        module: 'filters/http/cors/Corses',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'per-route' }
    },
    [GTypes.BandwidthLimit]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.bandwidth_limit`,
        createPath: '/create/bandwidth_limit',
        prettyName: 'Bandwidth Limit',
        listPage: '/filters/http/bandwidth_limit',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.bandwidth_limit",
        module: 'filters/http/bandwidth-limit/BandwidthLimit',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main,per-route' }
    },
    [GTypes.Compressor]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.compressor`,
        createPath: '/create/compressor',
        prettyName: 'Compressor',
        listPage: '/filters/http/compressor',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.compressor",
        module: 'filters/http/compressor/Compressors',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.CompressorPerRoute]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.compressor`,
        createPath: '/create/compressor',
        prettyName: 'Compressor Per Route',
        listPage: '/filters/http/compressor',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.compressor",
        module: 'filters/http/compressor/Compressors',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'per-route' }
    },
    [GTypes.GzipCompressor]: {
        backendPath: 'eo/extensions/extensions/compressor_library',
        createPath: '/create/compressor_library',
        prettyName: 'Gzip',
        listPage: '/extensions/compressor_library',
        collection: "extensions",
        type: "compressor_library",
        canonicalName: "envoy.compression.compressor",
        module: 'extension/compressor-library/CompressorLibrary',
        initialValue: {},
        category: "envoy.compression.compressor",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.BrotliCompressor]: {
        backendPath: 'eo/extensions/extensions/compressor_library',
        createPath: '/create/compressor_library',
        prettyName: 'Brotli',
        listPage: '/extensions/compressor_library',
        collection: "extensions",
        type: "compressor_library",
        canonicalName: "envoy.compression.compressor",
        module: 'extension/compressor-library/CompressorLibrary',
        initialValue: {},
        category: "envoy.compression.compressor",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ZstdCompressor]: {
        backendPath: 'eo/extensions/extensions/compressor_library',
        createPath: '/create/compressor_library',
        prettyName: 'Zstd',
        listPage: '/extensions/compressor_library',
        collection: "extensions",
        type: "compressor_library",
        canonicalName: "envoy.compression.compressor",
        module: 'extension/compressor-library/CompressorLibrary',
        initialValue: {},
        category: "envoy.compression.compressor",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.HttpProtocolOptions]: {
        backendPath: 'eo/extensions/extensions/http_protocol_options',
        createPath: '/create/http_protocol_options',
        prettyName: 'Http Protocol Options',
        listPage: '/extensions/http_protocol_options',
        collection: "extensions",
        type: "http_protocol_options",
        canonicalName: "envoy.upstreams.http.http_protocol_options",
        module: 'extension/http-protocol-options/HttpProtocolOptions',
        initialValue: {},
        category: "envoy.upstreams.http.http_protocol_options",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.Lua]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.lua`,
        createPath: '/create/lua',
        prettyName: 'Lua',
        listPage: '/filters/http/lua',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.lua",
        module: 'filters/http/lua/Luas',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.LuaPerRoute]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.lua`,
        createPath: '/create/lua',
        prettyName: 'Lua Per Route',
        listPage: '/filters/http/lua',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.lua",
        module: 'filters/http/lua/Luas',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'per-route' }
    },
    [GTypes.Buffer]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.buffer`,
        createPath: '/create/buffer',
        prettyName: 'Buffer',
        listPage: '/filters/http/buffer',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.buffer",
        module: 'filters/http/buffer/Buffers',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.BufferPerRoute]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.buffer`,
        createPath: '/create/buffer',
        prettyName: 'Buffer Per Route',
        listPage: '/filters/http/buffer',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.buffer",
        module: 'filters/http/buffer/Buffers',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'per-route' }
    },
    [GTypes.AdaptiveConcurrency]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.adaptive_concurrency`,
        createPath: '/create/adaptive_concurrency',
        prettyName: 'Adaptive Concurrency',
        listPage: '/filters/http/adaptive_concurrency',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.adaptive_concurrency",
        module: 'filters/http/adaptive-concurrency/AdaptiveConcurrency',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.AdmissionControl]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.admission_control`,
        createPath: '/create/admission_control',
        prettyName: 'Admission Control',
        listPage: '/filters/http/admission_control',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.admission_control",
        module: 'filters/http/admission-control/AdmissionControl',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.StatefulSession]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.stateful_session`,
        createPath: '/create/stateful_session',
        prettyName: 'Stateful Session',
        listPage: '/filters/http/stateful_session',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.stateful_session",
        module: 'filters/http/stateful-session/StatefulSessions',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.StatefulSessionPerRoute]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.stateful_session`,
        createPath: '/create/stateful_session',
        prettyName: 'Stateful Session Per Route',
        listPage: '/filters/http/stateful_session',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.stateful_session",
        module: 'filters/http/stateful-session/StatefulSessions',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'per-route' }
    },
    [GTypes.CookieBasedSessionState]: {
        backendPath: 'eo/extensions/extensions/session_state',
        createPath: '/create/session_state',
        prettyName: 'Stateful Session Cookie',
        listPage: '/extensions/session_state',
        collection: "extensions",
        type: "session_state",
        canonicalName: "envoy.http.stateful_session.cookie",
        module: 'extension/session-state/SessionState',
        initialValue: {},
        category: "envoy.http.stateful_session.cookie",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.HeaderBasedSessionState]: {
        backendPath: 'eo/extensions/extensions/session_state',
        createPath: '/create/session_state',
        prettyName: 'Stateful Session Header',
        listPage: '/extensions/session_state',
        collection: "extensions",
        type: "session_state",
        canonicalName: "envoy.http.stateful_session.header",
        module: 'extension/session-state/SessionState',
        initialValue: { name: ':path' },
        category: "envoy.http.stateful_session.header",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.CsrfPolicy]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.csrf`,
        createPath: '/create/csrf_policy',
        prettyName: 'Csrf Policy',
        listPage: '/filters/http/csrf_policy',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.csrf",
        module: 'filters/http/csrf-policy/CsrfPolicy',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main' }
    },
    [GTypes.ListenerLocalRateLimit]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.listener.local_ratelimit`,
        createPath: '/create/l_local_ratelimit',
        prettyName: 'Local Ratelimit',
        listPage: '/filters/listener/l_local_ratelimit',
        collection: "filters",
        type: "listener_filter",
        canonicalName: "envoy.filters.listener.local_ratelimit",
        module: 'filters/listener/l-local-ratelimit/LocalRatelimit',
        initialValue: {},
        category: "envoy.filters.listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ListenerHttpInspector]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.listener.http_inspector`,
        createPath: '/create/l_http_inspector',
        prettyName: 'Http Inspector',
        listPage: '/filters/listener/l_http_inspector',
        collection: "filters",
        type: "listener_filter",
        canonicalName: "envoy.filters.listener.http_inspector",
        module: 'filters/listener/l-http-inspector/HttpInspector',
        initialValue: {},
        category: "envoy.filters.listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ListenerOriginalDst]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.listener.original_dst`,
        createPath: '/create/l_original_dst',
        prettyName: 'Original Dst',
        listPage: '/filters/listener/l_original_dst',
        collection: "filters",
        type: "listener_filter",
        canonicalName: "envoy.filters.listener.original_dst",
        module: 'filters/listener/l-original-dst/OriginalDst',
        initialValue: {},
        category: "envoy.filters.listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ListenerOriginalSrc]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.listener.original_src`,
        createPath: '/create/l_original_src',
        prettyName: 'Original Dst',
        listPage: '/filters/listener/l_original_src',
        collection: "filters",
        type: "listener_filter",
        canonicalName: "envoy.filters.listener.original_src",
        module: 'filters/listener/l-original-src/OriginalSrc',
        initialValue: {},
        category: "envoy.filters.listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ListenerTlsInspector]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.listener.tls_inspector`,
        createPath: '/create/l_tls_inspector',
        prettyName: 'TLS Inspector',
        listPage: '/filters/listener/l_tls_inspector',
        collection: "filters",
        type: "listener_filter",
        canonicalName: "envoy.filters.listener.tls_inspector",
        module: 'filters/listener/l-tls-inspector/TlsInspector',
        initialValue: {},
        category: "envoy.filters.listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ListenerDnsFilter]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.udp.dns_filter`,
        createPath: '/create/l_dns_filter',
        prettyName: 'DNS Filter',
        listPage: '/filters/udp/l_dns_filter',
        collection: "filters",
        type: "udp_filter",
        canonicalName: "envoy.filters.udp.dns_filter",
        module: 'filters/udp/l-dns-filter/DnsFilter',
        initialValue: {},
        category: "envoy.filters.udp_listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ListenerProxyProtocol]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.listener.proxy_protocol`,
        createPath: '/create/l_proxy_protocol',
        prettyName: 'Proxy Protocol',
        listPage: '/filters/listener/l_proxy_protocol',
        collection: "filters",
        type: "listener_filter",
        canonicalName: "envoy.filters.listener.proxy_protocol",
        module: 'filters/listener/l-proxy-protocol/ProxyProtocol',
        initialValue: {},
        category: "envoy.filters.listener",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.ConnectionLimit]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.network.connection_limit`,
        createPath: '/create/connection_limit',
        prettyName: 'Connection Limit',
        listPage: '/filters/network/connection_limit',
        collection: "filters",
        type: "network_filter",
        canonicalName: "envoy.filters.network.connection_limit",
        module: 'filters/network/connection-limit/ConnectionLimit',
        initialValue: {},
        category: "envoy.filters.network",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.NetworkLocalRatelimit]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.network.local_ratelimit`,
        createPath: '/create/n_local_ratelimit',
        prettyName: 'Local Ratelimit',
        listPage: '/filters/network/n_local_ratelimit',
        collection: "filters",
        type: "network_filter",
        canonicalName: "envoy.filters.network.local_ratelimit",
        module: 'filters/network/n-local-ratelimit/LocalRatelimit',
        initialValue: {},
        category: "envoy.filters.network",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
    [GTypes.HttpLocalRatelimit]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.local_ratelimit`,
        createPath: '/create/h_local_ratelimit',
        prettyName: 'Local Ratelimit',
        listPage: '/filters/http/h_local_ratelimit',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.local_ratelimit",
        module: 'filters/http/h-local-ratelimit/LocalRatelimit',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main,per-route' }
    },
    [GTypes.OAuth2]: {
        backendPath: `${EXTENSIONS_PATH}/envoy.filters.http.oauth2`,
        createPath: '/create/oauth2',
        prettyName: 'OAuth2',
        listPage: '/filters/http/admission_control',
        collection: "filters",
        type: "http_filter",
        canonicalName: "envoy.filters.http.oauth2",
        module: 'filters/http/oauth2/Oauth2',
        initialValue: {},
        category: "envoy.filters.http",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: { http_filter: 'main,per-route' }
    },

    [GTypes.OpenTelemetry]: {
        backendPath: 'eo/extensions/extensions/stat_sinks',
        createPath: '/create/stat_sinks',
        prettyName: 'Open Telemetry',
        listPage: '/extensions/stat_sinks',
        collection: "extensions",
        type: "stat_sinks",
        canonicalName: "envoy.stat_sinks.open_telemetry",
        module: 'extension/stat-sinks/StatSinks',
        initialValue: {},
        category: "envoy.stats_sinks",
        availableVersions: AVAILABLE_VERSIONS,
        metadata: METADATA_DEFAULT
    },
};

export function getFieldsByGType(gtype: GTypes): GTypeFieldsBase {
    const fields = gtypeFieldMap[gtype];
    if (!fields) {
        throw new Error(`Unsupported GType: ${gtype}`);
    }
    return fields;
}

export function getFieldsByKey(key: string): GTypeFieldsBase {
    const gtype = resourceMapping[key];
    if (!gtype) {
        throw new Error(`No GType found for key: ${key}`);
    }
    return getFieldsByGType(gtype);
}
