// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: opencensus/proto/trace/v1/trace_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "opencensus.proto.trace.v1";

/**
 * Global configuration of the trace service. All fields must be specified, or
 * the default (zero) values will be used for each type.
 */
export interface TraceConfig {
  $type: "opencensus.proto.trace.v1.TraceConfig";
  /** The global default sampler used to make decisions on span sampling. */
  sampler?:
    | //
    { $case: "probability_sampler"; probability_sampler: ProbabilitySampler }
    | //
    { $case: "constant_sampler"; constant_sampler: ConstantSampler }
    | //
    { $case: "rate_limiting_sampler"; rate_limiting_sampler: RateLimitingSampler }
    | undefined;
  /** The global default max number of attributes per span. */
  max_number_of_attributes?:
    | number
    | undefined;
  /** The global default max number of annotation events per span. */
  max_number_of_annotations?:
    | number
    | undefined;
  /** The global default max number of message events per span. */
  max_number_of_message_events?:
    | number
    | undefined;
  /** The global default max number of link entries per span. */
  max_number_of_links?: number | undefined;
}

/**
 * Sampler that tries to uniformly sample traces with a given probability.
 * The probability of sampling a trace is equal to that of the specified probability.
 */
export interface ProbabilitySampler {
  $type: "opencensus.proto.trace.v1.ProbabilitySampler";
  /** The desired probability of sampling. Must be within [0.0, 1.0]. */
  samplingProbability?: number | undefined;
}

/** Sampler that always makes a constant decision on span sampling. */
export interface ConstantSampler {
  $type: "opencensus.proto.trace.v1.ConstantSampler";
  decision?: ConstantSampler_ConstantDecision | undefined;
}

/**
 * How spans should be sampled:
 * - Always off
 * - Always on
 * - Always follow the parent Span's decision (off if no parent).
 */
export enum ConstantSampler_ConstantDecision {
  ALWAYS_OFF = "ALWAYS_OFF",
  ALWAYS_ON = "ALWAYS_ON",
  ALWAYS_PARENT = "ALWAYS_PARENT",
}

export function constantSampler_ConstantDecisionFromJSON(object: any): ConstantSampler_ConstantDecision {
  switch (object) {
    case 0:
    case "ALWAYS_OFF":
      return ConstantSampler_ConstantDecision.ALWAYS_OFF;
    case 1:
    case "ALWAYS_ON":
      return ConstantSampler_ConstantDecision.ALWAYS_ON;
    case 2:
    case "ALWAYS_PARENT":
      return ConstantSampler_ConstantDecision.ALWAYS_PARENT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ConstantSampler_ConstantDecision");
  }
}

export function constantSampler_ConstantDecisionToJSON(object: ConstantSampler_ConstantDecision): string {
  switch (object) {
    case ConstantSampler_ConstantDecision.ALWAYS_OFF:
      return "ALWAYS_OFF";
    case ConstantSampler_ConstantDecision.ALWAYS_ON:
      return "ALWAYS_ON";
    case ConstantSampler_ConstantDecision.ALWAYS_PARENT:
      return "ALWAYS_PARENT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ConstantSampler_ConstantDecision");
  }
}

export function constantSampler_ConstantDecisionToNumber(object: ConstantSampler_ConstantDecision): number {
  switch (object) {
    case ConstantSampler_ConstantDecision.ALWAYS_OFF:
      return 0;
    case ConstantSampler_ConstantDecision.ALWAYS_ON:
      return 1;
    case ConstantSampler_ConstantDecision.ALWAYS_PARENT:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ConstantSampler_ConstantDecision");
  }
}

/** Sampler that tries to sample with a rate per time window. */
export interface RateLimitingSampler {
  $type: "opencensus.proto.trace.v1.RateLimitingSampler";
  /** Rate per second. */
  qps?: number | undefined;
}

function createBaseTraceConfig(): TraceConfig {
  return { $type: "opencensus.proto.trace.v1.TraceConfig", sampler: undefined };
}

export const TraceConfig: MessageFns<TraceConfig, "opencensus.proto.trace.v1.TraceConfig"> = {
  $type: "opencensus.proto.trace.v1.TraceConfig" as const,

  encode(message: TraceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.sampler?.$case) {
      case "probability_sampler":
        ProbabilitySampler.encode(message.sampler.probability_sampler, writer.uint32(10).fork()).join();
        break;
      case "constant_sampler":
        ConstantSampler.encode(message.sampler.constant_sampler, writer.uint32(18).fork()).join();
        break;
      case "rate_limiting_sampler":
        RateLimitingSampler.encode(message.sampler.rate_limiting_sampler, writer.uint32(26).fork()).join();
        break;
    }
    if (message.max_number_of_attributes !== undefined && message.max_number_of_attributes !== 0) {
      writer.uint32(32).int64(message.max_number_of_attributes);
    }
    if (message.max_number_of_annotations !== undefined && message.max_number_of_annotations !== 0) {
      writer.uint32(40).int64(message.max_number_of_annotations);
    }
    if (message.max_number_of_message_events !== undefined && message.max_number_of_message_events !== 0) {
      writer.uint32(48).int64(message.max_number_of_message_events);
    }
    if (message.max_number_of_links !== undefined && message.max_number_of_links !== 0) {
      writer.uint32(56).int64(message.max_number_of_links);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sampler = {
            $case: "probability_sampler",
            probability_sampler: ProbabilitySampler.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sampler = {
            $case: "constant_sampler",
            constant_sampler: ConstantSampler.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sampler = {
            $case: "rate_limiting_sampler",
            rate_limiting_sampler: RateLimitingSampler.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.max_number_of_attributes = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.max_number_of_annotations = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.max_number_of_message_events = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.max_number_of_links = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraceConfig {
    return {
      $type: TraceConfig.$type,
      sampler: isSet(object.probability_sampler)
        ? { $case: "probability_sampler", probability_sampler: ProbabilitySampler.fromJSON(object.probability_sampler) }
        : isSet(object.constant_sampler)
        ? { $case: "constant_sampler", constant_sampler: ConstantSampler.fromJSON(object.constant_sampler) }
        : isSet(object.rate_limiting_sampler)
        ? {
          $case: "rate_limiting_sampler",
          rate_limiting_sampler: RateLimitingSampler.fromJSON(object.rate_limiting_sampler),
        }
        : undefined,
      max_number_of_attributes: isSet(object.max_number_of_attributes)
        ? globalThis.Number(object.max_number_of_attributes)
        : undefined,
      max_number_of_annotations: isSet(object.max_number_of_annotations)
        ? globalThis.Number(object.max_number_of_annotations)
        : undefined,
      max_number_of_message_events: isSet(object.max_number_of_message_events)
        ? globalThis.Number(object.max_number_of_message_events)
        : undefined,
      max_number_of_links: isSet(object.max_number_of_links)
        ? globalThis.Number(object.max_number_of_links)
        : undefined,
    };
  },

  toJSON(message: TraceConfig): unknown {
    const obj: any = {};
    if (message.sampler?.$case === "probability_sampler") {
      obj.probability_sampler = ProbabilitySampler.toJSON(message.sampler.probability_sampler);
    }
    if (message.sampler?.$case === "constant_sampler") {
      obj.constant_sampler = ConstantSampler.toJSON(message.sampler.constant_sampler);
    }
    if (message.sampler?.$case === "rate_limiting_sampler") {
      obj.rate_limiting_sampler = RateLimitingSampler.toJSON(message.sampler.rate_limiting_sampler);
    }
    if (message.max_number_of_attributes !== undefined) {
      obj.max_number_of_attributes = Math.round(message.max_number_of_attributes);
    }
    if (message.max_number_of_annotations !== undefined) {
      obj.max_number_of_annotations = Math.round(message.max_number_of_annotations);
    }
    if (message.max_number_of_message_events !== undefined) {
      obj.max_number_of_message_events = Math.round(message.max_number_of_message_events);
    }
    if (message.max_number_of_links !== undefined) {
      obj.max_number_of_links = Math.round(message.max_number_of_links);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TraceConfig>, I>>(base?: I): TraceConfig {
    return TraceConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TraceConfig>, I>>(object: I): TraceConfig {
    const message = createBaseTraceConfig();
    if (
      object.sampler?.$case === "probability_sampler" &&
      object.sampler?.probability_sampler !== undefined &&
      object.sampler?.probability_sampler !== null
    ) {
      message.sampler = {
        $case: "probability_sampler",
        probability_sampler: ProbabilitySampler.fromPartial(object.sampler.probability_sampler),
      };
    }
    if (
      object.sampler?.$case === "constant_sampler" &&
      object.sampler?.constant_sampler !== undefined &&
      object.sampler?.constant_sampler !== null
    ) {
      message.sampler = {
        $case: "constant_sampler",
        constant_sampler: ConstantSampler.fromPartial(object.sampler.constant_sampler),
      };
    }
    if (
      object.sampler?.$case === "rate_limiting_sampler" &&
      object.sampler?.rate_limiting_sampler !== undefined &&
      object.sampler?.rate_limiting_sampler !== null
    ) {
      message.sampler = {
        $case: "rate_limiting_sampler",
        rate_limiting_sampler: RateLimitingSampler.fromPartial(object.sampler.rate_limiting_sampler),
      };
    }
    message.max_number_of_attributes = object.max_number_of_attributes ?? undefined;
    message.max_number_of_annotations = object.max_number_of_annotations ?? undefined;
    message.max_number_of_message_events = object.max_number_of_message_events ?? undefined;
    message.max_number_of_links = object.max_number_of_links ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(TraceConfig.$type, TraceConfig);

function createBaseProbabilitySampler(): ProbabilitySampler {
  return { $type: "opencensus.proto.trace.v1.ProbabilitySampler" };
}

export const ProbabilitySampler: MessageFns<ProbabilitySampler, "opencensus.proto.trace.v1.ProbabilitySampler"> = {
  $type: "opencensus.proto.trace.v1.ProbabilitySampler" as const,

  encode(message: ProbabilitySampler, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.samplingProbability !== undefined && message.samplingProbability !== 0) {
      writer.uint32(9).double(message.samplingProbability);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProbabilitySampler {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProbabilitySampler();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.samplingProbability = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProbabilitySampler {
    return {
      $type: ProbabilitySampler.$type,
      samplingProbability: isSet(object.samplingProbability)
        ? globalThis.Number(object.samplingProbability)
        : undefined,
    };
  },

  toJSON(message: ProbabilitySampler): unknown {
    const obj: any = {};
    if (message.samplingProbability !== undefined) {
      obj.samplingProbability = message.samplingProbability;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProbabilitySampler>, I>>(base?: I): ProbabilitySampler {
    return ProbabilitySampler.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProbabilitySampler>, I>>(object: I): ProbabilitySampler {
    const message = createBaseProbabilitySampler();
    message.samplingProbability = object.samplingProbability ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ProbabilitySampler.$type, ProbabilitySampler);

function createBaseConstantSampler(): ConstantSampler {
  return { $type: "opencensus.proto.trace.v1.ConstantSampler" };
}

export const ConstantSampler: MessageFns<ConstantSampler, "opencensus.proto.trace.v1.ConstantSampler"> = {
  $type: "opencensus.proto.trace.v1.ConstantSampler" as const,

  encode(message: ConstantSampler, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.decision !== undefined && message.decision !== ConstantSampler_ConstantDecision.ALWAYS_OFF) {
      writer.uint32(8).int32(constantSampler_ConstantDecisionToNumber(message.decision));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConstantSampler {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConstantSampler();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.decision = constantSampler_ConstantDecisionFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConstantSampler {
    return {
      $type: ConstantSampler.$type,
      decision: isSet(object.decision) ? constantSampler_ConstantDecisionFromJSON(object.decision) : undefined,
    };
  },

  toJSON(message: ConstantSampler): unknown {
    const obj: any = {};
    if (message.decision !== undefined) {
      obj.decision = constantSampler_ConstantDecisionToJSON(message.decision);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConstantSampler>, I>>(base?: I): ConstantSampler {
    return ConstantSampler.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConstantSampler>, I>>(object: I): ConstantSampler {
    const message = createBaseConstantSampler();
    message.decision = object.decision ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ConstantSampler.$type, ConstantSampler);

function createBaseRateLimitingSampler(): RateLimitingSampler {
  return { $type: "opencensus.proto.trace.v1.RateLimitingSampler" };
}

export const RateLimitingSampler: MessageFns<RateLimitingSampler, "opencensus.proto.trace.v1.RateLimitingSampler"> = {
  $type: "opencensus.proto.trace.v1.RateLimitingSampler" as const,

  encode(message: RateLimitingSampler, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.qps !== undefined && message.qps !== 0) {
      writer.uint32(8).int64(message.qps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimitingSampler {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimitingSampler();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.qps = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimitingSampler {
    return { $type: RateLimitingSampler.$type, qps: isSet(object.qps) ? globalThis.Number(object.qps) : undefined };
  },

  toJSON(message: RateLimitingSampler): unknown {
    const obj: any = {};
    if (message.qps !== undefined) {
      obj.qps = Math.round(message.qps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateLimitingSampler>, I>>(base?: I): RateLimitingSampler {
    return RateLimitingSampler.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateLimitingSampler>, I>>(object: I): RateLimitingSampler {
    const message = createBaseRateLimitingSampler();
    message.qps = object.qps ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RateLimitingSampler.$type, RateLimitingSampler);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
