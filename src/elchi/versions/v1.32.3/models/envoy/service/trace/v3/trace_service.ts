// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/trace/v3/trace_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Span } from "../../../../opencensus/proto/trace/v1/trace";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Node } from "../../../config/core/v3/base";

export const protobufPackage = "envoy.service.trace.v3";

export interface StreamTracesResponse {
  $type: "envoy.service.trace.v3.StreamTracesResponse";
}

export interface StreamTracesMessage {
  $type: "envoy.service.trace.v3.StreamTracesMessage";
  /**
   * Identifier data effectively is a structured metadata.
   * As a performance optimization this will only be sent in the first message
   * on the stream.
   */
  identifier?:
    | StreamTracesMessage_Identifier
    | undefined;
  /** A list of Span entries */
  spans?: Span[] | undefined;
}

export interface StreamTracesMessage_Identifier {
  $type: "envoy.service.trace.v3.StreamTracesMessage.Identifier";
  /** The node sending the access log messages over the stream. */
  node?: Node | undefined;
}

function createBaseStreamTracesResponse(): StreamTracesResponse {
  return { $type: "envoy.service.trace.v3.StreamTracesResponse" };
}

export const StreamTracesResponse: MessageFns<StreamTracesResponse, "envoy.service.trace.v3.StreamTracesResponse"> = {
  $type: "envoy.service.trace.v3.StreamTracesResponse" as const,

  encode(_: StreamTracesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTracesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTracesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamTracesResponse {
    return { $type: StreamTracesResponse.$type };
  },

  toJSON(_: StreamTracesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTracesResponse>, I>>(base?: I): StreamTracesResponse {
    return StreamTracesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTracesResponse>, I>>(_: I): StreamTracesResponse {
    const message = createBaseStreamTracesResponse();
    return message;
  },
};

messageTypeRegistry.set(StreamTracesResponse.$type, StreamTracesResponse);

function createBaseStreamTracesMessage(): StreamTracesMessage {
  return { $type: "envoy.service.trace.v3.StreamTracesMessage" };
}

export const StreamTracesMessage: MessageFns<StreamTracesMessage, "envoy.service.trace.v3.StreamTracesMessage"> = {
  $type: "envoy.service.trace.v3.StreamTracesMessage" as const,

  encode(message: StreamTracesMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== undefined) {
      StreamTracesMessage_Identifier.encode(message.identifier, writer.uint32(10).fork()).join();
    }
    if (message.spans !== undefined && message.spans.length !== 0) {
      for (const v of message.spans) {
        Span.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTracesMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTracesMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = StreamTracesMessage_Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.spans === undefined) {
            message.spans = [];
          }
          const el = Span.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.spans!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTracesMessage {
    return {
      $type: StreamTracesMessage.$type,
      identifier: isSet(object.identifier) ? StreamTracesMessage_Identifier.fromJSON(object.identifier) : undefined,
      spans: globalThis.Array.isArray(object?.spans) ? object.spans.map((e: any) => Span.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: StreamTracesMessage): unknown {
    const obj: any = {};
    if (message.identifier !== undefined) {
      obj.identifier = StreamTracesMessage_Identifier.toJSON(message.identifier);
    }
    if (message.spans?.length) {
      obj.spans = message.spans.map((e) => Span.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTracesMessage>, I>>(base?: I): StreamTracesMessage {
    return StreamTracesMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTracesMessage>, I>>(object: I): StreamTracesMessage {
    const message = createBaseStreamTracesMessage();
    message.identifier = (object.identifier !== undefined && object.identifier !== null)
      ? StreamTracesMessage_Identifier.fromPartial(object.identifier)
      : undefined;
    message.spans = object.spans?.map((e) => Span.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamTracesMessage.$type, StreamTracesMessage);

function createBaseStreamTracesMessage_Identifier(): StreamTracesMessage_Identifier {
  return { $type: "envoy.service.trace.v3.StreamTracesMessage.Identifier" };
}

export const StreamTracesMessage_Identifier: MessageFns<
  StreamTracesMessage_Identifier,
  "envoy.service.trace.v3.StreamTracesMessage.Identifier"
> = {
  $type: "envoy.service.trace.v3.StreamTracesMessage.Identifier" as const,

  encode(message: StreamTracesMessage_Identifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      Node.encode(message.node, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTracesMessage_Identifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTracesMessage_Identifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = Node.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTracesMessage_Identifier {
    return {
      $type: StreamTracesMessage_Identifier.$type,
      node: isSet(object.node) ? Node.fromJSON(object.node) : undefined,
    };
  },

  toJSON(message: StreamTracesMessage_Identifier): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = Node.toJSON(message.node);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTracesMessage_Identifier>, I>>(base?: I): StreamTracesMessage_Identifier {
    return StreamTracesMessage_Identifier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTracesMessage_Identifier>, I>>(
    object: I,
  ): StreamTracesMessage_Identifier {
    const message = createBaseStreamTracesMessage_Identifier();
    message.node = (object.node !== undefined && object.node !== null) ? Node.fromPartial(object.node) : undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamTracesMessage_Identifier.$type, StreamTracesMessage_Identifier);

/**
 * Service for streaming traces to server that consumes the trace data. It
 * uses OpenCensus data model as a standard to represent trace information.
 */
export interface TraceService {
  /**
   * Envoy will connect and send StreamTracesMessage messages forever. It does
   * not expect any response to be sent as nothing would be done in the case
   * of failure.
   */
  StreamTraces(request: Observable<StreamTracesMessage>): Promise<StreamTracesResponse>;
}

export const TraceServiceServiceName = "envoy.service.trace.v3.TraceService";
export class TraceServiceClientImpl implements TraceService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TraceServiceServiceName;
    this.rpc = rpc;
    this.StreamTraces = this.StreamTraces.bind(this);
  }
  StreamTraces(request: Observable<StreamTracesMessage>): Promise<StreamTracesResponse> {
    const data = request.pipe(map((request) => StreamTracesMessage.encode(request).finish()));
    const promise = this.rpc.clientStreamingRequest(this.service, "StreamTraces", data);
    return promise.then((data) => StreamTracesResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
