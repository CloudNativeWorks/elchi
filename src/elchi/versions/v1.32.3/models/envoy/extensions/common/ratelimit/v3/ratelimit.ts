// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/common/ratelimit/v3/ratelimit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import {
  RateLimitUnit,
  rateLimitUnitFromJSON,
  rateLimitUnitToJSON,
  rateLimitUnitToNumber,
} from "../../../../type/v3/ratelimit_unit";
import { TokenBucket } from "../../../../type/v3/token_bucket";

export const protobufPackage = "envoy.extensions.common.ratelimit.v3";

/** Defines the version of the standard to use for X-RateLimit headers. */
export enum XRateLimitHeadersRFCVersion {
  /** OFF - X-RateLimit headers disabled. */
  OFF = "OFF",
  /**
   * DRAFT_VERSION_03 - Use `draft RFC Version 03 <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_ where 3 headers will be added:
   *
   * * ``X-RateLimit-Limit`` - indicates the request-quota associated to the
   *   client in the current time-window followed by the description of the
   *   quota policy. The value is returned by the maximum tokens of the token bucket.
   * * ``X-RateLimit-Remaining`` - indicates the remaining requests in the
   *   current time-window. The value is returned by the remaining tokens in the token bucket.
   * * ``X-RateLimit-Reset`` - indicates the number of seconds until reset of
   *   the current time-window. The value is returned by the remaining fill interval of the token bucket.
   */
  DRAFT_VERSION_03 = "DRAFT_VERSION_03",
}

export function xRateLimitHeadersRFCVersionFromJSON(object: any): XRateLimitHeadersRFCVersion {
  switch (object) {
    case 0:
    case "OFF":
      return XRateLimitHeadersRFCVersion.OFF;
    case 1:
    case "DRAFT_VERSION_03":
      return XRateLimitHeadersRFCVersion.DRAFT_VERSION_03;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum XRateLimitHeadersRFCVersion");
  }
}

export function xRateLimitHeadersRFCVersionToJSON(object: XRateLimitHeadersRFCVersion): string {
  switch (object) {
    case XRateLimitHeadersRFCVersion.OFF:
      return "OFF";
    case XRateLimitHeadersRFCVersion.DRAFT_VERSION_03:
      return "DRAFT_VERSION_03";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum XRateLimitHeadersRFCVersion");
  }
}

export function xRateLimitHeadersRFCVersionToNumber(object: XRateLimitHeadersRFCVersion): number {
  switch (object) {
    case XRateLimitHeadersRFCVersion.OFF:
      return 0;
    case XRateLimitHeadersRFCVersion.DRAFT_VERSION_03:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum XRateLimitHeadersRFCVersion");
  }
}

export enum VhRateLimitsOptions {
  /** OVERRIDE - Use the virtual host rate limits unless the route has a rate limit policy. */
  OVERRIDE = "OVERRIDE",
  /** INCLUDE - Use the virtual host rate limits even if the route has a rate limit policy. */
  INCLUDE = "INCLUDE",
  /** IGNORE - Ignore the virtual host rate limits even if the route does not have a rate limit policy. */
  IGNORE = "IGNORE",
}

export function vhRateLimitsOptionsFromJSON(object: any): VhRateLimitsOptions {
  switch (object) {
    case 0:
    case "OVERRIDE":
      return VhRateLimitsOptions.OVERRIDE;
    case 1:
    case "INCLUDE":
      return VhRateLimitsOptions.INCLUDE;
    case 2:
    case "IGNORE":
      return VhRateLimitsOptions.IGNORE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum VhRateLimitsOptions");
  }
}

export function vhRateLimitsOptionsToJSON(object: VhRateLimitsOptions): string {
  switch (object) {
    case VhRateLimitsOptions.OVERRIDE:
      return "OVERRIDE";
    case VhRateLimitsOptions.INCLUDE:
      return "INCLUDE";
    case VhRateLimitsOptions.IGNORE:
      return "IGNORE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum VhRateLimitsOptions");
  }
}

export function vhRateLimitsOptionsToNumber(object: VhRateLimitsOptions): number {
  switch (object) {
    case VhRateLimitsOptions.OVERRIDE:
      return 0;
    case VhRateLimitsOptions.INCLUDE:
      return 1;
    case VhRateLimitsOptions.IGNORE:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum VhRateLimitsOptions");
  }
}

/**
 * A RateLimitDescriptor is a list of hierarchical entries that are used by the service to
 * determine the final rate limit key and overall allowed limit. Here are some examples of how
 * they might be used for the domain "envoy".
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["remote_address": "10.0.0.1"]
 *
 * What it does: Limits all unauthenticated traffic for the IP address 10.0.0.1. The
 * configuration supplies a default limit for the *remote_address* key. If there is a desire to
 * raise the limit for 10.0.0.1 or block it entirely it can be specified directly in the
 * configuration.
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["path": "/foo/bar"]
 *
 * What it does: Limits all unauthenticated traffic globally for a specific path (or prefix if
 * configured that way in the service).
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "false"], ["path": "/foo/bar"], ["remote_address": "10.0.0.1"]
 *
 * What it does: Limits unauthenticated traffic to a specific path for a specific IP address.
 * Like (1) we can raise/block specific IP addresses if we want with an override configuration.
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "true"], ["client_id": "foo"]
 *
 * What it does: Limits all traffic for an authenticated client "foo"
 *
 * .. code-block:: cpp
 *
 *   ["authenticated": "true"], ["client_id": "foo"], ["path": "/foo/bar"]
 *
 * What it does: Limits traffic to a specific path for an authenticated client "foo"
 *
 * The idea behind the API is that (1)/(2)/(3) and (4)/(5) can be sent in 1 request if desired.
 * This enables building complex application scenarios with a generic backend.
 *
 * Optionally the descriptor can contain a limit override under a "limit" key, that specifies
 * the number of requests per unit to use instead of the number configured in the
 * rate limiting service.
 */
export interface RateLimitDescriptor {
  $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor";
  /** Descriptor entries. */
  entries?:
    | RateLimitDescriptor_Entry[]
    | undefined;
  /** Optional rate limit override to supply to the ratelimit service. */
  limit?: RateLimitDescriptor_RateLimitOverride | undefined;
}

export interface RateLimitDescriptor_Entry {
  $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry";
  /** Descriptor key. */
  key?:
    | string
    | undefined;
  /** Descriptor value. */
  value?: string | undefined;
}

/**
 * Override rate limit to apply to this descriptor instead of the limit
 * configured in the rate limit service. See :ref:`rate limit override
 * <config_http_filters_rate_limit_rate_limit_override>` for more information.
 */
export interface RateLimitDescriptor_RateLimitOverride {
  $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride";
  /** The number of requests per unit of time. */
  requests_per_unit?:
    | number
    | undefined;
  /** The unit of time. */
  unit?: RateLimitUnit | undefined;
}

export interface LocalRateLimitDescriptor {
  $type: "envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor";
  /** Descriptor entries. */
  entries?:
    | RateLimitDescriptor_Entry[]
    | undefined;
  /** Token Bucket algorithm for local ratelimiting. */
  token_bucket?: TokenBucket | undefined;
}

/**
 * Configuration used to enable local cluster level rate limiting where the token buckets
 * will be shared across all the Envoy instances in the local cluster.
 * A share will be calculated based on the membership of the local cluster dynamically
 * and the configuration. When the limiter refilling the token bucket, the share will be
 * applied. By default, the token bucket will be shared evenly.
 *
 * See :ref:`local cluster name
 * <envoy_v3_api_field_config.bootstrap.v3.ClusterManager.local_cluster_name>` for more context
 * about local cluster.
 */
export interface LocalClusterRateLimit {
  $type: "envoy.extensions.common.ratelimit.v3.LocalClusterRateLimit";
}

function createBaseRateLimitDescriptor(): RateLimitDescriptor {
  return { $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor" };
}

export const RateLimitDescriptor: MessageFns<
  RateLimitDescriptor,
  "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor"
> = {
  $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor" as const,

  encode(message: RateLimitDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entries !== undefined && message.entries.length !== 0) {
      for (const v of message.entries) {
        RateLimitDescriptor_Entry.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.limit !== undefined) {
      RateLimitDescriptor_RateLimitOverride.encode(message.limit, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimitDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimitDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.entries === undefined) {
            message.entries = [];
          }
          const el = RateLimitDescriptor_Entry.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.entries!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.limit = RateLimitDescriptor_RateLimitOverride.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimitDescriptor {
    return {
      $type: RateLimitDescriptor.$type,
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => RateLimitDescriptor_Entry.fromJSON(e))
        : undefined,
      limit: isSet(object.limit) ? RateLimitDescriptor_RateLimitOverride.fromJSON(object.limit) : undefined,
    };
  },

  toJSON(message: RateLimitDescriptor): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => RateLimitDescriptor_Entry.toJSON(e));
    }
    if (message.limit !== undefined) {
      obj.limit = RateLimitDescriptor_RateLimitOverride.toJSON(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateLimitDescriptor>, I>>(base?: I): RateLimitDescriptor {
    return RateLimitDescriptor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateLimitDescriptor>, I>>(object: I): RateLimitDescriptor {
    const message = createBaseRateLimitDescriptor();
    message.entries = object.entries?.map((e) => RateLimitDescriptor_Entry.fromPartial(e)) || undefined;
    message.limit = (object.limit !== undefined && object.limit !== null)
      ? RateLimitDescriptor_RateLimitOverride.fromPartial(object.limit)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(RateLimitDescriptor.$type, RateLimitDescriptor);

function createBaseRateLimitDescriptor_Entry(): RateLimitDescriptor_Entry {
  return { $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry" };
}

export const RateLimitDescriptor_Entry: MessageFns<
  RateLimitDescriptor_Entry,
  "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry"
> = {
  $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry" as const,

  encode(message: RateLimitDescriptor_Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined && message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimitDescriptor_Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimitDescriptor_Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimitDescriptor_Entry {
    return {
      $type: RateLimitDescriptor_Entry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
    };
  },

  toJSON(message: RateLimitDescriptor_Entry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateLimitDescriptor_Entry>, I>>(base?: I): RateLimitDescriptor_Entry {
    return RateLimitDescriptor_Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateLimitDescriptor_Entry>, I>>(object: I): RateLimitDescriptor_Entry {
    const message = createBaseRateLimitDescriptor_Entry();
    message.key = object.key ?? undefined;
    message.value = object.value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RateLimitDescriptor_Entry.$type, RateLimitDescriptor_Entry);

function createBaseRateLimitDescriptor_RateLimitOverride(): RateLimitDescriptor_RateLimitOverride {
  return { $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride" };
}

export const RateLimitDescriptor_RateLimitOverride: MessageFns<
  RateLimitDescriptor_RateLimitOverride,
  "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride"
> = {
  $type: "envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride" as const,

  encode(message: RateLimitDescriptor_RateLimitOverride, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requests_per_unit !== undefined && message.requests_per_unit !== 0) {
      writer.uint32(8).uint32(message.requests_per_unit);
    }
    if (message.unit !== undefined && message.unit !== RateLimitUnit.UNKNOWN) {
      writer.uint32(16).int32(rateLimitUnitToNumber(message.unit));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimitDescriptor_RateLimitOverride {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimitDescriptor_RateLimitOverride();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.requests_per_unit = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.unit = rateLimitUnitFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimitDescriptor_RateLimitOverride {
    return {
      $type: RateLimitDescriptor_RateLimitOverride.$type,
      requests_per_unit: isSet(object.requests_per_unit) ? globalThis.Number(object.requests_per_unit) : undefined,
      unit: isSet(object.unit) ? rateLimitUnitFromJSON(object.unit) : undefined,
    };
  },

  toJSON(message: RateLimitDescriptor_RateLimitOverride): unknown {
    const obj: any = {};
    if (message.requests_per_unit !== undefined) {
      obj.requests_per_unit = Math.round(message.requests_per_unit);
    }
    if (message.unit !== undefined) {
      obj.unit = rateLimitUnitToJSON(message.unit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateLimitDescriptor_RateLimitOverride>, I>>(
    base?: I,
  ): RateLimitDescriptor_RateLimitOverride {
    return RateLimitDescriptor_RateLimitOverride.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateLimitDescriptor_RateLimitOverride>, I>>(
    object: I,
  ): RateLimitDescriptor_RateLimitOverride {
    const message = createBaseRateLimitDescriptor_RateLimitOverride();
    message.requests_per_unit = object.requests_per_unit ?? undefined;
    message.unit = object.unit ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RateLimitDescriptor_RateLimitOverride.$type, RateLimitDescriptor_RateLimitOverride);

function createBaseLocalRateLimitDescriptor(): LocalRateLimitDescriptor {
  return { $type: "envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor" };
}

export const LocalRateLimitDescriptor: MessageFns<
  LocalRateLimitDescriptor,
  "envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor"
> = {
  $type: "envoy.extensions.common.ratelimit.v3.LocalRateLimitDescriptor" as const,

  encode(message: LocalRateLimitDescriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entries !== undefined && message.entries.length !== 0) {
      for (const v of message.entries) {
        RateLimitDescriptor_Entry.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.token_bucket !== undefined) {
      TokenBucket.encode(message.token_bucket, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalRateLimitDescriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalRateLimitDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.entries === undefined) {
            message.entries = [];
          }
          const el = RateLimitDescriptor_Entry.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.entries!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token_bucket = TokenBucket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalRateLimitDescriptor {
    return {
      $type: LocalRateLimitDescriptor.$type,
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => RateLimitDescriptor_Entry.fromJSON(e))
        : undefined,
      token_bucket: isSet(object.token_bucket) ? TokenBucket.fromJSON(object.token_bucket) : undefined,
    };
  },

  toJSON(message: LocalRateLimitDescriptor): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => RateLimitDescriptor_Entry.toJSON(e));
    }
    if (message.token_bucket !== undefined) {
      obj.token_bucket = TokenBucket.toJSON(message.token_bucket);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalRateLimitDescriptor>, I>>(base?: I): LocalRateLimitDescriptor {
    return LocalRateLimitDescriptor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalRateLimitDescriptor>, I>>(object: I): LocalRateLimitDescriptor {
    const message = createBaseLocalRateLimitDescriptor();
    message.entries = object.entries?.map((e) => RateLimitDescriptor_Entry.fromPartial(e)) || undefined;
    message.token_bucket = (object.token_bucket !== undefined && object.token_bucket !== null)
      ? TokenBucket.fromPartial(object.token_bucket)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(LocalRateLimitDescriptor.$type, LocalRateLimitDescriptor);

function createBaseLocalClusterRateLimit(): LocalClusterRateLimit {
  return { $type: "envoy.extensions.common.ratelimit.v3.LocalClusterRateLimit" };
}

export const LocalClusterRateLimit: MessageFns<
  LocalClusterRateLimit,
  "envoy.extensions.common.ratelimit.v3.LocalClusterRateLimit"
> = {
  $type: "envoy.extensions.common.ratelimit.v3.LocalClusterRateLimit" as const,

  encode(_: LocalClusterRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalClusterRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalClusterRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LocalClusterRateLimit {
    return { $type: LocalClusterRateLimit.$type };
  },

  toJSON(_: LocalClusterRateLimit): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalClusterRateLimit>, I>>(base?: I): LocalClusterRateLimit {
    return LocalClusterRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalClusterRateLimit>, I>>(_: I): LocalClusterRateLimit {
    const message = createBaseLocalClusterRateLimit();
    return message;
  },
};

messageTypeRegistry.set(LocalClusterRateLimit.$type, LocalClusterRateLimit);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
