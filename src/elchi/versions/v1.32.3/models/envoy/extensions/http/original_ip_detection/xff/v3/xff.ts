// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/original_ip_detection/xff/v3/xff.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CidrRange } from "../../../../../config/core/v3/address";

export const protobufPackage = "envoy.extensions.http.original_ip_detection.xff.v3";

/**
 * This extension allows for the original downstream remote IP to be detected
 * by reading the :ref:`config_http_conn_man_headers_x-forwarded-for` header.
 *
 * [#extension: envoy.http.original_ip_detection.xff]
 */
export interface XffConfig {
  $type: "envoy.extensions.http.original_ip_detection.xff.v3.XffConfig";
  /**
   * The number of additional ingress proxy hops from the right side of the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
   * determining the origin client's IP address. The default is zero if this option
   * is not specified. See the documentation for
   * :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
   *
   * Only one of ``xff_num_trusted_hops`` and ``xff_trusted_cidrs`` can be set.
   */
  xff_num_trusted_hops?:
    | number
    | undefined;
  /**
   * The `CIDR <https://tools.ietf.org/html/rfc4632>`_ ranges to trust when
   * evaluating the remote IP address to determine the original client's IP address.
   * This is used instead of
   * :ref:`use_remote_address <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.use_remote_address>`.
   * When the remote IP address matches a trusted CIDR and the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` header was sent, each entry
   * in the ``x-forwarded-for`` header is evaluated from right to left and the first
   * public non-trusted address is used as the original client address. If all
   * addresses in ``x-forwarded-for`` are within the trusted list, the first (leftmost)
   * entry is used.
   *
   * This is typically used when requests are proxied by a
   * `CDN <https://en.wikipedia.org/wiki/Content_delivery_network>`_.
   *
   * Only one of ``xff_num_trusted_hops`` and ``xff_trusted_cidrs`` can be set.
   */
  xff_trusted_cidrs?:
    | XffTrustedCidrs
    | undefined;
  /**
   * If set, Envoy will not append the remote address to the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header.
   *
   * .. attention::
   *
   *   For proper proxy behaviour it is not recommended to set this option.
   *   For backwards compatibility, if this option is unset it defaults to true.
   *
   * This only applies when :ref:`use_remote_address
   * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.use_remote_address>`
   * is false, otherwise :ref:`skip_xff_append
   * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.skip_xff_append>`
   * applies.
   */
  skip_xff_append?: boolean | undefined;
}

export interface XffTrustedCidrs {
  $type: "envoy.extensions.http.original_ip_detection.xff.v3.XffTrustedCidrs";
  /**
   * The list of `CIDRs <https://tools.ietf.org/html/rfc4632>`_ from which remote
   * connections are considered trusted.
   */
  cidrs?: CidrRange[] | undefined;
}

function createBaseXffConfig(): XffConfig {
  return { $type: "envoy.extensions.http.original_ip_detection.xff.v3.XffConfig" };
}

export const XffConfig: MessageFns<XffConfig, "envoy.extensions.http.original_ip_detection.xff.v3.XffConfig"> = {
  $type: "envoy.extensions.http.original_ip_detection.xff.v3.XffConfig" as const,

  encode(message: XffConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xff_num_trusted_hops !== undefined && message.xff_num_trusted_hops !== 0) {
      writer.uint32(8).uint32(message.xff_num_trusted_hops);
    }
    if (message.xff_trusted_cidrs !== undefined) {
      XffTrustedCidrs.encode(message.xff_trusted_cidrs, writer.uint32(18).fork()).join();
    }
    if (message.skip_xff_append !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.skip_xff_append! },
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): XffConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseXffConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.xff_num_trusted_hops = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.xff_trusted_cidrs = XffTrustedCidrs.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.skip_xff_append = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): XffConfig {
    return {
      $type: XffConfig.$type,
      xff_num_trusted_hops: isSet(object.xff_num_trusted_hops)
        ? globalThis.Number(object.xff_num_trusted_hops)
        : undefined,
      xff_trusted_cidrs: isSet(object.xff_trusted_cidrs)
        ? XffTrustedCidrs.fromJSON(object.xff_trusted_cidrs)
        : undefined,
      skip_xff_append: isSet(object.skip_xff_append) ? Boolean(object.skip_xff_append) : undefined,
    };
  },

  toJSON(message: XffConfig): unknown {
    const obj: any = {};
    if (message.xff_num_trusted_hops !== undefined) {
      obj.xff_num_trusted_hops = Math.round(message.xff_num_trusted_hops);
    }
    if (message.xff_trusted_cidrs !== undefined) {
      obj.xff_trusted_cidrs = XffTrustedCidrs.toJSON(message.xff_trusted_cidrs);
    }
    if (message.skip_xff_append !== undefined) {
      obj.skip_xff_append = message.skip_xff_append;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<XffConfig>, I>>(base?: I): XffConfig {
    return XffConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<XffConfig>, I>>(object: I): XffConfig {
    const message = createBaseXffConfig();
    message.xff_num_trusted_hops = object.xff_num_trusted_hops ?? undefined;
    message.xff_trusted_cidrs = (object.xff_trusted_cidrs !== undefined && object.xff_trusted_cidrs !== null)
      ? XffTrustedCidrs.fromPartial(object.xff_trusted_cidrs)
      : undefined;
    message.skip_xff_append = object.skip_xff_append ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(XffConfig.$type, XffConfig);

function createBaseXffTrustedCidrs(): XffTrustedCidrs {
  return { $type: "envoy.extensions.http.original_ip_detection.xff.v3.XffTrustedCidrs" };
}

export const XffTrustedCidrs: MessageFns<
  XffTrustedCidrs,
  "envoy.extensions.http.original_ip_detection.xff.v3.XffTrustedCidrs"
> = {
  $type: "envoy.extensions.http.original_ip_detection.xff.v3.XffTrustedCidrs" as const,

  encode(message: XffTrustedCidrs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cidrs !== undefined && message.cidrs.length !== 0) {
      for (const v of message.cidrs) {
        CidrRange.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): XffTrustedCidrs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseXffTrustedCidrs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.cidrs === undefined) {
            message.cidrs = [];
          }
          const el = CidrRange.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.cidrs!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): XffTrustedCidrs {
    return {
      $type: XffTrustedCidrs.$type,
      cidrs: globalThis.Array.isArray(object?.cidrs) ? object.cidrs.map((e: any) => CidrRange.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: XffTrustedCidrs): unknown {
    const obj: any = {};
    if (message.cidrs?.length) {
      obj.cidrs = message.cidrs.map((e) => CidrRange.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<XffTrustedCidrs>, I>>(base?: I): XffTrustedCidrs {
    return XffTrustedCidrs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<XffTrustedCidrs>, I>>(object: I): XffTrustedCidrs {
    const message = createBaseXffTrustedCidrs();
    message.cidrs = object.cidrs?.map((e) => CidrRange.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(XffTrustedCidrs.$type, XffTrustedCidrs);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
