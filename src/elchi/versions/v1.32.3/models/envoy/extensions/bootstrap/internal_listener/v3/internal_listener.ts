// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/bootstrap/internal_listener/v3/internal_listener.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.bootstrap.internal_listener.v3";

/** Configuration for internal listener. */
export interface InternalListener {
  $type: "envoy.extensions.bootstrap.internal_listener.v3.InternalListener";
  /**
   * The internal listener client connection buffer size in KiB.
   * For example, if ``buffer_size_kb`` is set to 5, then the actual buffer size is
   * 5 KiB = 5 * 1024 bytes.
   * If the ``buffer_size_kb`` is not specified, the buffer size is set to 1024 KiB.
   */
  buffer_size_kb?: number | undefined;
}

function createBaseInternalListener(): InternalListener {
  return { $type: "envoy.extensions.bootstrap.internal_listener.v3.InternalListener" };
}

export const InternalListener: MessageFns<
  InternalListener,
  "envoy.extensions.bootstrap.internal_listener.v3.InternalListener"
> = {
  $type: "envoy.extensions.bootstrap.internal_listener.v3.InternalListener" as const,

  encode(message: InternalListener, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buffer_size_kb !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.buffer_size_kb! },
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InternalListener {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInternalListener();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buffer_size_kb = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InternalListener {
    return {
      $type: InternalListener.$type,
      buffer_size_kb: isSet(object.buffer_size_kb) ? Number(object.buffer_size_kb) : undefined,
    };
  },

  toJSON(message: InternalListener): unknown {
    const obj: any = {};
    if (message.buffer_size_kb !== undefined) {
      obj.buffer_size_kb = message.buffer_size_kb;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InternalListener>, I>>(base?: I): InternalListener {
    return InternalListener.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InternalListener>, I>>(object: I): InternalListener {
    const message = createBaseInternalListener();
    message.buffer_size_kb = object.buffer_size_kb ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(InternalListener.$type, InternalListener);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
