// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/udp/udp_proxy/session/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value, UInt64Value } from "../../../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../../../typeRegistry";
import { DnsCacheConfig } from "../../../../../../common/dynamic_forward_proxy/v3/dns_cache";

export const protobufPackage = "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3";

/**
 * Configuration for the filter state based dynamic forward proxy filter. See the
 * :ref:`architecture overview <arch_overview_http_dynamic_forward_proxy>` for
 * more information. Note this filter must be used in conjunction to another filter that
 * sets the 'envoy.upstream.dynamic_host' and the 'envoy.upstream.dynamic_port' filter
 * state keys for the required upstream UDP session.
 * [#extension: envoy.filters.udp.session.dynamic_forward_proxy]
 */
export interface FilterConfig {
  $type: "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig";
  /** The prefix to use when emitting :ref:`statistics <config_udp_session_filters_dynamic_forward_proxy_stats>`. */
  stat_prefix?: string | undefined;
  implementation_specifier?:
    | //
    /**
     * The DNS cache configuration that the filter will attach to. Note this
     * configuration must match that of associated :ref:`dynamic forward proxy cluster configuration
     * <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
     */
    { $case: "dns_cache_config"; dns_cache_config: DnsCacheConfig }
    | undefined;
  /**
   * If configured, the filter will buffer datagrams in case that it is waiting for a DNS response.
   * If this field is not configured, there will be no buffering and downstream datagrams that arrive
   * while the DNS resolution is in progress will be dropped. In case this field is set but the options
   * are not configured, the default values will be applied as described in the ``BufferOptions``.
   */
  buffer_options?: FilterConfig_BufferOptions | undefined;
}

/** Configuration for UDP datagrams buffering. */
export interface FilterConfig_BufferOptions {
  $type: "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig.BufferOptions";
  /**
   * If set, the filter will only buffer datagrams up to the requested limit, and will drop
   * new UDP datagrams if the buffer contains the max_buffered_datagrams value at the time
   * of a new datagram arrival. If not set, the default value is 1024 datagrams.
   */
  max_buffered_datagrams?:
    | number
    | undefined;
  /**
   * If set, the filter will only buffer datagrams up to the requested total buffered bytes limit,
   * and will drop new UDP datagrams if the buffer contains the max_buffered_datagrams value
   * at the time of a new datagram arrival. If not set, the default value is 16,384 (16KB).
   */
  max_buffered_bytes?: number | undefined;
}

function createBaseFilterConfig(): FilterConfig {
  return {
    $type: "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig",
    implementation_specifier: undefined,
  };
}

export const FilterConfig: MessageFns<
  FilterConfig,
  "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig"
> = {
  $type: "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig" as const,

  encode(message: FilterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    switch (message.implementation_specifier?.$case) {
      case "dns_cache_config":
        DnsCacheConfig.encode(message.implementation_specifier.dns_cache_config, writer.uint32(18).fork()).join();
        break;
    }
    if (message.buffer_options !== undefined) {
      FilterConfig_BufferOptions.encode(message.buffer_options, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.implementation_specifier = {
            $case: "dns_cache_config",
            dns_cache_config: DnsCacheConfig.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.buffer_options = FilterConfig_BufferOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterConfig {
    return {
      $type: FilterConfig.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      implementation_specifier: isSet(object.dns_cache_config)
        ? { $case: "dns_cache_config", dns_cache_config: DnsCacheConfig.fromJSON(object.dns_cache_config) }
        : undefined,
      buffer_options: isSet(object.buffer_options)
        ? FilterConfig_BufferOptions.fromJSON(object.buffer_options)
        : undefined,
    };
  },

  toJSON(message: FilterConfig): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.implementation_specifier?.$case === "dns_cache_config") {
      obj.dns_cache_config = DnsCacheConfig.toJSON(message.implementation_specifier.dns_cache_config);
    }
    if (message.buffer_options !== undefined) {
      obj.buffer_options = FilterConfig_BufferOptions.toJSON(message.buffer_options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterConfig>, I>>(base?: I): FilterConfig {
    return FilterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterConfig>, I>>(object: I): FilterConfig {
    const message = createBaseFilterConfig();
    message.stat_prefix = object.stat_prefix ?? undefined;
    if (
      object.implementation_specifier?.$case === "dns_cache_config" &&
      object.implementation_specifier?.dns_cache_config !== undefined &&
      object.implementation_specifier?.dns_cache_config !== null
    ) {
      message.implementation_specifier = {
        $case: "dns_cache_config",
        dns_cache_config: DnsCacheConfig.fromPartial(object.implementation_specifier.dns_cache_config),
      };
    }
    message.buffer_options = (object.buffer_options !== undefined && object.buffer_options !== null)
      ? FilterConfig_BufferOptions.fromPartial(object.buffer_options)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterConfig.$type, FilterConfig);

function createBaseFilterConfig_BufferOptions(): FilterConfig_BufferOptions {
  return {
    $type: "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig.BufferOptions",
  };
}

export const FilterConfig_BufferOptions: MessageFns<
  FilterConfig_BufferOptions,
  "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig.BufferOptions"
> = {
  $type: "envoy.extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig.BufferOptions" as const,

  encode(message: FilterConfig_BufferOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.max_buffered_datagrams !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_buffered_datagrams! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.max_buffered_bytes !== undefined) {
      UInt64Value.encode(
        { $type: "google.protobuf.UInt64Value", value: message.max_buffered_bytes! },
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterConfig_BufferOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterConfig_BufferOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.max_buffered_datagrams = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.max_buffered_bytes = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterConfig_BufferOptions {
    return {
      $type: FilterConfig_BufferOptions.$type,
      max_buffered_datagrams: isSet(object.max_buffered_datagrams) ? Number(object.max_buffered_datagrams) : undefined,
      max_buffered_bytes: isSet(object.max_buffered_bytes) ? Number(object.max_buffered_bytes) : undefined,
    };
  },

  toJSON(message: FilterConfig_BufferOptions): unknown {
    const obj: any = {};
    if (message.max_buffered_datagrams !== undefined) {
      obj.max_buffered_datagrams = message.max_buffered_datagrams;
    }
    if (message.max_buffered_bytes !== undefined) {
      obj.max_buffered_bytes = message.max_buffered_bytes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterConfig_BufferOptions>, I>>(base?: I): FilterConfig_BufferOptions {
    return FilterConfig_BufferOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterConfig_BufferOptions>, I>>(object: I): FilterConfig_BufferOptions {
    const message = createBaseFilterConfig_BufferOptions();
    message.max_buffered_datagrams = object.max_buffered_datagrams ?? undefined;
    message.max_buffered_bytes = object.max_buffered_bytes ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterConfig_BufferOptions.$type, FilterConfig_BufferOptions);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
