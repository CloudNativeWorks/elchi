// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/csrf/v3/csrf.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFractionalPercent } from "../../../../../config/core/v3/base";
import { StringMatcher } from "../../../../../type/matcher/v3/string";

export const protobufPackage = "envoy.extensions.filters.http.csrf.v3";

/** CSRF filter config. */
export interface CsrfPolicy {
  $type: "envoy.extensions.filters.http.csrf.v3.CsrfPolicy";
  /**
   * Specifies the % of requests for which the CSRF filter is enabled.
   *
   * If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests to filter.
   *
   * .. note::
   *
   *   This field defaults to 100/:ref:`HUNDRED
   *   <envoy_v3_api_enum_type.v3.FractionalPercent.DenominatorType>`.
   */
  filter_enabled?:
    | RuntimeFractionalPercent
    | undefined;
  /**
   * Specifies that CSRF policies will be evaluated and tracked, but not enforced.
   *
   * This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.
   *
   * If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's ``Origin`` and ``Destination`` to determine if it's valid, but will not
   * enforce any policies.
   */
  shadow_enabled?:
    | RuntimeFractionalPercent
    | undefined;
  /**
   * Specifies additional source origins that will be allowed in addition to
   * the destination origin.
   *
   * More information on how this can be configured via runtime can be found
   * :ref:`here <csrf-configuration>`.
   */
  additional_origins?: StringMatcher[] | undefined;
}

function createBaseCsrfPolicy(): CsrfPolicy {
  return { $type: "envoy.extensions.filters.http.csrf.v3.CsrfPolicy" };
}

export const CsrfPolicy: MessageFns<CsrfPolicy, "envoy.extensions.filters.http.csrf.v3.CsrfPolicy"> = {
  $type: "envoy.extensions.filters.http.csrf.v3.CsrfPolicy" as const,

  encode(message: CsrfPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter_enabled !== undefined) {
      RuntimeFractionalPercent.encode(message.filter_enabled, writer.uint32(10).fork()).join();
    }
    if (message.shadow_enabled !== undefined) {
      RuntimeFractionalPercent.encode(message.shadow_enabled, writer.uint32(18).fork()).join();
    }
    if (message.additional_origins !== undefined && message.additional_origins.length !== 0) {
      for (const v of message.additional_origins) {
        StringMatcher.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CsrfPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCsrfPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter_enabled = RuntimeFractionalPercent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shadow_enabled = RuntimeFractionalPercent.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.additional_origins === undefined) {
            message.additional_origins = [];
          }
          const el = StringMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.additional_origins!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CsrfPolicy {
    return {
      $type: CsrfPolicy.$type,
      filter_enabled: isSet(object.filter_enabled)
        ? RuntimeFractionalPercent.fromJSON(object.filter_enabled)
        : undefined,
      shadow_enabled: isSet(object.shadow_enabled)
        ? RuntimeFractionalPercent.fromJSON(object.shadow_enabled)
        : undefined,
      additional_origins: globalThis.Array.isArray(object?.additional_origins)
        ? object.additional_origins.map((e: any) => StringMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: CsrfPolicy): unknown {
    const obj: any = {};
    if (message.filter_enabled !== undefined) {
      obj.filter_enabled = RuntimeFractionalPercent.toJSON(message.filter_enabled);
    }
    if (message.shadow_enabled !== undefined) {
      obj.shadow_enabled = RuntimeFractionalPercent.toJSON(message.shadow_enabled);
    }
    if (message.additional_origins?.length) {
      obj.additional_origins = message.additional_origins.map((e) => StringMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CsrfPolicy>, I>>(base?: I): CsrfPolicy {
    return CsrfPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CsrfPolicy>, I>>(object: I): CsrfPolicy {
    const message = createBaseCsrfPolicy();
    message.filter_enabled = (object.filter_enabled !== undefined && object.filter_enabled !== null)
      ? RuntimeFractionalPercent.fromPartial(object.filter_enabled)
      : undefined;
    message.shadow_enabled = (object.shadow_enabled !== undefined && object.shadow_enabled !== null)
      ? RuntimeFractionalPercent.fromPartial(object.shadow_enabled)
      : undefined;
    message.additional_origins = object.additional_origins?.map((e) => StringMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(CsrfPolicy.$type, CsrfPolicy);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
