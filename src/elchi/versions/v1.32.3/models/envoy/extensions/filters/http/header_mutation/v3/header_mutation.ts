// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/header_mutation/v3/header_mutation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { HeaderMutation as HeaderMutation1 } from "../../../../../config/common/mutation_rules/v3/mutation_rules";

export const protobufPackage = "envoy.extensions.filters.http.header_mutation.v3";

export interface Mutations {
  $type: "envoy.extensions.filters.http.header_mutation.v3.Mutations";
  /** The request mutations are applied before the request is forwarded to the upstream cluster. */
  request_mutations?:
    | HeaderMutation1[]
    | undefined;
  /** The response mutations are applied before the response is sent to the downstream client. */
  response_mutations?: HeaderMutation1[] | undefined;
}

/** Per route configuration for the header mutation filter. */
export interface HeaderMutationPerRoute {
  $type: "envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute";
  mutations?: Mutations | undefined;
}

/**
 * Configuration for the header mutation filter. The mutation rules in the filter configuration will
 * always be applied first and then the per-route mutation rules, if both are specified.
 */
export interface HeaderMutation {
  $type: "envoy.extensions.filters.http.header_mutation.v3.HeaderMutation";
  mutations?:
    | Mutations
    | undefined;
  /**
   * If per route HeaderMutationPerRoute config is configured at multiple route levels, header mutations
   * at all specified levels are evaluated. By default, the order is from most specific (i.e. route entry level)
   * to least specific (i.e. route configuration level). Later header mutations may override earlier mutations.
   *
   * This order can be reversed by setting this field to true. In other words, most specific level mutation
   * is evaluated last.
   */
  most_specific_header_mutations_wins?: boolean | undefined;
}

function createBaseMutations(): Mutations {
  return { $type: "envoy.extensions.filters.http.header_mutation.v3.Mutations" };
}

export const Mutations: MessageFns<Mutations, "envoy.extensions.filters.http.header_mutation.v3.Mutations"> = {
  $type: "envoy.extensions.filters.http.header_mutation.v3.Mutations" as const,

  encode(message: Mutations, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request_mutations !== undefined && message.request_mutations.length !== 0) {
      for (const v of message.request_mutations) {
        HeaderMutation1.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.response_mutations !== undefined && message.response_mutations.length !== 0) {
      for (const v of message.response_mutations) {
        HeaderMutation1.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Mutations {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMutations();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.request_mutations === undefined) {
            message.request_mutations = [];
          }
          const el = HeaderMutation1.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.request_mutations!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.response_mutations === undefined) {
            message.response_mutations = [];
          }
          const el = HeaderMutation1.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.response_mutations!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Mutations {
    return {
      $type: Mutations.$type,
      request_mutations: globalThis.Array.isArray(object?.request_mutations)
        ? object.request_mutations.map((e: any) => HeaderMutation1.fromJSON(e))
        : undefined,
      response_mutations: globalThis.Array.isArray(object?.response_mutations)
        ? object.response_mutations.map((e: any) => HeaderMutation1.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Mutations): unknown {
    const obj: any = {};
    if (message.request_mutations?.length) {
      obj.request_mutations = message.request_mutations.map((e) => HeaderMutation1.toJSON(e));
    }
    if (message.response_mutations?.length) {
      obj.response_mutations = message.response_mutations.map((e) => HeaderMutation1.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Mutations>, I>>(base?: I): Mutations {
    return Mutations.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Mutations>, I>>(object: I): Mutations {
    const message = createBaseMutations();
    message.request_mutations = object.request_mutations?.map((e) => HeaderMutation1.fromPartial(e)) || undefined;
    message.response_mutations = object.response_mutations?.map((e) => HeaderMutation1.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Mutations.$type, Mutations);

function createBaseHeaderMutationPerRoute(): HeaderMutationPerRoute {
  return { $type: "envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute" };
}

export const HeaderMutationPerRoute: MessageFns<
  HeaderMutationPerRoute,
  "envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute"
> = {
  $type: "envoy.extensions.filters.http.header_mutation.v3.HeaderMutationPerRoute" as const,

  encode(message: HeaderMutationPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mutations !== undefined) {
      Mutations.encode(message.mutations, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderMutationPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderMutationPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mutations = Mutations.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderMutationPerRoute {
    return {
      $type: HeaderMutationPerRoute.$type,
      mutations: isSet(object.mutations) ? Mutations.fromJSON(object.mutations) : undefined,
    };
  },

  toJSON(message: HeaderMutationPerRoute): unknown {
    const obj: any = {};
    if (message.mutations !== undefined) {
      obj.mutations = Mutations.toJSON(message.mutations);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderMutationPerRoute>, I>>(base?: I): HeaderMutationPerRoute {
    return HeaderMutationPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderMutationPerRoute>, I>>(object: I): HeaderMutationPerRoute {
    const message = createBaseHeaderMutationPerRoute();
    message.mutations = (object.mutations !== undefined && object.mutations !== null)
      ? Mutations.fromPartial(object.mutations)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(HeaderMutationPerRoute.$type, HeaderMutationPerRoute);

function createBaseHeaderMutation(): HeaderMutation {
  return { $type: "envoy.extensions.filters.http.header_mutation.v3.HeaderMutation" };
}

export const HeaderMutation: MessageFns<
  HeaderMutation,
  "envoy.extensions.filters.http.header_mutation.v3.HeaderMutation"
> = {
  $type: "envoy.extensions.filters.http.header_mutation.v3.HeaderMutation" as const,

  encode(message: HeaderMutation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mutations !== undefined) {
      Mutations.encode(message.mutations, writer.uint32(10).fork()).join();
    }
    if (
      message.most_specific_header_mutations_wins !== undefined && message.most_specific_header_mutations_wins !== false
    ) {
      writer.uint32(16).bool(message.most_specific_header_mutations_wins);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderMutation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderMutation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mutations = Mutations.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.most_specific_header_mutations_wins = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderMutation {
    return {
      $type: HeaderMutation.$type,
      mutations: isSet(object.mutations) ? Mutations.fromJSON(object.mutations) : undefined,
      most_specific_header_mutations_wins: isSet(object.most_specific_header_mutations_wins)
        ? globalThis.Boolean(object.most_specific_header_mutations_wins)
        : undefined,
    };
  },

  toJSON(message: HeaderMutation): unknown {
    const obj: any = {};
    if (message.mutations !== undefined) {
      obj.mutations = Mutations.toJSON(message.mutations);
    }
    if (message.most_specific_header_mutations_wins !== undefined) {
      obj.most_specific_header_mutations_wins = message.most_specific_header_mutations_wins;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderMutation>, I>>(base?: I): HeaderMutation {
    return HeaderMutation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderMutation>, I>>(object: I): HeaderMutation {
    const message = createBaseHeaderMutation();
    message.mutations = (object.mutations !== undefined && object.mutations !== null)
      ? Mutations.fromPartial(object.mutations)
      : undefined;
    message.most_specific_header_mutations_wins = object.most_specific_header_mutations_wins ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HeaderMutation.$type, HeaderMutation);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
