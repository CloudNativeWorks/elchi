// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/rbac/v3/rbac.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Matcher } from "../../../../../../xds/type/matcher/v3/matcher";
import { RBAC as RBAC1 } from "../../../../../config/rbac/v3/rbac";

export const protobufPackage = "envoy.extensions.filters.http.rbac.v3";

/**
 * RBAC filter config.
 * [#next-free-field: 8]
 */
export interface RBAC {
  $type: "envoy.extensions.filters.http.rbac.v3.RBAC";
  /**
   * Specify the RBAC rules to be applied globally.
   * If absent, no enforcing RBAC policy will be applied.
   * If present and empty, DENY.
   * If both rules and matcher are configured, rules will be ignored.
   */
  rules?:
    | RBAC1
    | undefined;
  /**
   * If specified, rules will emit stats with the given prefix.
   * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
   * rules.
   */
  rules_stat_prefix?:
    | string
    | undefined;
  /**
   * The match tree to use when resolving RBAC action for incoming requests. Requests do not
   * match any matcher will be denied.
   * If absent, no enforcing RBAC matcher will be applied.
   * If present and empty, deny all requests.
   */
  matcher?:
    | Matcher
    | undefined;
  /**
   * Shadow rules are not enforced by the filter (i.e., returning a 403)
   * but will emit stats and logs and can be used for rule testing.
   * If absent, no shadow RBAC policy will be applied.
   * If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
   */
  shadow_rules?:
    | RBAC1
    | undefined;
  /**
   * The match tree to use for emitting stats and logs which can be used for rule testing for
   * incoming requests.
   * If absent, no shadow matcher will be applied.
   */
  shadow_matcher?:
    | Matcher
    | undefined;
  /**
   * If specified, shadow rules will emit stats with the given prefix.
   * This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
   * shadow rules.
   */
  shadow_rules_stat_prefix?:
    | string
    | undefined;
  /** If track_per_rule_stats is true, counters will be published for each rule and shadow rule. */
  track_per_rule_stats?: boolean | undefined;
}

export interface RBACPerRoute {
  $type: "envoy.extensions.filters.http.rbac.v3.RBACPerRoute";
  /**
   * Override the global configuration of the filter with this new config.
   * If absent, the global RBAC policy will be disabled for this route.
   */
  rbac?: RBAC | undefined;
}

function createBaseRBAC(): RBAC {
  return { $type: "envoy.extensions.filters.http.rbac.v3.RBAC" };
}

export const RBAC: MessageFns<RBAC, "envoy.extensions.filters.http.rbac.v3.RBAC"> = {
  $type: "envoy.extensions.filters.http.rbac.v3.RBAC" as const,

  encode(message: RBAC, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rules !== undefined) {
      RBAC1.encode(message.rules, writer.uint32(10).fork()).join();
    }
    if (message.rules_stat_prefix !== undefined && message.rules_stat_prefix !== "") {
      writer.uint32(50).string(message.rules_stat_prefix);
    }
    if (message.matcher !== undefined) {
      Matcher.encode(message.matcher, writer.uint32(34).fork()).join();
    }
    if (message.shadow_rules !== undefined) {
      RBAC1.encode(message.shadow_rules, writer.uint32(18).fork()).join();
    }
    if (message.shadow_matcher !== undefined) {
      Matcher.encode(message.shadow_matcher, writer.uint32(42).fork()).join();
    }
    if (message.shadow_rules_stat_prefix !== undefined && message.shadow_rules_stat_prefix !== "") {
      writer.uint32(26).string(message.shadow_rules_stat_prefix);
    }
    if (message.track_per_rule_stats !== undefined && message.track_per_rule_stats !== false) {
      writer.uint32(56).bool(message.track_per_rule_stats);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RBAC {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRBAC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rules = RBAC1.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rules_stat_prefix = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.matcher = Matcher.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shadow_rules = RBAC1.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.shadow_matcher = Matcher.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shadow_rules_stat_prefix = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.track_per_rule_stats = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RBAC {
    return {
      $type: RBAC.$type,
      rules: isSet(object.rules) ? RBAC1.fromJSON(object.rules) : undefined,
      rules_stat_prefix: isSet(object.rules_stat_prefix) ? globalThis.String(object.rules_stat_prefix) : undefined,
      matcher: isSet(object.matcher) ? Matcher.fromJSON(object.matcher) : undefined,
      shadow_rules: isSet(object.shadow_rules) ? RBAC1.fromJSON(object.shadow_rules) : undefined,
      shadow_matcher: isSet(object.shadow_matcher) ? Matcher.fromJSON(object.shadow_matcher) : undefined,
      shadow_rules_stat_prefix: isSet(object.shadow_rules_stat_prefix)
        ? globalThis.String(object.shadow_rules_stat_prefix)
        : undefined,
      track_per_rule_stats: isSet(object.track_per_rule_stats)
        ? globalThis.Boolean(object.track_per_rule_stats)
        : undefined,
    };
  },

  toJSON(message: RBAC): unknown {
    const obj: any = {};
    if (message.rules !== undefined) {
      obj.rules = RBAC1.toJSON(message.rules);
    }
    if (message.rules_stat_prefix !== undefined) {
      obj.rules_stat_prefix = message.rules_stat_prefix;
    }
    if (message.matcher !== undefined) {
      obj.matcher = Matcher.toJSON(message.matcher);
    }
    if (message.shadow_rules !== undefined) {
      obj.shadow_rules = RBAC1.toJSON(message.shadow_rules);
    }
    if (message.shadow_matcher !== undefined) {
      obj.shadow_matcher = Matcher.toJSON(message.shadow_matcher);
    }
    if (message.shadow_rules_stat_prefix !== undefined) {
      obj.shadow_rules_stat_prefix = message.shadow_rules_stat_prefix;
    }
    if (message.track_per_rule_stats !== undefined) {
      obj.track_per_rule_stats = message.track_per_rule_stats;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RBAC>, I>>(base?: I): RBAC {
    return RBAC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RBAC>, I>>(object: I): RBAC {
    const message = createBaseRBAC();
    message.rules = (object.rules !== undefined && object.rules !== null) ? RBAC1.fromPartial(object.rules) : undefined;
    message.rules_stat_prefix = object.rules_stat_prefix ?? undefined;
    message.matcher = (object.matcher !== undefined && object.matcher !== null)
      ? Matcher.fromPartial(object.matcher)
      : undefined;
    message.shadow_rules = (object.shadow_rules !== undefined && object.shadow_rules !== null)
      ? RBAC1.fromPartial(object.shadow_rules)
      : undefined;
    message.shadow_matcher = (object.shadow_matcher !== undefined && object.shadow_matcher !== null)
      ? Matcher.fromPartial(object.shadow_matcher)
      : undefined;
    message.shadow_rules_stat_prefix = object.shadow_rules_stat_prefix ?? undefined;
    message.track_per_rule_stats = object.track_per_rule_stats ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RBAC.$type, RBAC);

function createBaseRBACPerRoute(): RBACPerRoute {
  return { $type: "envoy.extensions.filters.http.rbac.v3.RBACPerRoute" };
}

export const RBACPerRoute: MessageFns<RBACPerRoute, "envoy.extensions.filters.http.rbac.v3.RBACPerRoute"> = {
  $type: "envoy.extensions.filters.http.rbac.v3.RBACPerRoute" as const,

  encode(message: RBACPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rbac !== undefined) {
      RBAC.encode(message.rbac, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RBACPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRBACPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rbac = RBAC.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RBACPerRoute {
    return { $type: RBACPerRoute.$type, rbac: isSet(object.rbac) ? RBAC.fromJSON(object.rbac) : undefined };
  },

  toJSON(message: RBACPerRoute): unknown {
    const obj: any = {};
    if (message.rbac !== undefined) {
      obj.rbac = RBAC.toJSON(message.rbac);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RBACPerRoute>, I>>(base?: I): RBACPerRoute {
    return RBACPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RBACPerRoute>, I>>(object: I): RBACPerRoute {
    const message = createBaseRBACPerRoute();
    message.rbac = (object.rbac !== undefined && object.rbac !== null) ? RBAC.fromPartial(object.rbac) : undefined;
    return message;
  },
};

messageTypeRegistry.set(RBACPerRoute.$type, RBACPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
