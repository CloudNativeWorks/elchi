// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DnsCacheConfig } from "../../../../common/dynamic_forward_proxy/v3/dns_cache";

export const protobufPackage = "envoy.extensions.filters.http.dynamic_forward_proxy.v3";

/**
 * Configuration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#extension: envoy.filters.http.dynamic_forward_proxy]
 */
export interface FilterConfig {
  $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig";
  implementation_specifier?:
    | //
    /**
     * The DNS cache configuration that the filter will attach to. Note this configuration must
     * match that of associated :ref:`dynamic forward proxy cluster configuration
     * <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
     */
    { $case: "dns_cache_config"; dns_cache_config: DnsCacheConfig }
    | //
    /**
     * The configuration that the filter will use, when the related dynamic forward proxy cluster enabled
     * sub clusters.
     */
    { $case: "sub_cluster_config"; sub_cluster_config: SubClusterConfig }
    | undefined;
  /**
   * When this flag is set, the filter will add the resolved upstream address in the filter
   * state. The state should be saved with key
   * ``envoy.stream.upstream_address`` (See
   * :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
   */
  save_upstream_address?: boolean | undefined;
}

/** Per route Configuration for the dynamic forward proxy HTTP filter. */
export interface PerRouteConfig {
  $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig";
  host_rewrite_specifier?:
    | //
    /**
     * Indicates that before DNS lookup, the host header will be swapped with
     * this value. If not set or empty, the original host header value
     * will be used and no rewrite will happen.
     *
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
     * value set here would be used for DNS lookups whereas the value set in the HCM would be used
     * for host header forwarding which is not the desired outcome.
     */
    { $case: "host_rewrite_literal"; host_rewrite_literal: string }
    | //
    /**
     * Indicates that before DNS lookup, the host header will be swapped with
     * the value of this header. If not set or empty, the original host header
     * value will be used and no rewrite will happen.
     *
     * Note: this rewrite affects both DNS lookup and host header forwarding. However, this
     * option shouldn't be used with
     * :ref:`HCM host rewrite header <envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>`
     * given that the value set here would be used for DNS lookups whereas the value set in the HCM
     * would be used for host header forwarding which is not the desired outcome.
     *
     * .. note::
     *
     *   If the header appears multiple times only the first value is used.
     */
    { $case: "host_rewrite_header"; host_rewrite_header: string }
    | undefined;
}

export interface SubClusterConfig {
  $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig";
  /** The timeout used for sub cluster initialization. Defaults to 5s if not set. */
  cluster_init_timeout?: Duration | undefined;
}

function createBaseFilterConfig(): FilterConfig {
  return {
    $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig",
    implementation_specifier: undefined,
  };
}

export const FilterConfig: MessageFns<
  FilterConfig,
  "envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig"
> = {
  $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig" as const,

  encode(message: FilterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.implementation_specifier?.$case) {
      case "dns_cache_config":
        DnsCacheConfig.encode(message.implementation_specifier.dns_cache_config, writer.uint32(10).fork()).join();
        break;
      case "sub_cluster_config":
        SubClusterConfig.encode(message.implementation_specifier.sub_cluster_config, writer.uint32(26).fork()).join();
        break;
    }
    if (message.save_upstream_address !== undefined && message.save_upstream_address !== false) {
      writer.uint32(16).bool(message.save_upstream_address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.implementation_specifier = {
            $case: "dns_cache_config",
            dns_cache_config: DnsCacheConfig.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.implementation_specifier = {
            $case: "sub_cluster_config",
            sub_cluster_config: SubClusterConfig.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.save_upstream_address = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterConfig {
    return {
      $type: FilterConfig.$type,
      implementation_specifier: isSet(object.dns_cache_config)
        ? { $case: "dns_cache_config", dns_cache_config: DnsCacheConfig.fromJSON(object.dns_cache_config) }
        : isSet(object.sub_cluster_config)
        ? { $case: "sub_cluster_config", sub_cluster_config: SubClusterConfig.fromJSON(object.sub_cluster_config) }
        : undefined,
      save_upstream_address: isSet(object.save_upstream_address)
        ? globalThis.Boolean(object.save_upstream_address)
        : undefined,
    };
  },

  toJSON(message: FilterConfig): unknown {
    const obj: any = {};
    if (message.implementation_specifier?.$case === "dns_cache_config") {
      obj.dns_cache_config = DnsCacheConfig.toJSON(message.implementation_specifier.dns_cache_config);
    }
    if (message.implementation_specifier?.$case === "sub_cluster_config") {
      obj.sub_cluster_config = SubClusterConfig.toJSON(message.implementation_specifier.sub_cluster_config);
    }
    if (message.save_upstream_address !== undefined) {
      obj.save_upstream_address = message.save_upstream_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterConfig>, I>>(base?: I): FilterConfig {
    return FilterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterConfig>, I>>(object: I): FilterConfig {
    const message = createBaseFilterConfig();
    if (
      object.implementation_specifier?.$case === "dns_cache_config" &&
      object.implementation_specifier?.dns_cache_config !== undefined &&
      object.implementation_specifier?.dns_cache_config !== null
    ) {
      message.implementation_specifier = {
        $case: "dns_cache_config",
        dns_cache_config: DnsCacheConfig.fromPartial(object.implementation_specifier.dns_cache_config),
      };
    }
    if (
      object.implementation_specifier?.$case === "sub_cluster_config" &&
      object.implementation_specifier?.sub_cluster_config !== undefined &&
      object.implementation_specifier?.sub_cluster_config !== null
    ) {
      message.implementation_specifier = {
        $case: "sub_cluster_config",
        sub_cluster_config: SubClusterConfig.fromPartial(object.implementation_specifier.sub_cluster_config),
      };
    }
    message.save_upstream_address = object.save_upstream_address ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterConfig.$type, FilterConfig);

function createBasePerRouteConfig(): PerRouteConfig {
  return {
    $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig",
    host_rewrite_specifier: undefined,
  };
}

export const PerRouteConfig: MessageFns<
  PerRouteConfig,
  "envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig"
> = {
  $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.PerRouteConfig" as const,

  encode(message: PerRouteConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.host_rewrite_specifier?.$case) {
      case "host_rewrite_literal":
        writer.uint32(10).string(message.host_rewrite_specifier.host_rewrite_literal);
        break;
      case "host_rewrite_header":
        writer.uint32(18).string(message.host_rewrite_specifier.host_rewrite_header);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PerRouteConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePerRouteConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.host_rewrite_specifier = { $case: "host_rewrite_literal", host_rewrite_literal: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.host_rewrite_specifier = { $case: "host_rewrite_header", host_rewrite_header: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PerRouteConfig {
    return {
      $type: PerRouteConfig.$type,
      host_rewrite_specifier: isSet(object.host_rewrite_literal)
        ? { $case: "host_rewrite_literal", host_rewrite_literal: globalThis.String(object.host_rewrite_literal) }
        : isSet(object.host_rewrite_header)
        ? { $case: "host_rewrite_header", host_rewrite_header: globalThis.String(object.host_rewrite_header) }
        : undefined,
    };
  },

  toJSON(message: PerRouteConfig): unknown {
    const obj: any = {};
    if (message.host_rewrite_specifier?.$case === "host_rewrite_literal") {
      obj.host_rewrite_literal = message.host_rewrite_specifier.host_rewrite_literal;
    }
    if (message.host_rewrite_specifier?.$case === "host_rewrite_header") {
      obj.host_rewrite_header = message.host_rewrite_specifier.host_rewrite_header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PerRouteConfig>, I>>(base?: I): PerRouteConfig {
    return PerRouteConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PerRouteConfig>, I>>(object: I): PerRouteConfig {
    const message = createBasePerRouteConfig();
    if (
      object.host_rewrite_specifier?.$case === "host_rewrite_literal" &&
      object.host_rewrite_specifier?.host_rewrite_literal !== undefined &&
      object.host_rewrite_specifier?.host_rewrite_literal !== null
    ) {
      message.host_rewrite_specifier = {
        $case: "host_rewrite_literal",
        host_rewrite_literal: object.host_rewrite_specifier.host_rewrite_literal,
      };
    }
    if (
      object.host_rewrite_specifier?.$case === "host_rewrite_header" &&
      object.host_rewrite_specifier?.host_rewrite_header !== undefined &&
      object.host_rewrite_specifier?.host_rewrite_header !== null
    ) {
      message.host_rewrite_specifier = {
        $case: "host_rewrite_header",
        host_rewrite_header: object.host_rewrite_specifier.host_rewrite_header,
      };
    }
    return message;
  },
};

messageTypeRegistry.set(PerRouteConfig.$type, PerRouteConfig);

function createBaseSubClusterConfig(): SubClusterConfig {
  return { $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig" };
}

export const SubClusterConfig: MessageFns<
  SubClusterConfig,
  "envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig"
> = {
  $type: "envoy.extensions.filters.http.dynamic_forward_proxy.v3.SubClusterConfig" as const,

  encode(message: SubClusterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster_init_timeout !== undefined) {
      Duration.encode(message.cluster_init_timeout, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubClusterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubClusterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cluster_init_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubClusterConfig {
    return {
      $type: SubClusterConfig.$type,
      cluster_init_timeout: isSet(object.cluster_init_timeout)
        ? Duration.fromJSON(object.cluster_init_timeout)
        : undefined,
    };
  },

  toJSON(message: SubClusterConfig): unknown {
    const obj: any = {};
    if (message.cluster_init_timeout !== undefined) {
      obj.cluster_init_timeout = Duration.toJSON(message.cluster_init_timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubClusterConfig>, I>>(base?: I): SubClusterConfig {
    return SubClusterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubClusterConfig>, I>>(object: I): SubClusterConfig {
    const message = createBaseSubClusterConfig();
    message.cluster_init_timeout = (object.cluster_init_timeout !== undefined && object.cluster_init_timeout !== null)
      ? Duration.fromPartial(object.cluster_init_timeout)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SubClusterConfig.$type, SubClusterConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
