// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/common/dependency/v3/dependency.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.common.dependency.v3";

/** Dependency specification and string identifier. */
export interface Dependency {
  $type: "envoy.extensions.filters.common.dependency.v3.Dependency";
  /** The kind of dependency. */
  type?:
    | Dependency_DependencyType
    | undefined;
  /** The string identifier for the dependency. */
  name?: string | undefined;
}

export enum Dependency_DependencyType {
  HEADER = "HEADER",
  FILTER_STATE_KEY = "FILTER_STATE_KEY",
  DYNAMIC_METADATA = "DYNAMIC_METADATA",
}

export function dependency_DependencyTypeFromJSON(object: any): Dependency_DependencyType {
  switch (object) {
    case 0:
    case "HEADER":
      return Dependency_DependencyType.HEADER;
    case 1:
    case "FILTER_STATE_KEY":
      return Dependency_DependencyType.FILTER_STATE_KEY;
    case 2:
    case "DYNAMIC_METADATA":
      return Dependency_DependencyType.DYNAMIC_METADATA;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Dependency_DependencyType");
  }
}

export function dependency_DependencyTypeToJSON(object: Dependency_DependencyType): string {
  switch (object) {
    case Dependency_DependencyType.HEADER:
      return "HEADER";
    case Dependency_DependencyType.FILTER_STATE_KEY:
      return "FILTER_STATE_KEY";
    case Dependency_DependencyType.DYNAMIC_METADATA:
      return "DYNAMIC_METADATA";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Dependency_DependencyType");
  }
}

export function dependency_DependencyTypeToNumber(object: Dependency_DependencyType): number {
  switch (object) {
    case Dependency_DependencyType.HEADER:
      return 0;
    case Dependency_DependencyType.FILTER_STATE_KEY:
      return 1;
    case Dependency_DependencyType.DYNAMIC_METADATA:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Dependency_DependencyType");
  }
}

/**
 * Dependency specification for a filter. For a filter chain to be valid, any
 * dependency that is required must be provided by an earlier filter.
 */
export interface FilterDependencies {
  $type: "envoy.extensions.filters.common.dependency.v3.FilterDependencies";
  /** A list of dependencies required on the decode path. */
  decode_required?:
    | Dependency[]
    | undefined;
  /** A list of dependencies provided on the encode path. */
  decode_provided?:
    | Dependency[]
    | undefined;
  /** A list of dependencies required on the decode path. */
  encode_required?:
    | Dependency[]
    | undefined;
  /** A list of dependencies provided on the encode path. */
  encode_provided?: Dependency[] | undefined;
}

/**
 * Matching requirements for a filter. For a match tree to be used with a filter, the match
 * requirements must be satisfied.
 *
 * This protobuf is provided by the filter implementation as a way to communicate the matching
 * requirements to the filter factories, allowing for config rejection if the requirements are
 * not satisfied.
 */
export interface MatchingRequirements {
  $type: "envoy.extensions.filters.common.dependency.v3.MatchingRequirements";
  data_input_allow_list?: MatchingRequirements_DataInputAllowList | undefined;
}

export interface MatchingRequirements_DataInputAllowList {
  $type: "envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList";
  /** An explicit list of data inputs that are allowed to be used with this filter. */
  type_url?: string[] | undefined;
}

function createBaseDependency(): Dependency {
  return { $type: "envoy.extensions.filters.common.dependency.v3.Dependency" };
}

export const Dependency: MessageFns<Dependency, "envoy.extensions.filters.common.dependency.v3.Dependency"> = {
  $type: "envoy.extensions.filters.common.dependency.v3.Dependency" as const,

  encode(message: Dependency, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== Dependency_DependencyType.HEADER) {
      writer.uint32(8).int32(dependency_DependencyTypeToNumber(message.type));
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dependency {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = dependency_DependencyTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dependency {
    return {
      $type: Dependency.$type,
      type: isSet(object.type) ? dependency_DependencyTypeFromJSON(object.type) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: Dependency): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = dependency_DependencyTypeToJSON(message.type);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Dependency>, I>>(base?: I): Dependency {
    return Dependency.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Dependency>, I>>(object: I): Dependency {
    const message = createBaseDependency();
    message.type = object.type ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Dependency.$type, Dependency);

function createBaseFilterDependencies(): FilterDependencies {
  return { $type: "envoy.extensions.filters.common.dependency.v3.FilterDependencies" };
}

export const FilterDependencies: MessageFns<
  FilterDependencies,
  "envoy.extensions.filters.common.dependency.v3.FilterDependencies"
> = {
  $type: "envoy.extensions.filters.common.dependency.v3.FilterDependencies" as const,

  encode(message: FilterDependencies, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.decode_required !== undefined && message.decode_required.length !== 0) {
      for (const v of message.decode_required) {
        Dependency.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.decode_provided !== undefined && message.decode_provided.length !== 0) {
      for (const v of message.decode_provided) {
        Dependency.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.encode_required !== undefined && message.encode_required.length !== 0) {
      for (const v of message.encode_required) {
        Dependency.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.encode_provided !== undefined && message.encode_provided.length !== 0) {
      for (const v of message.encode_provided) {
        Dependency.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterDependencies {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterDependencies();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.decode_required === undefined) {
            message.decode_required = [];
          }
          const el = Dependency.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.decode_required!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.decode_provided === undefined) {
            message.decode_provided = [];
          }
          const el = Dependency.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.decode_provided!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.encode_required === undefined) {
            message.encode_required = [];
          }
          const el = Dependency.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.encode_required!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.encode_provided === undefined) {
            message.encode_provided = [];
          }
          const el = Dependency.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.encode_provided!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterDependencies {
    return {
      $type: FilterDependencies.$type,
      decode_required: globalThis.Array.isArray(object?.decode_required)
        ? object.decode_required.map((e: any) => Dependency.fromJSON(e))
        : undefined,
      decode_provided: globalThis.Array.isArray(object?.decode_provided)
        ? object.decode_provided.map((e: any) => Dependency.fromJSON(e))
        : undefined,
      encode_required: globalThis.Array.isArray(object?.encode_required)
        ? object.encode_required.map((e: any) => Dependency.fromJSON(e))
        : undefined,
      encode_provided: globalThis.Array.isArray(object?.encode_provided)
        ? object.encode_provided.map((e: any) => Dependency.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: FilterDependencies): unknown {
    const obj: any = {};
    if (message.decode_required?.length) {
      obj.decode_required = message.decode_required.map((e) => Dependency.toJSON(e));
    }
    if (message.decode_provided?.length) {
      obj.decode_provided = message.decode_provided.map((e) => Dependency.toJSON(e));
    }
    if (message.encode_required?.length) {
      obj.encode_required = message.encode_required.map((e) => Dependency.toJSON(e));
    }
    if (message.encode_provided?.length) {
      obj.encode_provided = message.encode_provided.map((e) => Dependency.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterDependencies>, I>>(base?: I): FilterDependencies {
    return FilterDependencies.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterDependencies>, I>>(object: I): FilterDependencies {
    const message = createBaseFilterDependencies();
    message.decode_required = object.decode_required?.map((e) => Dependency.fromPartial(e)) || undefined;
    message.decode_provided = object.decode_provided?.map((e) => Dependency.fromPartial(e)) || undefined;
    message.encode_required = object.encode_required?.map((e) => Dependency.fromPartial(e)) || undefined;
    message.encode_provided = object.encode_provided?.map((e) => Dependency.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterDependencies.$type, FilterDependencies);

function createBaseMatchingRequirements(): MatchingRequirements {
  return { $type: "envoy.extensions.filters.common.dependency.v3.MatchingRequirements" };
}

export const MatchingRequirements: MessageFns<
  MatchingRequirements,
  "envoy.extensions.filters.common.dependency.v3.MatchingRequirements"
> = {
  $type: "envoy.extensions.filters.common.dependency.v3.MatchingRequirements" as const,

  encode(message: MatchingRequirements, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data_input_allow_list !== undefined) {
      MatchingRequirements_DataInputAllowList.encode(message.data_input_allow_list, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatchingRequirements {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatchingRequirements();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data_input_allow_list = MatchingRequirements_DataInputAllowList.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatchingRequirements {
    return {
      $type: MatchingRequirements.$type,
      data_input_allow_list: isSet(object.data_input_allow_list)
        ? MatchingRequirements_DataInputAllowList.fromJSON(object.data_input_allow_list)
        : undefined,
    };
  },

  toJSON(message: MatchingRequirements): unknown {
    const obj: any = {};
    if (message.data_input_allow_list !== undefined) {
      obj.data_input_allow_list = MatchingRequirements_DataInputAllowList.toJSON(message.data_input_allow_list);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MatchingRequirements>, I>>(base?: I): MatchingRequirements {
    return MatchingRequirements.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MatchingRequirements>, I>>(object: I): MatchingRequirements {
    const message = createBaseMatchingRequirements();
    message.data_input_allow_list =
      (object.data_input_allow_list !== undefined && object.data_input_allow_list !== null)
        ? MatchingRequirements_DataInputAllowList.fromPartial(object.data_input_allow_list)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(MatchingRequirements.$type, MatchingRequirements);

function createBaseMatchingRequirements_DataInputAllowList(): MatchingRequirements_DataInputAllowList {
  return { $type: "envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList" };
}

export const MatchingRequirements_DataInputAllowList: MessageFns<
  MatchingRequirements_DataInputAllowList,
  "envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList"
> = {
  $type: "envoy.extensions.filters.common.dependency.v3.MatchingRequirements.DataInputAllowList" as const,

  encode(message: MatchingRequirements_DataInputAllowList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type_url !== undefined && message.type_url.length !== 0) {
      for (const v of message.type_url) {
        writer.uint32(10).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatchingRequirements_DataInputAllowList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatchingRequirements_DataInputAllowList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.type_url === undefined) {
            message.type_url = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.type_url!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatchingRequirements_DataInputAllowList {
    return {
      $type: MatchingRequirements_DataInputAllowList.$type,
      type_url: globalThis.Array.isArray(object?.type_url)
        ? object.type_url.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: MatchingRequirements_DataInputAllowList): unknown {
    const obj: any = {};
    if (message.type_url?.length) {
      obj.type_url = message.type_url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MatchingRequirements_DataInputAllowList>, I>>(
    base?: I,
  ): MatchingRequirements_DataInputAllowList {
    return MatchingRequirements_DataInputAllowList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MatchingRequirements_DataInputAllowList>, I>>(
    object: I,
  ): MatchingRequirements_DataInputAllowList {
    const message = createBaseMatchingRequirements_DataInputAllowList();
    message.type_url = object.type_url?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(MatchingRequirements_DataInputAllowList.$type, MatchingRequirements_DataInputAllowList);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
