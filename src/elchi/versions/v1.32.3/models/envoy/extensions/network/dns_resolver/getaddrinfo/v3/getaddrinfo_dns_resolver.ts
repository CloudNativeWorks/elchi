// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/network/dns_resolver/getaddrinfo/v3/getaddrinfo_dns_resolver.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.network.dns_resolver.getaddrinfo.v3";

/**
 * Configuration for getaddrinfo DNS resolver. This resolver will use the system's getaddrinfo()
 * function to resolve hosts.
 *
 * .. attention::
 *
 *   This resolver uses a single background thread to do resolutions. As such, it is not currently
 *   advised for use in situations requiring a high resolution rate. A thread pool can be added
 *   in the future if needed.
 *
 * .. attention::
 *
 *   Resolutions currently use a hard coded TTL of 60s because the getaddrinfo() API does not
 *   provide the actual TTL. Configuration for this can be added in the future if needed.
 */
export interface GetAddrInfoDnsResolverConfig {
  $type: "envoy.extensions.network.dns_resolver.getaddrinfo.v3.GetAddrInfoDnsResolverConfig";
  /**
   * Specifies the number of retries before the resolver gives up. If not specified, the resolver will
   * retry indefinitely until it succeeds or the DNS query times out.
   */
  num_retries?: number | undefined;
}

function createBaseGetAddrInfoDnsResolverConfig(): GetAddrInfoDnsResolverConfig {
  return { $type: "envoy.extensions.network.dns_resolver.getaddrinfo.v3.GetAddrInfoDnsResolverConfig" };
}

export const GetAddrInfoDnsResolverConfig: MessageFns<
  GetAddrInfoDnsResolverConfig,
  "envoy.extensions.network.dns_resolver.getaddrinfo.v3.GetAddrInfoDnsResolverConfig"
> = {
  $type: "envoy.extensions.network.dns_resolver.getaddrinfo.v3.GetAddrInfoDnsResolverConfig" as const,

  encode(message: GetAddrInfoDnsResolverConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.num_retries !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.num_retries! },
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAddrInfoDnsResolverConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAddrInfoDnsResolverConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.num_retries = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAddrInfoDnsResolverConfig {
    return {
      $type: GetAddrInfoDnsResolverConfig.$type,
      num_retries: isSet(object.num_retries) ? Number(object.num_retries) : undefined,
    };
  },

  toJSON(message: GetAddrInfoDnsResolverConfig): unknown {
    const obj: any = {};
    if (message.num_retries !== undefined) {
      obj.num_retries = message.num_retries;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetAddrInfoDnsResolverConfig>, I>>(base?: I): GetAddrInfoDnsResolverConfig {
    return GetAddrInfoDnsResolverConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetAddrInfoDnsResolverConfig>, I>>(object: I): GetAddrInfoDnsResolverConfig {
    const message = createBaseGetAddrInfoDnsResolverConfig();
    message.num_retries = object.num_retries ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(GetAddrInfoDnsResolverConfig.$type, GetAddrInfoDnsResolverConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
