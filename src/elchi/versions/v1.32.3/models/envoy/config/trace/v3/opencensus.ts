// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v3/opencensus.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TraceConfig } from "../../../../opencensus/proto/trace/v1/trace_config";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { GrpcService } from "../../core/v3/grpc_service";

export const protobufPackage = "envoy.config.trace.v3";

/**
 * Configuration for the OpenCensus tracer.
 * [#next-free-field: 15]
 * [#extension: envoy.tracers.opencensus]
 */
export interface OpenCensusConfig {
  $type: "envoy.config.trace.v3.OpenCensusConfig";
  /**
   * Configures tracing, e.g. the sampler, max number of annotations, etc.
   *
   * @deprecated
   */
  trace_config?:
    | TraceConfig
    | undefined;
  /**
   * Enables the stdout exporter if set to true. This is intended for debugging
   * purposes.
   *
   * @deprecated
   */
  stdout_exporter_enabled?:
    | boolean
    | undefined;
  /**
   * Enables the Stackdriver exporter if set to true. The project_id must also
   * be set.
   *
   * @deprecated
   */
  stackdriver_exporter_enabled?:
    | boolean
    | undefined;
  /**
   * The Cloud project_id to use for Stackdriver tracing.
   *
   * @deprecated
   */
  stackdriver_project_id?:
    | string
    | undefined;
  /**
   * (optional) By default, the Stackdriver exporter will connect to production
   * Stackdriver. If stackdriver_address is non-empty, it will instead connect
   * to this address, which is in the gRPC format:
   * https://github.com/grpc/grpc/blob/master/doc/naming.md
   *
   * @deprecated
   */
  stackdriver_address?:
    | string
    | undefined;
  /**
   * (optional) The gRPC server that hosts Stackdriver tracing service. Only
   * Google gRPC is supported. If :ref:`target_uri <envoy_v3_api_field_config.core.v3.GrpcService.GoogleGrpc.target_uri>`
   * is not provided, the default production Stackdriver address will be used.
   *
   * @deprecated
   */
  stackdriver_grpc_service?:
    | GrpcService
    | undefined;
  /**
   * Enables the Zipkin exporter if set to true. The url and service name must
   * also be set. This is deprecated, prefer to use Envoy's :ref:`native Zipkin
   * tracer <envoy_v3_api_msg_config.trace.v3.ZipkinConfig>`.
   *
   * @deprecated
   */
  zipkin_exporter_enabled?:
    | boolean
    | undefined;
  /**
   * The URL to Zipkin, e.g. "http://127.0.0.1:9411/api/v2/spans". This is
   * deprecated, prefer to use Envoy's :ref:`native Zipkin tracer
   * <envoy_v3_api_msg_config.trace.v3.ZipkinConfig>`.
   *
   * @deprecated
   */
  zipkin_url?:
    | string
    | undefined;
  /**
   * Enables the OpenCensus Agent exporter if set to true. The ocagent_address or
   * ocagent_grpc_service must also be set.
   *
   * @deprecated
   */
  ocagent_exporter_enabled?:
    | boolean
    | undefined;
  /**
   * The address of the OpenCensus Agent, if its exporter is enabled, in gRPC
   * format: https://github.com/grpc/grpc/blob/master/doc/naming.md
   * [#comment:TODO: deprecate this field]
   *
   * @deprecated
   */
  ocagent_address?:
    | string
    | undefined;
  /**
   * (optional) The gRPC server hosted by the OpenCensus Agent. Only Google gRPC is supported.
   * This is only used if the ocagent_address is left empty.
   *
   * @deprecated
   */
  ocagent_grpc_service?:
    | GrpcService
    | undefined;
  /**
   * List of incoming trace context headers we will accept. First one found
   * wins.
   *
   * @deprecated
   */
  incoming_trace_context?:
    | OpenCensusConfig_TraceContext[]
    | undefined;
  /**
   * List of outgoing trace context headers we will produce.
   *
   * @deprecated
   */
  outgoing_trace_context?: OpenCensusConfig_TraceContext[] | undefined;
}

export enum OpenCensusConfig_TraceContext {
  /** NONE - No-op default, no trace context is utilized. */
  NONE = "NONE",
  /** TRACE_CONTEXT - W3C Trace-Context format "traceparent:" header. */
  TRACE_CONTEXT = "TRACE_CONTEXT",
  /** GRPC_TRACE_BIN - Binary "grpc-trace-bin:" header. */
  GRPC_TRACE_BIN = "GRPC_TRACE_BIN",
  /** CLOUD_TRACE_CONTEXT - "X-Cloud-Trace-Context:" header. */
  CLOUD_TRACE_CONTEXT = "CLOUD_TRACE_CONTEXT",
  /** B3 - X-B3-* headers. */
  B3 = "B3",
}

export function openCensusConfig_TraceContextFromJSON(object: any): OpenCensusConfig_TraceContext {
  switch (object) {
    case 0:
    case "NONE":
      return OpenCensusConfig_TraceContext.NONE;
    case 1:
    case "TRACE_CONTEXT":
      return OpenCensusConfig_TraceContext.TRACE_CONTEXT;
    case 2:
    case "GRPC_TRACE_BIN":
      return OpenCensusConfig_TraceContext.GRPC_TRACE_BIN;
    case 3:
    case "CLOUD_TRACE_CONTEXT":
      return OpenCensusConfig_TraceContext.CLOUD_TRACE_CONTEXT;
    case 4:
    case "B3":
      return OpenCensusConfig_TraceContext.B3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum OpenCensusConfig_TraceContext");
  }
}

export function openCensusConfig_TraceContextToJSON(object: OpenCensusConfig_TraceContext): string {
  switch (object) {
    case OpenCensusConfig_TraceContext.NONE:
      return "NONE";
    case OpenCensusConfig_TraceContext.TRACE_CONTEXT:
      return "TRACE_CONTEXT";
    case OpenCensusConfig_TraceContext.GRPC_TRACE_BIN:
      return "GRPC_TRACE_BIN";
    case OpenCensusConfig_TraceContext.CLOUD_TRACE_CONTEXT:
      return "CLOUD_TRACE_CONTEXT";
    case OpenCensusConfig_TraceContext.B3:
      return "B3";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum OpenCensusConfig_TraceContext");
  }
}

export function openCensusConfig_TraceContextToNumber(object: OpenCensusConfig_TraceContext): number {
  switch (object) {
    case OpenCensusConfig_TraceContext.NONE:
      return 0;
    case OpenCensusConfig_TraceContext.TRACE_CONTEXT:
      return 1;
    case OpenCensusConfig_TraceContext.GRPC_TRACE_BIN:
      return 2;
    case OpenCensusConfig_TraceContext.CLOUD_TRACE_CONTEXT:
      return 3;
    case OpenCensusConfig_TraceContext.B3:
      return 4;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum OpenCensusConfig_TraceContext");
  }
}

function createBaseOpenCensusConfig(): OpenCensusConfig {
  return { $type: "envoy.config.trace.v3.OpenCensusConfig" };
}

export const OpenCensusConfig: MessageFns<OpenCensusConfig, "envoy.config.trace.v3.OpenCensusConfig"> = {
  $type: "envoy.config.trace.v3.OpenCensusConfig" as const,

  encode(message: OpenCensusConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trace_config !== undefined) {
      TraceConfig.encode(message.trace_config, writer.uint32(10).fork()).join();
    }
    if (message.stdout_exporter_enabled !== undefined && message.stdout_exporter_enabled !== false) {
      writer.uint32(16).bool(message.stdout_exporter_enabled);
    }
    if (message.stackdriver_exporter_enabled !== undefined && message.stackdriver_exporter_enabled !== false) {
      writer.uint32(24).bool(message.stackdriver_exporter_enabled);
    }
    if (message.stackdriver_project_id !== undefined && message.stackdriver_project_id !== "") {
      writer.uint32(34).string(message.stackdriver_project_id);
    }
    if (message.stackdriver_address !== undefined && message.stackdriver_address !== "") {
      writer.uint32(82).string(message.stackdriver_address);
    }
    if (message.stackdriver_grpc_service !== undefined) {
      GrpcService.encode(message.stackdriver_grpc_service, writer.uint32(106).fork()).join();
    }
    if (message.zipkin_exporter_enabled !== undefined && message.zipkin_exporter_enabled !== false) {
      writer.uint32(40).bool(message.zipkin_exporter_enabled);
    }
    if (message.zipkin_url !== undefined && message.zipkin_url !== "") {
      writer.uint32(50).string(message.zipkin_url);
    }
    if (message.ocagent_exporter_enabled !== undefined && message.ocagent_exporter_enabled !== false) {
      writer.uint32(88).bool(message.ocagent_exporter_enabled);
    }
    if (message.ocagent_address !== undefined && message.ocagent_address !== "") {
      writer.uint32(98).string(message.ocagent_address);
    }
    if (message.ocagent_grpc_service !== undefined) {
      GrpcService.encode(message.ocagent_grpc_service, writer.uint32(114).fork()).join();
    }
    if (message.incoming_trace_context !== undefined && message.incoming_trace_context.length !== 0) {
      writer.uint32(66).fork();
      for (const v of message.incoming_trace_context) {
        writer.int32(openCensusConfig_TraceContextToNumber(v));
      }
      writer.join();
    }
    if (message.outgoing_trace_context !== undefined && message.outgoing_trace_context.length !== 0) {
      writer.uint32(74).fork();
      for (const v of message.outgoing_trace_context) {
        writer.int32(openCensusConfig_TraceContextToNumber(v));
      }
      writer.join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenCensusConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenCensusConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trace_config = TraceConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.stdout_exporter_enabled = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.stackdriver_exporter_enabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stackdriver_project_id = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.stackdriver_address = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.stackdriver_grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.zipkin_exporter_enabled = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.zipkin_url = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.ocagent_exporter_enabled = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.ocagent_address = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.ocagent_grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag === 64) {
            if (message.incoming_trace_context === undefined) {
              message.incoming_trace_context = [];
            }
            message.incoming_trace_context!.push(openCensusConfig_TraceContextFromJSON(reader.int32()));

            continue;
          }

          if (tag === 66) {
            if (message.incoming_trace_context === undefined) {
              message.incoming_trace_context = [];
            }
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.incoming_trace_context!.push(openCensusConfig_TraceContextFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
        case 9: {
          if (tag === 72) {
            if (message.outgoing_trace_context === undefined) {
              message.outgoing_trace_context = [];
            }
            message.outgoing_trace_context!.push(openCensusConfig_TraceContextFromJSON(reader.int32()));

            continue;
          }

          if (tag === 74) {
            if (message.outgoing_trace_context === undefined) {
              message.outgoing_trace_context = [];
            }
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.outgoing_trace_context!.push(openCensusConfig_TraceContextFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenCensusConfig {
    return {
      $type: OpenCensusConfig.$type,
      trace_config: isSet(object.trace_config) ? TraceConfig.fromJSON(object.trace_config) : undefined,
      stdout_exporter_enabled: isSet(object.stdout_exporter_enabled)
        ? globalThis.Boolean(object.stdout_exporter_enabled)
        : undefined,
      stackdriver_exporter_enabled: isSet(object.stackdriver_exporter_enabled)
        ? globalThis.Boolean(object.stackdriver_exporter_enabled)
        : undefined,
      stackdriver_project_id: isSet(object.stackdriver_project_id)
        ? globalThis.String(object.stackdriver_project_id)
        : undefined,
      stackdriver_address: isSet(object.stackdriver_address)
        ? globalThis.String(object.stackdriver_address)
        : undefined,
      stackdriver_grpc_service: isSet(object.stackdriver_grpc_service)
        ? GrpcService.fromJSON(object.stackdriver_grpc_service)
        : undefined,
      zipkin_exporter_enabled: isSet(object.zipkin_exporter_enabled)
        ? globalThis.Boolean(object.zipkin_exporter_enabled)
        : undefined,
      zipkin_url: isSet(object.zipkin_url) ? globalThis.String(object.zipkin_url) : undefined,
      ocagent_exporter_enabled: isSet(object.ocagent_exporter_enabled)
        ? globalThis.Boolean(object.ocagent_exporter_enabled)
        : undefined,
      ocagent_address: isSet(object.ocagent_address) ? globalThis.String(object.ocagent_address) : undefined,
      ocagent_grpc_service: isSet(object.ocagent_grpc_service)
        ? GrpcService.fromJSON(object.ocagent_grpc_service)
        : undefined,
      incoming_trace_context: globalThis.Array.isArray(object?.incoming_trace_context)
        ? object.incoming_trace_context.map((e: any) => openCensusConfig_TraceContextFromJSON(e))
        : undefined,
      outgoing_trace_context: globalThis.Array.isArray(object?.outgoing_trace_context)
        ? object.outgoing_trace_context.map((e: any) => openCensusConfig_TraceContextFromJSON(e))
        : undefined,
    };
  },

  toJSON(message: OpenCensusConfig): unknown {
    const obj: any = {};
    if (message.trace_config !== undefined) {
      obj.trace_config = TraceConfig.toJSON(message.trace_config);
    }
    if (message.stdout_exporter_enabled !== undefined) {
      obj.stdout_exporter_enabled = message.stdout_exporter_enabled;
    }
    if (message.stackdriver_exporter_enabled !== undefined) {
      obj.stackdriver_exporter_enabled = message.stackdriver_exporter_enabled;
    }
    if (message.stackdriver_project_id !== undefined) {
      obj.stackdriver_project_id = message.stackdriver_project_id;
    }
    if (message.stackdriver_address !== undefined) {
      obj.stackdriver_address = message.stackdriver_address;
    }
    if (message.stackdriver_grpc_service !== undefined) {
      obj.stackdriver_grpc_service = GrpcService.toJSON(message.stackdriver_grpc_service);
    }
    if (message.zipkin_exporter_enabled !== undefined) {
      obj.zipkin_exporter_enabled = message.zipkin_exporter_enabled;
    }
    if (message.zipkin_url !== undefined) {
      obj.zipkin_url = message.zipkin_url;
    }
    if (message.ocagent_exporter_enabled !== undefined) {
      obj.ocagent_exporter_enabled = message.ocagent_exporter_enabled;
    }
    if (message.ocagent_address !== undefined) {
      obj.ocagent_address = message.ocagent_address;
    }
    if (message.ocagent_grpc_service !== undefined) {
      obj.ocagent_grpc_service = GrpcService.toJSON(message.ocagent_grpc_service);
    }
    if (message.incoming_trace_context?.length) {
      obj.incoming_trace_context = message.incoming_trace_context.map((e) => openCensusConfig_TraceContextToJSON(e));
    }
    if (message.outgoing_trace_context?.length) {
      obj.outgoing_trace_context = message.outgoing_trace_context.map((e) => openCensusConfig_TraceContextToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenCensusConfig>, I>>(base?: I): OpenCensusConfig {
    return OpenCensusConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenCensusConfig>, I>>(object: I): OpenCensusConfig {
    const message = createBaseOpenCensusConfig();
    message.trace_config = (object.trace_config !== undefined && object.trace_config !== null)
      ? TraceConfig.fromPartial(object.trace_config)
      : undefined;
    message.stdout_exporter_enabled = object.stdout_exporter_enabled ?? undefined;
    message.stackdriver_exporter_enabled = object.stackdriver_exporter_enabled ?? undefined;
    message.stackdriver_project_id = object.stackdriver_project_id ?? undefined;
    message.stackdriver_address = object.stackdriver_address ?? undefined;
    message.stackdriver_grpc_service =
      (object.stackdriver_grpc_service !== undefined && object.stackdriver_grpc_service !== null)
        ? GrpcService.fromPartial(object.stackdriver_grpc_service)
        : undefined;
    message.zipkin_exporter_enabled = object.zipkin_exporter_enabled ?? undefined;
    message.zipkin_url = object.zipkin_url ?? undefined;
    message.ocagent_exporter_enabled = object.ocagent_exporter_enabled ?? undefined;
    message.ocagent_address = object.ocagent_address ?? undefined;
    message.ocagent_grpc_service = (object.ocagent_grpc_service !== undefined && object.ocagent_grpc_service !== null)
      ? GrpcService.fromPartial(object.ocagent_grpc_service)
      : undefined;
    message.incoming_trace_context = object.incoming_trace_context?.map((e) => e) || undefined;
    message.outgoing_trace_context = object.outgoing_trace_context?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(OpenCensusConfig.$type, OpenCensusConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
