// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/outlier_detection_monitors/consecutive_errors/v3/consecutive_errors.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { ErrorBuckets } from "../../common/v3/error_types";

export const protobufPackage = "envoy.extensions.outlier_detection_monitors.consecutive_errors.v3";

/**
 * Monitor which counts consecutive errors.
 * If number of consecutive errors exceeds the threshold, monitor will report that the host
 * is unhealthy.
 * [#not-implemented-hide:]
 */
export interface ConsecutiveErrors {
  $type: "envoy.extensions.outlier_detection_monitors.consecutive_errors.v3.ConsecutiveErrors";
  /** Monitor name. */
  name?:
    | string
    | undefined;
  /** The number of consecutive errors before ejection occurs. */
  threshold?:
    | number
    | undefined;
  /** The % chance that a host is actually ejected. Defaults to 100. */
  enforcing?:
    | number
    | undefined;
  /** Error buckets. */
  error_buckets?: ErrorBuckets | undefined;
}

function createBaseConsecutiveErrors(): ConsecutiveErrors {
  return { $type: "envoy.extensions.outlier_detection_monitors.consecutive_errors.v3.ConsecutiveErrors" };
}

export const ConsecutiveErrors: MessageFns<
  ConsecutiveErrors,
  "envoy.extensions.outlier_detection_monitors.consecutive_errors.v3.ConsecutiveErrors"
> = {
  $type: "envoy.extensions.outlier_detection_monitors.consecutive_errors.v3.ConsecutiveErrors" as const,

  encode(message: ConsecutiveErrors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.threshold !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.threshold! }, writer.uint32(18).fork())
        .join();
    }
    if (message.enforcing !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.enforcing! }, writer.uint32(26).fork())
        .join();
    }
    if (message.error_buckets !== undefined) {
      ErrorBuckets.encode(message.error_buckets, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConsecutiveErrors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConsecutiveErrors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.threshold = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.enforcing = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error_buckets = ErrorBuckets.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConsecutiveErrors {
    return {
      $type: ConsecutiveErrors.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      threshold: isSet(object.threshold) ? Number(object.threshold) : undefined,
      enforcing: isSet(object.enforcing) ? Number(object.enforcing) : undefined,
      error_buckets: isSet(object.error_buckets) ? ErrorBuckets.fromJSON(object.error_buckets) : undefined,
    };
  },

  toJSON(message: ConsecutiveErrors): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.threshold !== undefined) {
      obj.threshold = message.threshold;
    }
    if (message.enforcing !== undefined) {
      obj.enforcing = message.enforcing;
    }
    if (message.error_buckets !== undefined) {
      obj.error_buckets = ErrorBuckets.toJSON(message.error_buckets);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConsecutiveErrors>, I>>(base?: I): ConsecutiveErrors {
    return ConsecutiveErrors.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConsecutiveErrors>, I>>(object: I): ConsecutiveErrors {
    const message = createBaseConsecutiveErrors();
    message.name = object.name ?? undefined;
    message.threshold = object.threshold ?? undefined;
    message.enforcing = object.enforcing ?? undefined;
    message.error_buckets = (object.error_buckets !== undefined && object.error_buckets !== null)
      ? ErrorBuckets.fromPartial(object.error_buckets)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ConsecutiveErrors.$type, ConsecutiveErrors);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
