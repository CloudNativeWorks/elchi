// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/stat_sinks/graphite_statsd/v3/graphite_statsd.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt64Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { Address } from "../../../../config/core/v3/address";

export const protobufPackage = "envoy.extensions.stat_sinks.graphite_statsd.v3";

export interface GraphiteStatsdSink {
  $type: "envoy.extensions.stat_sinks.graphite_statsd.v3.GraphiteStatsdSink";
  statsd_specifier?:
    | //
    /**
     * The UDP address of a running Graphite-compliant listener. If specified,
     * statistics will be flushed to this address.
     */
    { $case: "address"; address: Address }
    | undefined;
  /**
   * Optional custom metric name prefix. See :ref:`StatsdSink's prefix field
   * <envoy_v3_api_field_config.metrics.v3.StatsdSink.prefix>` for more details.
   */
  prefix?:
    | string
    | undefined;
  /**
   * Optional max datagram size to use when sending UDP messages. By default Envoy
   * will emit one metric per datagram. By specifying a max-size larger than a single
   * metric, Envoy will emit multiple, new-line separated metrics. The max datagram
   * size should not exceed your network's MTU.
   *
   * Note that this value may not be respected if smaller than a single metric.
   */
  max_bytes_per_datagram?: number | undefined;
}

function createBaseGraphiteStatsdSink(): GraphiteStatsdSink {
  return { $type: "envoy.extensions.stat_sinks.graphite_statsd.v3.GraphiteStatsdSink", statsd_specifier: undefined };
}

export const GraphiteStatsdSink: MessageFns<
  GraphiteStatsdSink,
  "envoy.extensions.stat_sinks.graphite_statsd.v3.GraphiteStatsdSink"
> = {
  $type: "envoy.extensions.stat_sinks.graphite_statsd.v3.GraphiteStatsdSink" as const,

  encode(message: GraphiteStatsdSink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.statsd_specifier?.$case) {
      case "address":
        Address.encode(message.statsd_specifier.address, writer.uint32(10).fork()).join();
        break;
    }
    if (message.prefix !== undefined && message.prefix !== "") {
      writer.uint32(26).string(message.prefix);
    }
    if (message.max_bytes_per_datagram !== undefined) {
      UInt64Value.encode(
        { $type: "google.protobuf.UInt64Value", value: message.max_bytes_per_datagram! },
        writer.uint32(34).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GraphiteStatsdSink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGraphiteStatsdSink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.statsd_specifier = { $case: "address", address: Address.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.prefix = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.max_bytes_per_datagram = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GraphiteStatsdSink {
    return {
      $type: GraphiteStatsdSink.$type,
      statsd_specifier: isSet(object.address)
        ? { $case: "address", address: Address.fromJSON(object.address) }
        : undefined,
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : undefined,
      max_bytes_per_datagram: isSet(object.max_bytes_per_datagram) ? Number(object.max_bytes_per_datagram) : undefined,
    };
  },

  toJSON(message: GraphiteStatsdSink): unknown {
    const obj: any = {};
    if (message.statsd_specifier?.$case === "address") {
      obj.address = Address.toJSON(message.statsd_specifier.address);
    }
    if (message.prefix !== undefined) {
      obj.prefix = message.prefix;
    }
    if (message.max_bytes_per_datagram !== undefined) {
      obj.max_bytes_per_datagram = message.max_bytes_per_datagram;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GraphiteStatsdSink>, I>>(base?: I): GraphiteStatsdSink {
    return GraphiteStatsdSink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GraphiteStatsdSink>, I>>(object: I): GraphiteStatsdSink {
    const message = createBaseGraphiteStatsdSink();
    if (
      object.statsd_specifier?.$case === "address" &&
      object.statsd_specifier?.address !== undefined &&
      object.statsd_specifier?.address !== null
    ) {
      message.statsd_specifier = { $case: "address", address: Address.fromPartial(object.statsd_specifier.address) };
    }
    message.prefix = object.prefix ?? undefined;
    message.max_bytes_per_datagram = object.max_bytes_per_datagram ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(GraphiteStatsdSink.$type, GraphiteStatsdSink);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
