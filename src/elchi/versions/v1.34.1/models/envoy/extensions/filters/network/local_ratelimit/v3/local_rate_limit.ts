// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/local_ratelimit/v3/local_rate_limit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFeatureFlag } from "../../../../../config/core/v3/base";
import { TokenBucket } from "../../../../../type/v3/token_bucket";

export const protobufPackage = "envoy.extensions.filters.network.local_ratelimit.v3";

export interface LocalRateLimit {
  $type: "envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit";
  /**
   * The prefix to use when emitting :ref:`statistics
   * <config_network_filters_local_rate_limit_stats>`.
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * The token bucket configuration to use for rate limiting connections that are processed by the
   * filter's filter chain. Each incoming connection processed by the filter consumes a single
   * token. If the token is available, the connection will be allowed. If no tokens are available,
   * the connection will be immediately closed.
   *
   * .. note::
   *   In the current implementation each filter and filter chain has an independent rate limit, unless
   *   a shared rate limit is configured via :ref:`share_key <envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.share_key>`.
   *
   * .. note::
   *   In the current implementation the token bucket's :ref:`fill_interval
   *   <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
   *   refills.
   */
  token_bucket?:
    | TokenBucket
    | undefined;
  /**
   * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
   * to enabled.
   */
  runtime_enabled?:
    | RuntimeFeatureFlag
    | undefined;
  /**
   * Specifies that the token bucket used for rate limiting should be shared with other local_rate_limit filters
   * with a matching :ref:`token_bucket <envoy_v3_api_field_extensions.filters.network.local_ratelimit.v3.LocalRateLimit.token_bucket>`
   * and ``share_key`` configuration. All fields of ``token_bucket`` must match exactly for the token bucket to be shared. If this
   * field is empty, this filter will not share a token bucket with any other filter.
   */
  share_key?: string | undefined;
}

function createBaseLocalRateLimit(): LocalRateLimit {
  return { $type: "envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit" };
}

export const LocalRateLimit: MessageFns<
  LocalRateLimit,
  "envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit"
> = {
  $type: "envoy.extensions.filters.network.local_ratelimit.v3.LocalRateLimit" as const,

  encode(message: LocalRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.token_bucket !== undefined) {
      TokenBucket.encode(message.token_bucket, writer.uint32(18).fork()).join();
    }
    if (message.runtime_enabled !== undefined) {
      RuntimeFeatureFlag.encode(message.runtime_enabled, writer.uint32(26).fork()).join();
    }
    if (message.share_key !== undefined && message.share_key !== "") {
      writer.uint32(34).string(message.share_key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.token_bucket = TokenBucket.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.runtime_enabled = RuntimeFeatureFlag.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.share_key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalRateLimit {
    return {
      $type: LocalRateLimit.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      token_bucket: isSet(object.token_bucket) ? TokenBucket.fromJSON(object.token_bucket) : undefined,
      runtime_enabled: isSet(object.runtime_enabled) ? RuntimeFeatureFlag.fromJSON(object.runtime_enabled) : undefined,
      share_key: isSet(object.share_key) ? globalThis.String(object.share_key) : undefined,
    };
  },

  toJSON(message: LocalRateLimit): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.token_bucket !== undefined) {
      obj.token_bucket = TokenBucket.toJSON(message.token_bucket);
    }
    if (message.runtime_enabled !== undefined) {
      obj.runtime_enabled = RuntimeFeatureFlag.toJSON(message.runtime_enabled);
    }
    if (message.share_key !== undefined) {
      obj.share_key = message.share_key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalRateLimit>, I>>(base?: I): LocalRateLimit {
    return LocalRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalRateLimit>, I>>(object: I): LocalRateLimit {
    const message = createBaseLocalRateLimit();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.token_bucket = (object.token_bucket !== undefined && object.token_bucket !== null)
      ? TokenBucket.fromPartial(object.token_bucket)
      : undefined;
    message.runtime_enabled = (object.runtime_enabled !== undefined && object.runtime_enabled !== null)
      ? RuntimeFeatureFlag.fromPartial(object.runtime_enabled)
      : undefined;
    message.share_key = object.share_key ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LocalRateLimit.$type, LocalRateLimit);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
