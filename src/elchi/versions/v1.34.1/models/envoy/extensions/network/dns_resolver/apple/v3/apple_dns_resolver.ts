// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/network/dns_resolver/apple/v3/apple_dns_resolver.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.network.dns_resolver.apple.v3";

/** Configuration for apple DNS resolver. */
export interface AppleDnsResolverConfig {
  $type: "envoy.extensions.network.dns_resolver.apple.v3.AppleDnsResolverConfig";
  /**
   * The resolver will avoid the system's heuristics to only return
   * IPv4 or IPv6 addresses that it considers to be "routable", instead
   * returning all possible IPv4 or IPv6 addresses. This setting is
   * ignored if the DNS lookup family is set to v4-only or v6-only.
   * This should remain false in the vast majority of cases, but may be
   * useful when performing custom filtering of addresses, such as with
   * Happy Eyeballs.
   */
  include_unroutable_families?: boolean | undefined;
}

function createBaseAppleDnsResolverConfig(): AppleDnsResolverConfig {
  return { $type: "envoy.extensions.network.dns_resolver.apple.v3.AppleDnsResolverConfig" };
}

export const AppleDnsResolverConfig: MessageFns<
  AppleDnsResolverConfig,
  "envoy.extensions.network.dns_resolver.apple.v3.AppleDnsResolverConfig"
> = {
  $type: "envoy.extensions.network.dns_resolver.apple.v3.AppleDnsResolverConfig" as const,

  encode(message: AppleDnsResolverConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.include_unroutable_families !== undefined && message.include_unroutable_families !== false) {
      writer.uint32(8).bool(message.include_unroutable_families);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppleDnsResolverConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppleDnsResolverConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.include_unroutable_families = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppleDnsResolverConfig {
    return {
      $type: AppleDnsResolverConfig.$type,
      include_unroutable_families: isSet(object.include_unroutable_families)
        ? globalThis.Boolean(object.include_unroutable_families)
        : undefined,
    };
  },

  toJSON(message: AppleDnsResolverConfig): unknown {
    const obj: any = {};
    if (message.include_unroutable_families !== undefined) {
      obj.include_unroutable_families = message.include_unroutable_families;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AppleDnsResolverConfig>, I>>(base?: I): AppleDnsResolverConfig {
    return AppleDnsResolverConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AppleDnsResolverConfig>, I>>(object: I): AppleDnsResolverConfig {
    const message = createBaseAppleDnsResolverConfig();
    message.include_unroutable_families = object.include_unroutable_families ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(AppleDnsResolverConfig.$type, AppleDnsResolverConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
