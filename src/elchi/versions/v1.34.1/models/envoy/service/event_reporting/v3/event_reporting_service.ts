// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/event_reporting/v3/event_reporting_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Any } from "../../../../google/protobuf/any";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Node } from "../../../config/core/v3/base";

export const protobufPackage = "envoy.service.event_reporting.v3";

/**
 * [#not-implemented-hide:]
 * An events envoy sends to the management server.
 */
export interface StreamEventsRequest {
  $type: "envoy.service.event_reporting.v3.StreamEventsRequest";
  /**
   * Identifier data that will only be sent in the first message on the stream. This is effectively
   * structured metadata and is a performance optimization.
   */
  identifier?:
    | StreamEventsRequest_Identifier
    | undefined;
  /**
   * Batch of events. When the stream is already active, it will be the events occurred
   * since the last message had been sent. If the server receives unknown event type, it should
   * silently ignore it.
   *
   * The following events are supported:
   *
   * * :ref:`HealthCheckEvent <envoy_v3_api_msg_data.core.v3.HealthCheckEvent>`
   * * :ref:`OutlierDetectionEvent <envoy_v3_api_msg_data.cluster.v3.OutlierDetectionEvent>`
   */
  events?: Any[] | undefined;
}

export interface StreamEventsRequest_Identifier {
  $type: "envoy.service.event_reporting.v3.StreamEventsRequest.Identifier";
  /** The node sending the event messages over the stream. */
  node?: Node | undefined;
}

/**
 * [#not-implemented-hide:]
 * The management server may send envoy a StreamEventsResponse to tell which events the server
 * is interested in. In future, with aggregated event reporting service, this message will
 * contain, for example, clusters the envoy should send events for, or event types the server
 * wants to process.
 */
export interface StreamEventsResponse {
  $type: "envoy.service.event_reporting.v3.StreamEventsResponse";
}

function createBaseStreamEventsRequest(): StreamEventsRequest {
  return { $type: "envoy.service.event_reporting.v3.StreamEventsRequest" };
}

export const StreamEventsRequest: MessageFns<
  StreamEventsRequest,
  "envoy.service.event_reporting.v3.StreamEventsRequest"
> = {
  $type: "envoy.service.event_reporting.v3.StreamEventsRequest" as const,

  encode(message: StreamEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== undefined) {
      StreamEventsRequest_Identifier.encode(message.identifier, writer.uint32(10).fork()).join();
    }
    if (message.events !== undefined && message.events.length !== 0) {
      for (const v of message.events) {
        Any.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = StreamEventsRequest_Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.events === undefined) {
            message.events = [];
          }
          const el = Any.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.events!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamEventsRequest {
    return {
      $type: StreamEventsRequest.$type,
      identifier: isSet(object.identifier) ? StreamEventsRequest_Identifier.fromJSON(object.identifier) : undefined,
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Any.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: StreamEventsRequest): unknown {
    const obj: any = {};
    if (message.identifier !== undefined) {
      obj.identifier = StreamEventsRequest_Identifier.toJSON(message.identifier);
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Any.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamEventsRequest>, I>>(base?: I): StreamEventsRequest {
    return StreamEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamEventsRequest>, I>>(object: I): StreamEventsRequest {
    const message = createBaseStreamEventsRequest();
    message.identifier = (object.identifier !== undefined && object.identifier !== null)
      ? StreamEventsRequest_Identifier.fromPartial(object.identifier)
      : undefined;
    message.events = object.events?.map((e) => Any.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamEventsRequest.$type, StreamEventsRequest);

function createBaseStreamEventsRequest_Identifier(): StreamEventsRequest_Identifier {
  return { $type: "envoy.service.event_reporting.v3.StreamEventsRequest.Identifier" };
}

export const StreamEventsRequest_Identifier: MessageFns<
  StreamEventsRequest_Identifier,
  "envoy.service.event_reporting.v3.StreamEventsRequest.Identifier"
> = {
  $type: "envoy.service.event_reporting.v3.StreamEventsRequest.Identifier" as const,

  encode(message: StreamEventsRequest_Identifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      Node.encode(message.node, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamEventsRequest_Identifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamEventsRequest_Identifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = Node.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamEventsRequest_Identifier {
    return {
      $type: StreamEventsRequest_Identifier.$type,
      node: isSet(object.node) ? Node.fromJSON(object.node) : undefined,
    };
  },

  toJSON(message: StreamEventsRequest_Identifier): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = Node.toJSON(message.node);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamEventsRequest_Identifier>, I>>(base?: I): StreamEventsRequest_Identifier {
    return StreamEventsRequest_Identifier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamEventsRequest_Identifier>, I>>(
    object: I,
  ): StreamEventsRequest_Identifier {
    const message = createBaseStreamEventsRequest_Identifier();
    message.node = (object.node !== undefined && object.node !== null) ? Node.fromPartial(object.node) : undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamEventsRequest_Identifier.$type, StreamEventsRequest_Identifier);

function createBaseStreamEventsResponse(): StreamEventsResponse {
  return { $type: "envoy.service.event_reporting.v3.StreamEventsResponse" };
}

export const StreamEventsResponse: MessageFns<
  StreamEventsResponse,
  "envoy.service.event_reporting.v3.StreamEventsResponse"
> = {
  $type: "envoy.service.event_reporting.v3.StreamEventsResponse" as const,

  encode(_: StreamEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamEventsResponse {
    return { $type: StreamEventsResponse.$type };
  },

  toJSON(_: StreamEventsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamEventsResponse>, I>>(base?: I): StreamEventsResponse {
    return StreamEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamEventsResponse>, I>>(_: I): StreamEventsResponse {
    const message = createBaseStreamEventsResponse();
    return message;
  },
};

messageTypeRegistry.set(StreamEventsResponse.$type, StreamEventsResponse);

/**
 * [#not-implemented-hide:]
 * Service for streaming different types of events from Envoy to a server. The examples of
 * such events may be health check or outlier detection events.
 */
export interface EventReportingService {
  /**
   * Envoy will connect and send StreamEventsRequest messages forever.
   * The management server may send StreamEventsResponse to configure event stream. See below.
   * This API is designed for high throughput with the expectation that it might be lossy.
   */
  StreamEvents(request: Observable<StreamEventsRequest>): Observable<StreamEventsResponse>;
}

export const EventReportingServiceServiceName = "envoy.service.event_reporting.v3.EventReportingService";
export class EventReportingServiceClientImpl implements EventReportingService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || EventReportingServiceServiceName;
    this.rpc = rpc;
    this.StreamEvents = this.StreamEvents.bind(this);
  }
  StreamEvents(request: Observable<StreamEventsRequest>): Observable<StreamEventsResponse> {
    const data = request.pipe(map((request) => StreamEventsRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamEvents", data);
    return result.pipe(map((data) => StreamEventsResponse.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
