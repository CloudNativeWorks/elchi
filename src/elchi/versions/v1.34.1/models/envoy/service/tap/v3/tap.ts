// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/tap/v3/tap.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Node } from "../../../config/core/v3/base";
import { TraceWrapper } from "../../../data/tap/v3/wrapper";

export const protobufPackage = "envoy.service.tap.v3";

/**
 * [#not-implemented-hide:] Stream message for the Tap API. Envoy will open a stream to the server
 * and stream taps without ever expecting a response.
 */
export interface StreamTapsRequest {
  $type: "envoy.service.tap.v3.StreamTapsRequest";
  /**
   * Identifier data effectively is a structured metadata. As a performance optimization this will
   * only be sent in the first message on the stream.
   */
  identifier?:
    | StreamTapsRequest_Identifier
    | undefined;
  /**
   * The trace id. this can be used to merge together a streaming trace. Note that the trace_id
   * is not guaranteed to be spatially or temporally unique.
   */
  trace_id?:
    | number
    | undefined;
  /** The trace data. */
  trace?: TraceWrapper | undefined;
}

export interface StreamTapsRequest_Identifier {
  $type: "envoy.service.tap.v3.StreamTapsRequest.Identifier";
  /** The node sending taps over the stream. */
  node?:
    | Node
    | undefined;
  /**
   * The opaque identifier that was set in the :ref:`output config
   * <envoy_v3_api_field_config.tap.v3.StreamingGrpcSink.tap_id>`.
   */
  tap_id?: string | undefined;
}

/** [#not-implemented-hide:] */
export interface StreamTapsResponse {
  $type: "envoy.service.tap.v3.StreamTapsResponse";
}

function createBaseStreamTapsRequest(): StreamTapsRequest {
  return { $type: "envoy.service.tap.v3.StreamTapsRequest" };
}

export const StreamTapsRequest: MessageFns<StreamTapsRequest, "envoy.service.tap.v3.StreamTapsRequest"> = {
  $type: "envoy.service.tap.v3.StreamTapsRequest" as const,

  encode(message: StreamTapsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== undefined) {
      StreamTapsRequest_Identifier.encode(message.identifier, writer.uint32(10).fork()).join();
    }
    if (message.trace_id !== undefined && message.trace_id !== 0) {
      writer.uint32(16).uint64(message.trace_id);
    }
    if (message.trace !== undefined) {
      TraceWrapper.encode(message.trace, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTapsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTapsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = StreamTapsRequest_Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.trace_id = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.trace = TraceWrapper.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTapsRequest {
    return {
      $type: StreamTapsRequest.$type,
      identifier: isSet(object.identifier) ? StreamTapsRequest_Identifier.fromJSON(object.identifier) : undefined,
      trace_id: isSet(object.trace_id) ? globalThis.Number(object.trace_id) : undefined,
      trace: isSet(object.trace) ? TraceWrapper.fromJSON(object.trace) : undefined,
    };
  },

  toJSON(message: StreamTapsRequest): unknown {
    const obj: any = {};
    if (message.identifier !== undefined) {
      obj.identifier = StreamTapsRequest_Identifier.toJSON(message.identifier);
    }
    if (message.trace_id !== undefined) {
      obj.trace_id = Math.round(message.trace_id);
    }
    if (message.trace !== undefined) {
      obj.trace = TraceWrapper.toJSON(message.trace);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTapsRequest>, I>>(base?: I): StreamTapsRequest {
    return StreamTapsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTapsRequest>, I>>(object: I): StreamTapsRequest {
    const message = createBaseStreamTapsRequest();
    message.identifier = (object.identifier !== undefined && object.identifier !== null)
      ? StreamTapsRequest_Identifier.fromPartial(object.identifier)
      : undefined;
    message.trace_id = object.trace_id ?? undefined;
    message.trace = (object.trace !== undefined && object.trace !== null)
      ? TraceWrapper.fromPartial(object.trace)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamTapsRequest.$type, StreamTapsRequest);

function createBaseStreamTapsRequest_Identifier(): StreamTapsRequest_Identifier {
  return { $type: "envoy.service.tap.v3.StreamTapsRequest.Identifier" };
}

export const StreamTapsRequest_Identifier: MessageFns<
  StreamTapsRequest_Identifier,
  "envoy.service.tap.v3.StreamTapsRequest.Identifier"
> = {
  $type: "envoy.service.tap.v3.StreamTapsRequest.Identifier" as const,

  encode(message: StreamTapsRequest_Identifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      Node.encode(message.node, writer.uint32(10).fork()).join();
    }
    if (message.tap_id !== undefined && message.tap_id !== "") {
      writer.uint32(18).string(message.tap_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTapsRequest_Identifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTapsRequest_Identifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = Node.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tap_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTapsRequest_Identifier {
    return {
      $type: StreamTapsRequest_Identifier.$type,
      node: isSet(object.node) ? Node.fromJSON(object.node) : undefined,
      tap_id: isSet(object.tap_id) ? globalThis.String(object.tap_id) : undefined,
    };
  },

  toJSON(message: StreamTapsRequest_Identifier): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = Node.toJSON(message.node);
    }
    if (message.tap_id !== undefined) {
      obj.tap_id = message.tap_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTapsRequest_Identifier>, I>>(base?: I): StreamTapsRequest_Identifier {
    return StreamTapsRequest_Identifier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTapsRequest_Identifier>, I>>(object: I): StreamTapsRequest_Identifier {
    const message = createBaseStreamTapsRequest_Identifier();
    message.node = (object.node !== undefined && object.node !== null) ? Node.fromPartial(object.node) : undefined;
    message.tap_id = object.tap_id ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamTapsRequest_Identifier.$type, StreamTapsRequest_Identifier);

function createBaseStreamTapsResponse(): StreamTapsResponse {
  return { $type: "envoy.service.tap.v3.StreamTapsResponse" };
}

export const StreamTapsResponse: MessageFns<StreamTapsResponse, "envoy.service.tap.v3.StreamTapsResponse"> = {
  $type: "envoy.service.tap.v3.StreamTapsResponse" as const,

  encode(_: StreamTapsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTapsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTapsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamTapsResponse {
    return { $type: StreamTapsResponse.$type };
  },

  toJSON(_: StreamTapsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTapsResponse>, I>>(base?: I): StreamTapsResponse {
    return StreamTapsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTapsResponse>, I>>(_: I): StreamTapsResponse {
    const message = createBaseStreamTapsResponse();
    return message;
  },
};

messageTypeRegistry.set(StreamTapsResponse.$type, StreamTapsResponse);

/**
 * [#not-implemented-hide:] A tap service to receive incoming taps. Envoy will call
 * StreamTaps to deliver captured taps to the server
 */
export interface TapSinkService {
  /**
   * Envoy will connect and send StreamTapsRequest messages forever. It does not expect any
   * response to be sent as nothing would be done in the case of failure. The server should
   * disconnect if it expects Envoy to reconnect.
   */
  StreamTaps(request: Observable<StreamTapsRequest>): Promise<StreamTapsResponse>;
}

export const TapSinkServiceServiceName = "envoy.service.tap.v3.TapSinkService";
export class TapSinkServiceClientImpl implements TapSinkService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TapSinkServiceServiceName;
    this.rpc = rpc;
    this.StreamTaps = this.StreamTaps.bind(this);
  }
  StreamTaps(request: Observable<StreamTapsRequest>): Promise<StreamTapsResponse> {
    const data = request.pipe(map((request) => StreamTapsRequest.encode(request).finish()));
    const promise = this.rpc.clientStreamingRequest(this.service, "StreamTaps", data);
    return promise.then((data) => StreamTapsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
