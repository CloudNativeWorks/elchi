// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/dns/v2alpha/dns_table.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { StringMatcher } from "../../../type/matcher/string";

export const protobufPackage = "envoy.data.dns.v2alpha";

/**
 * This message contains the configuration for the DNS Filter if populated
 * from the control plane
 */
export interface DnsTable {
  $type: "envoy.data.dns.v2alpha.DnsTable";
  /**
   * Control how many times envoy makes an attempt to forward a query to
   * an external server
   */
  external_retry_count?:
    | number
    | undefined;
  /** Fully qualified domain names for which Envoy will respond to queries */
  virtual_domains?:
    | DnsTable_DnsVirtualDomain[]
    | undefined;
  /**
   * This field serves to help Envoy determine whether it can authoritatively
   * answer a query for a name matching a suffix in this list. If the query
   * name does not match a suffix in this list, Envoy will forward
   * the query to an upstream DNS server
   */
  known_suffixes?: StringMatcher[] | undefined;
}

/** This message contains a list of IP addresses returned for a query for a known name */
export interface DnsTable_AddressList {
  $type: "envoy.data.dns.v2alpha.DnsTable.AddressList";
  /**
   * This field contains a well formed IP address that is returned
   * in the answer for a name query. The address field can be an
   * IPv4 or IPv6 address. Address family detection is done automatically
   * when Envoy parses the string. Since this field is repeated,
   * Envoy will return one randomly chosen entry from this list in the
   * DNS response. The random index will vary per query so that we prevent
   * clients pinning on a single address for a configured domain
   */
  address?: string[] | undefined;
}

/**
 * This message type is extensible and can contain a list of addresses
 * or dictate some other method for resolving the addresses for an
 * endpoint
 */
export interface DnsTable_DnsEndpoint {
  $type: "envoy.data.dns.v2alpha.DnsTable.DnsEndpoint";
  endpoint_config?:
    | //
    { $case: "address_list"; address_list: DnsTable_AddressList }
    | undefined;
}

export interface DnsTable_DnsVirtualDomain {
  $type: "envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain";
  /** The domain name for which Envoy will respond to query requests */
  name?:
    | string
    | undefined;
  /**
   * The configuration containing the method to determine the address
   * of this endpoint
   */
  endpoint?:
    | DnsTable_DnsEndpoint
    | undefined;
  /** Sets the TTL in dns answers from Envoy returned to the client */
  answer_ttl?: Duration | undefined;
}

function createBaseDnsTable(): DnsTable {
  return { $type: "envoy.data.dns.v2alpha.DnsTable" };
}

export const DnsTable: MessageFns<DnsTable, "envoy.data.dns.v2alpha.DnsTable"> = {
  $type: "envoy.data.dns.v2alpha.DnsTable" as const,

  encode(message: DnsTable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.external_retry_count !== undefined && message.external_retry_count !== 0) {
      writer.uint32(8).uint32(message.external_retry_count);
    }
    if (message.virtual_domains !== undefined && message.virtual_domains.length !== 0) {
      for (const v of message.virtual_domains) {
        DnsTable_DnsVirtualDomain.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.known_suffixes !== undefined && message.known_suffixes.length !== 0) {
      for (const v of message.known_suffixes) {
        StringMatcher.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.external_retry_count = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.virtual_domains === undefined) {
            message.virtual_domains = [];
          }
          const el = DnsTable_DnsVirtualDomain.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.virtual_domains!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.known_suffixes === undefined) {
            message.known_suffixes = [];
          }
          const el = StringMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.known_suffixes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable {
    return {
      $type: DnsTable.$type,
      external_retry_count: isSet(object.external_retry_count)
        ? globalThis.Number(object.external_retry_count)
        : undefined,
      virtual_domains: globalThis.Array.isArray(object?.virtual_domains)
        ? object.virtual_domains.map((e: any) => DnsTable_DnsVirtualDomain.fromJSON(e))
        : undefined,
      known_suffixes: globalThis.Array.isArray(object?.known_suffixes)
        ? object.known_suffixes.map((e: any) => StringMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: DnsTable): unknown {
    const obj: any = {};
    if (message.external_retry_count !== undefined) {
      obj.external_retry_count = Math.round(message.external_retry_count);
    }
    if (message.virtual_domains?.length) {
      obj.virtual_domains = message.virtual_domains.map((e) => DnsTable_DnsVirtualDomain.toJSON(e));
    }
    if (message.known_suffixes?.length) {
      obj.known_suffixes = message.known_suffixes.map((e) => StringMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable>, I>>(base?: I): DnsTable {
    return DnsTable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable>, I>>(object: I): DnsTable {
    const message = createBaseDnsTable();
    message.external_retry_count = object.external_retry_count ?? undefined;
    message.virtual_domains = object.virtual_domains?.map((e) => DnsTable_DnsVirtualDomain.fromPartial(e)) || undefined;
    message.known_suffixes = object.known_suffixes?.map((e) => StringMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable.$type, DnsTable);

function createBaseDnsTable_AddressList(): DnsTable_AddressList {
  return { $type: "envoy.data.dns.v2alpha.DnsTable.AddressList" };
}

export const DnsTable_AddressList: MessageFns<DnsTable_AddressList, "envoy.data.dns.v2alpha.DnsTable.AddressList"> = {
  $type: "envoy.data.dns.v2alpha.DnsTable.AddressList" as const,

  encode(message: DnsTable_AddressList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined && message.address.length !== 0) {
      for (const v of message.address) {
        writer.uint32(10).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_AddressList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_AddressList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.address === undefined) {
            message.address = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.address!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_AddressList {
    return {
      $type: DnsTable_AddressList.$type,
      address: globalThis.Array.isArray(object?.address)
        ? object.address.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: DnsTable_AddressList): unknown {
    const obj: any = {};
    if (message.address?.length) {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_AddressList>, I>>(base?: I): DnsTable_AddressList {
    return DnsTable_AddressList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_AddressList>, I>>(object: I): DnsTable_AddressList {
    const message = createBaseDnsTable_AddressList();
    message.address = object.address?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable_AddressList.$type, DnsTable_AddressList);

function createBaseDnsTable_DnsEndpoint(): DnsTable_DnsEndpoint {
  return { $type: "envoy.data.dns.v2alpha.DnsTable.DnsEndpoint", endpoint_config: undefined };
}

export const DnsTable_DnsEndpoint: MessageFns<DnsTable_DnsEndpoint, "envoy.data.dns.v2alpha.DnsTable.DnsEndpoint"> = {
  $type: "envoy.data.dns.v2alpha.DnsTable.DnsEndpoint" as const,

  encode(message: DnsTable_DnsEndpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.endpoint_config?.$case) {
      case "address_list":
        DnsTable_AddressList.encode(message.endpoint_config.address_list, writer.uint32(10).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsEndpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_DnsEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpoint_config = {
            $case: "address_list",
            address_list: DnsTable_AddressList.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_DnsEndpoint {
    return {
      $type: DnsTable_DnsEndpoint.$type,
      endpoint_config: isSet(object.address_list)
        ? { $case: "address_list", address_list: DnsTable_AddressList.fromJSON(object.address_list) }
        : undefined,
    };
  },

  toJSON(message: DnsTable_DnsEndpoint): unknown {
    const obj: any = {};
    if (message.endpoint_config?.$case === "address_list") {
      obj.address_list = DnsTable_AddressList.toJSON(message.endpoint_config.address_list);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_DnsEndpoint>, I>>(base?: I): DnsTable_DnsEndpoint {
    return DnsTable_DnsEndpoint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_DnsEndpoint>, I>>(object: I): DnsTable_DnsEndpoint {
    const message = createBaseDnsTable_DnsEndpoint();
    if (
      object.endpoint_config?.$case === "address_list" &&
      object.endpoint_config?.address_list !== undefined &&
      object.endpoint_config?.address_list !== null
    ) {
      message.endpoint_config = {
        $case: "address_list",
        address_list: DnsTable_AddressList.fromPartial(object.endpoint_config.address_list),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(DnsTable_DnsEndpoint.$type, DnsTable_DnsEndpoint);

function createBaseDnsTable_DnsVirtualDomain(): DnsTable_DnsVirtualDomain {
  return { $type: "envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain" };
}

export const DnsTable_DnsVirtualDomain: MessageFns<
  DnsTable_DnsVirtualDomain,
  "envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain"
> = {
  $type: "envoy.data.dns.v2alpha.DnsTable.DnsVirtualDomain" as const,

  encode(message: DnsTable_DnsVirtualDomain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.endpoint !== undefined) {
      DnsTable_DnsEndpoint.encode(message.endpoint, writer.uint32(18).fork()).join();
    }
    if (message.answer_ttl !== undefined) {
      Duration.encode(message.answer_ttl, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsVirtualDomain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_DnsVirtualDomain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpoint = DnsTable_DnsEndpoint.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.answer_ttl = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_DnsVirtualDomain {
    return {
      $type: DnsTable_DnsVirtualDomain.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      endpoint: isSet(object.endpoint) ? DnsTable_DnsEndpoint.fromJSON(object.endpoint) : undefined,
      answer_ttl: isSet(object.answer_ttl) ? Duration.fromJSON(object.answer_ttl) : undefined,
    };
  },

  toJSON(message: DnsTable_DnsVirtualDomain): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.endpoint !== undefined) {
      obj.endpoint = DnsTable_DnsEndpoint.toJSON(message.endpoint);
    }
    if (message.answer_ttl !== undefined) {
      obj.answer_ttl = Duration.toJSON(message.answer_ttl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_DnsVirtualDomain>, I>>(base?: I): DnsTable_DnsVirtualDomain {
    return DnsTable_DnsVirtualDomain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_DnsVirtualDomain>, I>>(object: I): DnsTable_DnsVirtualDomain {
    const message = createBaseDnsTable_DnsVirtualDomain();
    message.name = object.name ?? undefined;
    message.endpoint = (object.endpoint !== undefined && object.endpoint !== null)
      ? DnsTable_DnsEndpoint.fromPartial(object.endpoint)
      : undefined;
    message.answer_ttl = (object.answer_ttl !== undefined && object.answer_ttl !== null)
      ? Duration.fromPartial(object.answer_ttl)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable_DnsVirtualDomain.$type, DnsTable_DnsVirtualDomain);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
