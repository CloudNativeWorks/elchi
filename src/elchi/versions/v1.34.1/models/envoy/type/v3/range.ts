// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/v3/range.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.type.v3";

/**
 * Specifies the int64 start and end of the range using half-open interval semantics [start,
 * end).
 */
export interface Int64Range {
  $type: "envoy.type.v3.Int64Range";
  /** start of the range (inclusive) */
  start?:
    | number
    | undefined;
  /** end of the range (exclusive) */
  end?: number | undefined;
}

/**
 * Specifies the int32 start and end of the range using half-open interval semantics [start,
 * end).
 */
export interface Int32Range {
  $type: "envoy.type.v3.Int32Range";
  /** start of the range (inclusive) */
  start?:
    | number
    | undefined;
  /** end of the range (exclusive) */
  end?: number | undefined;
}

/**
 * Specifies the double start and end of the range using half-open interval semantics [start,
 * end).
 */
export interface DoubleRange {
  $type: "envoy.type.v3.DoubleRange";
  /** start of the range (inclusive) */
  start?:
    | number
    | undefined;
  /** end of the range (exclusive) */
  end?: number | undefined;
}

function createBaseInt64Range(): Int64Range {
  return { $type: "envoy.type.v3.Int64Range" };
}

export const Int64Range: MessageFns<Int64Range, "envoy.type.v3.Int64Range"> = {
  $type: "envoy.type.v3.Int64Range" as const,

  encode(message: Int64Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(8).int64(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(16).int64(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Int64Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInt64Range();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.start = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.end = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Int64Range {
    return {
      $type: Int64Range.$type,
      start: isSet(object.start) ? globalThis.Number(object.start) : undefined,
      end: isSet(object.end) ? globalThis.Number(object.end) : undefined,
    };
  },

  toJSON(message: Int64Range): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== undefined) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Int64Range>, I>>(base?: I): Int64Range {
    return Int64Range.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Int64Range>, I>>(object: I): Int64Range {
    const message = createBaseInt64Range();
    message.start = object.start ?? undefined;
    message.end = object.end ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Int64Range.$type, Int64Range);

function createBaseInt32Range(): Int32Range {
  return { $type: "envoy.type.v3.Int32Range" };
}

export const Int32Range: MessageFns<Int32Range, "envoy.type.v3.Int32Range"> = {
  $type: "envoy.type.v3.Int32Range" as const,

  encode(message: Int32Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Int32Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInt32Range();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.start = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.end = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Int32Range {
    return {
      $type: Int32Range.$type,
      start: isSet(object.start) ? globalThis.Number(object.start) : undefined,
      end: isSet(object.end) ? globalThis.Number(object.end) : undefined,
    };
  },

  toJSON(message: Int32Range): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== undefined) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Int32Range>, I>>(base?: I): Int32Range {
    return Int32Range.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Int32Range>, I>>(object: I): Int32Range {
    const message = createBaseInt32Range();
    message.start = object.start ?? undefined;
    message.end = object.end ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Int32Range.$type, Int32Range);

function createBaseDoubleRange(): DoubleRange {
  return { $type: "envoy.type.v3.DoubleRange" };
}

export const DoubleRange: MessageFns<DoubleRange, "envoy.type.v3.DoubleRange"> = {
  $type: "envoy.type.v3.DoubleRange" as const,

  encode(message: DoubleRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined && message.start !== 0) {
      writer.uint32(9).double(message.start);
    }
    if (message.end !== undefined && message.end !== 0) {
      writer.uint32(17).double(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DoubleRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDoubleRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.start = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.end = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DoubleRange {
    return {
      $type: DoubleRange.$type,
      start: isSet(object.start) ? globalThis.Number(object.start) : undefined,
      end: isSet(object.end) ? globalThis.Number(object.end) : undefined,
    };
  },

  toJSON(message: DoubleRange): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = message.start;
    }
    if (message.end !== undefined) {
      obj.end = message.end;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DoubleRange>, I>>(base?: I): DoubleRange {
    return DoubleRange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DoubleRange>, I>>(object: I): DoubleRange {
    const message = createBaseDoubleRange();
    message.start = object.start ?? undefined;
    message.end = object.end ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DoubleRange.$type, DoubleRange);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
