// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/regex.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.type.matcher";

/** A regex matcher designed for safety when used with untrusted input. */
export interface RegexMatcher {
  $type: "envoy.type.matcher.RegexMatcher";
  engine_type?:
    | //
    /** Google's RE2 regex engine. */
    { $case: "google_re2"; google_re2: RegexMatcher_GoogleRE2 }
    | undefined;
  /** The regex match string. The string must be supported by the configured engine. */
  regex?: string | undefined;
}

/**
 * Google's `RE2 <https://github.com/google/re2>`_ regex engine. The regex string must adhere to
 * the documented `syntax <https://github.com/google/re2/wiki/Syntax>`_. The engine is designed
 * to complete execution in linear time as well as limit the amount of memory used.
 *
 * Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level``
 * and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or
 * complexity that a compiled regex can have before an exception is thrown or a warning is
 * logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and
 * ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning).
 *
 * Envoy emits two stats for tracking the program size of regexes: the histogram `re2.program_size`,
 * which records the program size, and the counter `re2.exceeded_warn_level`, which is incremented
 * each time the program size exceeds the warn level threshold.
 */
export interface RegexMatcher_GoogleRE2 {
  $type: "envoy.type.matcher.RegexMatcher.GoogleRE2";
  /**
   * This field controls the RE2 "program size" which is a rough estimate of how complex a
   * compiled regex is to evaluate. A regex that has a program size greater than the configured
   * value will fail to compile. In this case, the configured max program size can be increased
   * or the regex can be simplified. If not specified, the default is 100.
   *
   * This field is deprecated; regexp validation should be performed on the management server
   * instead of being done by each individual client.
   *
   * @deprecated
   */
  max_program_size?: number | undefined;
}

/**
 * Describes how to match a string and then produce a new string using a regular
 * expression and a substitution string.
 */
export interface RegexMatchAndSubstitute {
  $type: "envoy.type.matcher.RegexMatchAndSubstitute";
  /**
   * The regular expression used to find portions of a string (hereafter called
   * the "subject string") that should be replaced. When a new string is
   * produced during the substitution operation, the new string is initially
   * the same as the subject string, but then all matches in the subject string
   * are replaced by the substitution string. If replacing all matches isn't
   * desired, regular expression anchors can be used to ensure a single match,
   * so as to replace just one occurrence of a pattern. Capture groups can be
   * used in the pattern to extract portions of the subject string, and then
   * referenced in the substitution string.
   */
  pattern?:
    | RegexMatcher
    | undefined;
  /**
   * The string that should be substituted into matching portions of the
   * subject string during a substitution operation to produce a new string.
   * Capture groups in the pattern can be referenced in the substitution
   * string. Note, however, that the syntax for referring to capture groups is
   * defined by the chosen regular expression engine. Google's `RE2
   * <https://github.com/google/re2>`_ regular expression engine uses a
   * backslash followed by the capture group number to denote a numbered
   * capture group. E.g., ``\1`` refers to capture group 1, and ``\2`` refers
   * to capture group 2.
   */
  substitution?: string | undefined;
}

function createBaseRegexMatcher(): RegexMatcher {
  return { $type: "envoy.type.matcher.RegexMatcher", engine_type: undefined };
}

export const RegexMatcher: MessageFns<RegexMatcher, "envoy.type.matcher.RegexMatcher"> = {
  $type: "envoy.type.matcher.RegexMatcher" as const,

  encode(message: RegexMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.engine_type?.$case) {
      case "google_re2":
        RegexMatcher_GoogleRE2.encode(message.engine_type.google_re2, writer.uint32(10).fork()).join();
        break;
    }
    if (message.regex !== undefined && message.regex !== "") {
      writer.uint32(18).string(message.regex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegexMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegexMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.engine_type = {
            $case: "google_re2",
            google_re2: RegexMatcher_GoogleRE2.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.regex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegexMatcher {
    return {
      $type: RegexMatcher.$type,
      engine_type: isSet(object.google_re2)
        ? { $case: "google_re2", google_re2: RegexMatcher_GoogleRE2.fromJSON(object.google_re2) }
        : undefined,
      regex: isSet(object.regex) ? globalThis.String(object.regex) : undefined,
    };
  },

  toJSON(message: RegexMatcher): unknown {
    const obj: any = {};
    if (message.engine_type?.$case === "google_re2") {
      obj.google_re2 = RegexMatcher_GoogleRE2.toJSON(message.engine_type.google_re2);
    }
    if (message.regex !== undefined) {
      obj.regex = message.regex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegexMatcher>, I>>(base?: I): RegexMatcher {
    return RegexMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegexMatcher>, I>>(object: I): RegexMatcher {
    const message = createBaseRegexMatcher();
    if (
      object.engine_type?.$case === "google_re2" &&
      object.engine_type?.google_re2 !== undefined &&
      object.engine_type?.google_re2 !== null
    ) {
      message.engine_type = {
        $case: "google_re2",
        google_re2: RegexMatcher_GoogleRE2.fromPartial(object.engine_type.google_re2),
      };
    }
    message.regex = object.regex ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RegexMatcher.$type, RegexMatcher);

function createBaseRegexMatcher_GoogleRE2(): RegexMatcher_GoogleRE2 {
  return { $type: "envoy.type.matcher.RegexMatcher.GoogleRE2" };
}

export const RegexMatcher_GoogleRE2: MessageFns<RegexMatcher_GoogleRE2, "envoy.type.matcher.RegexMatcher.GoogleRE2"> = {
  $type: "envoy.type.matcher.RegexMatcher.GoogleRE2" as const,

  encode(message: RegexMatcher_GoogleRE2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.max_program_size !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_program_size! },
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegexMatcher_GoogleRE2 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegexMatcher_GoogleRE2();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.max_program_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegexMatcher_GoogleRE2 {
    return {
      $type: RegexMatcher_GoogleRE2.$type,
      max_program_size: isSet(object.max_program_size) ? Number(object.max_program_size) : undefined,
    };
  },

  toJSON(message: RegexMatcher_GoogleRE2): unknown {
    const obj: any = {};
    if (message.max_program_size !== undefined) {
      obj.max_program_size = message.max_program_size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegexMatcher_GoogleRE2>, I>>(base?: I): RegexMatcher_GoogleRE2 {
    return RegexMatcher_GoogleRE2.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegexMatcher_GoogleRE2>, I>>(object: I): RegexMatcher_GoogleRE2 {
    const message = createBaseRegexMatcher_GoogleRE2();
    message.max_program_size = object.max_program_size ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RegexMatcher_GoogleRE2.$type, RegexMatcher_GoogleRE2);

function createBaseRegexMatchAndSubstitute(): RegexMatchAndSubstitute {
  return { $type: "envoy.type.matcher.RegexMatchAndSubstitute" };
}

export const RegexMatchAndSubstitute: MessageFns<
  RegexMatchAndSubstitute,
  "envoy.type.matcher.RegexMatchAndSubstitute"
> = {
  $type: "envoy.type.matcher.RegexMatchAndSubstitute" as const,

  encode(message: RegexMatchAndSubstitute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pattern !== undefined) {
      RegexMatcher.encode(message.pattern, writer.uint32(10).fork()).join();
    }
    if (message.substitution !== undefined && message.substitution !== "") {
      writer.uint32(18).string(message.substitution);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegexMatchAndSubstitute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegexMatchAndSubstitute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pattern = RegexMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.substitution = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegexMatchAndSubstitute {
    return {
      $type: RegexMatchAndSubstitute.$type,
      pattern: isSet(object.pattern) ? RegexMatcher.fromJSON(object.pattern) : undefined,
      substitution: isSet(object.substitution) ? globalThis.String(object.substitution) : undefined,
    };
  },

  toJSON(message: RegexMatchAndSubstitute): unknown {
    const obj: any = {};
    if (message.pattern !== undefined) {
      obj.pattern = RegexMatcher.toJSON(message.pattern);
    }
    if (message.substitution !== undefined) {
      obj.substitution = message.substitution;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegexMatchAndSubstitute>, I>>(base?: I): RegexMatchAndSubstitute {
    return RegexMatchAndSubstitute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegexMatchAndSubstitute>, I>>(object: I): RegexMatchAndSubstitute {
    const message = createBaseRegexMatchAndSubstitute();
    message.pattern = (object.pattern !== undefined && object.pattern !== null)
      ? RegexMatcher.fromPartial(object.pattern)
      : undefined;
    message.substitution = object.substitution ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RegexMatchAndSubstitute.$type, RegexMatchAndSubstitute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
