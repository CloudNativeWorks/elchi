// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/v3/path.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { StringMatcher } from "./string";

export const protobufPackage = "envoy.type.matcher.v3";

/** Specifies the way to match a path on HTTP request. */
export interface PathMatcher {
  $type: "envoy.type.matcher.v3.PathMatcher";
  rule?:
    | //
    /**
     * The ``path`` must match the URL path portion of the :path header. The query and fragment
     * string (if present) are removed in the URL path portion.
     * For example, the path ``/data`` will match the ``:path`` header ``/data#fragment?param=value``.
     */
    { $case: "path"; path: StringMatcher }
    | undefined;
}

function createBasePathMatcher(): PathMatcher {
  return { $type: "envoy.type.matcher.v3.PathMatcher", rule: undefined };
}

export const PathMatcher: MessageFns<PathMatcher, "envoy.type.matcher.v3.PathMatcher"> = {
  $type: "envoy.type.matcher.v3.PathMatcher" as const,

  encode(message: PathMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.rule?.$case) {
      case "path":
        StringMatcher.encode(message.rule.path, writer.uint32(10).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PathMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePathMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rule = { $case: "path", path: StringMatcher.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PathMatcher {
    return {
      $type: PathMatcher.$type,
      rule: isSet(object.path) ? { $case: "path", path: StringMatcher.fromJSON(object.path) } : undefined,
    };
  },

  toJSON(message: PathMatcher): unknown {
    const obj: any = {};
    if (message.rule?.$case === "path") {
      obj.path = StringMatcher.toJSON(message.rule.path);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PathMatcher>, I>>(base?: I): PathMatcher {
    return PathMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PathMatcher>, I>>(object: I): PathMatcher {
    const message = createBasePathMatcher();
    if (object.rule?.$case === "path" && object.rule?.path !== undefined && object.rule?.path !== null) {
      message.rule = { $case: "path", path: StringMatcher.fromPartial(object.rule.path) };
    }
    return message;
  },
};

messageTypeRegistry.set(PathMatcher.$type, PathMatcher);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
