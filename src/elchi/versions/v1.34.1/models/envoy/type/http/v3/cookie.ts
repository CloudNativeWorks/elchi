// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/http/v3/cookie.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.type.http.v3";

/** Cookie defines an API for obtaining or generating HTTP cookie. */
export interface Cookie {
  $type: "envoy.type.http.v3.Cookie";
  /**
   * The name that will be used to obtain cookie value from downstream HTTP request or generate
   * new cookie for downstream.
   */
  name?:
    | string
    | undefined;
  /**
   * Duration of cookie. This will be used to set the expiry time of a new cookie when it is
   * generated. Set this to 0s to use a session cookie and disable cookie expiration.
   */
  ttl?:
    | Duration
    | undefined;
  /**
   * Path of cookie. This will be used to set the path of a new cookie when it is generated.
   * If no path is specified here, no path will be set for the cookie.
   */
  path?: string | undefined;
}

function createBaseCookie(): Cookie {
  return { $type: "envoy.type.http.v3.Cookie" };
}

export const Cookie: MessageFns<Cookie, "envoy.type.http.v3.Cookie"> = {
  $type: "envoy.type.http.v3.Cookie" as const,

  encode(message: Cookie, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.ttl !== undefined) {
      Duration.encode(message.ttl, writer.uint32(18).fork()).join();
    }
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(26).string(message.path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cookie {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCookie();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ttl = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cookie {
    return {
      $type: Cookie.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      ttl: isSet(object.ttl) ? Duration.fromJSON(object.ttl) : undefined,
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
    };
  },

  toJSON(message: Cookie): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.ttl !== undefined) {
      obj.ttl = Duration.toJSON(message.ttl);
    }
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Cookie>, I>>(base?: I): Cookie {
    return Cookie.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Cookie>, I>>(object: I): Cookie {
    const message = createBaseCookie();
    message.name = object.name ?? undefined;
    message.ttl = (object.ttl !== undefined && object.ttl !== null) ? Duration.fromPartial(object.ttl) : undefined;
    message.path = object.path ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Cookie.$type, Cookie);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
