// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/common/dynamic_forward_proxy/v2alpha/dns_cache.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import {
  Cluster_DnsLookupFamily,
  cluster_DnsLookupFamilyFromJSON,
  cluster_DnsLookupFamilyToJSON,
  cluster_DnsLookupFamilyToNumber,
  Cluster_RefreshRate,
} from "../../../../api/v2/cluster";

export const protobufPackage = "envoy.config.common.dynamic_forward_proxy.v2alpha";

/**
 * Configuration for the dynamic forward proxy DNS cache. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#next-free-field: 7]
 */
export interface DnsCacheConfig {
  $type: "envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig";
  /**
   * The name of the cache. Multiple named caches allow independent dynamic forward proxy
   * configurations to operate within a single Envoy process using different configurations. All
   * configurations with the same name *must* otherwise have the same settings when referenced
   * from different configuration components. Configuration will fail to load if this is not
   * the case.
   */
  name?:
    | string
    | undefined;
  /**
   * The DNS lookup family to use during resolution.
   *
   * [#comment:TODO(mattklein123): Figure out how to support IPv4/IPv6 "happy eyeballs" mode. The
   * way this might work is a new lookup family which returns both IPv4 and IPv6 addresses, and
   * then configures a host to have a primary and fall back address. With this, we could very
   * likely build a "happy eyeballs" connection pool which would race the primary / fall back
   * address and return the one that wins. This same method could potentially also be used for
   * QUIC to TCP fall back.]
   */
  dns_lookup_family?:
    | Cluster_DnsLookupFamily
    | undefined;
  /**
   * The DNS refresh rate for currently cached DNS hosts. If not specified defaults to 60s.
   *
   * .. note:
   *
   *  The returned DNS TTL is not currently used to alter the refresh rate. This feature will be
   *  added in a future change.
   *
   * .. note:
   *
   * The refresh rate is rounded to the closest millisecond, and must be at least 1ms.
   */
  dns_refresh_rate?:
    | Duration
    | undefined;
  /**
   * The TTL for hosts that are unused. Hosts that have not been used in the configured time
   * interval will be purged. If not specified defaults to 5m.
   *
   * .. note:
   *
   *   The TTL is only checked at the time of DNS refresh, as specified by *dns_refresh_rate*. This
   *   means that if the configured TTL is shorter than the refresh rate the host may not be removed
   *   immediately.
   *
   *  .. note:
   *
   *   The TTL has no relation to DNS TTL and is only used to control Envoy's resource usage.
   */
  host_ttl?:
    | Duration
    | undefined;
  /**
   * The maximum number of hosts that the cache will hold. If not specified defaults to 1024.
   *
   * .. note:
   *
   *   The implementation is approximate and enforced independently on each worker thread, thus
   *   it is possible for the maximum hosts in the cache to go slightly above the configured
   *   value depending on timing. This is similar to how other circuit breakers work.
   */
  max_hosts?:
    | number
    | undefined;
  /**
   * If the DNS failure refresh rate is specified,
   * this is used as the cache's DNS refresh rate when DNS requests are failing. If this setting is
   * not specified, the failure refresh rate defaults to the dns_refresh_rate.
   */
  dns_failure_refresh_rate?: Cluster_RefreshRate | undefined;
}

function createBaseDnsCacheConfig(): DnsCacheConfig {
  return { $type: "envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig" };
}

export const DnsCacheConfig: MessageFns<
  DnsCacheConfig,
  "envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig"
> = {
  $type: "envoy.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfig" as const,

  encode(message: DnsCacheConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dns_lookup_family !== undefined && message.dns_lookup_family !== Cluster_DnsLookupFamily.AUTO) {
      writer.uint32(16).int32(cluster_DnsLookupFamilyToNumber(message.dns_lookup_family));
    }
    if (message.dns_refresh_rate !== undefined) {
      Duration.encode(message.dns_refresh_rate, writer.uint32(26).fork()).join();
    }
    if (message.host_ttl !== undefined) {
      Duration.encode(message.host_ttl, writer.uint32(34).fork()).join();
    }
    if (message.max_hosts !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.max_hosts! }, writer.uint32(42).fork())
        .join();
    }
    if (message.dns_failure_refresh_rate !== undefined) {
      Cluster_RefreshRate.encode(message.dns_failure_refresh_rate, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsCacheConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsCacheConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.dns_lookup_family = cluster_DnsLookupFamilyFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.dns_refresh_rate = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.host_ttl = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.max_hosts = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.dns_failure_refresh_rate = Cluster_RefreshRate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsCacheConfig {
    return {
      $type: DnsCacheConfig.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      dns_lookup_family: isSet(object.dns_lookup_family)
        ? cluster_DnsLookupFamilyFromJSON(object.dns_lookup_family)
        : undefined,
      dns_refresh_rate: isSet(object.dns_refresh_rate) ? Duration.fromJSON(object.dns_refresh_rate) : undefined,
      host_ttl: isSet(object.host_ttl) ? Duration.fromJSON(object.host_ttl) : undefined,
      max_hosts: isSet(object.max_hosts) ? Number(object.max_hosts) : undefined,
      dns_failure_refresh_rate: isSet(object.dns_failure_refresh_rate)
        ? Cluster_RefreshRate.fromJSON(object.dns_failure_refresh_rate)
        : undefined,
    };
  },

  toJSON(message: DnsCacheConfig): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.dns_lookup_family !== undefined) {
      obj.dns_lookup_family = cluster_DnsLookupFamilyToJSON(message.dns_lookup_family);
    }
    if (message.dns_refresh_rate !== undefined) {
      obj.dns_refresh_rate = Duration.toJSON(message.dns_refresh_rate);
    }
    if (message.host_ttl !== undefined) {
      obj.host_ttl = Duration.toJSON(message.host_ttl);
    }
    if (message.max_hosts !== undefined) {
      obj.max_hosts = message.max_hosts;
    }
    if (message.dns_failure_refresh_rate !== undefined) {
      obj.dns_failure_refresh_rate = Cluster_RefreshRate.toJSON(message.dns_failure_refresh_rate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsCacheConfig>, I>>(base?: I): DnsCacheConfig {
    return DnsCacheConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsCacheConfig>, I>>(object: I): DnsCacheConfig {
    const message = createBaseDnsCacheConfig();
    message.name = object.name ?? undefined;
    message.dns_lookup_family = object.dns_lookup_family ?? undefined;
    message.dns_refresh_rate = (object.dns_refresh_rate !== undefined && object.dns_refresh_rate !== null)
      ? Duration.fromPartial(object.dns_refresh_rate)
      : undefined;
    message.host_ttl = (object.host_ttl !== undefined && object.host_ttl !== null)
      ? Duration.fromPartial(object.host_ttl)
      : undefined;
    message.max_hosts = object.max_hosts ?? undefined;
    message.dns_failure_refresh_rate =
      (object.dns_failure_refresh_rate !== undefined && object.dns_failure_refresh_rate !== null)
        ? Cluster_RefreshRate.fromPartial(object.dns_failure_refresh_rate)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsCacheConfig.$type, DnsCacheConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
