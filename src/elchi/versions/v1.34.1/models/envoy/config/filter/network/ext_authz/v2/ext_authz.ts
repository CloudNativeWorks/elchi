// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/ext_authz/v2/ext_authz.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { GrpcService } from "../../../../../api/v2/core/grpc_service";

export const protobufPackage = "envoy.config.filter.network.ext_authz.v2";

/**
 * External Authorization filter calls out to an external service over the
 * gRPC Authorization API defined by
 * :ref:`CheckRequest <envoy_api_msg_service.auth.v2.CheckRequest>`.
 * A failed check will cause this filter to close the TCP connection.
 */
export interface ExtAuthz {
  $type: "envoy.config.filter.network.ext_authz.v2.ExtAuthz";
  /** The prefix to use when emitting statistics. */
  stat_prefix?:
    | string
    | undefined;
  /**
   * The external authorization gRPC service configuration.
   * The default timeout is set to 200ms by this filter.
   */
  grpc_service?:
    | GrpcService
    | undefined;
  /**
   * The filter's behaviour in case the external authorization service does
   * not respond back. When it is set to true, Envoy will also allow traffic in case of
   * communication failure between authorization service and the proxy.
   * Defaults to false.
   */
  failure_mode_allow?:
    | boolean
    | undefined;
  /**
   * Specifies if the peer certificate is sent to the external service.
   *
   * When this field is true, Envoy will include the peer X.509 certificate, if available, in the
   * :ref:`certificate<envoy_api_field_service.auth.v2.AttributeContext.Peer.certificate>`.
   */
  include_peer_certificate?: boolean | undefined;
}

function createBaseExtAuthz(): ExtAuthz {
  return { $type: "envoy.config.filter.network.ext_authz.v2.ExtAuthz" };
}

export const ExtAuthz: MessageFns<ExtAuthz, "envoy.config.filter.network.ext_authz.v2.ExtAuthz"> = {
  $type: "envoy.config.filter.network.ext_authz.v2.ExtAuthz" as const,

  encode(message: ExtAuthz, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(18).fork()).join();
    }
    if (message.failure_mode_allow !== undefined && message.failure_mode_allow !== false) {
      writer.uint32(24).bool(message.failure_mode_allow);
    }
    if (message.include_peer_certificate !== undefined && message.include_peer_certificate !== false) {
      writer.uint32(32).bool(message.include_peer_certificate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtAuthz {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtAuthz();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.failure_mode_allow = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.include_peer_certificate = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtAuthz {
    return {
      $type: ExtAuthz.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
      failure_mode_allow: isSet(object.failure_mode_allow) ? globalThis.Boolean(object.failure_mode_allow) : undefined,
      include_peer_certificate: isSet(object.include_peer_certificate)
        ? globalThis.Boolean(object.include_peer_certificate)
        : undefined,
    };
  },

  toJSON(message: ExtAuthz): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    if (message.failure_mode_allow !== undefined) {
      obj.failure_mode_allow = message.failure_mode_allow;
    }
    if (message.include_peer_certificate !== undefined) {
      obj.include_peer_certificate = message.include_peer_certificate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtAuthz>, I>>(base?: I): ExtAuthz {
    return ExtAuthz.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtAuthz>, I>>(object: I): ExtAuthz {
    const message = createBaseExtAuthz();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    message.failure_mode_allow = object.failure_mode_allow ?? undefined;
    message.include_peer_certificate = object.include_peer_certificate ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ExtAuthz.$type, ExtAuthz);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
