// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/http/compressor/v2/compressor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFeatureFlag } from "../../../../../api/v2/core/base";

export const protobufPackage = "envoy.config.filter.http.compressor.v2";

/** [#next-free-field: 6] */
export interface Compressor {
  $type: "envoy.config.filter.http.compressor.v2.Compressor";
  /** Minimum response length, in bytes, which will trigger compression. The default value is 30. */
  content_length?:
    | number
    | undefined;
  /**
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   */
  content_type?:
    | string[]
    | undefined;
  /**
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   */
  disable_on_etag_header?:
    | boolean
    | undefined;
  /**
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   * .. attention:
   *
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   */
  remove_accept_encoding_header?:
    | boolean
    | undefined;
  /**
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter. If not specified, defaults to enabled.
   */
  runtime_enabled?: RuntimeFeatureFlag | undefined;
}

function createBaseCompressor(): Compressor {
  return { $type: "envoy.config.filter.http.compressor.v2.Compressor" };
}

export const Compressor: MessageFns<Compressor, "envoy.config.filter.http.compressor.v2.Compressor"> = {
  $type: "envoy.config.filter.http.compressor.v2.Compressor" as const,

  encode(message: Compressor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content_length !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.content_length! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.content_type !== undefined && message.content_type.length !== 0) {
      for (const v of message.content_type) {
        writer.uint32(18).string(v!);
      }
    }
    if (message.disable_on_etag_header !== undefined && message.disable_on_etag_header !== false) {
      writer.uint32(24).bool(message.disable_on_etag_header);
    }
    if (message.remove_accept_encoding_header !== undefined && message.remove_accept_encoding_header !== false) {
      writer.uint32(32).bool(message.remove_accept_encoding_header);
    }
    if (message.runtime_enabled !== undefined) {
      RuntimeFeatureFlag.encode(message.runtime_enabled, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Compressor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content_length = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.content_type === undefined) {
            message.content_type = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.content_type!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.disable_on_etag_header = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.remove_accept_encoding_header = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.runtime_enabled = RuntimeFeatureFlag.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Compressor {
    return {
      $type: Compressor.$type,
      content_length: isSet(object.content_length) ? Number(object.content_length) : undefined,
      content_type: globalThis.Array.isArray(object?.content_type)
        ? object.content_type.map((e: any) => globalThis.String(e))
        : undefined,
      disable_on_etag_header: isSet(object.disable_on_etag_header)
        ? globalThis.Boolean(object.disable_on_etag_header)
        : undefined,
      remove_accept_encoding_header: isSet(object.remove_accept_encoding_header)
        ? globalThis.Boolean(object.remove_accept_encoding_header)
        : undefined,
      runtime_enabled: isSet(object.runtime_enabled) ? RuntimeFeatureFlag.fromJSON(object.runtime_enabled) : undefined,
    };
  },

  toJSON(message: Compressor): unknown {
    const obj: any = {};
    if (message.content_length !== undefined) {
      obj.content_length = message.content_length;
    }
    if (message.content_type?.length) {
      obj.content_type = message.content_type;
    }
    if (message.disable_on_etag_header !== undefined) {
      obj.disable_on_etag_header = message.disable_on_etag_header;
    }
    if (message.remove_accept_encoding_header !== undefined) {
      obj.remove_accept_encoding_header = message.remove_accept_encoding_header;
    }
    if (message.runtime_enabled !== undefined) {
      obj.runtime_enabled = RuntimeFeatureFlag.toJSON(message.runtime_enabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Compressor>, I>>(base?: I): Compressor {
    return Compressor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Compressor>, I>>(object: I): Compressor {
    const message = createBaseCompressor();
    message.content_length = object.content_length ?? undefined;
    message.content_type = object.content_type?.map((e) => e) || undefined;
    message.disable_on_etag_header = object.disable_on_etag_header ?? undefined;
    message.remove_accept_encoding_header = object.remove_accept_encoding_header ?? undefined;
    message.runtime_enabled = (object.runtime_enabled !== undefined && object.runtime_enabled !== null)
      ? RuntimeFeatureFlag.fromPartial(object.runtime_enabled)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Compressor.$type, Compressor);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
