// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: io/prometheus/client/metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "io.prometheus.client";

export enum MetricType {
  COUNTER = "COUNTER",
  GAUGE = "GAUGE",
  SUMMARY = "SUMMARY",
  UNTYPED = "UNTYPED",
  HISTOGRAM = "HISTOGRAM",
}

export function metricTypeFromJSON(object: any): MetricType {
  switch (object) {
    case 0:
    case "COUNTER":
      return MetricType.COUNTER;
    case 1:
    case "GAUGE":
      return MetricType.GAUGE;
    case 2:
    case "SUMMARY":
      return MetricType.SUMMARY;
    case 3:
    case "UNTYPED":
      return MetricType.UNTYPED;
    case 4:
    case "HISTOGRAM":
      return MetricType.HISTOGRAM;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum MetricType");
  }
}

export function metricTypeToJSON(object: MetricType): string {
  switch (object) {
    case MetricType.COUNTER:
      return "COUNTER";
    case MetricType.GAUGE:
      return "GAUGE";
    case MetricType.SUMMARY:
      return "SUMMARY";
    case MetricType.UNTYPED:
      return "UNTYPED";
    case MetricType.HISTOGRAM:
      return "HISTOGRAM";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum MetricType");
  }
}

export function metricTypeToNumber(object: MetricType): number {
  switch (object) {
    case MetricType.COUNTER:
      return 0;
    case MetricType.GAUGE:
      return 1;
    case MetricType.SUMMARY:
      return 2;
    case MetricType.UNTYPED:
      return 3;
    case MetricType.HISTOGRAM:
      return 4;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum MetricType");
  }
}

export interface LabelPair {
  $type: "io.prometheus.client.LabelPair";
  name?: string | undefined;
  value?: string | undefined;
}

export interface Gauge {
  $type: "io.prometheus.client.Gauge";
  value?: number | undefined;
}

export interface Counter {
  $type: "io.prometheus.client.Counter";
  value?: number | undefined;
  exemplar?: Exemplar | undefined;
}

export interface Quantile {
  $type: "io.prometheus.client.Quantile";
  quantile?: number | undefined;
  value?: number | undefined;
}

export interface Summary {
  $type: "io.prometheus.client.Summary";
  sample_count?: number | undefined;
  sample_sum?: number | undefined;
  quantile?: Quantile[] | undefined;
}

export interface Untyped {
  $type: "io.prometheus.client.Untyped";
  value?: number | undefined;
}

export interface Histogram {
  $type: "io.prometheus.client.Histogram";
  sample_count?: number | undefined;
  sample_sum?:
    | number
    | undefined;
  /** Ordered in increasing order of upper_bound, +Inf bucket is optional. */
  bucket?: Bucket[] | undefined;
}

export interface Bucket {
  $type: "io.prometheus.client.Bucket";
  /** Cumulative in increasing order. */
  cumulative_count?:
    | number
    | undefined;
  /** Inclusive. */
  upper_bound?: number | undefined;
  exemplar?: Exemplar | undefined;
}

export interface Exemplar {
  $type: "io.prometheus.client.Exemplar";
  label?: LabelPair[] | undefined;
  value?:
    | number
    | undefined;
  /** OpenMetrics-style. */
  timestamp?: Date | undefined;
}

export interface Metric {
  $type: "io.prometheus.client.Metric";
  label?: LabelPair[] | undefined;
  gauge?: Gauge | undefined;
  counter?: Counter | undefined;
  summary?: Summary | undefined;
  untyped?: Untyped | undefined;
  histogram?: Histogram | undefined;
  timestamp_ms?: number | undefined;
}

export interface MetricFamily {
  $type: "io.prometheus.client.MetricFamily";
  name?: string | undefined;
  help?: string | undefined;
  type?: MetricType | undefined;
  metric?: Metric[] | undefined;
}

function createBaseLabelPair(): LabelPair {
  return { $type: "io.prometheus.client.LabelPair" };
}

export const LabelPair: MessageFns<LabelPair, "io.prometheus.client.LabelPair"> = {
  $type: "io.prometheus.client.LabelPair" as const,

  encode(message: LabelPair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== undefined && message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelPair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelPair {
    return {
      $type: LabelPair.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
    };
  },

  toJSON(message: LabelPair): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LabelPair>, I>>(base?: I): LabelPair {
    return LabelPair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LabelPair>, I>>(object: I): LabelPair {
    const message = createBaseLabelPair();
    message.name = object.name ?? undefined;
    message.value = object.value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LabelPair.$type, LabelPair);

function createBaseGauge(): Gauge {
  return { $type: "io.prometheus.client.Gauge" };
}

export const Gauge: MessageFns<Gauge, "io.prometheus.client.Gauge"> = {
  $type: "io.prometheus.client.Gauge" as const,

  encode(message: Gauge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gauge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGauge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gauge {
    return { $type: Gauge.$type, value: isSet(object.value) ? globalThis.Number(object.value) : undefined };
  },

  toJSON(message: Gauge): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gauge>, I>>(base?: I): Gauge {
    return Gauge.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gauge>, I>>(object: I): Gauge {
    const message = createBaseGauge();
    message.value = object.value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Gauge.$type, Gauge);

function createBaseCounter(): Counter {
  return { $type: "io.prometheus.client.Counter" };
}

export const Counter: MessageFns<Counter, "io.prometheus.client.Counter"> = {
  $type: "io.prometheus.client.Counter" as const,

  encode(message: Counter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    if (message.exemplar !== undefined) {
      Exemplar.encode(message.exemplar, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Counter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCounter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.exemplar = Exemplar.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Counter {
    return {
      $type: Counter.$type,
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
      exemplar: isSet(object.exemplar) ? Exemplar.fromJSON(object.exemplar) : undefined,
    };
  },

  toJSON(message: Counter): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.exemplar !== undefined) {
      obj.exemplar = Exemplar.toJSON(message.exemplar);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Counter>, I>>(base?: I): Counter {
    return Counter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Counter>, I>>(object: I): Counter {
    const message = createBaseCounter();
    message.value = object.value ?? undefined;
    message.exemplar = (object.exemplar !== undefined && object.exemplar !== null)
      ? Exemplar.fromPartial(object.exemplar)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Counter.$type, Counter);

function createBaseQuantile(): Quantile {
  return { $type: "io.prometheus.client.Quantile" };
}

export const Quantile: MessageFns<Quantile, "io.prometheus.client.Quantile"> = {
  $type: "io.prometheus.client.Quantile" as const,

  encode(message: Quantile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quantile !== undefined && message.quantile !== 0) {
      writer.uint32(9).double(message.quantile);
    }
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Quantile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuantile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.quantile = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Quantile {
    return {
      $type: Quantile.$type,
      quantile: isSet(object.quantile) ? globalThis.Number(object.quantile) : undefined,
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
    };
  },

  toJSON(message: Quantile): unknown {
    const obj: any = {};
    if (message.quantile !== undefined) {
      obj.quantile = message.quantile;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Quantile>, I>>(base?: I): Quantile {
    return Quantile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Quantile>, I>>(object: I): Quantile {
    const message = createBaseQuantile();
    message.quantile = object.quantile ?? undefined;
    message.value = object.value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Quantile.$type, Quantile);

function createBaseSummary(): Summary {
  return { $type: "io.prometheus.client.Summary" };
}

export const Summary: MessageFns<Summary, "io.prometheus.client.Summary"> = {
  $type: "io.prometheus.client.Summary" as const,

  encode(message: Summary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sample_count !== undefined && message.sample_count !== 0) {
      writer.uint32(8).uint64(message.sample_count);
    }
    if (message.sample_sum !== undefined && message.sample_sum !== 0) {
      writer.uint32(17).double(message.sample_sum);
    }
    if (message.quantile !== undefined && message.quantile.length !== 0) {
      for (const v of message.quantile) {
        Quantile.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Summary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sample_count = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.sample_sum = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.quantile === undefined) {
            message.quantile = [];
          }
          const el = Quantile.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.quantile!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Summary {
    return {
      $type: Summary.$type,
      sample_count: isSet(object.sample_count) ? globalThis.Number(object.sample_count) : undefined,
      sample_sum: isSet(object.sample_sum) ? globalThis.Number(object.sample_sum) : undefined,
      quantile: globalThis.Array.isArray(object?.quantile)
        ? object.quantile.map((e: any) => Quantile.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Summary): unknown {
    const obj: any = {};
    if (message.sample_count !== undefined) {
      obj.sample_count = Math.round(message.sample_count);
    }
    if (message.sample_sum !== undefined) {
      obj.sample_sum = message.sample_sum;
    }
    if (message.quantile?.length) {
      obj.quantile = message.quantile.map((e) => Quantile.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Summary>, I>>(base?: I): Summary {
    return Summary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Summary>, I>>(object: I): Summary {
    const message = createBaseSummary();
    message.sample_count = object.sample_count ?? undefined;
    message.sample_sum = object.sample_sum ?? undefined;
    message.quantile = object.quantile?.map((e) => Quantile.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Summary.$type, Summary);

function createBaseUntyped(): Untyped {
  return { $type: "io.prometheus.client.Untyped" };
}

export const Untyped: MessageFns<Untyped, "io.prometheus.client.Untyped"> = {
  $type: "io.prometheus.client.Untyped" as const,

  encode(message: Untyped, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(9).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Untyped {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUntyped();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Untyped {
    return { $type: Untyped.$type, value: isSet(object.value) ? globalThis.Number(object.value) : undefined };
  },

  toJSON(message: Untyped): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Untyped>, I>>(base?: I): Untyped {
    return Untyped.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Untyped>, I>>(object: I): Untyped {
    const message = createBaseUntyped();
    message.value = object.value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Untyped.$type, Untyped);

function createBaseHistogram(): Histogram {
  return { $type: "io.prometheus.client.Histogram" };
}

export const Histogram: MessageFns<Histogram, "io.prometheus.client.Histogram"> = {
  $type: "io.prometheus.client.Histogram" as const,

  encode(message: Histogram, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sample_count !== undefined && message.sample_count !== 0) {
      writer.uint32(8).uint64(message.sample_count);
    }
    if (message.sample_sum !== undefined && message.sample_sum !== 0) {
      writer.uint32(17).double(message.sample_sum);
    }
    if (message.bucket !== undefined && message.bucket.length !== 0) {
      for (const v of message.bucket) {
        Bucket.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Histogram {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHistogram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sample_count = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.sample_sum = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.bucket === undefined) {
            message.bucket = [];
          }
          const el = Bucket.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.bucket!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Histogram {
    return {
      $type: Histogram.$type,
      sample_count: isSet(object.sample_count) ? globalThis.Number(object.sample_count) : undefined,
      sample_sum: isSet(object.sample_sum) ? globalThis.Number(object.sample_sum) : undefined,
      bucket: globalThis.Array.isArray(object?.bucket) ? object.bucket.map((e: any) => Bucket.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: Histogram): unknown {
    const obj: any = {};
    if (message.sample_count !== undefined) {
      obj.sample_count = Math.round(message.sample_count);
    }
    if (message.sample_sum !== undefined) {
      obj.sample_sum = message.sample_sum;
    }
    if (message.bucket?.length) {
      obj.bucket = message.bucket.map((e) => Bucket.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Histogram>, I>>(base?: I): Histogram {
    return Histogram.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Histogram>, I>>(object: I): Histogram {
    const message = createBaseHistogram();
    message.sample_count = object.sample_count ?? undefined;
    message.sample_sum = object.sample_sum ?? undefined;
    message.bucket = object.bucket?.map((e) => Bucket.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Histogram.$type, Histogram);

function createBaseBucket(): Bucket {
  return { $type: "io.prometheus.client.Bucket" };
}

export const Bucket: MessageFns<Bucket, "io.prometheus.client.Bucket"> = {
  $type: "io.prometheus.client.Bucket" as const,

  encode(message: Bucket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cumulative_count !== undefined && message.cumulative_count !== 0) {
      writer.uint32(8).uint64(message.cumulative_count);
    }
    if (message.upper_bound !== undefined && message.upper_bound !== 0) {
      writer.uint32(17).double(message.upper_bound);
    }
    if (message.exemplar !== undefined) {
      Exemplar.encode(message.exemplar, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Bucket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBucket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.cumulative_count = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.upper_bound = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.exemplar = Exemplar.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Bucket {
    return {
      $type: Bucket.$type,
      cumulative_count: isSet(object.cumulative_count) ? globalThis.Number(object.cumulative_count) : undefined,
      upper_bound: isSet(object.upper_bound) ? globalThis.Number(object.upper_bound) : undefined,
      exemplar: isSet(object.exemplar) ? Exemplar.fromJSON(object.exemplar) : undefined,
    };
  },

  toJSON(message: Bucket): unknown {
    const obj: any = {};
    if (message.cumulative_count !== undefined) {
      obj.cumulative_count = Math.round(message.cumulative_count);
    }
    if (message.upper_bound !== undefined) {
      obj.upper_bound = message.upper_bound;
    }
    if (message.exemplar !== undefined) {
      obj.exemplar = Exemplar.toJSON(message.exemplar);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Bucket>, I>>(base?: I): Bucket {
    return Bucket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Bucket>, I>>(object: I): Bucket {
    const message = createBaseBucket();
    message.cumulative_count = object.cumulative_count ?? undefined;
    message.upper_bound = object.upper_bound ?? undefined;
    message.exemplar = (object.exemplar !== undefined && object.exemplar !== null)
      ? Exemplar.fromPartial(object.exemplar)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Bucket.$type, Bucket);

function createBaseExemplar(): Exemplar {
  return { $type: "io.prometheus.client.Exemplar" };
}

export const Exemplar: MessageFns<Exemplar, "io.prometheus.client.Exemplar"> = {
  $type: "io.prometheus.client.Exemplar" as const,

  encode(message: Exemplar, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== undefined && message.label.length !== 0) {
      for (const v of message.label) {
        LabelPair.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Exemplar {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExemplar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.label === undefined) {
            message.label = [];
          }
          const el = LabelPair.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.label!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Exemplar {
    return {
      $type: Exemplar.$type,
      label: globalThis.Array.isArray(object?.label) ? object.label.map((e: any) => LabelPair.fromJSON(e)) : undefined,
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
    };
  },

  toJSON(message: Exemplar): unknown {
    const obj: any = {};
    if (message.label?.length) {
      obj.label = message.label.map((e) => LabelPair.toJSON(e));
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Exemplar>, I>>(base?: I): Exemplar {
    return Exemplar.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Exemplar>, I>>(object: I): Exemplar {
    const message = createBaseExemplar();
    message.label = object.label?.map((e) => LabelPair.fromPartial(e)) || undefined;
    message.value = object.value ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Exemplar.$type, Exemplar);

function createBaseMetric(): Metric {
  return { $type: "io.prometheus.client.Metric" };
}

export const Metric: MessageFns<Metric, "io.prometheus.client.Metric"> = {
  $type: "io.prometheus.client.Metric" as const,

  encode(message: Metric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== undefined && message.label.length !== 0) {
      for (const v of message.label) {
        LabelPair.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.gauge !== undefined) {
      Gauge.encode(message.gauge, writer.uint32(18).fork()).join();
    }
    if (message.counter !== undefined) {
      Counter.encode(message.counter, writer.uint32(26).fork()).join();
    }
    if (message.summary !== undefined) {
      Summary.encode(message.summary, writer.uint32(34).fork()).join();
    }
    if (message.untyped !== undefined) {
      Untyped.encode(message.untyped, writer.uint32(42).fork()).join();
    }
    if (message.histogram !== undefined) {
      Histogram.encode(message.histogram, writer.uint32(58).fork()).join();
    }
    if (message.timestamp_ms !== undefined && message.timestamp_ms !== 0) {
      writer.uint32(48).int64(message.timestamp_ms);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.label === undefined) {
            message.label = [];
          }
          const el = LabelPair.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.label!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gauge = Gauge.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.counter = Counter.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.summary = Summary.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.untyped = Untyped.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.histogram = Histogram.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.timestamp_ms = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metric {
    return {
      $type: Metric.$type,
      label: globalThis.Array.isArray(object?.label) ? object.label.map((e: any) => LabelPair.fromJSON(e)) : undefined,
      gauge: isSet(object.gauge) ? Gauge.fromJSON(object.gauge) : undefined,
      counter: isSet(object.counter) ? Counter.fromJSON(object.counter) : undefined,
      summary: isSet(object.summary) ? Summary.fromJSON(object.summary) : undefined,
      untyped: isSet(object.untyped) ? Untyped.fromJSON(object.untyped) : undefined,
      histogram: isSet(object.histogram) ? Histogram.fromJSON(object.histogram) : undefined,
      timestamp_ms: isSet(object.timestamp_ms) ? globalThis.Number(object.timestamp_ms) : undefined,
    };
  },

  toJSON(message: Metric): unknown {
    const obj: any = {};
    if (message.label?.length) {
      obj.label = message.label.map((e) => LabelPair.toJSON(e));
    }
    if (message.gauge !== undefined) {
      obj.gauge = Gauge.toJSON(message.gauge);
    }
    if (message.counter !== undefined) {
      obj.counter = Counter.toJSON(message.counter);
    }
    if (message.summary !== undefined) {
      obj.summary = Summary.toJSON(message.summary);
    }
    if (message.untyped !== undefined) {
      obj.untyped = Untyped.toJSON(message.untyped);
    }
    if (message.histogram !== undefined) {
      obj.histogram = Histogram.toJSON(message.histogram);
    }
    if (message.timestamp_ms !== undefined) {
      obj.timestamp_ms = Math.round(message.timestamp_ms);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metric>, I>>(base?: I): Metric {
    return Metric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metric>, I>>(object: I): Metric {
    const message = createBaseMetric();
    message.label = object.label?.map((e) => LabelPair.fromPartial(e)) || undefined;
    message.gauge = (object.gauge !== undefined && object.gauge !== null) ? Gauge.fromPartial(object.gauge) : undefined;
    message.counter = (object.counter !== undefined && object.counter !== null)
      ? Counter.fromPartial(object.counter)
      : undefined;
    message.summary = (object.summary !== undefined && object.summary !== null)
      ? Summary.fromPartial(object.summary)
      : undefined;
    message.untyped = (object.untyped !== undefined && object.untyped !== null)
      ? Untyped.fromPartial(object.untyped)
      : undefined;
    message.histogram = (object.histogram !== undefined && object.histogram !== null)
      ? Histogram.fromPartial(object.histogram)
      : undefined;
    message.timestamp_ms = object.timestamp_ms ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Metric.$type, Metric);

function createBaseMetricFamily(): MetricFamily {
  return { $type: "io.prometheus.client.MetricFamily" };
}

export const MetricFamily: MessageFns<MetricFamily, "io.prometheus.client.MetricFamily"> = {
  $type: "io.prometheus.client.MetricFamily" as const,

  encode(message: MetricFamily, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.help !== undefined && message.help !== "") {
      writer.uint32(18).string(message.help);
    }
    if (message.type !== undefined && message.type !== MetricType.COUNTER) {
      writer.uint32(24).int32(metricTypeToNumber(message.type));
    }
    if (message.metric !== undefined && message.metric.length !== 0) {
      for (const v of message.metric) {
        Metric.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetricFamily {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricFamily();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.help = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = metricTypeFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.metric === undefined) {
            message.metric = [];
          }
          const el = Metric.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.metric!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricFamily {
    return {
      $type: MetricFamily.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      help: isSet(object.help) ? globalThis.String(object.help) : undefined,
      type: isSet(object.type) ? metricTypeFromJSON(object.type) : undefined,
      metric: globalThis.Array.isArray(object?.metric) ? object.metric.map((e: any) => Metric.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: MetricFamily): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.help !== undefined) {
      obj.help = message.help;
    }
    if (message.type !== undefined) {
      obj.type = metricTypeToJSON(message.type);
    }
    if (message.metric?.length) {
      obj.metric = message.metric.map((e) => Metric.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetricFamily>, I>>(base?: I): MetricFamily {
    return MetricFamily.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetricFamily>, I>>(object: I): MetricFamily {
    const message = createBaseMetricFamily();
    message.name = object.name ?? undefined;
    message.help = object.help ?? undefined;
    message.type = object.type ?? undefined;
    message.metric = object.metric?.map((e) => Metric.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(MetricFamily.$type, MetricFamily);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
