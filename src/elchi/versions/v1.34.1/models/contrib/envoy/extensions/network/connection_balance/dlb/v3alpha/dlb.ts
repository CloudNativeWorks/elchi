// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/network/connection_balance/dlb/v3alpha/dlb.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.network.connection_balance.dlb.v3alpha";

/**
 * The Dlb is a hardware managed system of queues and arbiters connecting producers and consumers. It is a PCIE device
 * in the CPU package. It interacts with software running on cores and potentially other devices. The Dlb implements the
 * following balancing features:
 *
 * -  Lock-free multi-producer/multi-consumer operation.
 * -  Multiple priorities for varying traffic types.
 * -  Various distribution schemes.
 *
 * Dlb connection balancer uses Dlb hardware to balance connections, and can significantly reduce latency.
 *
 * As the Dlb connection balancer provides assistance from dedicated Dlb hardware, it can be used for a proxy with a large number of connections
 * (e.g., a gateway).
 */
export interface Dlb {
  $type: "envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb";
  /**
   * The ID of the Dlb hardware, start from 0.
   * If not specified, use the first available device as default.
   */
  id?:
    | number
    | undefined;
  /**
   * Maximum number of retries when sending to DLB device fails.
   * No retry as default.
   */
  max_retries?: number | undefined;
  fallback_policy?: Dlb_FallbackPolicy | undefined;
}

/**
 * The fallback policy if any error occurs.
 * The default policy is None.
 */
export enum Dlb_FallbackPolicy {
  /** None - No fallback policy. */
  None = "None",
  /** NopConnectionBalance - Fall back to Nop Connection Balance. */
  NopConnectionBalance = "NopConnectionBalance",
  /** ExactConnectionBalance - Fall back to Exact Connection Balance. */
  ExactConnectionBalance = "ExactConnectionBalance",
}

export function dlb_FallbackPolicyFromJSON(object: any): Dlb_FallbackPolicy {
  switch (object) {
    case 0:
    case "None":
      return Dlb_FallbackPolicy.None;
    case 1:
    case "NopConnectionBalance":
      return Dlb_FallbackPolicy.NopConnectionBalance;
    case 2:
    case "ExactConnectionBalance":
      return Dlb_FallbackPolicy.ExactConnectionBalance;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Dlb_FallbackPolicy");
  }
}

export function dlb_FallbackPolicyToJSON(object: Dlb_FallbackPolicy): string {
  switch (object) {
    case Dlb_FallbackPolicy.None:
      return "None";
    case Dlb_FallbackPolicy.NopConnectionBalance:
      return "NopConnectionBalance";
    case Dlb_FallbackPolicy.ExactConnectionBalance:
      return "ExactConnectionBalance";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Dlb_FallbackPolicy");
  }
}

export function dlb_FallbackPolicyToNumber(object: Dlb_FallbackPolicy): number {
  switch (object) {
    case Dlb_FallbackPolicy.None:
      return 0;
    case Dlb_FallbackPolicy.NopConnectionBalance:
      return 1;
    case Dlb_FallbackPolicy.ExactConnectionBalance:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Dlb_FallbackPolicy");
  }
}

function createBaseDlb(): Dlb {
  return { $type: "envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb" };
}

export const Dlb: MessageFns<Dlb, "envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb"> = {
  $type: "envoy.extensions.network.connection_balance.dlb.v3alpha.Dlb" as const,

  encode(message: Dlb, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.max_retries !== undefined && message.max_retries !== 0) {
      writer.uint32(16).uint32(message.max_retries);
    }
    if (message.fallback_policy !== undefined && message.fallback_policy !== Dlb_FallbackPolicy.None) {
      writer.uint32(24).int32(dlb_FallbackPolicyToNumber(message.fallback_policy));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dlb {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDlb();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.max_retries = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fallback_policy = dlb_FallbackPolicyFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dlb {
    return {
      $type: Dlb.$type,
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      max_retries: isSet(object.max_retries) ? globalThis.Number(object.max_retries) : undefined,
      fallback_policy: isSet(object.fallback_policy) ? dlb_FallbackPolicyFromJSON(object.fallback_policy) : undefined,
    };
  },

  toJSON(message: Dlb): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.max_retries !== undefined) {
      obj.max_retries = Math.round(message.max_retries);
    }
    if (message.fallback_policy !== undefined) {
      obj.fallback_policy = dlb_FallbackPolicyToJSON(message.fallback_policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Dlb>, I>>(base?: I): Dlb {
    return Dlb.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Dlb>, I>>(object: I): Dlb {
    const message = createBaseDlb();
    message.id = object.id ?? undefined;
    message.max_retries = object.max_retries ?? undefined;
    message.fallback_policy = object.fallback_policy ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Dlb.$type, Dlb);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
