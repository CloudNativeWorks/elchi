// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/network/rocketmq_proxy/v3/route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../../../../../../envoy/config/core/v3/base";
import { HeaderMatcher } from "../../../../../../../envoy/config/route/v3/route_components";
import { StringMatcher } from "../../../../../../../envoy/type/matcher/v3/string";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.network.rocketmq_proxy.v3";

export interface RouteConfiguration {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration";
  /** The name of the route configuration. */
  name?:
    | string
    | undefined;
  /**
   * The list of routes that will be matched, in order, against incoming requests. The first route
   * that matches will be used.
   */
  routes?: Route[] | undefined;
}

export interface Route {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.Route";
  /** Route matching parameters. */
  match?:
    | RouteMatch
    | undefined;
  /** Route request to some upstream cluster. */
  route?: RouteAction | undefined;
}

export interface RouteMatch {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteMatch";
  /** The name of the topic. */
  topic?:
    | StringMatcher
    | undefined;
  /**
   * Specifies a set of headers that the route should match on. The router will check the requestâ€™s
   * headers against all the specified headers in the route config. A match will happen if all the
   * headers in the route are present in the request with the same values (or based on presence if
   * the value field is not in the config).
   */
  headers?: HeaderMatcher[] | undefined;
}

export interface RouteAction {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteAction";
  /** Indicates the upstream cluster to which the request should be routed. */
  cluster?:
    | string
    | undefined;
  /** Optional endpoint metadata match criteria used by the subset load balancer. */
  metadata_match?: Metadata | undefined;
}

function createBaseRouteConfiguration(): RouteConfiguration {
  return { $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration" };
}

export const RouteConfiguration: MessageFns<
  RouteConfiguration,
  "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration"
> = {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteConfiguration" as const,

  encode(message: RouteConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.routes !== undefined && message.routes.length !== 0) {
      for (const v of message.routes) {
        Route.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.routes === undefined) {
            message.routes = [];
          }
          const el = Route.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.routes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteConfiguration {
    return {
      $type: RouteConfiguration.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => Route.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: RouteConfiguration): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Route.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteConfiguration>, I>>(base?: I): RouteConfiguration {
    return RouteConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteConfiguration>, I>>(object: I): RouteConfiguration {
    const message = createBaseRouteConfiguration();
    message.name = object.name ?? undefined;
    message.routes = object.routes?.map((e) => Route.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteConfiguration.$type, RouteConfiguration);

function createBaseRoute(): Route {
  return { $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.Route" };
}

export const Route: MessageFns<Route, "envoy.extensions.filters.network.rocketmq_proxy.v3.Route"> = {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.Route" as const,

  encode(message: Route, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.match !== undefined) {
      RouteMatch.encode(message.match, writer.uint32(10).fork()).join();
    }
    if (message.route !== undefined) {
      RouteAction.encode(message.route, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Route {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match = RouteMatch.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.route = RouteAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Route {
    return {
      $type: Route.$type,
      match: isSet(object.match) ? RouteMatch.fromJSON(object.match) : undefined,
      route: isSet(object.route) ? RouteAction.fromJSON(object.route) : undefined,
    };
  },

  toJSON(message: Route): unknown {
    const obj: any = {};
    if (message.match !== undefined) {
      obj.match = RouteMatch.toJSON(message.match);
    }
    if (message.route !== undefined) {
      obj.route = RouteAction.toJSON(message.route);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Route>, I>>(base?: I): Route {
    return Route.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Route>, I>>(object: I): Route {
    const message = createBaseRoute();
    message.match = (object.match !== undefined && object.match !== null)
      ? RouteMatch.fromPartial(object.match)
      : undefined;
    message.route = (object.route !== undefined && object.route !== null)
      ? RouteAction.fromPartial(object.route)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Route.$type, Route);

function createBaseRouteMatch(): RouteMatch {
  return { $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteMatch" };
}

export const RouteMatch: MessageFns<RouteMatch, "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteMatch"> = {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteMatch" as const,

  encode(message: RouteMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.topic !== undefined) {
      StringMatcher.encode(message.topic, writer.uint32(10).fork()).join();
    }
    if (message.headers !== undefined && message.headers.length !== 0) {
      for (const v of message.headers) {
        HeaderMatcher.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.topic = StringMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.headers === undefined) {
            message.headers = [];
          }
          const el = HeaderMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.headers!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteMatch {
    return {
      $type: RouteMatch.$type,
      topic: isSet(object.topic) ? StringMatcher.fromJSON(object.topic) : undefined,
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => HeaderMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: RouteMatch): unknown {
    const obj: any = {};
    if (message.topic !== undefined) {
      obj.topic = StringMatcher.toJSON(message.topic);
    }
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => HeaderMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteMatch>, I>>(base?: I): RouteMatch {
    return RouteMatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteMatch>, I>>(object: I): RouteMatch {
    const message = createBaseRouteMatch();
    message.topic = (object.topic !== undefined && object.topic !== null)
      ? StringMatcher.fromPartial(object.topic)
      : undefined;
    message.headers = object.headers?.map((e) => HeaderMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteMatch.$type, RouteMatch);

function createBaseRouteAction(): RouteAction {
  return { $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteAction" };
}

export const RouteAction: MessageFns<RouteAction, "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteAction"> = {
  $type: "envoy.extensions.filters.network.rocketmq_proxy.v3.RouteAction" as const,

  encode(message: RouteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== undefined && message.cluster !== "") {
      writer.uint32(10).string(message.cluster);
    }
    if (message.metadata_match !== undefined) {
      Metadata.encode(message.metadata_match, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata_match = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteAction {
    return {
      $type: RouteAction.$type,
      cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : undefined,
      metadata_match: isSet(object.metadata_match) ? Metadata.fromJSON(object.metadata_match) : undefined,
    };
  },

  toJSON(message: RouteAction): unknown {
    const obj: any = {};
    if (message.cluster !== undefined) {
      obj.cluster = message.cluster;
    }
    if (message.metadata_match !== undefined) {
      obj.metadata_match = Metadata.toJSON(message.metadata_match);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteAction>, I>>(base?: I): RouteAction {
    return RouteAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteAction>, I>>(object: I): RouteAction {
    const message = createBaseRouteAction();
    message.cluster = object.cluster ?? undefined;
    message.metadata_match = (object.metadata_match !== undefined && object.metadata_match !== null)
      ? Metadata.fromPartial(object.metadata_match)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteAction.$type, RouteAction);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
