// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/matching/input_matchers/hyperscan/v3alpha/hyperscan.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.matching.input_matchers.hyperscan.v3alpha";

/**
 * `Hyperscan <https://github.com/intel/hyperscan>`_ regex matcher. The matcher uses the Hyperscan
 * engine which exploits x86 SIMD instructions to accelerate matching large numbers of regular
 * expressions simultaneously across streams of data.
 */
export interface Hyperscan {
  $type: "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan";
  /** Specifies a set of regex expressions that the input should match on. */
  regexes?: Hyperscan_Regex[] | undefined;
}

/** [#next-free-field: 11] */
export interface Hyperscan_Regex {
  $type: "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.Regex";
  /**
   * The regex expression.
   *
   * The expression must represent only the pattern to be matched, with no delimiters or flags.
   */
  regex?:
    | string
    | undefined;
  /**
   * The ID of the regex expression.
   *
   * This option is designed to be used on the sub-expressions in logical combinations.
   */
  id?:
    | number
    | undefined;
  /**
   * Matching will be performed case-insensitively.
   *
   * The expression may still use PCRE tokens (notably ``(?i)`` and ``(?-i)``) to switch
   * case-insensitive matching on and off.
   */
  caseless?:
    | boolean
    | undefined;
  /** Matching a ``.`` will not exclude newlines. */
  dot_all?:
    | boolean
    | undefined;
  /** ``^`` and ``$`` anchors match any newlines in data. */
  multiline?:
    | boolean
    | undefined;
  /**
   * Allow expressions which can match against an empty string.
   *
   * This option instructs the compiler to allow expressions that can match against empty buffers,
   * such as ``.?``, ``.*``, ``(a|)``. Since Hyperscan can return every possible match for an expression,
   * such expressions generally execute very slowly.
   */
  allow_empty?:
    | boolean
    | undefined;
  /** Treat the pattern as a sequence of UTF-8 characters. */
  utf8?:
    | boolean
    | undefined;
  /**
   * Use Unicode properties for character classes.
   *
   * This option instructs Hyperscan to use Unicode properties, rather than the default ASCII
   * interpretations, for character mnemonics like ``\w`` and ``\s`` as well as the POSIX character
   * classes. It is only meaningful in conjunction with ``utf8``.
   */
  ucp?:
    | boolean
    | undefined;
  /**
   * Logical combination.
   *
   * This option instructs Hyperscan to parse this expression as logical combination syntax.
   * Logical constraints consist of operands, operators and parentheses. The operands are
   * expression indices, and operators can be ``!``, ``&`` or ``|``.
   */
  combination?:
    | boolean
    | undefined;
  /**
   * Donâ€™t do any match reporting.
   *
   * This option instructs Hyperscan to ignore match reporting for this expression. It is
   * designed to be used on the sub-expressions in logical combinations.
   */
  quiet?: boolean | undefined;
}

function createBaseHyperscan(): Hyperscan {
  return { $type: "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan" };
}

export const Hyperscan: MessageFns<Hyperscan, "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan"> =
  {
    $type: "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan" as const,

    encode(message: Hyperscan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.regexes !== undefined && message.regexes.length !== 0) {
        for (const v of message.regexes) {
          Hyperscan_Regex.encode(v!, writer.uint32(10).fork()).join();
        }
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Hyperscan {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseHyperscan();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            if (message.regexes === undefined) {
              message.regexes = [];
            }
            const el = Hyperscan_Regex.decode(reader, reader.uint32());
            if (el !== undefined) {
              message.regexes!.push(el);
            }
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): Hyperscan {
      return {
        $type: Hyperscan.$type,
        regexes: globalThis.Array.isArray(object?.regexes)
          ? object.regexes.map((e: any) => Hyperscan_Regex.fromJSON(e))
          : undefined,
      };
    },

    toJSON(message: Hyperscan): unknown {
      const obj: any = {};
      if (message.regexes?.length) {
        obj.regexes = message.regexes.map((e) => Hyperscan_Regex.toJSON(e));
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<Hyperscan>, I>>(base?: I): Hyperscan {
      return Hyperscan.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<Hyperscan>, I>>(object: I): Hyperscan {
      const message = createBaseHyperscan();
      message.regexes = object.regexes?.map((e) => Hyperscan_Regex.fromPartial(e)) || undefined;
      return message;
    },
  };

messageTypeRegistry.set(Hyperscan.$type, Hyperscan);

function createBaseHyperscan_Regex(): Hyperscan_Regex {
  return { $type: "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.Regex" };
}

export const Hyperscan_Regex: MessageFns<
  Hyperscan_Regex,
  "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.Regex"
> = {
  $type: "envoy.extensions.matching.input_matchers.hyperscan.v3alpha.Hyperscan.Regex" as const,

  encode(message: Hyperscan_Regex, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.regex !== undefined && message.regex !== "") {
      writer.uint32(10).string(message.regex);
    }
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(16).uint32(message.id);
    }
    if (message.caseless !== undefined && message.caseless !== false) {
      writer.uint32(24).bool(message.caseless);
    }
    if (message.dot_all !== undefined && message.dot_all !== false) {
      writer.uint32(32).bool(message.dot_all);
    }
    if (message.multiline !== undefined && message.multiline !== false) {
      writer.uint32(40).bool(message.multiline);
    }
    if (message.allow_empty !== undefined && message.allow_empty !== false) {
      writer.uint32(48).bool(message.allow_empty);
    }
    if (message.utf8 !== undefined && message.utf8 !== false) {
      writer.uint32(56).bool(message.utf8);
    }
    if (message.ucp !== undefined && message.ucp !== false) {
      writer.uint32(64).bool(message.ucp);
    }
    if (message.combination !== undefined && message.combination !== false) {
      writer.uint32(72).bool(message.combination);
    }
    if (message.quiet !== undefined && message.quiet !== false) {
      writer.uint32(80).bool(message.quiet);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Hyperscan_Regex {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHyperscan_Regex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.regex = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.caseless = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.dot_all = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.multiline = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.allow_empty = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.utf8 = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.ucp = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.combination = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.quiet = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Hyperscan_Regex {
    return {
      $type: Hyperscan_Regex.$type,
      regex: isSet(object.regex) ? globalThis.String(object.regex) : undefined,
      id: isSet(object.id) ? globalThis.Number(object.id) : undefined,
      caseless: isSet(object.caseless) ? globalThis.Boolean(object.caseless) : undefined,
      dot_all: isSet(object.dot_all) ? globalThis.Boolean(object.dot_all) : undefined,
      multiline: isSet(object.multiline) ? globalThis.Boolean(object.multiline) : undefined,
      allow_empty: isSet(object.allow_empty) ? globalThis.Boolean(object.allow_empty) : undefined,
      utf8: isSet(object.utf8) ? globalThis.Boolean(object.utf8) : undefined,
      ucp: isSet(object.ucp) ? globalThis.Boolean(object.ucp) : undefined,
      combination: isSet(object.combination) ? globalThis.Boolean(object.combination) : undefined,
      quiet: isSet(object.quiet) ? globalThis.Boolean(object.quiet) : undefined,
    };
  },

  toJSON(message: Hyperscan_Regex): unknown {
    const obj: any = {};
    if (message.regex !== undefined) {
      obj.regex = message.regex;
    }
    if (message.id !== undefined) {
      obj.id = Math.round(message.id);
    }
    if (message.caseless !== undefined) {
      obj.caseless = message.caseless;
    }
    if (message.dot_all !== undefined) {
      obj.dot_all = message.dot_all;
    }
    if (message.multiline !== undefined) {
      obj.multiline = message.multiline;
    }
    if (message.allow_empty !== undefined) {
      obj.allow_empty = message.allow_empty;
    }
    if (message.utf8 !== undefined) {
      obj.utf8 = message.utf8;
    }
    if (message.ucp !== undefined) {
      obj.ucp = message.ucp;
    }
    if (message.combination !== undefined) {
      obj.combination = message.combination;
    }
    if (message.quiet !== undefined) {
      obj.quiet = message.quiet;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Hyperscan_Regex>, I>>(base?: I): Hyperscan_Regex {
    return Hyperscan_Regex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Hyperscan_Regex>, I>>(object: I): Hyperscan_Regex {
    const message = createBaseHyperscan_Regex();
    message.regex = object.regex ?? undefined;
    message.id = object.id ?? undefined;
    message.caseless = object.caseless ?? undefined;
    message.dot_all = object.dot_all ?? undefined;
    message.multiline = object.multiline ?? undefined;
    message.allow_empty = object.allow_empty ?? undefined;
    message.utf8 = object.utf8 ?? undefined;
    message.ucp = object.ucp ?? undefined;
    message.combination = object.combination ?? undefined;
    message.quiet = object.quiet ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Hyperscan_Regex.$type, Hyperscan_Regex);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
