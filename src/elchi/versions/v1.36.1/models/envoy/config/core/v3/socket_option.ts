// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/core/v3/socket_option.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.config.core.v3";

/**
 * Generic socket option message. This would be used to set socket options that
 * might not exist in upstream kernels or precompiled Envoy binaries.
 *
 * For example:
 *
 * .. code-block:: json
 *
 *  {
 *    "description": "support tcp keep alive",
 *    "state": 0,
 *    "level": 1,
 *    "name": 9,
 *    "int_value": 1,
 *  }
 *
 * 1 means SOL_SOCKET and 9 means SO_KEEPALIVE on Linux.
 * With the above configuration, `TCP Keep-Alives <https://www.freesoft.org/CIE/RFC/1122/114.htm>`_
 * can be enabled in socket with Linux, which can be used in
 * :ref:`listener's<envoy_v3_api_field_config.listener.v3.Listener.socket_options>` or
 * :ref:`admin's <envoy_v3_api_field_config.bootstrap.v3.Admin.socket_options>` socket_options etc.
 *
 * It should be noted that the name or level may have different values on different platforms.
 * [#next-free-field: 8]
 */
export interface SocketOption {
  $type: "envoy.config.core.v3.SocketOption";
  /**
   * An optional name to give this socket option for debugging, etc.
   * Uniqueness is not required and no special meaning is assumed.
   */
  description?:
    | string
    | undefined;
  /** Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP */
  level?:
    | number
    | undefined;
  /** The numeric name as passed to setsockopt */
  name?: number | undefined;
  value?:
    | //
    /** Because many sockopts take an int value. */
    { $case: "int_value"; int_value: number }
    | //
    /** Otherwise it's a byte buffer. */
    { $case: "buf_value"; buf_value: Uint8Array }
    | undefined;
  /**
   * The state in which the option will be applied. When used in BindConfig
   * STATE_PREBIND is currently the only valid value.
   */
  state?:
    | SocketOption_SocketState
    | undefined;
  /**
   * Apply the socket option to the specified `socket type <https://linux.die.net/man/2/socket>`_.
   * If not specified, the socket option will be applied to all socket types.
   */
  type?: SocketOption_SocketType | undefined;
}

export enum SocketOption_SocketState {
  /** STATE_PREBIND - Socket options are applied after socket creation but before binding the socket to a port */
  STATE_PREBIND = "STATE_PREBIND",
  /** STATE_BOUND - Socket options are applied after binding the socket to a port but before calling listen() */
  STATE_BOUND = "STATE_BOUND",
  /** STATE_LISTENING - Socket options are applied after calling listen() */
  STATE_LISTENING = "STATE_LISTENING",
}

export function socketOption_SocketStateFromJSON(object: any): SocketOption_SocketState {
  switch (object) {
    case 0:
    case "STATE_PREBIND":
      return SocketOption_SocketState.STATE_PREBIND;
    case 1:
    case "STATE_BOUND":
      return SocketOption_SocketState.STATE_BOUND;
    case 2:
    case "STATE_LISTENING":
      return SocketOption_SocketState.STATE_LISTENING;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SocketOption_SocketState");
  }
}

export function socketOption_SocketStateToJSON(object: SocketOption_SocketState): string {
  switch (object) {
    case SocketOption_SocketState.STATE_PREBIND:
      return "STATE_PREBIND";
    case SocketOption_SocketState.STATE_BOUND:
      return "STATE_BOUND";
    case SocketOption_SocketState.STATE_LISTENING:
      return "STATE_LISTENING";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SocketOption_SocketState");
  }
}

export function socketOption_SocketStateToNumber(object: SocketOption_SocketState): number {
  switch (object) {
    case SocketOption_SocketState.STATE_PREBIND:
      return 0;
    case SocketOption_SocketState.STATE_BOUND:
      return 1;
    case SocketOption_SocketState.STATE_LISTENING:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SocketOption_SocketState");
  }
}

/**
 * The `socket type <https://linux.die.net/man/2/socket>`_ to apply the socket option to.
 * Only one field should be set. If multiple fields are set, the precedence order will determine
 * the selected one. If none of the fields is set, the socket option will be applied to all socket types.
 *
 * For example:
 * If :ref:`stream <envoy_v3_api_field_config.core.v3.SocketOption.SocketType.stream>` is set,
 * it takes precedence over :ref:`datagram <envoy_v3_api_field_config.core.v3.SocketOption.SocketType.datagram>`.
 */
export interface SocketOption_SocketType {
  $type: "envoy.config.core.v3.SocketOption.SocketType";
  /** Apply the socket option to the stream socket type. */
  stream?:
    | SocketOption_SocketType_Stream
    | undefined;
  /** Apply the socket option to the datagram socket type. */
  datagram?: SocketOption_SocketType_Datagram | undefined;
}

/** The stream socket type. */
export interface SocketOption_SocketType_Stream {
  $type: "envoy.config.core.v3.SocketOption.SocketType.Stream";
}

/** The datagram socket type. */
export interface SocketOption_SocketType_Datagram {
  $type: "envoy.config.core.v3.SocketOption.SocketType.Datagram";
}

export interface SocketOptionsOverride {
  $type: "envoy.config.core.v3.SocketOptionsOverride";
  socket_options?: SocketOption[] | undefined;
}

function createBaseSocketOption(): SocketOption {
  return { $type: "envoy.config.core.v3.SocketOption", value: undefined };
}

export const SocketOption: MessageFns<SocketOption, "envoy.config.core.v3.SocketOption"> = {
  $type: "envoy.config.core.v3.SocketOption" as const,

  encode(message: SocketOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== undefined && message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.level !== undefined && message.level !== 0) {
      writer.uint32(16).int64(message.level);
    }
    if (message.name !== undefined && message.name !== 0) {
      writer.uint32(24).int64(message.name);
    }
    switch (message.value?.$case) {
      case "int_value":
        writer.uint32(32).int64(message.value.int_value);
        break;
      case "buf_value":
        writer.uint32(42).bytes(message.value.buf_value);
        break;
    }
    if (message.state !== undefined && message.state !== SocketOption_SocketState.STATE_PREBIND) {
      writer.uint32(48).int32(socketOption_SocketStateToNumber(message.state));
    }
    if (message.type !== undefined) {
      SocketOption_SocketType.encode(message.type, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.name = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.value = { $case: "int_value", int_value: longToNumber(reader.int64()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.value = { $case: "buf_value", buf_value: reader.bytes() };
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.state = socketOption_SocketStateFromJSON(reader.int32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.type = SocketOption_SocketType.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketOption {
    return {
      $type: SocketOption.$type,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      level: isSet(object.level) ? globalThis.Number(object.level) : undefined,
      name: isSet(object.name) ? globalThis.Number(object.name) : undefined,
      value: isSet(object.int_value)
        ? { $case: "int_value", int_value: globalThis.Number(object.int_value) }
        : isSet(object.buf_value)
        ? { $case: "buf_value", buf_value: bytesFromBase64(object.buf_value) }
        : undefined,
      state: isSet(object.state) ? socketOption_SocketStateFromJSON(object.state) : undefined,
      type: isSet(object.type) ? SocketOption_SocketType.fromJSON(object.type) : undefined,
    };
  },

  toJSON(message: SocketOption): unknown {
    const obj: any = {};
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.level !== undefined) {
      obj.level = Math.round(message.level);
    }
    if (message.name !== undefined) {
      obj.name = Math.round(message.name);
    }
    if (message.value?.$case === "int_value") {
      obj.int_value = Math.round(message.value.int_value);
    }
    if (message.value?.$case === "buf_value") {
      obj.buf_value = base64FromBytes(message.value.buf_value);
    }
    if (message.state !== undefined) {
      obj.state = socketOption_SocketStateToJSON(message.state);
    }
    if (message.type !== undefined) {
      obj.type = SocketOption_SocketType.toJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketOption>, I>>(base?: I): SocketOption {
    return SocketOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketOption>, I>>(object: I): SocketOption {
    const message = createBaseSocketOption();
    message.description = object.description ?? undefined;
    message.level = object.level ?? undefined;
    message.name = object.name ?? undefined;
    if (
      object.value?.$case === "int_value" && object.value?.int_value !== undefined && object.value?.int_value !== null
    ) {
      message.value = { $case: "int_value", int_value: object.value.int_value };
    }
    if (
      object.value?.$case === "buf_value" && object.value?.buf_value !== undefined && object.value?.buf_value !== null
    ) {
      message.value = { $case: "buf_value", buf_value: object.value.buf_value };
    }
    message.state = object.state ?? undefined;
    message.type = (object.type !== undefined && object.type !== null)
      ? SocketOption_SocketType.fromPartial(object.type)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketOption.$type, SocketOption);

function createBaseSocketOption_SocketType(): SocketOption_SocketType {
  return { $type: "envoy.config.core.v3.SocketOption.SocketType" };
}

export const SocketOption_SocketType: MessageFns<
  SocketOption_SocketType,
  "envoy.config.core.v3.SocketOption.SocketType"
> = {
  $type: "envoy.config.core.v3.SocketOption.SocketType" as const,

  encode(message: SocketOption_SocketType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stream !== undefined) {
      SocketOption_SocketType_Stream.encode(message.stream, writer.uint32(10).fork()).join();
    }
    if (message.datagram !== undefined) {
      SocketOption_SocketType_Datagram.encode(message.datagram, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketOption_SocketType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketOption_SocketType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stream = SocketOption_SocketType_Stream.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.datagram = SocketOption_SocketType_Datagram.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketOption_SocketType {
    return {
      $type: SocketOption_SocketType.$type,
      stream: isSet(object.stream) ? SocketOption_SocketType_Stream.fromJSON(object.stream) : undefined,
      datagram: isSet(object.datagram) ? SocketOption_SocketType_Datagram.fromJSON(object.datagram) : undefined,
    };
  },

  toJSON(message: SocketOption_SocketType): unknown {
    const obj: any = {};
    if (message.stream !== undefined) {
      obj.stream = SocketOption_SocketType_Stream.toJSON(message.stream);
    }
    if (message.datagram !== undefined) {
      obj.datagram = SocketOption_SocketType_Datagram.toJSON(message.datagram);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketOption_SocketType>, I>>(base?: I): SocketOption_SocketType {
    return SocketOption_SocketType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketOption_SocketType>, I>>(object: I): SocketOption_SocketType {
    const message = createBaseSocketOption_SocketType();
    message.stream = (object.stream !== undefined && object.stream !== null)
      ? SocketOption_SocketType_Stream.fromPartial(object.stream)
      : undefined;
    message.datagram = (object.datagram !== undefined && object.datagram !== null)
      ? SocketOption_SocketType_Datagram.fromPartial(object.datagram)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketOption_SocketType.$type, SocketOption_SocketType);

function createBaseSocketOption_SocketType_Stream(): SocketOption_SocketType_Stream {
  return { $type: "envoy.config.core.v3.SocketOption.SocketType.Stream" };
}

export const SocketOption_SocketType_Stream: MessageFns<
  SocketOption_SocketType_Stream,
  "envoy.config.core.v3.SocketOption.SocketType.Stream"
> = {
  $type: "envoy.config.core.v3.SocketOption.SocketType.Stream" as const,

  encode(_: SocketOption_SocketType_Stream, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketOption_SocketType_Stream {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketOption_SocketType_Stream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SocketOption_SocketType_Stream {
    return { $type: SocketOption_SocketType_Stream.$type };
  },

  toJSON(_: SocketOption_SocketType_Stream): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketOption_SocketType_Stream>, I>>(base?: I): SocketOption_SocketType_Stream {
    return SocketOption_SocketType_Stream.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketOption_SocketType_Stream>, I>>(_: I): SocketOption_SocketType_Stream {
    const message = createBaseSocketOption_SocketType_Stream();
    return message;
  },
};

messageTypeRegistry.set(SocketOption_SocketType_Stream.$type, SocketOption_SocketType_Stream);

function createBaseSocketOption_SocketType_Datagram(): SocketOption_SocketType_Datagram {
  return { $type: "envoy.config.core.v3.SocketOption.SocketType.Datagram" };
}

export const SocketOption_SocketType_Datagram: MessageFns<
  SocketOption_SocketType_Datagram,
  "envoy.config.core.v3.SocketOption.SocketType.Datagram"
> = {
  $type: "envoy.config.core.v3.SocketOption.SocketType.Datagram" as const,

  encode(_: SocketOption_SocketType_Datagram, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketOption_SocketType_Datagram {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketOption_SocketType_Datagram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SocketOption_SocketType_Datagram {
    return { $type: SocketOption_SocketType_Datagram.$type };
  },

  toJSON(_: SocketOption_SocketType_Datagram): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketOption_SocketType_Datagram>, I>>(
    base?: I,
  ): SocketOption_SocketType_Datagram {
    return SocketOption_SocketType_Datagram.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketOption_SocketType_Datagram>, I>>(
    _: I,
  ): SocketOption_SocketType_Datagram {
    const message = createBaseSocketOption_SocketType_Datagram();
    return message;
  },
};

messageTypeRegistry.set(SocketOption_SocketType_Datagram.$type, SocketOption_SocketType_Datagram);

function createBaseSocketOptionsOverride(): SocketOptionsOverride {
  return { $type: "envoy.config.core.v3.SocketOptionsOverride" };
}

export const SocketOptionsOverride: MessageFns<SocketOptionsOverride, "envoy.config.core.v3.SocketOptionsOverride"> = {
  $type: "envoy.config.core.v3.SocketOptionsOverride" as const,

  encode(message: SocketOptionsOverride, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.socket_options !== undefined && message.socket_options.length !== 0) {
      for (const v of message.socket_options) {
        SocketOption.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketOptionsOverride {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketOptionsOverride();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.socket_options === undefined) {
            message.socket_options = [];
          }
          const el = SocketOption.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.socket_options!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketOptionsOverride {
    return {
      $type: SocketOptionsOverride.$type,
      socket_options: globalThis.Array.isArray(object?.socket_options)
        ? object.socket_options.map((e: any) => SocketOption.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: SocketOptionsOverride): unknown {
    const obj: any = {};
    if (message.socket_options?.length) {
      obj.socket_options = message.socket_options.map((e) => SocketOption.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketOptionsOverride>, I>>(base?: I): SocketOptionsOverride {
    return SocketOptionsOverride.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketOptionsOverride>, I>>(object: I): SocketOptionsOverride {
    const message = createBaseSocketOptionsOverride();
    message.socket_options = object.socket_options?.map((e) => SocketOption.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketOptionsOverride.$type, SocketOptionsOverride);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
