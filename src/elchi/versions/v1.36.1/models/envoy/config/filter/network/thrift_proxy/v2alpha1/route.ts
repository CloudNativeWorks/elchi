// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Metadata } from "../../../../../api/v2/core/base";
import { HeaderMatcher, RateLimit } from "../../../../../api/v2/route/route_components";

export const protobufPackage = "envoy.config.filter.network.thrift_proxy.v2alpha1";

export interface RouteConfiguration {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration";
  /** The name of the route configuration. Reserved for future use in asynchronous route discovery. */
  name?:
    | string
    | undefined;
  /**
   * The list of routes that will be matched, in order, against incoming requests. The first route
   * that matches will be used.
   */
  routes?: Route[] | undefined;
}

export interface Route {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.Route";
  /** Route matching parameters. */
  match?:
    | RouteMatch
    | undefined;
  /** Route request to some upstream cluster. */
  route?: RouteAction | undefined;
}

export interface RouteMatch {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch";
  match_specifier?:
    | //
    /**
     * If specified, the route must exactly match the request method name. As a special case, an
     * empty string matches any request method name.
     */
    { $case: "method_name"; method_name: string }
    | //
    /**
     * If specified, the route must have the service name as the request method name prefix. As a
     * special case, an empty string matches any service name. Only relevant when service
     * multiplexing.
     */
    { $case: "service_name"; service_name: string }
    | undefined;
  /**
   * Inverts whatever matching is done in the :ref:`method_name
   * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.method_name>` or
   * :ref:`service_name
   * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.service_name>` fields.
   * Cannot be combined with wildcard matching as that would result in routes never being matched.
   *
   * .. note::
   *
   *   This does not invert matching done as part of the :ref:`headers field
   *   <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteMatch.headers>` field. To
   *   invert header matching, see :ref:`invert_match
   *   <envoy_api_field_route.HeaderMatcher.invert_match>`.
   */
  invert?:
    | boolean
    | undefined;
  /**
   * Specifies a set of headers that the route should match on. The router will check the requestâ€™s
   * headers against all the specified headers in the route config. A match will happen if all the
   * headers in the route are present in the request with the same values (or based on presence if
   * the value field is not in the config). Note that this only applies for Thrift transports and/or
   * protocols that support headers.
   */
  headers?: HeaderMatcher[] | undefined;
}

/** [#next-free-field: 7] */
export interface RouteAction {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction";
  cluster_specifier?:
    | //
    /**
     * Indicates a single upstream cluster to which the request should be routed
     * to.
     */
    { $case: "cluster"; cluster: string }
    | //
    /**
     * Multiple upstream clusters can be specified for a given route. The
     * request is routed to one of the upstream clusters based on weights
     * assigned to each cluster.
     */
    { $case: "weighted_clusters"; weighted_clusters: WeightedCluster }
    | //
    /**
     * Envoy will determine the cluster to route to by reading the value of the
     * Thrift header named by cluster_header from the request headers. If the
     * header is not found or the referenced cluster does not exist Envoy will
     * respond with an unknown method exception or an internal error exception,
     * respectively.
     */
    { $case: "cluster_header"; cluster_header: string }
    | undefined;
  /**
   * Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
   * the upstream cluster with metadata matching what is set in this field will be considered.
   * Note that this will be merged with what's provided in :ref:`WeightedCluster.metadata_match
   * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight.metadata_match>`,
   * with values there taking precedence. Keys and values should be provided under the "envoy.lb"
   * metadata key.
   */
  metadata_match?:
    | Metadata
    | undefined;
  /**
   * Specifies a set of rate limit configurations that could be applied to the route.
   * N.B. Thrift service or method name matching can be achieved by specifying a RequestHeaders
   * action with the header name ":method-name".
   */
  rate_limits?:
    | RateLimit[]
    | undefined;
  /**
   * Strip the service prefix from the method name, if there's a prefix. For
   * example, the method call Service:method would end up being just method.
   */
  strip_service_name?: boolean | undefined;
}

/**
 * Allows for specification of multiple upstream clusters along with weights that indicate the
 * percentage of traffic to be forwarded to each cluster. The router selects an upstream cluster
 * based on these weights.
 */
export interface WeightedCluster {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster";
  /** Specifies one or more upstream clusters associated with the route. */
  clusters?: WeightedCluster_ClusterWeight[] | undefined;
}

export interface WeightedCluster_ClusterWeight {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight";
  /** Name of the upstream cluster. */
  name?:
    | string
    | undefined;
  /**
   * When a request matches the route, the choice of an upstream cluster is determined by its
   * weight. The sum of weights across all entries in the clusters array determines the total
   * weight.
   */
  weight?:
    | number
    | undefined;
  /**
   * Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
   * the upstream cluster with metadata matching what is set in this field, combined with what's
   * provided in :ref:`RouteAction's metadata_match
   * <envoy_api_field_config.filter.network.thrift_proxy.v2alpha1.RouteAction.metadata_match>`,
   * will be considered. Values here will take precedence. Keys and values should be provided
   * under the "envoy.lb" metadata key.
   */
  metadata_match?: Metadata | undefined;
}

function createBaseRouteConfiguration(): RouteConfiguration {
  return { $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration" };
}

export const RouteConfiguration: MessageFns<
  RouteConfiguration,
  "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration"
> = {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration" as const,

  encode(message: RouteConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.routes !== undefined && message.routes.length !== 0) {
      for (const v of message.routes) {
        Route.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.routes === undefined) {
            message.routes = [];
          }
          const el = Route.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.routes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteConfiguration {
    return {
      $type: RouteConfiguration.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => Route.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: RouteConfiguration): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Route.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteConfiguration>, I>>(base?: I): RouteConfiguration {
    return RouteConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteConfiguration>, I>>(object: I): RouteConfiguration {
    const message = createBaseRouteConfiguration();
    message.name = object.name ?? undefined;
    message.routes = object.routes?.map((e) => Route.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteConfiguration.$type, RouteConfiguration);

function createBaseRoute(): Route {
  return { $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.Route" };
}

export const Route: MessageFns<Route, "envoy.config.filter.network.thrift_proxy.v2alpha1.Route"> = {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.Route" as const,

  encode(message: Route, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.match !== undefined) {
      RouteMatch.encode(message.match, writer.uint32(10).fork()).join();
    }
    if (message.route !== undefined) {
      RouteAction.encode(message.route, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Route {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match = RouteMatch.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.route = RouteAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Route {
    return {
      $type: Route.$type,
      match: isSet(object.match) ? RouteMatch.fromJSON(object.match) : undefined,
      route: isSet(object.route) ? RouteAction.fromJSON(object.route) : undefined,
    };
  },

  toJSON(message: Route): unknown {
    const obj: any = {};
    if (message.match !== undefined) {
      obj.match = RouteMatch.toJSON(message.match);
    }
    if (message.route !== undefined) {
      obj.route = RouteAction.toJSON(message.route);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Route>, I>>(base?: I): Route {
    return Route.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Route>, I>>(object: I): Route {
    const message = createBaseRoute();
    message.match = (object.match !== undefined && object.match !== null)
      ? RouteMatch.fromPartial(object.match)
      : undefined;
    message.route = (object.route !== undefined && object.route !== null)
      ? RouteAction.fromPartial(object.route)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Route.$type, Route);

function createBaseRouteMatch(): RouteMatch {
  return { $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch", match_specifier: undefined };
}

export const RouteMatch: MessageFns<RouteMatch, "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch"> = {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch" as const,

  encode(message: RouteMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.match_specifier?.$case) {
      case "method_name":
        writer.uint32(10).string(message.match_specifier.method_name);
        break;
      case "service_name":
        writer.uint32(18).string(message.match_specifier.service_name);
        break;
    }
    if (message.invert !== undefined && message.invert !== false) {
      writer.uint32(24).bool(message.invert);
    }
    if (message.headers !== undefined && message.headers.length !== 0) {
      for (const v of message.headers) {
        HeaderMatcher.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match_specifier = { $case: "method_name", method_name: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.match_specifier = { $case: "service_name", service_name: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.invert = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.headers === undefined) {
            message.headers = [];
          }
          const el = HeaderMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.headers!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteMatch {
    return {
      $type: RouteMatch.$type,
      match_specifier: isSet(object.method_name)
        ? { $case: "method_name", method_name: globalThis.String(object.method_name) }
        : isSet(object.service_name)
        ? { $case: "service_name", service_name: globalThis.String(object.service_name) }
        : undefined,
      invert: isSet(object.invert) ? globalThis.Boolean(object.invert) : undefined,
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => HeaderMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: RouteMatch): unknown {
    const obj: any = {};
    if (message.match_specifier?.$case === "method_name") {
      obj.method_name = message.match_specifier.method_name;
    }
    if (message.match_specifier?.$case === "service_name") {
      obj.service_name = message.match_specifier.service_name;
    }
    if (message.invert !== undefined) {
      obj.invert = message.invert;
    }
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => HeaderMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteMatch>, I>>(base?: I): RouteMatch {
    return RouteMatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteMatch>, I>>(object: I): RouteMatch {
    const message = createBaseRouteMatch();
    if (
      object.match_specifier?.$case === "method_name" &&
      object.match_specifier?.method_name !== undefined &&
      object.match_specifier?.method_name !== null
    ) {
      message.match_specifier = { $case: "method_name", method_name: object.match_specifier.method_name };
    }
    if (
      object.match_specifier?.$case === "service_name" &&
      object.match_specifier?.service_name !== undefined &&
      object.match_specifier?.service_name !== null
    ) {
      message.match_specifier = { $case: "service_name", service_name: object.match_specifier.service_name };
    }
    message.invert = object.invert ?? undefined;
    message.headers = object.headers?.map((e) => HeaderMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteMatch.$type, RouteMatch);

function createBaseRouteAction(): RouteAction {
  return { $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction", cluster_specifier: undefined };
}

export const RouteAction: MessageFns<RouteAction, "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction"> = {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction" as const,

  encode(message: RouteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.cluster_specifier?.$case) {
      case "cluster":
        writer.uint32(10).string(message.cluster_specifier.cluster);
        break;
      case "weighted_clusters":
        WeightedCluster.encode(message.cluster_specifier.weighted_clusters, writer.uint32(18).fork()).join();
        break;
      case "cluster_header":
        writer.uint32(50).string(message.cluster_specifier.cluster_header);
        break;
    }
    if (message.metadata_match !== undefined) {
      Metadata.encode(message.metadata_match, writer.uint32(26).fork()).join();
    }
    if (message.rate_limits !== undefined && message.rate_limits.length !== 0) {
      for (const v of message.rate_limits) {
        RateLimit.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    if (message.strip_service_name !== undefined && message.strip_service_name !== false) {
      writer.uint32(40).bool(message.strip_service_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster_specifier = { $case: "cluster", cluster: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cluster_specifier = {
            $case: "weighted_clusters",
            weighted_clusters: WeightedCluster.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.cluster_specifier = { $case: "cluster_header", cluster_header: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata_match = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.rate_limits === undefined) {
            message.rate_limits = [];
          }
          const el = RateLimit.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.rate_limits!.push(el);
          }
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.strip_service_name = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteAction {
    return {
      $type: RouteAction.$type,
      cluster_specifier: isSet(object.cluster)
        ? { $case: "cluster", cluster: globalThis.String(object.cluster) }
        : isSet(object.weighted_clusters)
        ? { $case: "weighted_clusters", weighted_clusters: WeightedCluster.fromJSON(object.weighted_clusters) }
        : isSet(object.cluster_header)
        ? { $case: "cluster_header", cluster_header: globalThis.String(object.cluster_header) }
        : undefined,
      metadata_match: isSet(object.metadata_match) ? Metadata.fromJSON(object.metadata_match) : undefined,
      rate_limits: globalThis.Array.isArray(object?.rate_limits)
        ? object.rate_limits.map((e: any) => RateLimit.fromJSON(e))
        : undefined,
      strip_service_name: isSet(object.strip_service_name) ? globalThis.Boolean(object.strip_service_name) : undefined,
    };
  },

  toJSON(message: RouteAction): unknown {
    const obj: any = {};
    if (message.cluster_specifier?.$case === "cluster") {
      obj.cluster = message.cluster_specifier.cluster;
    }
    if (message.cluster_specifier?.$case === "weighted_clusters") {
      obj.weighted_clusters = WeightedCluster.toJSON(message.cluster_specifier.weighted_clusters);
    }
    if (message.cluster_specifier?.$case === "cluster_header") {
      obj.cluster_header = message.cluster_specifier.cluster_header;
    }
    if (message.metadata_match !== undefined) {
      obj.metadata_match = Metadata.toJSON(message.metadata_match);
    }
    if (message.rate_limits?.length) {
      obj.rate_limits = message.rate_limits.map((e) => RateLimit.toJSON(e));
    }
    if (message.strip_service_name !== undefined) {
      obj.strip_service_name = message.strip_service_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteAction>, I>>(base?: I): RouteAction {
    return RouteAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteAction>, I>>(object: I): RouteAction {
    const message = createBaseRouteAction();
    if (
      object.cluster_specifier?.$case === "cluster" &&
      object.cluster_specifier?.cluster !== undefined &&
      object.cluster_specifier?.cluster !== null
    ) {
      message.cluster_specifier = { $case: "cluster", cluster: object.cluster_specifier.cluster };
    }
    if (
      object.cluster_specifier?.$case === "weighted_clusters" &&
      object.cluster_specifier?.weighted_clusters !== undefined &&
      object.cluster_specifier?.weighted_clusters !== null
    ) {
      message.cluster_specifier = {
        $case: "weighted_clusters",
        weighted_clusters: WeightedCluster.fromPartial(object.cluster_specifier.weighted_clusters),
      };
    }
    if (
      object.cluster_specifier?.$case === "cluster_header" &&
      object.cluster_specifier?.cluster_header !== undefined &&
      object.cluster_specifier?.cluster_header !== null
    ) {
      message.cluster_specifier = { $case: "cluster_header", cluster_header: object.cluster_specifier.cluster_header };
    }
    message.metadata_match = (object.metadata_match !== undefined && object.metadata_match !== null)
      ? Metadata.fromPartial(object.metadata_match)
      : undefined;
    message.rate_limits = object.rate_limits?.map((e) => RateLimit.fromPartial(e)) || undefined;
    message.strip_service_name = object.strip_service_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteAction.$type, RouteAction);

function createBaseWeightedCluster(): WeightedCluster {
  return { $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster" };
}

export const WeightedCluster: MessageFns<
  WeightedCluster,
  "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster"
> = {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster" as const,

  encode(message: WeightedCluster, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clusters !== undefined && message.clusters.length !== 0) {
      for (const v of message.clusters) {
        WeightedCluster_ClusterWeight.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeightedCluster {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeightedCluster();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.clusters === undefined) {
            message.clusters = [];
          }
          const el = WeightedCluster_ClusterWeight.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.clusters!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeightedCluster {
    return {
      $type: WeightedCluster.$type,
      clusters: globalThis.Array.isArray(object?.clusters)
        ? object.clusters.map((e: any) => WeightedCluster_ClusterWeight.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: WeightedCluster): unknown {
    const obj: any = {};
    if (message.clusters?.length) {
      obj.clusters = message.clusters.map((e) => WeightedCluster_ClusterWeight.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeightedCluster>, I>>(base?: I): WeightedCluster {
    return WeightedCluster.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeightedCluster>, I>>(object: I): WeightedCluster {
    const message = createBaseWeightedCluster();
    message.clusters = object.clusters?.map((e) => WeightedCluster_ClusterWeight.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(WeightedCluster.$type, WeightedCluster);

function createBaseWeightedCluster_ClusterWeight(): WeightedCluster_ClusterWeight {
  return { $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight" };
}

export const WeightedCluster_ClusterWeight: MessageFns<
  WeightedCluster_ClusterWeight,
  "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight"
> = {
  $type: "envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight" as const,

  encode(message: WeightedCluster_ClusterWeight, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.weight !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.weight! }, writer.uint32(18).fork())
        .join();
    }
    if (message.metadata_match !== undefined) {
      Metadata.encode(message.metadata_match, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeightedCluster_ClusterWeight {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeightedCluster_ClusterWeight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weight = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata_match = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeightedCluster_ClusterWeight {
    return {
      $type: WeightedCluster_ClusterWeight.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      weight: isSet(object.weight) ? Number(object.weight) : undefined,
      metadata_match: isSet(object.metadata_match) ? Metadata.fromJSON(object.metadata_match) : undefined,
    };
  },

  toJSON(message: WeightedCluster_ClusterWeight): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.weight !== undefined) {
      obj.weight = message.weight;
    }
    if (message.metadata_match !== undefined) {
      obj.metadata_match = Metadata.toJSON(message.metadata_match);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeightedCluster_ClusterWeight>, I>>(base?: I): WeightedCluster_ClusterWeight {
    return WeightedCluster_ClusterWeight.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeightedCluster_ClusterWeight>, I>>(
    object: I,
  ): WeightedCluster_ClusterWeight {
    const message = createBaseWeightedCluster_ClusterWeight();
    message.name = object.name ?? undefined;
    message.weight = object.weight ?? undefined;
    message.metadata_match = (object.metadata_match !== undefined && object.metadata_match !== null)
      ? Metadata.fromPartial(object.metadata_match)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(WeightedCluster_ClusterWeight.$type, WeightedCluster_ClusterWeight);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
