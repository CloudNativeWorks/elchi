// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v3/zipkin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { HttpService } from "../../core/v3/http_service";

export const protobufPackage = "envoy.config.trace.v3";

/**
 * Configuration for the Zipkin tracer.
 * [#extension: envoy.tracers.zipkin]
 * [#next-free-field: 10]
 */
export interface ZipkinConfig {
  $type: "envoy.config.trace.v3.ZipkinConfig";
  /**
   * The cluster manager cluster that hosts the Zipkin collectors.
   * Note: This field will be deprecated in future releases in favor of
   * :ref:`collector_service <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_service>`.
   * Either this field or collector_service must be specified.
   */
  collector_cluster?:
    | string
    | undefined;
  /**
   * The API endpoint of the Zipkin service where the spans will be sent. When
   * using a standard Zipkin installation.
   * Note: This field will be deprecated in future releases in favor of
   * :ref:`collector_service <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_service>`.
   * Required when using collector_cluster.
   */
  collector_endpoint?:
    | string
    | undefined;
  /**
   * Determines whether a 128bit trace id will be used when creating a new
   * trace instance. The default value is false, which will result in a 64 bit trace id being used.
   */
  trace_id_128bit?:
    | boolean
    | undefined;
  /**
   * Determines whether client and server spans will share the same span context.
   * The default value is true.
   */
  shared_span_context?:
    | boolean
    | undefined;
  /** Determines the selected collector endpoint version. */
  collector_endpoint_version?:
    | ZipkinConfig_CollectorEndpointVersion
    | undefined;
  /**
   * Optional hostname to use when sending spans to the collector_cluster. Useful for collectors
   * that require a specific hostname. Defaults to :ref:`collector_cluster <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_cluster>` above.
   * Note: This field will be deprecated in future releases in favor of
   * :ref:`collector_service <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_service>`.
   */
  collector_hostname?:
    | string
    | undefined;
  /**
   * If this is set to true, then Envoy will be treated as an independent hop in trace chain. A complete span pair will be created for a single
   * request. Server span will be created for the downstream request and client span will be created for the related upstream request.
   * This should be set to true in the following cases:
   *
   * * The Envoy Proxy is used as gateway or ingress.
   * * The Envoy Proxy is used as sidecar but inbound traffic capturing or outbound traffic capturing is disabled.
   * * Any case that the :ref:`start_child_span of router <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>` is set to true.
   *
   * .. attention::
   *
   *   If this is set to true, then the
   *   :ref:`start_child_span of router <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
   *   SHOULD be set to true also to ensure the correctness of trace chain.
   *
   *   Both this field and ``start_child_span`` are deprecated by the
   *   :ref:`spawn_upstream_span <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.spawn_upstream_span>`.
   *   Please use that ``spawn_upstream_span`` field to control the span creation.
   *
   * @deprecated
   */
  split_spans_for_request?:
    | boolean
    | undefined;
  /**
   * Determines which trace context format to use for trace header extraction and propagation.
   * This controls both downstream request header extraction and upstream request header injection.
   * Here is the spec for W3C trace headers: https://www.w3.org/TR/trace-context/
   * The default value is USE_B3 to maintain backward compatibility.
   */
  trace_context_option?:
    | ZipkinConfig_TraceContextOption
    | undefined;
  /**
   * HTTP service configuration for the Zipkin collector.
   * When specified, this configuration takes precedence over the legacy fields:
   * collector_cluster, collector_endpoint, and collector_hostname.
   * This provides a complete HTTP service configuration including cluster, URI, timeout, and headers.
   * If not specified, the legacy fields above will be used for backward compatibility.
   *
   * Required fields when using collector_service:
   *
   * * ``http_uri.cluster`` - Must be specified and non-empty
   * * ``http_uri.uri`` - Must be specified and non-empty
   * * ``http_uri.timeout`` - Optional
   *
   * Full URI Support with Automatic Parsing:
   *
   * The ``uri`` field supports both path-only and full URI formats:
   *
   * .. code-block:: yaml
   *
   *   tracing:
   *     provider:
   *       name: envoy.tracers.zipkin
   *       typed_config:
   *         "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
   *         collector_service:
   *           http_uri:
   *             # Full URI format - hostname and path are extracted automatically
   *             uri: "https://zipkin-collector.example.com/api/v2/spans"
   *             cluster: zipkin
   *             timeout: 5s
   *           request_headers_to_add:
   *             - header:
   *                 key: "X-Custom-Token"
   *                 value: "your-custom-token"
   *             - header:
   *                 key: "X-Service-ID"
   *                 value: "your-service-id"
   *
   * URI Parsing Behavior:
   *
   * * Full URI: ``"https://zipkin-collector.example.com/api/v2/spans"``
   *
   *   * Hostname: ``zipkin-collector.example.com`` (sets HTTP ``Host`` header)
   *   * Path: ``/api/v2/spans`` (sets HTTP request path)
   *
   * * Path only: ``"/api/v2/spans"``
   *
   *   * Hostname: Uses cluster name as fallback
   *   * Path: ``/api/v2/spans``
   */
  collector_service?: HttpService | undefined;
}

/** Available trace context options for handling different trace header formats. */
export enum ZipkinConfig_TraceContextOption {
  /** USE_B3 - Use B3 headers only (default behavior). */
  USE_B3 = "USE_B3",
  /**
   * USE_B3_WITH_W3C_PROPAGATION - Enable B3 and W3C dual header support:
   * - For downstream: Extract from B3 headers first, fallback to W3C traceparent if B3 is unavailable.
   * - For upstream: Inject both B3 and W3C traceparent headers.
   * When this option is NOT set, only B3 headers are used for both extraction and injection.
   */
  USE_B3_WITH_W3C_PROPAGATION = "USE_B3_WITH_W3C_PROPAGATION",
}

export function zipkinConfig_TraceContextOptionFromJSON(object: any): ZipkinConfig_TraceContextOption {
  switch (object) {
    case 0:
    case "USE_B3":
      return ZipkinConfig_TraceContextOption.USE_B3;
    case 1:
    case "USE_B3_WITH_W3C_PROPAGATION":
      return ZipkinConfig_TraceContextOption.USE_B3_WITH_W3C_PROPAGATION;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ZipkinConfig_TraceContextOption");
  }
}

export function zipkinConfig_TraceContextOptionToJSON(object: ZipkinConfig_TraceContextOption): string {
  switch (object) {
    case ZipkinConfig_TraceContextOption.USE_B3:
      return "USE_B3";
    case ZipkinConfig_TraceContextOption.USE_B3_WITH_W3C_PROPAGATION:
      return "USE_B3_WITH_W3C_PROPAGATION";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ZipkinConfig_TraceContextOption");
  }
}

export function zipkinConfig_TraceContextOptionToNumber(object: ZipkinConfig_TraceContextOption): number {
  switch (object) {
    case ZipkinConfig_TraceContextOption.USE_B3:
      return 0;
    case ZipkinConfig_TraceContextOption.USE_B3_WITH_W3C_PROPAGATION:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ZipkinConfig_TraceContextOption");
  }
}

/** Available Zipkin collector endpoint versions. */
export enum ZipkinConfig_CollectorEndpointVersion {
  /**
   * DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE - Zipkin API v1, JSON over HTTP.
   * [#comment: The default implementation of Zipkin client before this field is added was only v1
   * and the way user configure this was by not explicitly specifying the version. Consequently,
   * before this is added, the corresponding Zipkin collector expected to receive v1 payload.
   * Hence the motivation of adding HTTP_JSON_V1 as the default is to avoid a breaking change when
   * user upgrading Envoy with this change. Furthermore, we also immediately deprecate this field,
   * since in Zipkin realm this v1 version is considered to be not preferable anymore.]
   *
   * @deprecated
   */
  DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE = "DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE",
  /** HTTP_JSON - Zipkin API v2, JSON over HTTP. */
  HTTP_JSON = "HTTP_JSON",
  /** HTTP_PROTO - Zipkin API v2, protobuf over HTTP. */
  HTTP_PROTO = "HTTP_PROTO",
  /** GRPC - [#not-implemented-hide:] */
  GRPC = "GRPC",
}

export function zipkinConfig_CollectorEndpointVersionFromJSON(object: any): ZipkinConfig_CollectorEndpointVersion {
  switch (object) {
    case 0:
    case "DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE":
      return ZipkinConfig_CollectorEndpointVersion.DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE;
    case 1:
    case "HTTP_JSON":
      return ZipkinConfig_CollectorEndpointVersion.HTTP_JSON;
    case 2:
    case "HTTP_PROTO":
      return ZipkinConfig_CollectorEndpointVersion.HTTP_PROTO;
    case 3:
    case "GRPC":
      return ZipkinConfig_CollectorEndpointVersion.GRPC;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ZipkinConfig_CollectorEndpointVersion",
      );
  }
}

export function zipkinConfig_CollectorEndpointVersionToJSON(object: ZipkinConfig_CollectorEndpointVersion): string {
  switch (object) {
    case ZipkinConfig_CollectorEndpointVersion.DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE:
      return "DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE";
    case ZipkinConfig_CollectorEndpointVersion.HTTP_JSON:
      return "HTTP_JSON";
    case ZipkinConfig_CollectorEndpointVersion.HTTP_PROTO:
      return "HTTP_PROTO";
    case ZipkinConfig_CollectorEndpointVersion.GRPC:
      return "GRPC";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ZipkinConfig_CollectorEndpointVersion",
      );
  }
}

export function zipkinConfig_CollectorEndpointVersionToNumber(object: ZipkinConfig_CollectorEndpointVersion): number {
  switch (object) {
    case ZipkinConfig_CollectorEndpointVersion.DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE:
      return 0;
    case ZipkinConfig_CollectorEndpointVersion.HTTP_JSON:
      return 1;
    case ZipkinConfig_CollectorEndpointVersion.HTTP_PROTO:
      return 2;
    case ZipkinConfig_CollectorEndpointVersion.GRPC:
      return 3;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ZipkinConfig_CollectorEndpointVersion",
      );
  }
}

function createBaseZipkinConfig(): ZipkinConfig {
  return { $type: "envoy.config.trace.v3.ZipkinConfig" };
}

export const ZipkinConfig: MessageFns<ZipkinConfig, "envoy.config.trace.v3.ZipkinConfig"> = {
  $type: "envoy.config.trace.v3.ZipkinConfig" as const,

  encode(message: ZipkinConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collector_cluster !== undefined && message.collector_cluster !== "") {
      writer.uint32(10).string(message.collector_cluster);
    }
    if (message.collector_endpoint !== undefined && message.collector_endpoint !== "") {
      writer.uint32(18).string(message.collector_endpoint);
    }
    if (message.trace_id_128bit !== undefined && message.trace_id_128bit !== false) {
      writer.uint32(24).bool(message.trace_id_128bit);
    }
    if (message.shared_span_context !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.shared_span_context! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (
      message.collector_endpoint_version !== undefined &&
      message.collector_endpoint_version !== ZipkinConfig_CollectorEndpointVersion.DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE
    ) {
      writer.uint32(40).int32(zipkinConfig_CollectorEndpointVersionToNumber(message.collector_endpoint_version));
    }
    if (message.collector_hostname !== undefined && message.collector_hostname !== "") {
      writer.uint32(50).string(message.collector_hostname);
    }
    if (message.split_spans_for_request !== undefined && message.split_spans_for_request !== false) {
      writer.uint32(56).bool(message.split_spans_for_request);
    }
    if (
      message.trace_context_option !== undefined &&
      message.trace_context_option !== ZipkinConfig_TraceContextOption.USE_B3
    ) {
      writer.uint32(64).int32(zipkinConfig_TraceContextOptionToNumber(message.trace_context_option));
    }
    if (message.collector_service !== undefined) {
      HttpService.encode(message.collector_service, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZipkinConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZipkinConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collector_cluster = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.collector_endpoint = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.trace_id_128bit = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shared_span_context = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.collector_endpoint_version = zipkinConfig_CollectorEndpointVersionFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.collector_hostname = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.split_spans_for_request = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.trace_context_option = zipkinConfig_TraceContextOptionFromJSON(reader.int32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.collector_service = HttpService.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZipkinConfig {
    return {
      $type: ZipkinConfig.$type,
      collector_cluster: isSet(object.collector_cluster) ? globalThis.String(object.collector_cluster) : undefined,
      collector_endpoint: isSet(object.collector_endpoint) ? globalThis.String(object.collector_endpoint) : undefined,
      trace_id_128bit: isSet(object.trace_id_128bit) ? globalThis.Boolean(object.trace_id_128bit) : undefined,
      shared_span_context: isSet(object.shared_span_context) ? Boolean(object.shared_span_context) : undefined,
      collector_endpoint_version: isSet(object.collector_endpoint_version)
        ? zipkinConfig_CollectorEndpointVersionFromJSON(object.collector_endpoint_version)
        : undefined,
      collector_hostname: isSet(object.collector_hostname) ? globalThis.String(object.collector_hostname) : undefined,
      split_spans_for_request: isSet(object.split_spans_for_request)
        ? globalThis.Boolean(object.split_spans_for_request)
        : undefined,
      trace_context_option: isSet(object.trace_context_option)
        ? zipkinConfig_TraceContextOptionFromJSON(object.trace_context_option)
        : undefined,
      collector_service: isSet(object.collector_service) ? HttpService.fromJSON(object.collector_service) : undefined,
    };
  },

  toJSON(message: ZipkinConfig): unknown {
    const obj: any = {};
    if (message.collector_cluster !== undefined) {
      obj.collector_cluster = message.collector_cluster;
    }
    if (message.collector_endpoint !== undefined) {
      obj.collector_endpoint = message.collector_endpoint;
    }
    if (message.trace_id_128bit !== undefined) {
      obj.trace_id_128bit = message.trace_id_128bit;
    }
    if (message.shared_span_context !== undefined) {
      obj.shared_span_context = message.shared_span_context;
    }
    if (message.collector_endpoint_version !== undefined) {
      obj.collector_endpoint_version = zipkinConfig_CollectorEndpointVersionToJSON(message.collector_endpoint_version);
    }
    if (message.collector_hostname !== undefined) {
      obj.collector_hostname = message.collector_hostname;
    }
    if (message.split_spans_for_request !== undefined) {
      obj.split_spans_for_request = message.split_spans_for_request;
    }
    if (message.trace_context_option !== undefined) {
      obj.trace_context_option = zipkinConfig_TraceContextOptionToJSON(message.trace_context_option);
    }
    if (message.collector_service !== undefined) {
      obj.collector_service = HttpService.toJSON(message.collector_service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZipkinConfig>, I>>(base?: I): ZipkinConfig {
    return ZipkinConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZipkinConfig>, I>>(object: I): ZipkinConfig {
    const message = createBaseZipkinConfig();
    message.collector_cluster = object.collector_cluster ?? undefined;
    message.collector_endpoint = object.collector_endpoint ?? undefined;
    message.trace_id_128bit = object.trace_id_128bit ?? undefined;
    message.shared_span_context = object.shared_span_context ?? undefined;
    message.collector_endpoint_version = object.collector_endpoint_version ?? undefined;
    message.collector_hostname = object.collector_hostname ?? undefined;
    message.split_spans_for_request = object.split_spans_for_request ?? undefined;
    message.trace_context_option = object.trace_context_option ?? undefined;
    message.collector_service = (object.collector_service !== undefined && object.collector_service !== null)
      ? HttpService.fromPartial(object.collector_service)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ZipkinConfig.$type, ZipkinConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
