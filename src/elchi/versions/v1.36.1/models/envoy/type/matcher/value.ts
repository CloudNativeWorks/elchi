// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/value.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";
import { DoubleMatcher } from "./number";
import { StringMatcher } from "./string";

export const protobufPackage = "envoy.type.matcher";

/**
 * Specifies the way to match a Protobuf::Value. Primitive values and ListValue are supported.
 * StructValue is not supported and is always not matched.
 * [#next-free-field: 7]
 */
export interface ValueMatcher {
  $type: "envoy.type.matcher.ValueMatcher";
  /** Specifies how to match a value. */
  match_pattern?:
    | //
    /** If specified, a match occurs if and only if the target value is a NullValue. */
    { $case: "null_match"; null_match: ValueMatcher_NullMatch }
    | //
    /**
     * If specified, a match occurs if and only if the target value is a double value and is
     * matched to this field.
     */
    { $case: "double_match"; double_match: DoubleMatcher }
    | //
    /**
     * If specified, a match occurs if and only if the target value is a string value and is
     * matched to this field.
     */
    { $case: "string_match"; string_match: StringMatcher }
    | //
    /**
     * If specified, a match occurs if and only if the target value is a bool value and is equal
     * to this field.
     */
    { $case: "bool_match"; bool_match: boolean }
    | //
    /**
     * If specified, value match will be performed based on whether the path is referring to a
     * valid primitive value in the metadata. If the path is referring to a non-primitive value,
     * the result is always not matched.
     */
    { $case: "present_match"; present_match: boolean }
    | //
    /**
     * If specified, a match occurs if and only if the target value is a list value and
     * is matched to this field.
     */
    { $case: "list_match"; list_match: ListMatcher }
    | undefined;
}

/** NullMatch is an empty message to specify a null value. */
export interface ValueMatcher_NullMatch {
  $type: "envoy.type.matcher.ValueMatcher.NullMatch";
}

/** Specifies the way to match a list value. */
export interface ListMatcher {
  $type: "envoy.type.matcher.ListMatcher";
  match_pattern?:
    | //
    /** If specified, at least one of the values in the list must match the value specified. */
    { $case: "one_of"; one_of: ValueMatcher }
    | undefined;
}

function createBaseValueMatcher(): ValueMatcher {
  return { $type: "envoy.type.matcher.ValueMatcher", match_pattern: undefined };
}

export const ValueMatcher: MessageFns<ValueMatcher, "envoy.type.matcher.ValueMatcher"> = {
  $type: "envoy.type.matcher.ValueMatcher" as const,

  encode(message: ValueMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.match_pattern?.$case) {
      case "null_match":
        ValueMatcher_NullMatch.encode(message.match_pattern.null_match, writer.uint32(10).fork()).join();
        break;
      case "double_match":
        DoubleMatcher.encode(message.match_pattern.double_match, writer.uint32(18).fork()).join();
        break;
      case "string_match":
        StringMatcher.encode(message.match_pattern.string_match, writer.uint32(26).fork()).join();
        break;
      case "bool_match":
        writer.uint32(32).bool(message.match_pattern.bool_match);
        break;
      case "present_match":
        writer.uint32(40).bool(message.match_pattern.present_match);
        break;
      case "list_match":
        ListMatcher.encode(message.match_pattern.list_match, writer.uint32(50).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValueMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValueMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match_pattern = {
            $case: "null_match",
            null_match: ValueMatcher_NullMatch.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.match_pattern = {
            $case: "double_match",
            double_match: DoubleMatcher.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.match_pattern = {
            $case: "string_match",
            string_match: StringMatcher.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.match_pattern = { $case: "bool_match", bool_match: reader.bool() };
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.match_pattern = { $case: "present_match", present_match: reader.bool() };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.match_pattern = { $case: "list_match", list_match: ListMatcher.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValueMatcher {
    return {
      $type: ValueMatcher.$type,
      match_pattern: isSet(object.null_match)
        ? { $case: "null_match", null_match: ValueMatcher_NullMatch.fromJSON(object.null_match) }
        : isSet(object.double_match)
        ? { $case: "double_match", double_match: DoubleMatcher.fromJSON(object.double_match) }
        : isSet(object.string_match)
        ? { $case: "string_match", string_match: StringMatcher.fromJSON(object.string_match) }
        : isSet(object.bool_match)
        ? { $case: "bool_match", bool_match: globalThis.Boolean(object.bool_match) }
        : isSet(object.present_match)
        ? { $case: "present_match", present_match: globalThis.Boolean(object.present_match) }
        : isSet(object.list_match)
        ? { $case: "list_match", list_match: ListMatcher.fromJSON(object.list_match) }
        : undefined,
    };
  },

  toJSON(message: ValueMatcher): unknown {
    const obj: any = {};
    if (message.match_pattern?.$case === "null_match") {
      obj.null_match = ValueMatcher_NullMatch.toJSON(message.match_pattern.null_match);
    }
    if (message.match_pattern?.$case === "double_match") {
      obj.double_match = DoubleMatcher.toJSON(message.match_pattern.double_match);
    }
    if (message.match_pattern?.$case === "string_match") {
      obj.string_match = StringMatcher.toJSON(message.match_pattern.string_match);
    }
    if (message.match_pattern?.$case === "bool_match") {
      obj.bool_match = message.match_pattern.bool_match;
    }
    if (message.match_pattern?.$case === "present_match") {
      obj.present_match = message.match_pattern.present_match;
    }
    if (message.match_pattern?.$case === "list_match") {
      obj.list_match = ListMatcher.toJSON(message.match_pattern.list_match);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValueMatcher>, I>>(base?: I): ValueMatcher {
    return ValueMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValueMatcher>, I>>(object: I): ValueMatcher {
    const message = createBaseValueMatcher();
    if (
      object.match_pattern?.$case === "null_match" &&
      object.match_pattern?.null_match !== undefined &&
      object.match_pattern?.null_match !== null
    ) {
      message.match_pattern = {
        $case: "null_match",
        null_match: ValueMatcher_NullMatch.fromPartial(object.match_pattern.null_match),
      };
    }
    if (
      object.match_pattern?.$case === "double_match" &&
      object.match_pattern?.double_match !== undefined &&
      object.match_pattern?.double_match !== null
    ) {
      message.match_pattern = {
        $case: "double_match",
        double_match: DoubleMatcher.fromPartial(object.match_pattern.double_match),
      };
    }
    if (
      object.match_pattern?.$case === "string_match" &&
      object.match_pattern?.string_match !== undefined &&
      object.match_pattern?.string_match !== null
    ) {
      message.match_pattern = {
        $case: "string_match",
        string_match: StringMatcher.fromPartial(object.match_pattern.string_match),
      };
    }
    if (
      object.match_pattern?.$case === "bool_match" &&
      object.match_pattern?.bool_match !== undefined &&
      object.match_pattern?.bool_match !== null
    ) {
      message.match_pattern = { $case: "bool_match", bool_match: object.match_pattern.bool_match };
    }
    if (
      object.match_pattern?.$case === "present_match" &&
      object.match_pattern?.present_match !== undefined &&
      object.match_pattern?.present_match !== null
    ) {
      message.match_pattern = { $case: "present_match", present_match: object.match_pattern.present_match };
    }
    if (
      object.match_pattern?.$case === "list_match" &&
      object.match_pattern?.list_match !== undefined &&
      object.match_pattern?.list_match !== null
    ) {
      message.match_pattern = {
        $case: "list_match",
        list_match: ListMatcher.fromPartial(object.match_pattern.list_match),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(ValueMatcher.$type, ValueMatcher);

function createBaseValueMatcher_NullMatch(): ValueMatcher_NullMatch {
  return { $type: "envoy.type.matcher.ValueMatcher.NullMatch" };
}

export const ValueMatcher_NullMatch: MessageFns<ValueMatcher_NullMatch, "envoy.type.matcher.ValueMatcher.NullMatch"> = {
  $type: "envoy.type.matcher.ValueMatcher.NullMatch" as const,

  encode(_: ValueMatcher_NullMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValueMatcher_NullMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValueMatcher_NullMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ValueMatcher_NullMatch {
    return { $type: ValueMatcher_NullMatch.$type };
  },

  toJSON(_: ValueMatcher_NullMatch): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ValueMatcher_NullMatch>, I>>(base?: I): ValueMatcher_NullMatch {
    return ValueMatcher_NullMatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValueMatcher_NullMatch>, I>>(_: I): ValueMatcher_NullMatch {
    const message = createBaseValueMatcher_NullMatch();
    return message;
  },
};

messageTypeRegistry.set(ValueMatcher_NullMatch.$type, ValueMatcher_NullMatch);

function createBaseListMatcher(): ListMatcher {
  return { $type: "envoy.type.matcher.ListMatcher", match_pattern: undefined };
}

export const ListMatcher: MessageFns<ListMatcher, "envoy.type.matcher.ListMatcher"> = {
  $type: "envoy.type.matcher.ListMatcher" as const,

  encode(message: ListMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.match_pattern?.$case) {
      case "one_of":
        ValueMatcher.encode(message.match_pattern.one_of, writer.uint32(10).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match_pattern = { $case: "one_of", one_of: ValueMatcher.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMatcher {
    return {
      $type: ListMatcher.$type,
      match_pattern: isSet(object.one_of)
        ? { $case: "one_of", one_of: ValueMatcher.fromJSON(object.one_of) }
        : undefined,
    };
  },

  toJSON(message: ListMatcher): unknown {
    const obj: any = {};
    if (message.match_pattern?.$case === "one_of") {
      obj.one_of = ValueMatcher.toJSON(message.match_pattern.one_of);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMatcher>, I>>(base?: I): ListMatcher {
    return ListMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMatcher>, I>>(object: I): ListMatcher {
    const message = createBaseListMatcher();
    if (
      object.match_pattern?.$case === "one_of" &&
      object.match_pattern?.one_of !== undefined &&
      object.match_pattern?.one_of !== null
    ) {
      message.match_pattern = { $case: "one_of", one_of: ValueMatcher.fromPartial(object.match_pattern.one_of) };
    }
    return message;
  },
};

messageTypeRegistry.set(ListMatcher.$type, ListMatcher);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
