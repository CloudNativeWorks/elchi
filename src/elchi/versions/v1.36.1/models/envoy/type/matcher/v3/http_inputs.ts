// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/v3/http_inputs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.type.matcher.v3";

/**
 * Match input indicates that matching should be done on a specific request header.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.request_headers]
 */
export interface HttpRequestHeaderMatchInput {
  $type: "envoy.type.matcher.v3.HttpRequestHeaderMatchInput";
  /** The request header to match on. */
  header_name?: string | undefined;
}

/**
 * Match input indicates that matching should be done on a specific request trailer.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.request_trailers]
 */
export interface HttpRequestTrailerMatchInput {
  $type: "envoy.type.matcher.v3.HttpRequestTrailerMatchInput";
  /** The request trailer to match on. */
  header_name?: string | undefined;
}

/**
 * Match input indicating that matching should be done on a specific response header.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the response contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.response_headers]
 */
export interface HttpResponseHeaderMatchInput {
  $type: "envoy.type.matcher.v3.HttpResponseHeaderMatchInput";
  /** The response header to match on. */
  header_name?: string | undefined;
}

/**
 * Match input indicates that matching should be done on a specific response trailer.
 * The resulting input string will be all headers for the given key joined by a comma,
 * e.g. if the request contains two 'foo' headers with value 'bar' and 'baz', the input
 * string will be 'bar,baz'.
 * [#comment:TODO(snowp): Link to unified matching docs.]
 * [#extension: envoy.matching.inputs.response_trailers]
 */
export interface HttpResponseTrailerMatchInput {
  $type: "envoy.type.matcher.v3.HttpResponseTrailerMatchInput";
  /** The response trailer to match on. */
  header_name?: string | undefined;
}

/**
 * Match input indicates that matching should be done on a specific query parameter.
 * The resulting input string will be the first query parameter for the value
 * 'query_param'.
 * [#extension: envoy.matching.inputs.query_params]
 */
export interface HttpRequestQueryParamMatchInput {
  $type: "envoy.type.matcher.v3.HttpRequestQueryParamMatchInput";
  /** The query parameter to match on. */
  query_param?: string | undefined;
}

function createBaseHttpRequestHeaderMatchInput(): HttpRequestHeaderMatchInput {
  return { $type: "envoy.type.matcher.v3.HttpRequestHeaderMatchInput" };
}

export const HttpRequestHeaderMatchInput: MessageFns<
  HttpRequestHeaderMatchInput,
  "envoy.type.matcher.v3.HttpRequestHeaderMatchInput"
> = {
  $type: "envoy.type.matcher.v3.HttpRequestHeaderMatchInput" as const,

  encode(message: HttpRequestHeaderMatchInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header_name !== undefined && message.header_name !== "") {
      writer.uint32(10).string(message.header_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRequestHeaderMatchInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRequestHeaderMatchInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRequestHeaderMatchInput {
    return {
      $type: HttpRequestHeaderMatchInput.$type,
      header_name: isSet(object.header_name) ? globalThis.String(object.header_name) : undefined,
    };
  },

  toJSON(message: HttpRequestHeaderMatchInput): unknown {
    const obj: any = {};
    if (message.header_name !== undefined) {
      obj.header_name = message.header_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpRequestHeaderMatchInput>, I>>(base?: I): HttpRequestHeaderMatchInput {
    return HttpRequestHeaderMatchInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpRequestHeaderMatchInput>, I>>(object: I): HttpRequestHeaderMatchInput {
    const message = createBaseHttpRequestHeaderMatchInput();
    message.header_name = object.header_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpRequestHeaderMatchInput.$type, HttpRequestHeaderMatchInput);

function createBaseHttpRequestTrailerMatchInput(): HttpRequestTrailerMatchInput {
  return { $type: "envoy.type.matcher.v3.HttpRequestTrailerMatchInput" };
}

export const HttpRequestTrailerMatchInput: MessageFns<
  HttpRequestTrailerMatchInput,
  "envoy.type.matcher.v3.HttpRequestTrailerMatchInput"
> = {
  $type: "envoy.type.matcher.v3.HttpRequestTrailerMatchInput" as const,

  encode(message: HttpRequestTrailerMatchInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header_name !== undefined && message.header_name !== "") {
      writer.uint32(10).string(message.header_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRequestTrailerMatchInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRequestTrailerMatchInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRequestTrailerMatchInput {
    return {
      $type: HttpRequestTrailerMatchInput.$type,
      header_name: isSet(object.header_name) ? globalThis.String(object.header_name) : undefined,
    };
  },

  toJSON(message: HttpRequestTrailerMatchInput): unknown {
    const obj: any = {};
    if (message.header_name !== undefined) {
      obj.header_name = message.header_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpRequestTrailerMatchInput>, I>>(base?: I): HttpRequestTrailerMatchInput {
    return HttpRequestTrailerMatchInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpRequestTrailerMatchInput>, I>>(object: I): HttpRequestTrailerMatchInput {
    const message = createBaseHttpRequestTrailerMatchInput();
    message.header_name = object.header_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpRequestTrailerMatchInput.$type, HttpRequestTrailerMatchInput);

function createBaseHttpResponseHeaderMatchInput(): HttpResponseHeaderMatchInput {
  return { $type: "envoy.type.matcher.v3.HttpResponseHeaderMatchInput" };
}

export const HttpResponseHeaderMatchInput: MessageFns<
  HttpResponseHeaderMatchInput,
  "envoy.type.matcher.v3.HttpResponseHeaderMatchInput"
> = {
  $type: "envoy.type.matcher.v3.HttpResponseHeaderMatchInput" as const,

  encode(message: HttpResponseHeaderMatchInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header_name !== undefined && message.header_name !== "") {
      writer.uint32(10).string(message.header_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpResponseHeaderMatchInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpResponseHeaderMatchInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpResponseHeaderMatchInput {
    return {
      $type: HttpResponseHeaderMatchInput.$type,
      header_name: isSet(object.header_name) ? globalThis.String(object.header_name) : undefined,
    };
  },

  toJSON(message: HttpResponseHeaderMatchInput): unknown {
    const obj: any = {};
    if (message.header_name !== undefined) {
      obj.header_name = message.header_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpResponseHeaderMatchInput>, I>>(base?: I): HttpResponseHeaderMatchInput {
    return HttpResponseHeaderMatchInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpResponseHeaderMatchInput>, I>>(object: I): HttpResponseHeaderMatchInput {
    const message = createBaseHttpResponseHeaderMatchInput();
    message.header_name = object.header_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpResponseHeaderMatchInput.$type, HttpResponseHeaderMatchInput);

function createBaseHttpResponseTrailerMatchInput(): HttpResponseTrailerMatchInput {
  return { $type: "envoy.type.matcher.v3.HttpResponseTrailerMatchInput" };
}

export const HttpResponseTrailerMatchInput: MessageFns<
  HttpResponseTrailerMatchInput,
  "envoy.type.matcher.v3.HttpResponseTrailerMatchInput"
> = {
  $type: "envoy.type.matcher.v3.HttpResponseTrailerMatchInput" as const,

  encode(message: HttpResponseTrailerMatchInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header_name !== undefined && message.header_name !== "") {
      writer.uint32(10).string(message.header_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpResponseTrailerMatchInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpResponseTrailerMatchInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpResponseTrailerMatchInput {
    return {
      $type: HttpResponseTrailerMatchInput.$type,
      header_name: isSet(object.header_name) ? globalThis.String(object.header_name) : undefined,
    };
  },

  toJSON(message: HttpResponseTrailerMatchInput): unknown {
    const obj: any = {};
    if (message.header_name !== undefined) {
      obj.header_name = message.header_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpResponseTrailerMatchInput>, I>>(base?: I): HttpResponseTrailerMatchInput {
    return HttpResponseTrailerMatchInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpResponseTrailerMatchInput>, I>>(
    object: I,
  ): HttpResponseTrailerMatchInput {
    const message = createBaseHttpResponseTrailerMatchInput();
    message.header_name = object.header_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpResponseTrailerMatchInput.$type, HttpResponseTrailerMatchInput);

function createBaseHttpRequestQueryParamMatchInput(): HttpRequestQueryParamMatchInput {
  return { $type: "envoy.type.matcher.v3.HttpRequestQueryParamMatchInput" };
}

export const HttpRequestQueryParamMatchInput: MessageFns<
  HttpRequestQueryParamMatchInput,
  "envoy.type.matcher.v3.HttpRequestQueryParamMatchInput"
> = {
  $type: "envoy.type.matcher.v3.HttpRequestQueryParamMatchInput" as const,

  encode(message: HttpRequestQueryParamMatchInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query_param !== undefined && message.query_param !== "") {
      writer.uint32(10).string(message.query_param);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpRequestQueryParamMatchInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRequestQueryParamMatchInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query_param = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRequestQueryParamMatchInput {
    return {
      $type: HttpRequestQueryParamMatchInput.$type,
      query_param: isSet(object.query_param) ? globalThis.String(object.query_param) : undefined,
    };
  },

  toJSON(message: HttpRequestQueryParamMatchInput): unknown {
    const obj: any = {};
    if (message.query_param !== undefined) {
      obj.query_param = message.query_param;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpRequestQueryParamMatchInput>, I>>(base?: I): HttpRequestQueryParamMatchInput {
    return HttpRequestQueryParamMatchInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpRequestQueryParamMatchInput>, I>>(
    object: I,
  ): HttpRequestQueryParamMatchInput {
    const message = createBaseHttpRequestQueryParamMatchInput();
    message.query_param = object.query_param ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpRequestQueryParamMatchInput.$type, HttpRequestQueryParamMatchInput);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
