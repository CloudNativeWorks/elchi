// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/metrics/v2/metrics_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { MetricFamily } from "../../../../io/prometheus/client/metrics";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Node } from "../../../api/v2/core/base";

export const protobufPackage = "envoy.service.metrics.v2";

export interface StreamMetricsResponse {
  $type: "envoy.service.metrics.v2.StreamMetricsResponse";
}

export interface StreamMetricsMessage {
  $type: "envoy.service.metrics.v2.StreamMetricsMessage";
  /**
   * Identifier data effectively is a structured metadata. As a performance optimization this will
   * only be sent in the first message on the stream.
   */
  identifier?:
    | StreamMetricsMessage_Identifier
    | undefined;
  /** A list of metric entries */
  envoy_metrics?: MetricFamily[] | undefined;
}

export interface StreamMetricsMessage_Identifier {
  $type: "envoy.service.metrics.v2.StreamMetricsMessage.Identifier";
  /** The node sending metrics over the stream. */
  node?: Node | undefined;
}

function createBaseStreamMetricsResponse(): StreamMetricsResponse {
  return { $type: "envoy.service.metrics.v2.StreamMetricsResponse" };
}

export const StreamMetricsResponse: MessageFns<
  StreamMetricsResponse,
  "envoy.service.metrics.v2.StreamMetricsResponse"
> = {
  $type: "envoy.service.metrics.v2.StreamMetricsResponse" as const,

  encode(_: StreamMetricsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMetricsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMetricsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamMetricsResponse {
    return { $type: StreamMetricsResponse.$type };
  },

  toJSON(_: StreamMetricsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMetricsResponse>, I>>(base?: I): StreamMetricsResponse {
    return StreamMetricsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMetricsResponse>, I>>(_: I): StreamMetricsResponse {
    const message = createBaseStreamMetricsResponse();
    return message;
  },
};

messageTypeRegistry.set(StreamMetricsResponse.$type, StreamMetricsResponse);

function createBaseStreamMetricsMessage(): StreamMetricsMessage {
  return { $type: "envoy.service.metrics.v2.StreamMetricsMessage" };
}

export const StreamMetricsMessage: MessageFns<StreamMetricsMessage, "envoy.service.metrics.v2.StreamMetricsMessage"> = {
  $type: "envoy.service.metrics.v2.StreamMetricsMessage" as const,

  encode(message: StreamMetricsMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== undefined) {
      StreamMetricsMessage_Identifier.encode(message.identifier, writer.uint32(10).fork()).join();
    }
    if (message.envoy_metrics !== undefined && message.envoy_metrics.length !== 0) {
      for (const v of message.envoy_metrics) {
        MetricFamily.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMetricsMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMetricsMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = StreamMetricsMessage_Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.envoy_metrics === undefined) {
            message.envoy_metrics = [];
          }
          const el = MetricFamily.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.envoy_metrics!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMetricsMessage {
    return {
      $type: StreamMetricsMessage.$type,
      identifier: isSet(object.identifier) ? StreamMetricsMessage_Identifier.fromJSON(object.identifier) : undefined,
      envoy_metrics: globalThis.Array.isArray(object?.envoy_metrics)
        ? object.envoy_metrics.map((e: any) => MetricFamily.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: StreamMetricsMessage): unknown {
    const obj: any = {};
    if (message.identifier !== undefined) {
      obj.identifier = StreamMetricsMessage_Identifier.toJSON(message.identifier);
    }
    if (message.envoy_metrics?.length) {
      obj.envoy_metrics = message.envoy_metrics.map((e) => MetricFamily.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMetricsMessage>, I>>(base?: I): StreamMetricsMessage {
    return StreamMetricsMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMetricsMessage>, I>>(object: I): StreamMetricsMessage {
    const message = createBaseStreamMetricsMessage();
    message.identifier = (object.identifier !== undefined && object.identifier !== null)
      ? StreamMetricsMessage_Identifier.fromPartial(object.identifier)
      : undefined;
    message.envoy_metrics = object.envoy_metrics?.map((e) => MetricFamily.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamMetricsMessage.$type, StreamMetricsMessage);

function createBaseStreamMetricsMessage_Identifier(): StreamMetricsMessage_Identifier {
  return { $type: "envoy.service.metrics.v2.StreamMetricsMessage.Identifier" };
}

export const StreamMetricsMessage_Identifier: MessageFns<
  StreamMetricsMessage_Identifier,
  "envoy.service.metrics.v2.StreamMetricsMessage.Identifier"
> = {
  $type: "envoy.service.metrics.v2.StreamMetricsMessage.Identifier" as const,

  encode(message: StreamMetricsMessage_Identifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node !== undefined) {
      Node.encode(message.node, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMetricsMessage_Identifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMetricsMessage_Identifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node = Node.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMetricsMessage_Identifier {
    return {
      $type: StreamMetricsMessage_Identifier.$type,
      node: isSet(object.node) ? Node.fromJSON(object.node) : undefined,
    };
  },

  toJSON(message: StreamMetricsMessage_Identifier): unknown {
    const obj: any = {};
    if (message.node !== undefined) {
      obj.node = Node.toJSON(message.node);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMetricsMessage_Identifier>, I>>(base?: I): StreamMetricsMessage_Identifier {
    return StreamMetricsMessage_Identifier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMetricsMessage_Identifier>, I>>(
    object: I,
  ): StreamMetricsMessage_Identifier {
    const message = createBaseStreamMetricsMessage_Identifier();
    message.node = (object.node !== undefined && object.node !== null) ? Node.fromPartial(object.node) : undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamMetricsMessage_Identifier.$type, StreamMetricsMessage_Identifier);

/**
 * Service for streaming metrics to server that consumes the metrics data. It uses Prometheus metric
 * data model as a standard to represent metrics information.
 */
export interface MetricsService {
  /**
   * Envoy will connect and send StreamMetricsMessage messages forever. It does not expect any
   * response to be sent as nothing would be done in the case of failure.
   */
  StreamMetrics(request: Observable<StreamMetricsMessage>): Promise<StreamMetricsResponse>;
}

export const MetricsServiceServiceName = "envoy.service.metrics.v2.MetricsService";
export class MetricsServiceClientImpl implements MetricsService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MetricsServiceServiceName;
    this.rpc = rpc;
    this.StreamMetrics = this.StreamMetrics.bind(this);
  }
  StreamMetrics(request: Observable<StreamMetricsMessage>): Promise<StreamMetricsResponse> {
    const data = request.pipe(map((request) => StreamMetricsMessage.encode(request).finish()));
    const promise = this.rpc.clientStreamingRequest(this.service, "StreamMetrics", data);
    return promise.then((data) => StreamMetricsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
