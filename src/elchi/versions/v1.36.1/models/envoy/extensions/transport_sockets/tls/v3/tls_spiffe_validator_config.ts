// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { DataSource } from "../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.transport_sockets.tls.v3";

/**
 * Configuration specific to the `SPIFFE <https://github.com/spiffe/spiffe>`_ certificate validator.
 *
 * Example:
 *
 * .. validated-code-block:: yaml
 *   :type-name: envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext
 *
 *   custom_validator_config:
 *     name: envoy.tls.cert_validator.spiffe
 *     typed_config:
 *       "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig
 *       trust_domains:
 *       - name: foo.com
 *         trust_bundle:
 *           filename: "foo.pem"
 *       - name: envoy.com
 *         trust_bundle:
 *           filename: "envoy.pem"
 *
 * In this example, a presented peer certificate whose SAN matches ``spiffe://foo.com/**`` is validated against
 * the "foo.pem" x.509 certificate. All the trust bundles are isolated from each other, so no trust domain can mint
 * a SVID belonging to another trust domain. That means, in this example, a SVID signed by ``envoy.com``'s CA with ``spiffe://foo.com/**``
 * SAN would be rejected since Envoy selects the trust bundle according to the presented SAN before validate the certificate.
 *
 * Note that SPIFFE validator inherits and uses the following options from :ref:`CertificateValidationContext <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.CertificateValidationContext>`.
 *
 * - :ref:`allow_expired_certificate <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.allow_expired_certificate>` to allow expired certificates.
 * - :ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>` to match **URI** SAN of certificates. Unlike the default validator, SPIFFE validator only matches **URI** SAN (which equals to SVID in SPIFFE terminology) and ignore other SAN types.
 */
export interface SPIFFECertValidatorConfig {
  $type: "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig";
  /** This field specifies trust domains used for validating incoming X.509-SVID(s). */
  trust_domains?:
    | SPIFFECertValidatorConfig_TrustDomain[]
    | undefined;
  /**
   * This field specifies all trust bundles as a single DataSource. If both
   * trust_bundles and trust_domains are specified, trust_bundles will
   * take precedence. Currently assumes file will be a SPIFFE Trust Bundle Map.
   * If DataSource is a file, dynamic file watching will be enabled,
   * and updates to the specified file will trigger a refresh of the trust_bundles.
   */
  trust_bundles?: DataSource | undefined;
}

export interface SPIFFECertValidatorConfig_TrustDomain {
  $type: "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig.TrustDomain";
  /**
   * Name of the trust domain, ``example.com``, ``foo.bar.gov`` for example.
   * Note that this must *not* have "spiffe://" prefix.
   */
  name?:
    | string
    | undefined;
  /** Specify a data source holding x.509 trust bundle used for validating incoming SVID(s) in this trust domain. */
  trust_bundle?: DataSource | undefined;
}

function createBaseSPIFFECertValidatorConfig(): SPIFFECertValidatorConfig {
  return { $type: "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig" };
}

export const SPIFFECertValidatorConfig: MessageFns<
  SPIFFECertValidatorConfig,
  "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig"
> = {
  $type: "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig" as const,

  encode(message: SPIFFECertValidatorConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trust_domains !== undefined && message.trust_domains.length !== 0) {
      for (const v of message.trust_domains) {
        SPIFFECertValidatorConfig_TrustDomain.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.trust_bundles !== undefined) {
      DataSource.encode(message.trust_bundles, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SPIFFECertValidatorConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSPIFFECertValidatorConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.trust_domains === undefined) {
            message.trust_domains = [];
          }
          const el = SPIFFECertValidatorConfig_TrustDomain.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.trust_domains!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trust_bundles = DataSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SPIFFECertValidatorConfig {
    return {
      $type: SPIFFECertValidatorConfig.$type,
      trust_domains: globalThis.Array.isArray(object?.trust_domains)
        ? object.trust_domains.map((e: any) => SPIFFECertValidatorConfig_TrustDomain.fromJSON(e))
        : undefined,
      trust_bundles: isSet(object.trust_bundles) ? DataSource.fromJSON(object.trust_bundles) : undefined,
    };
  },

  toJSON(message: SPIFFECertValidatorConfig): unknown {
    const obj: any = {};
    if (message.trust_domains?.length) {
      obj.trust_domains = message.trust_domains.map((e) => SPIFFECertValidatorConfig_TrustDomain.toJSON(e));
    }
    if (message.trust_bundles !== undefined) {
      obj.trust_bundles = DataSource.toJSON(message.trust_bundles);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SPIFFECertValidatorConfig>, I>>(base?: I): SPIFFECertValidatorConfig {
    return SPIFFECertValidatorConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SPIFFECertValidatorConfig>, I>>(object: I): SPIFFECertValidatorConfig {
    const message = createBaseSPIFFECertValidatorConfig();
    message.trust_domains = object.trust_domains?.map((e) => SPIFFECertValidatorConfig_TrustDomain.fromPartial(e)) ||
      undefined;
    message.trust_bundles = (object.trust_bundles !== undefined && object.trust_bundles !== null)
      ? DataSource.fromPartial(object.trust_bundles)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SPIFFECertValidatorConfig.$type, SPIFFECertValidatorConfig);

function createBaseSPIFFECertValidatorConfig_TrustDomain(): SPIFFECertValidatorConfig_TrustDomain {
  return { $type: "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig.TrustDomain" };
}

export const SPIFFECertValidatorConfig_TrustDomain: MessageFns<
  SPIFFECertValidatorConfig_TrustDomain,
  "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig.TrustDomain"
> = {
  $type: "envoy.extensions.transport_sockets.tls.v3.SPIFFECertValidatorConfig.TrustDomain" as const,

  encode(message: SPIFFECertValidatorConfig_TrustDomain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.trust_bundle !== undefined) {
      DataSource.encode(message.trust_bundle, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SPIFFECertValidatorConfig_TrustDomain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSPIFFECertValidatorConfig_TrustDomain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trust_bundle = DataSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SPIFFECertValidatorConfig_TrustDomain {
    return {
      $type: SPIFFECertValidatorConfig_TrustDomain.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      trust_bundle: isSet(object.trust_bundle) ? DataSource.fromJSON(object.trust_bundle) : undefined,
    };
  },

  toJSON(message: SPIFFECertValidatorConfig_TrustDomain): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.trust_bundle !== undefined) {
      obj.trust_bundle = DataSource.toJSON(message.trust_bundle);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SPIFFECertValidatorConfig_TrustDomain>, I>>(
    base?: I,
  ): SPIFFECertValidatorConfig_TrustDomain {
    return SPIFFECertValidatorConfig_TrustDomain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SPIFFECertValidatorConfig_TrustDomain>, I>>(
    object: I,
  ): SPIFFECertValidatorConfig_TrustDomain {
    const message = createBaseSPIFFECertValidatorConfig_TrustDomain();
    message.name = object.name ?? undefined;
    message.trust_bundle = (object.trust_bundle !== undefined && object.trust_bundle !== null)
      ? DataSource.fromPartial(object.trust_bundle)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SPIFFECertValidatorConfig_TrustDomain.$type, SPIFFECertValidatorConfig_TrustDomain);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
