// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/set_metadata/v3/set_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../../../google/protobuf/any";
import { Struct } from "../../../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.set_metadata.v3";

export interface Metadata {
  $type: "envoy.extensions.filters.http.set_metadata.v3.Metadata";
  /** The metadata namespace. */
  metadata_namespace?:
    | string
    | undefined;
  /** Allow the filter to overwrite or merge with an existing value in the namespace. */
  allow_overwrite?:
    | boolean
    | undefined;
  /**
   * The value to place at the namespace. If ``allow_overwrite``, this will
   * overwrite or merge with any existing values in that namespace. See
   * :ref:`the filter documentation <config_http_filters_set_metadata>` for
   * more information on how this value is merged with potentially existing
   * ones if ``allow_overwrite`` is configured. Only one of ``value`` and
   * ``typed_value`` may be set.
   */
  value?:
    | { [key: string]: any }
    | undefined;
  /**
   * The value to place at the namespace. If ``allow_overwrite``, this will
   * overwrite any existing values in that namespace. Only one of ``value`` and
   * ``typed_value`` may be set.
   */
  typed_value?: Any | undefined;
}

export interface Config {
  $type: "envoy.extensions.filters.http.set_metadata.v3.Config";
  /**
   * The metadata namespace.
   * This field is deprecated; please use ``metadata`` as replacement.
   *
   * @deprecated
   */
  metadata_namespace?:
    | string
    | undefined;
  /**
   * The untyped value to update the dynamic metadata namespace with. See
   * :ref:`the filter documentation <config_http_filters_set_metadata>` for
   * more information on how this value is merged with potentially existing
   * ones.
   * This field is deprecated; please use ``metadata`` as replacement.
   *
   * @deprecated
   */
  value?:
    | { [key: string]: any }
    | undefined;
  /** Defines changes to be made to dynamic metadata. */
  metadata?: Metadata[] | undefined;
}

function createBaseMetadata(): Metadata {
  return { $type: "envoy.extensions.filters.http.set_metadata.v3.Metadata" };
}

export const Metadata: MessageFns<Metadata, "envoy.extensions.filters.http.set_metadata.v3.Metadata"> = {
  $type: "envoy.extensions.filters.http.set_metadata.v3.Metadata" as const,

  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata_namespace !== undefined && message.metadata_namespace !== "") {
      writer.uint32(10).string(message.metadata_namespace);
    }
    if (message.allow_overwrite !== undefined && message.allow_overwrite !== false) {
      writer.uint32(16).bool(message.allow_overwrite);
    }
    if (message.value !== undefined) {
      Struct.encode(Struct.wrap(message.value), writer.uint32(26).fork()).join();
    }
    if (message.typed_value !== undefined) {
      Any.encode(message.typed_value, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata_namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.allow_overwrite = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.typed_value = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      $type: Metadata.$type,
      metadata_namespace: isSet(object.metadata_namespace) ? globalThis.String(object.metadata_namespace) : undefined,
      allow_overwrite: isSet(object.allow_overwrite) ? globalThis.Boolean(object.allow_overwrite) : undefined,
      value: isObject(object.value) ? object.value : undefined,
      typed_value: isSet(object.typed_value) ? Any.fromJSON(object.typed_value) : undefined,
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.metadata_namespace !== undefined) {
      obj.metadata_namespace = message.metadata_namespace;
    }
    if (message.allow_overwrite !== undefined) {
      obj.allow_overwrite = message.allow_overwrite;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.typed_value !== undefined) {
      obj.typed_value = Any.toJSON(message.typed_value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.metadata_namespace = object.metadata_namespace ?? undefined;
    message.allow_overwrite = object.allow_overwrite ?? undefined;
    message.value = object.value ?? undefined;
    message.typed_value = (object.typed_value !== undefined && object.typed_value !== null)
      ? Any.fromPartial(object.typed_value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Metadata.$type, Metadata);

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.filters.http.set_metadata.v3.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.filters.http.set_metadata.v3.Config"> = {
  $type: "envoy.extensions.filters.http.set_metadata.v3.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata_namespace !== undefined && message.metadata_namespace !== "") {
      writer.uint32(10).string(message.metadata_namespace);
    }
    if (message.value !== undefined) {
      Struct.encode(Struct.wrap(message.value), writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined && message.metadata.length !== 0) {
      for (const v of message.metadata) {
        Metadata.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata_namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.metadata === undefined) {
            message.metadata = [];
          }
          const el = Metadata.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.metadata!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      metadata_namespace: isSet(object.metadata_namespace) ? globalThis.String(object.metadata_namespace) : undefined,
      value: isObject(object.value) ? object.value : undefined,
      metadata: globalThis.Array.isArray(object?.metadata)
        ? object.metadata.map((e: any) => Metadata.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.metadata_namespace !== undefined) {
      obj.metadata_namespace = message.metadata_namespace;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.metadata_namespace = object.metadata_namespace ?? undefined;
    message.value = object.value ?? undefined;
    message.metadata = object.metadata?.map((e) => Metadata.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
