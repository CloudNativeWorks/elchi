// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/tap/v3/tap.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CommonExtensionConfig } from "../../../../common/tap/v3/common";

export const protobufPackage = "envoy.extensions.filters.http.tap.v3";

/** Top level configuration for the tap filter. */
export interface Tap {
  $type: "envoy.extensions.filters.http.tap.v3.Tap";
  /** Common configuration for the HTTP tap filter. */
  common_config?:
    | CommonExtensionConfig
    | undefined;
  /**
   * Indicates whether HTTP tap filter records the time stamp for request/response headers.
   * Request headers time stamp is stored after receiving request headers.
   * Response headers time stamp is stored after receiving response headers.
   */
  record_headers_received_time?:
    | boolean
    | undefined;
  /** Indicates whether report downstream connection info */
  record_downstream_connection?:
    | boolean
    | undefined;
  /** If enabled, upstream connection information will be reported. */
  record_upstream_connection?: boolean | undefined;
}

function createBaseTap(): Tap {
  return { $type: "envoy.extensions.filters.http.tap.v3.Tap" };
}

export const Tap: MessageFns<Tap, "envoy.extensions.filters.http.tap.v3.Tap"> = {
  $type: "envoy.extensions.filters.http.tap.v3.Tap" as const,

  encode(message: Tap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_config !== undefined) {
      CommonExtensionConfig.encode(message.common_config, writer.uint32(10).fork()).join();
    }
    if (message.record_headers_received_time !== undefined && message.record_headers_received_time !== false) {
      writer.uint32(16).bool(message.record_headers_received_time);
    }
    if (message.record_downstream_connection !== undefined && message.record_downstream_connection !== false) {
      writer.uint32(24).bool(message.record_downstream_connection);
    }
    if (message.record_upstream_connection !== undefined && message.record_upstream_connection !== false) {
      writer.uint32(32).bool(message.record_upstream_connection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_config = CommonExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.record_headers_received_time = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.record_downstream_connection = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.record_upstream_connection = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tap {
    return {
      $type: Tap.$type,
      common_config: isSet(object.common_config) ? CommonExtensionConfig.fromJSON(object.common_config) : undefined,
      record_headers_received_time: isSet(object.record_headers_received_time)
        ? globalThis.Boolean(object.record_headers_received_time)
        : undefined,
      record_downstream_connection: isSet(object.record_downstream_connection)
        ? globalThis.Boolean(object.record_downstream_connection)
        : undefined,
      record_upstream_connection: isSet(object.record_upstream_connection)
        ? globalThis.Boolean(object.record_upstream_connection)
        : undefined,
    };
  },

  toJSON(message: Tap): unknown {
    const obj: any = {};
    if (message.common_config !== undefined) {
      obj.common_config = CommonExtensionConfig.toJSON(message.common_config);
    }
    if (message.record_headers_received_time !== undefined) {
      obj.record_headers_received_time = message.record_headers_received_time;
    }
    if (message.record_downstream_connection !== undefined) {
      obj.record_downstream_connection = message.record_downstream_connection;
    }
    if (message.record_upstream_connection !== undefined) {
      obj.record_upstream_connection = message.record_upstream_connection;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tap>, I>>(base?: I): Tap {
    return Tap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tap>, I>>(object: I): Tap {
    const message = createBaseTap();
    message.common_config = (object.common_config !== undefined && object.common_config !== null)
      ? CommonExtensionConfig.fromPartial(object.common_config)
      : undefined;
    message.record_headers_received_time = object.record_headers_received_time ?? undefined;
    message.record_downstream_connection = object.record_downstream_connection ?? undefined;
    message.record_upstream_connection = object.record_upstream_connection ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Tap.$type, Tap);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
