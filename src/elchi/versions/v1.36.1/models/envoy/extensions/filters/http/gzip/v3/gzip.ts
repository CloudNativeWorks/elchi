// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/gzip/v3/gzip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Compressor } from "../../compressor/v3/compressor";

export const protobufPackage = "envoy.extensions.filters.http.gzip.v3";

/** [#next-free-field: 12] */
export interface Gzip {
  $type: "envoy.extensions.filters.http.gzip.v3.Gzip";
  /**
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   */
  memory_level?:
    | number
    | undefined;
  /**
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST" provides higher compression at the cost of
   * higher latency, "SPEED" provides lower compression with minimum impact on response time.
   * "DEFAULT" provides an optimal result between speed and compression. This field will be set to
   * "DEFAULT" if not specified.
   */
  compression_level?:
    | Gzip_CompressionLevel_Enum
    | undefined;
  /**
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT" will be the best choice, though
   * there are situations which changing this parameter might produce better results. For example,
   * run-length encoding (RLE) is typically used when the content is known for having sequences
   * which same data occurs many consecutive times. For more information about each strategy, please
   * refer to zlib manual.
   */
  compression_strategy?:
    | Gzip_CompressionStrategy
    | undefined;
  /**
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual > deflateInit2.
   */
  window_bits?:
    | number
    | undefined;
  /**
   * Set of configuration parameters common for all compression filters. You can define
   * ``content_length``, ``content_type`` and other parameters in this field.
   */
  compressor?:
    | Compressor
    | undefined;
  /**
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   */
  chunk_size?: number | undefined;
}

export enum Gzip_CompressionStrategy {
  DEFAULT = "DEFAULT",
  FILTERED = "FILTERED",
  HUFFMAN = "HUFFMAN",
  RLE = "RLE",
}

export function gzip_CompressionStrategyFromJSON(object: any): Gzip_CompressionStrategy {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Gzip_CompressionStrategy.DEFAULT;
    case 1:
    case "FILTERED":
      return Gzip_CompressionStrategy.FILTERED;
    case 2:
    case "HUFFMAN":
      return Gzip_CompressionStrategy.HUFFMAN;
    case 3:
    case "RLE":
      return Gzip_CompressionStrategy.RLE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionStrategy");
  }
}

export function gzip_CompressionStrategyToJSON(object: Gzip_CompressionStrategy): string {
  switch (object) {
    case Gzip_CompressionStrategy.DEFAULT:
      return "DEFAULT";
    case Gzip_CompressionStrategy.FILTERED:
      return "FILTERED";
    case Gzip_CompressionStrategy.HUFFMAN:
      return "HUFFMAN";
    case Gzip_CompressionStrategy.RLE:
      return "RLE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionStrategy");
  }
}

export function gzip_CompressionStrategyToNumber(object: Gzip_CompressionStrategy): number {
  switch (object) {
    case Gzip_CompressionStrategy.DEFAULT:
      return 0;
    case Gzip_CompressionStrategy.FILTERED:
      return 1;
    case Gzip_CompressionStrategy.HUFFMAN:
      return 2;
    case Gzip_CompressionStrategy.RLE:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionStrategy");
  }
}

export interface Gzip_CompressionLevel {
  $type: "envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel";
}

export enum Gzip_CompressionLevel_Enum {
  DEFAULT = "DEFAULT",
  BEST = "BEST",
  SPEED = "SPEED",
}

export function gzip_CompressionLevel_EnumFromJSON(object: any): Gzip_CompressionLevel_Enum {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Gzip_CompressionLevel_Enum.DEFAULT;
    case 1:
    case "BEST":
      return Gzip_CompressionLevel_Enum.BEST;
    case 2:
    case "SPEED":
      return Gzip_CompressionLevel_Enum.SPEED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionLevel_Enum");
  }
}

export function gzip_CompressionLevel_EnumToJSON(object: Gzip_CompressionLevel_Enum): string {
  switch (object) {
    case Gzip_CompressionLevel_Enum.DEFAULT:
      return "DEFAULT";
    case Gzip_CompressionLevel_Enum.BEST:
      return "BEST";
    case Gzip_CompressionLevel_Enum.SPEED:
      return "SPEED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionLevel_Enum");
  }
}

export function gzip_CompressionLevel_EnumToNumber(object: Gzip_CompressionLevel_Enum): number {
  switch (object) {
    case Gzip_CompressionLevel_Enum.DEFAULT:
      return 0;
    case Gzip_CompressionLevel_Enum.BEST:
      return 1;
    case Gzip_CompressionLevel_Enum.SPEED:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionLevel_Enum");
  }
}

function createBaseGzip(): Gzip {
  return { $type: "envoy.extensions.filters.http.gzip.v3.Gzip" };
}

export const Gzip: MessageFns<Gzip, "envoy.extensions.filters.http.gzip.v3.Gzip"> = {
  $type: "envoy.extensions.filters.http.gzip.v3.Gzip" as const,

  encode(message: Gzip, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.memory_level !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.memory_level! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.compression_level !== undefined && message.compression_level !== Gzip_CompressionLevel_Enum.DEFAULT) {
      writer.uint32(24).int32(gzip_CompressionLevel_EnumToNumber(message.compression_level));
    }
    if (
      message.compression_strategy !== undefined && message.compression_strategy !== Gzip_CompressionStrategy.DEFAULT
    ) {
      writer.uint32(32).int32(gzip_CompressionStrategyToNumber(message.compression_strategy));
    }
    if (message.window_bits !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.window_bits! },
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.compressor !== undefined) {
      Compressor.encode(message.compressor, writer.uint32(82).fork()).join();
    }
    if (message.chunk_size !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.chunk_size! }, writer.uint32(90).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gzip {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGzip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.memory_level = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.compression_level = gzip_CompressionLevel_EnumFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.compression_strategy = gzip_CompressionStrategyFromJSON(reader.int32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.window_bits = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.compressor = Compressor.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.chunk_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gzip {
    return {
      $type: Gzip.$type,
      memory_level: isSet(object.memory_level) ? Number(object.memory_level) : undefined,
      compression_level: isSet(object.compression_level)
        ? gzip_CompressionLevel_EnumFromJSON(object.compression_level)
        : undefined,
      compression_strategy: isSet(object.compression_strategy)
        ? gzip_CompressionStrategyFromJSON(object.compression_strategy)
        : undefined,
      window_bits: isSet(object.window_bits) ? Number(object.window_bits) : undefined,
      compressor: isSet(object.compressor) ? Compressor.fromJSON(object.compressor) : undefined,
      chunk_size: isSet(object.chunk_size) ? Number(object.chunk_size) : undefined,
    };
  },

  toJSON(message: Gzip): unknown {
    const obj: any = {};
    if (message.memory_level !== undefined) {
      obj.memory_level = message.memory_level;
    }
    if (message.compression_level !== undefined) {
      obj.compression_level = gzip_CompressionLevel_EnumToJSON(message.compression_level);
    }
    if (message.compression_strategy !== undefined) {
      obj.compression_strategy = gzip_CompressionStrategyToJSON(message.compression_strategy);
    }
    if (message.window_bits !== undefined) {
      obj.window_bits = message.window_bits;
    }
    if (message.compressor !== undefined) {
      obj.compressor = Compressor.toJSON(message.compressor);
    }
    if (message.chunk_size !== undefined) {
      obj.chunk_size = message.chunk_size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gzip>, I>>(base?: I): Gzip {
    return Gzip.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gzip>, I>>(object: I): Gzip {
    const message = createBaseGzip();
    message.memory_level = object.memory_level ?? undefined;
    message.compression_level = object.compression_level ?? undefined;
    message.compression_strategy = object.compression_strategy ?? undefined;
    message.window_bits = object.window_bits ?? undefined;
    message.compressor = (object.compressor !== undefined && object.compressor !== null)
      ? Compressor.fromPartial(object.compressor)
      : undefined;
    message.chunk_size = object.chunk_size ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Gzip.$type, Gzip);

function createBaseGzip_CompressionLevel(): Gzip_CompressionLevel {
  return { $type: "envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel" };
}

export const Gzip_CompressionLevel: MessageFns<
  Gzip_CompressionLevel,
  "envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel"
> = {
  $type: "envoy.extensions.filters.http.gzip.v3.Gzip.CompressionLevel" as const,

  encode(_: Gzip_CompressionLevel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gzip_CompressionLevel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGzip_CompressionLevel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Gzip_CompressionLevel {
    return { $type: Gzip_CompressionLevel.$type };
  },

  toJSON(_: Gzip_CompressionLevel): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Gzip_CompressionLevel>, I>>(base?: I): Gzip_CompressionLevel {
    return Gzip_CompressionLevel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gzip_CompressionLevel>, I>>(_: I): Gzip_CompressionLevel {
    const message = createBaseGzip_CompressionLevel();
    return message;
  },
};

messageTypeRegistry.set(Gzip_CompressionLevel.$type, Gzip_CompressionLevel);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
