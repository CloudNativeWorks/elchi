// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/generic_proxy/codecs/http1/v3/http1.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue, UInt32Value } from "../../../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.network.generic_proxy.codecs.http1.v3";

/**
 * Configuration for HTTP codec. This HTTP1 codec is used to parse and serialize HTTP1 messages
 * for the generic proxy filter.
 * Any decoding error will result in the generic proxy closing the connection.
 *
 * .. note::
 *   This codec only supports HTTP1.1 messages and does not support HTTP1.0 messages. And it limits
 *   part of the HTTP1.1 features, such as upgrade, connect, etc.
 *   This codec is mainly designed for the features evaluation of the generic proxy filter. Please
 *   be cautious when using it in production.
 */
export interface Http1CodecConfig {
  $type: "envoy.extensions.filters.network.generic_proxy.codecs.http1.v3.Http1CodecConfig";
  /**
   * If true, the codec will parse and serialize HTTP1 messages in a single frame per message.
   *
   * A frame is a minimal unit of data that can be processed by the generic proxy. If false, the
   * codec will parse and serialize HTTP1 messages in a streaming way. In this case, the codec
   * will output multiple frames for a single HTTP1 message to the generic proxy.
   * If true, the codec will buffer the entire HTTP1 message body before sending it to the generic
   * proxy. This may have better performance in small message scenarios and is more friendly to
   * handle the HTTP1 message body. This also may result in higher memory usage and latency if
   * the message body is large.
   *
   * Default is true.
   */
  single_frame_mode?:
    | boolean
    | undefined;
  /**
   * The maximum size of the HTTP1 message body in bytes. If not set, 8*1024*1024 (8MB) is used.
   * This only makes sense when single_frame_mode is true.
   * If the HTTP1 message body size exceeds this value, this will result in a decoding error
   * and the generic proxy will close the connection.
   */
  max_buffer_size?: number | undefined;
}

function createBaseHttp1CodecConfig(): Http1CodecConfig {
  return { $type: "envoy.extensions.filters.network.generic_proxy.codecs.http1.v3.Http1CodecConfig" };
}

export const Http1CodecConfig: MessageFns<
  Http1CodecConfig,
  "envoy.extensions.filters.network.generic_proxy.codecs.http1.v3.Http1CodecConfig"
> = {
  $type: "envoy.extensions.filters.network.generic_proxy.codecs.http1.v3.Http1CodecConfig" as const,

  encode(message: Http1CodecConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.single_frame_mode !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.single_frame_mode! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.max_buffer_size !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_buffer_size! },
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Http1CodecConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttp1CodecConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.single_frame_mode = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.max_buffer_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Http1CodecConfig {
    return {
      $type: Http1CodecConfig.$type,
      single_frame_mode: isSet(object.single_frame_mode) ? Boolean(object.single_frame_mode) : undefined,
      max_buffer_size: isSet(object.max_buffer_size) ? Number(object.max_buffer_size) : undefined,
    };
  },

  toJSON(message: Http1CodecConfig): unknown {
    const obj: any = {};
    if (message.single_frame_mode !== undefined) {
      obj.single_frame_mode = message.single_frame_mode;
    }
    if (message.max_buffer_size !== undefined) {
      obj.max_buffer_size = message.max_buffer_size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Http1CodecConfig>, I>>(base?: I): Http1CodecConfig {
    return Http1CodecConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Http1CodecConfig>, I>>(object: I): Http1CodecConfig {
    const message = createBaseHttp1CodecConfig();
    message.single_frame_mode = object.single_frame_mode ?? undefined;
    message.max_buffer_size = object.max_buffer_size ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Http1CodecConfig.$type, Http1CodecConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
