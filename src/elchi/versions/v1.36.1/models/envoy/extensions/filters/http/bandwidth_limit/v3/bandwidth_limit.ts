// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/bandwidth_limit/v3/bandwidth_limit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { UInt64Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFeatureFlag } from "../../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.filters.http.bandwidth_limit.v3";

/** [#next-free-field: 8] */
export interface BandwidthLimit {
  $type: "envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit";
  /** The human readable prefix to use when emitting stats. */
  stat_prefix?:
    | string
    | undefined;
  /**
   * The enable mode for the bandwidth limit filter.
   * Default is Disabled.
   */
  enable_mode?:
    | BandwidthLimit_EnableMode
    | undefined;
  /**
   * The limit supplied in KiB/s.
   *
   * .. note::
   *   It's fine for the limit to be unset for the global configuration since the bandwidth limit
   *   can be applied at a the virtual host or route level. Thus, the limit must be set for the
   *   per route configuration otherwise the config will be rejected.
   *
   * .. note::
   *   When using per route configuration, the limit becomes unique to that route.
   */
  limit_kbps?:
    | number
    | undefined;
  /**
   * Optional Fill interval in milliseconds for the token refills. Defaults to 50ms.
   * It must be at least 20ms to avoid too aggressive refills.
   */
  fill_interval?:
    | Duration
    | undefined;
  /**
   * Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
   * to enabled.
   */
  runtime_enabled?:
    | RuntimeFeatureFlag
    | undefined;
  /**
   * Enable response trailers.
   *
   * .. note::
   *
   *   If set true, the following 4 trailers will be added, prefixed by ``response_trailer_prefix``:
   *   * bandwidth-request-delay-ms: delay time in milliseconds it took for the request stream transfer including request body transfer time and the time added by the filter.
   *   * bandwidth-response-delay-ms: delay time in milliseconds it took for the response stream transfer including response body transfer time and the time added by the filter.
   *   * bandwidth-request-filter-delay-ms: delay time in milliseconds in request stream transfer added by the filter.
   *   * bandwidth-response-filter-delay-ms: delay time in milliseconds that added by the filter.
   *   If :ref:`enable_mode <envoy_v3_api_field_extensions.filters.http.bandwidth_limit.v3.BandwidthLimit.enable_mode>` is ``DISABLED`` or ``REQUEST``, the trailers will not be set.
   *   If both the request and response delay time is 0, the trailers will not be set.
   */
  enable_response_trailers?:
    | boolean
    | undefined;
  /** Optional The prefix for the response trailers. */
  response_trailer_prefix?: string | undefined;
}

/**
 * Defines the mode for the bandwidth limit filter.
 * Values represent bitmask.
 */
export enum BandwidthLimit_EnableMode {
  /** DISABLED - Filter is disabled. */
  DISABLED = "DISABLED",
  /** REQUEST - Filter enabled only for incoming traffic. */
  REQUEST = "REQUEST",
  /** RESPONSE - Filter enabled only for outgoing traffic. */
  RESPONSE = "RESPONSE",
  /** REQUEST_AND_RESPONSE - Filter enabled for both incoming and outgoing traffic. */
  REQUEST_AND_RESPONSE = "REQUEST_AND_RESPONSE",
}

export function bandwidthLimit_EnableModeFromJSON(object: any): BandwidthLimit_EnableMode {
  switch (object) {
    case 0:
    case "DISABLED":
      return BandwidthLimit_EnableMode.DISABLED;
    case 1:
    case "REQUEST":
      return BandwidthLimit_EnableMode.REQUEST;
    case 2:
    case "RESPONSE":
      return BandwidthLimit_EnableMode.RESPONSE;
    case 3:
    case "REQUEST_AND_RESPONSE":
      return BandwidthLimit_EnableMode.REQUEST_AND_RESPONSE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BandwidthLimit_EnableMode");
  }
}

export function bandwidthLimit_EnableModeToJSON(object: BandwidthLimit_EnableMode): string {
  switch (object) {
    case BandwidthLimit_EnableMode.DISABLED:
      return "DISABLED";
    case BandwidthLimit_EnableMode.REQUEST:
      return "REQUEST";
    case BandwidthLimit_EnableMode.RESPONSE:
      return "RESPONSE";
    case BandwidthLimit_EnableMode.REQUEST_AND_RESPONSE:
      return "REQUEST_AND_RESPONSE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BandwidthLimit_EnableMode");
  }
}

export function bandwidthLimit_EnableModeToNumber(object: BandwidthLimit_EnableMode): number {
  switch (object) {
    case BandwidthLimit_EnableMode.DISABLED:
      return 0;
    case BandwidthLimit_EnableMode.REQUEST:
      return 1;
    case BandwidthLimit_EnableMode.RESPONSE:
      return 2;
    case BandwidthLimit_EnableMode.REQUEST_AND_RESPONSE:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum BandwidthLimit_EnableMode");
  }
}

function createBaseBandwidthLimit(): BandwidthLimit {
  return { $type: "envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit" };
}

export const BandwidthLimit: MessageFns<
  BandwidthLimit,
  "envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit"
> = {
  $type: "envoy.extensions.filters.http.bandwidth_limit.v3.BandwidthLimit" as const,

  encode(message: BandwidthLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.enable_mode !== undefined && message.enable_mode !== BandwidthLimit_EnableMode.DISABLED) {
      writer.uint32(16).int32(bandwidthLimit_EnableModeToNumber(message.enable_mode));
    }
    if (message.limit_kbps !== undefined) {
      UInt64Value.encode({ $type: "google.protobuf.UInt64Value", value: message.limit_kbps! }, writer.uint32(26).fork())
        .join();
    }
    if (message.fill_interval !== undefined) {
      Duration.encode(message.fill_interval, writer.uint32(34).fork()).join();
    }
    if (message.runtime_enabled !== undefined) {
      RuntimeFeatureFlag.encode(message.runtime_enabled, writer.uint32(42).fork()).join();
    }
    if (message.enable_response_trailers !== undefined && message.enable_response_trailers !== false) {
      writer.uint32(48).bool(message.enable_response_trailers);
    }
    if (message.response_trailer_prefix !== undefined && message.response_trailer_prefix !== "") {
      writer.uint32(58).string(message.response_trailer_prefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BandwidthLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBandwidthLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enable_mode = bandwidthLimit_EnableModeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.limit_kbps = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fill_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.runtime_enabled = RuntimeFeatureFlag.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.enable_response_trailers = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.response_trailer_prefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BandwidthLimit {
    return {
      $type: BandwidthLimit.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      enable_mode: isSet(object.enable_mode) ? bandwidthLimit_EnableModeFromJSON(object.enable_mode) : undefined,
      limit_kbps: isSet(object.limit_kbps) ? Number(object.limit_kbps) : undefined,
      fill_interval: isSet(object.fill_interval) ? Duration.fromJSON(object.fill_interval) : undefined,
      runtime_enabled: isSet(object.runtime_enabled) ? RuntimeFeatureFlag.fromJSON(object.runtime_enabled) : undefined,
      enable_response_trailers: isSet(object.enable_response_trailers)
        ? globalThis.Boolean(object.enable_response_trailers)
        : undefined,
      response_trailer_prefix: isSet(object.response_trailer_prefix)
        ? globalThis.String(object.response_trailer_prefix)
        : undefined,
    };
  },

  toJSON(message: BandwidthLimit): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.enable_mode !== undefined) {
      obj.enable_mode = bandwidthLimit_EnableModeToJSON(message.enable_mode);
    }
    if (message.limit_kbps !== undefined) {
      obj.limit_kbps = message.limit_kbps;
    }
    if (message.fill_interval !== undefined) {
      obj.fill_interval = Duration.toJSON(message.fill_interval);
    }
    if (message.runtime_enabled !== undefined) {
      obj.runtime_enabled = RuntimeFeatureFlag.toJSON(message.runtime_enabled);
    }
    if (message.enable_response_trailers !== undefined) {
      obj.enable_response_trailers = message.enable_response_trailers;
    }
    if (message.response_trailer_prefix !== undefined) {
      obj.response_trailer_prefix = message.response_trailer_prefix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BandwidthLimit>, I>>(base?: I): BandwidthLimit {
    return BandwidthLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BandwidthLimit>, I>>(object: I): BandwidthLimit {
    const message = createBaseBandwidthLimit();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.enable_mode = object.enable_mode ?? undefined;
    message.limit_kbps = object.limit_kbps ?? undefined;
    message.fill_interval = (object.fill_interval !== undefined && object.fill_interval !== null)
      ? Duration.fromPartial(object.fill_interval)
      : undefined;
    message.runtime_enabled = (object.runtime_enabled !== undefined && object.runtime_enabled !== null)
      ? RuntimeFeatureFlag.fromPartial(object.runtime_enabled)
      : undefined;
    message.enable_response_trailers = object.enable_response_trailers ?? undefined;
    message.response_trailer_prefix = object.response_trailer_prefix ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(BandwidthLimit.$type, BandwidthLimit);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
