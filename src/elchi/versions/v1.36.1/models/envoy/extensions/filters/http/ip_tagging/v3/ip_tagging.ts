// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CidrRange } from "../../../../../config/core/v3/address";

export const protobufPackage = "envoy.extensions.filters.http.ip_tagging.v3";

/** [#next-free-field: 6] */
export interface IPTagging {
  $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging";
  /** The type of request the filter should apply to. */
  request_type?:
    | IPTagging_RequestType
    | undefined;
  /**
   * [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
   * Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
   * The set of IP tags for the filter.
   */
  ip_tags?:
    | IPTagging_IPTag[]
    | undefined;
  /**
   * Specify to which header the tags will be written.
   *
   * If left unspecified, the tags will be appended to the ``x-envoy-ip-tags`` header.
   */
  ip_tag_header?: IPTagging_IpTagHeader | undefined;
}

/**
 * The type of requests the filter should apply to. The supported types
 * are internal, external or both. The
 * :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
 * used to determine if a request is internal and will result in
 * :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
 * being set. The filter defaults to both, and it will apply to all request types.
 */
export enum IPTagging_RequestType {
  /** BOTH - Both external and internal requests will be tagged. This is the default value. */
  BOTH = "BOTH",
  /** INTERNAL - Only internal requests will be tagged. */
  INTERNAL = "INTERNAL",
  /** EXTERNAL - Only external requests will be tagged. */
  EXTERNAL = "EXTERNAL",
}

export function iPTagging_RequestTypeFromJSON(object: any): IPTagging_RequestType {
  switch (object) {
    case 0:
    case "BOTH":
      return IPTagging_RequestType.BOTH;
    case 1:
    case "INTERNAL":
      return IPTagging_RequestType.INTERNAL;
    case 2:
    case "EXTERNAL":
      return IPTagging_RequestType.EXTERNAL;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum IPTagging_RequestType");
  }
}

export function iPTagging_RequestTypeToJSON(object: IPTagging_RequestType): string {
  switch (object) {
    case IPTagging_RequestType.BOTH:
      return "BOTH";
    case IPTagging_RequestType.INTERNAL:
      return "INTERNAL";
    case IPTagging_RequestType.EXTERNAL:
      return "EXTERNAL";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum IPTagging_RequestType");
  }
}

export function iPTagging_RequestTypeToNumber(object: IPTagging_RequestType): number {
  switch (object) {
    case IPTagging_RequestType.BOTH:
      return 0;
    case IPTagging_RequestType.INTERNAL:
      return 1;
    case IPTagging_RequestType.EXTERNAL:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum IPTagging_RequestType");
  }
}

/** Supplies the IP tag name and the IP address subnets. */
export interface IPTagging_IPTag {
  $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag";
  /** Specifies the IP tag name to apply. */
  ip_tag_name?:
    | string
    | undefined;
  /**
   * A list of IP address subnets that will be tagged with
   * ip_tag_name. Both IPv4 and IPv6 are supported.
   */
  ip_list?: CidrRange[] | undefined;
}

/** Specify to which header the tags will be written. */
export interface IPTagging_IpTagHeader {
  $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader";
  /**
   * Header to use for ip-tagging.
   *
   * This header will be sanitized based on the config in
   * :ref:`action <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader.action>`
   * rather than the defaults for x-envoy prefixed headers.
   */
  header?:
    | string
    | undefined;
  /**
   * Control if the :ref:`header <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader.header>`
   * will be sanitized, or be appended to.
   *
   * Default: *SANITIZE*.
   */
  action?: IPTagging_IpTagHeader_HeaderAction | undefined;
}

/** Describes how to apply the tags to the headers. */
export enum IPTagging_IpTagHeader_HeaderAction {
  /**
   * SANITIZE - (DEFAULT) The header specified in :ref:`ip_tag_header <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.ip_tag_header>`
   * will be dropped, before the tags are applied. The incoming header will be "sanitized" regardless of whether the request is internal or external.
   *
   * Note that the header will be visible unsanitized to any filters that are invoked before the ip-tag-header filter, unless it has an *x-envoy* prefix.
   */
  SANITIZE = "SANITIZE",
  /**
   * APPEND_IF_EXISTS_OR_ADD - Tags will be appended to the header specified in
   * :ref:`ip_tag_header <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.ip_tag_header>`.
   *
   * Please note that this could cause the header to retain values set by the http client regardless of whether the request is internal or external.
   */
  APPEND_IF_EXISTS_OR_ADD = "APPEND_IF_EXISTS_OR_ADD",
}

export function iPTagging_IpTagHeader_HeaderActionFromJSON(object: any): IPTagging_IpTagHeader_HeaderAction {
  switch (object) {
    case 0:
    case "SANITIZE":
      return IPTagging_IpTagHeader_HeaderAction.SANITIZE;
    case 1:
    case "APPEND_IF_EXISTS_OR_ADD":
      return IPTagging_IpTagHeader_HeaderAction.APPEND_IF_EXISTS_OR_ADD;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum IPTagging_IpTagHeader_HeaderAction");
  }
}

export function iPTagging_IpTagHeader_HeaderActionToJSON(object: IPTagging_IpTagHeader_HeaderAction): string {
  switch (object) {
    case IPTagging_IpTagHeader_HeaderAction.SANITIZE:
      return "SANITIZE";
    case IPTagging_IpTagHeader_HeaderAction.APPEND_IF_EXISTS_OR_ADD:
      return "APPEND_IF_EXISTS_OR_ADD";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum IPTagging_IpTagHeader_HeaderAction");
  }
}

export function iPTagging_IpTagHeader_HeaderActionToNumber(object: IPTagging_IpTagHeader_HeaderAction): number {
  switch (object) {
    case IPTagging_IpTagHeader_HeaderAction.SANITIZE:
      return 0;
    case IPTagging_IpTagHeader_HeaderAction.APPEND_IF_EXISTS_OR_ADD:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum IPTagging_IpTagHeader_HeaderAction");
  }
}

function createBaseIPTagging(): IPTagging {
  return { $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging" };
}

export const IPTagging: MessageFns<IPTagging, "envoy.extensions.filters.http.ip_tagging.v3.IPTagging"> = {
  $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging" as const,

  encode(message: IPTagging, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request_type !== undefined && message.request_type !== IPTagging_RequestType.BOTH) {
      writer.uint32(8).int32(iPTagging_RequestTypeToNumber(message.request_type));
    }
    if (message.ip_tags !== undefined && message.ip_tags.length !== 0) {
      for (const v of message.ip_tags) {
        IPTagging_IPTag.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    if (message.ip_tag_header !== undefined) {
      IPTagging_IpTagHeader.encode(message.ip_tag_header, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPTagging {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPTagging();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.request_type = iPTagging_RequestTypeFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.ip_tags === undefined) {
            message.ip_tags = [];
          }
          const el = IPTagging_IPTag.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.ip_tags!.push(el);
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.ip_tag_header = IPTagging_IpTagHeader.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPTagging {
    return {
      $type: IPTagging.$type,
      request_type: isSet(object.request_type) ? iPTagging_RequestTypeFromJSON(object.request_type) : undefined,
      ip_tags: globalThis.Array.isArray(object?.ip_tags)
        ? object.ip_tags.map((e: any) => IPTagging_IPTag.fromJSON(e))
        : undefined,
      ip_tag_header: isSet(object.ip_tag_header) ? IPTagging_IpTagHeader.fromJSON(object.ip_tag_header) : undefined,
    };
  },

  toJSON(message: IPTagging): unknown {
    const obj: any = {};
    if (message.request_type !== undefined) {
      obj.request_type = iPTagging_RequestTypeToJSON(message.request_type);
    }
    if (message.ip_tags?.length) {
      obj.ip_tags = message.ip_tags.map((e) => IPTagging_IPTag.toJSON(e));
    }
    if (message.ip_tag_header !== undefined) {
      obj.ip_tag_header = IPTagging_IpTagHeader.toJSON(message.ip_tag_header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPTagging>, I>>(base?: I): IPTagging {
    return IPTagging.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPTagging>, I>>(object: I): IPTagging {
    const message = createBaseIPTagging();
    message.request_type = object.request_type ?? undefined;
    message.ip_tags = object.ip_tags?.map((e) => IPTagging_IPTag.fromPartial(e)) || undefined;
    message.ip_tag_header = (object.ip_tag_header !== undefined && object.ip_tag_header !== null)
      ? IPTagging_IpTagHeader.fromPartial(object.ip_tag_header)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(IPTagging.$type, IPTagging);

function createBaseIPTagging_IPTag(): IPTagging_IPTag {
  return { $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag" };
}

export const IPTagging_IPTag: MessageFns<
  IPTagging_IPTag,
  "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag"
> = {
  $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IPTag" as const,

  encode(message: IPTagging_IPTag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ip_tag_name !== undefined && message.ip_tag_name !== "") {
      writer.uint32(10).string(message.ip_tag_name);
    }
    if (message.ip_list !== undefined && message.ip_list.length !== 0) {
      for (const v of message.ip_list) {
        CidrRange.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPTagging_IPTag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPTagging_IPTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ip_tag_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.ip_list === undefined) {
            message.ip_list = [];
          }
          const el = CidrRange.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.ip_list!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPTagging_IPTag {
    return {
      $type: IPTagging_IPTag.$type,
      ip_tag_name: isSet(object.ip_tag_name) ? globalThis.String(object.ip_tag_name) : undefined,
      ip_list: globalThis.Array.isArray(object?.ip_list)
        ? object.ip_list.map((e: any) => CidrRange.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: IPTagging_IPTag): unknown {
    const obj: any = {};
    if (message.ip_tag_name !== undefined) {
      obj.ip_tag_name = message.ip_tag_name;
    }
    if (message.ip_list?.length) {
      obj.ip_list = message.ip_list.map((e) => CidrRange.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPTagging_IPTag>, I>>(base?: I): IPTagging_IPTag {
    return IPTagging_IPTag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPTagging_IPTag>, I>>(object: I): IPTagging_IPTag {
    const message = createBaseIPTagging_IPTag();
    message.ip_tag_name = object.ip_tag_name ?? undefined;
    message.ip_list = object.ip_list?.map((e) => CidrRange.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(IPTagging_IPTag.$type, IPTagging_IPTag);

function createBaseIPTagging_IpTagHeader(): IPTagging_IpTagHeader {
  return { $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader" };
}

export const IPTagging_IpTagHeader: MessageFns<
  IPTagging_IpTagHeader,
  "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader"
> = {
  $type: "envoy.extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader" as const,

  encode(message: IPTagging_IpTagHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined && message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.action !== undefined && message.action !== IPTagging_IpTagHeader_HeaderAction.SANITIZE) {
      writer.uint32(16).int32(iPTagging_IpTagHeader_HeaderActionToNumber(message.action));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IPTagging_IpTagHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIPTagging_IpTagHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.action = iPTagging_IpTagHeader_HeaderActionFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IPTagging_IpTagHeader {
    return {
      $type: IPTagging_IpTagHeader.$type,
      header: isSet(object.header) ? globalThis.String(object.header) : undefined,
      action: isSet(object.action) ? iPTagging_IpTagHeader_HeaderActionFromJSON(object.action) : undefined,
    };
  },

  toJSON(message: IPTagging_IpTagHeader): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    if (message.action !== undefined) {
      obj.action = iPTagging_IpTagHeader_HeaderActionToJSON(message.action);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IPTagging_IpTagHeader>, I>>(base?: I): IPTagging_IpTagHeader {
    return IPTagging_IpTagHeader.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IPTagging_IpTagHeader>, I>>(object: I): IPTagging_IpTagHeader {
    const message = createBaseIPTagging_IpTagHeader();
    message.header = object.header ?? undefined;
    message.action = object.action ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(IPTagging_IpTagHeader.$type, IPTagging_IpTagHeader);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
