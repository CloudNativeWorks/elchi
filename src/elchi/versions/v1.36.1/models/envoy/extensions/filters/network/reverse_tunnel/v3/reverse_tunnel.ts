// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/reverse_tunnel/v3/reverse_tunnel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import {
  RequestMethod,
  requestMethodFromJSON,
  requestMethodToJSON,
  requestMethodToNumber,
} from "../../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.filters.network.reverse_tunnel.v3";

/**
 * Validation configuration for reverse tunnel identifiers.
 * Validates the node ID and cluster ID extracted from reverse tunnel handshake headers
 * against expected values specified using format strings.
 */
export interface Validation {
  $type: "envoy.extensions.filters.network.reverse_tunnel.v3.Validation";
  /**
   * Format string to extract the expected node identifier for validation.
   * The formatted value is compared against the ``x-envoy-reverse-tunnel-node-id`` header
   * from the incoming handshake request. If they do not match, the connection is rejected
   * with HTTP ``403 Forbidden``.
   *
   * Supports Envoy's :ref:`command operators <config_access_log_command_operators>`:
   *
   * * ``%DYNAMIC_METADATA(namespace:key)%``: Extract expected value from dynamic metadata.
   * * ``%FILTER_STATE(key)%``: Extract expected value from filter state.
   * * ``%DOWNSTREAM_REMOTE_ADDRESS%``: Use downstream connection IP address.
   * * Plain strings: Use a static expected value.
   *
   * If empty, node ID validation is skipped.
   *
   * Example using dynamic metadata allowlist:
   *
   * .. code-block:: yaml
   *
   *    node_id_format: "%DYNAMIC_METADATA(envoy.reverse_tunnel.allowlist:expected_node_id)%"
   */
  node_id_format?:
    | string
    | undefined;
  /**
   * Format string to extract the expected cluster identifier for validation.
   * The formatted value is compared against the ``x-envoy-reverse-tunnel-cluster-id`` header
   * from the incoming handshake request. If they do not match, the connection is rejected
   * with HTTP ``403 Forbidden``.
   *
   * Supports the same :ref:`command operators <config_access_log_command_operators>` as
   * ``node_id_format``.
   *
   * If empty, cluster ID validation is skipped.
   *
   * Example using filter state:
   *
   * .. code-block:: yaml
   *
   *    cluster_id_format: "%FILTER_STATE(expected_cluster_id)%"
   */
  cluster_id_format?:
    | string
    | undefined;
  /**
   * Whether to emit validation results as dynamic metadata.
   * When enabled, the filter emits metadata under the namespace specified by
   * ``dynamic_metadata_namespace`` containing:
   *
   * * ``node_id``: The actual node ID from the handshake request.
   * * ``cluster_id``: The actual cluster ID from the handshake request.
   * * ``validation_result``: Either ``allowed`` or ``denied``.
   *
   * This metadata can be used by subsequent filters or for access logging.
   * Defaults to ``false``.
   */
  emit_dynamic_metadata?:
    | boolean
    | undefined;
  /**
   * Namespace for emitted dynamic metadata when ``emit_dynamic_metadata`` is ``true``.
   * If not specified, defaults to ``envoy.filters.network.reverse_tunnel``.
   */
  dynamic_metadata_namespace?: string | undefined;
}

/**
 * Configuration for the reverse tunnel network filter.
 * This filter handles reverse tunnel connection acceptance and rejection by processing
 * HTTP requests where required identification values are provided via HTTP headers.
 * [#next-free-field: 6]
 */
export interface ReverseTunnel {
  $type: "envoy.extensions.filters.network.reverse_tunnel.v3.ReverseTunnel";
  /**
   * Ping interval for health checks on established reverse tunnel connections.
   * If not specified, defaults to ``2 seconds``.
   */
  ping_interval?:
    | Duration
    | undefined;
  /**
   * Whether to automatically close connections after processing reverse tunnel requests.
   *
   * * When set to ``true``, connections are closed after acceptance or rejection.
   * * When set to ``false``, connections remain open for potential reuse.
   *
   * Defaults to ``false``.
   */
  auto_close_connections?:
    | boolean
    | undefined;
  /**
   * HTTP path to match for reverse tunnel requests.
   * If not specified, defaults to ``/reverse_connections/request``.
   */
  request_path?:
    | string
    | undefined;
  /**
   * HTTP method to match for reverse tunnel requests.
   * If not specified (``METHOD_UNSPECIFIED``), this defaults to ``GET``.
   */
  request_method?:
    | RequestMethod
    | undefined;
  /**
   * Optional validation configuration for node and cluster identifiers.
   * If specified, the filter validates the ``x-envoy-reverse-tunnel-node-id`` and
   * ``x-envoy-reverse-tunnel-cluster-id`` headers against expected values extracted
   * using format strings. Requests that fail validation are rejected with HTTP ``403 Forbidden``.
   */
  validation?: Validation | undefined;
}

function createBaseValidation(): Validation {
  return { $type: "envoy.extensions.filters.network.reverse_tunnel.v3.Validation" };
}

export const Validation: MessageFns<Validation, "envoy.extensions.filters.network.reverse_tunnel.v3.Validation"> = {
  $type: "envoy.extensions.filters.network.reverse_tunnel.v3.Validation" as const,

  encode(message: Validation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node_id_format !== undefined && message.node_id_format !== "") {
      writer.uint32(10).string(message.node_id_format);
    }
    if (message.cluster_id_format !== undefined && message.cluster_id_format !== "") {
      writer.uint32(18).string(message.cluster_id_format);
    }
    if (message.emit_dynamic_metadata !== undefined && message.emit_dynamic_metadata !== false) {
      writer.uint32(24).bool(message.emit_dynamic_metadata);
    }
    if (message.dynamic_metadata_namespace !== undefined && message.dynamic_metadata_namespace !== "") {
      writer.uint32(34).string(message.dynamic_metadata_namespace);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Validation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node_id_format = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cluster_id_format = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.emit_dynamic_metadata = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dynamic_metadata_namespace = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Validation {
    return {
      $type: Validation.$type,
      node_id_format: isSet(object.node_id_format) ? globalThis.String(object.node_id_format) : undefined,
      cluster_id_format: isSet(object.cluster_id_format) ? globalThis.String(object.cluster_id_format) : undefined,
      emit_dynamic_metadata: isSet(object.emit_dynamic_metadata)
        ? globalThis.Boolean(object.emit_dynamic_metadata)
        : undefined,
      dynamic_metadata_namespace: isSet(object.dynamic_metadata_namespace)
        ? globalThis.String(object.dynamic_metadata_namespace)
        : undefined,
    };
  },

  toJSON(message: Validation): unknown {
    const obj: any = {};
    if (message.node_id_format !== undefined) {
      obj.node_id_format = message.node_id_format;
    }
    if (message.cluster_id_format !== undefined) {
      obj.cluster_id_format = message.cluster_id_format;
    }
    if (message.emit_dynamic_metadata !== undefined) {
      obj.emit_dynamic_metadata = message.emit_dynamic_metadata;
    }
    if (message.dynamic_metadata_namespace !== undefined) {
      obj.dynamic_metadata_namespace = message.dynamic_metadata_namespace;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Validation>, I>>(base?: I): Validation {
    return Validation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Validation>, I>>(object: I): Validation {
    const message = createBaseValidation();
    message.node_id_format = object.node_id_format ?? undefined;
    message.cluster_id_format = object.cluster_id_format ?? undefined;
    message.emit_dynamic_metadata = object.emit_dynamic_metadata ?? undefined;
    message.dynamic_metadata_namespace = object.dynamic_metadata_namespace ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Validation.$type, Validation);

function createBaseReverseTunnel(): ReverseTunnel {
  return { $type: "envoy.extensions.filters.network.reverse_tunnel.v3.ReverseTunnel" };
}

export const ReverseTunnel: MessageFns<
  ReverseTunnel,
  "envoy.extensions.filters.network.reverse_tunnel.v3.ReverseTunnel"
> = {
  $type: "envoy.extensions.filters.network.reverse_tunnel.v3.ReverseTunnel" as const,

  encode(message: ReverseTunnel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ping_interval !== undefined) {
      Duration.encode(message.ping_interval, writer.uint32(10).fork()).join();
    }
    if (message.auto_close_connections !== undefined && message.auto_close_connections !== false) {
      writer.uint32(16).bool(message.auto_close_connections);
    }
    if (message.request_path !== undefined && message.request_path !== "") {
      writer.uint32(26).string(message.request_path);
    }
    if (message.request_method !== undefined && message.request_method !== RequestMethod.METHOD_UNSPECIFIED) {
      writer.uint32(32).int32(requestMethodToNumber(message.request_method));
    }
    if (message.validation !== undefined) {
      Validation.encode(message.validation, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReverseTunnel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReverseTunnel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ping_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.auto_close_connections = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.request_path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.request_method = requestMethodFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.validation = Validation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReverseTunnel {
    return {
      $type: ReverseTunnel.$type,
      ping_interval: isSet(object.ping_interval) ? Duration.fromJSON(object.ping_interval) : undefined,
      auto_close_connections: isSet(object.auto_close_connections)
        ? globalThis.Boolean(object.auto_close_connections)
        : undefined,
      request_path: isSet(object.request_path) ? globalThis.String(object.request_path) : undefined,
      request_method: isSet(object.request_method) ? requestMethodFromJSON(object.request_method) : undefined,
      validation: isSet(object.validation) ? Validation.fromJSON(object.validation) : undefined,
    };
  },

  toJSON(message: ReverseTunnel): unknown {
    const obj: any = {};
    if (message.ping_interval !== undefined) {
      obj.ping_interval = Duration.toJSON(message.ping_interval);
    }
    if (message.auto_close_connections !== undefined) {
      obj.auto_close_connections = message.auto_close_connections;
    }
    if (message.request_path !== undefined) {
      obj.request_path = message.request_path;
    }
    if (message.request_method !== undefined) {
      obj.request_method = requestMethodToJSON(message.request_method);
    }
    if (message.validation !== undefined) {
      obj.validation = Validation.toJSON(message.validation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReverseTunnel>, I>>(base?: I): ReverseTunnel {
    return ReverseTunnel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReverseTunnel>, I>>(object: I): ReverseTunnel {
    const message = createBaseReverseTunnel();
    message.ping_interval = (object.ping_interval !== undefined && object.ping_interval !== null)
      ? Duration.fromPartial(object.ping_interval)
      : undefined;
    message.auto_close_connections = object.auto_close_connections ?? undefined;
    message.request_path = object.request_path ?? undefined;
    message.request_method = object.request_method ?? undefined;
    message.validation = (object.validation !== undefined && object.validation !== null)
      ? Validation.fromPartial(object.validation)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ReverseTunnel.$type, ReverseTunnel);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
