// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/router/cluster_specifiers/matcher/v3/matcher.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Matcher } from "../../../../../../xds/type/matcher/v3/matcher";

export const protobufPackage = "envoy.extensions.router.cluster_specifiers.matcher.v3";

export interface ClusterAction {
  $type: "envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction";
  /**
   * Indicates the upstream cluster to which the request should be routed
   * to.
   */
  cluster?: string | undefined;
}

export interface MatcherClusterSpecifier {
  $type: "envoy.extensions.router.cluster_specifiers.matcher.v3.MatcherClusterSpecifier";
  /**
   * The matcher for cluster selection after the route has been selected. This is used when the
   * route has multiple clusters (like multiple clusters for different users) and the matcher
   * is used to select the cluster to use for the request.
   *
   * The match tree to use for grouping incoming requests into buckets.
   *
   * Example:
   *
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *
   *   matcher_list:
   *     matchers:
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '@type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
   *               header_name: env
   *           value_match:
   *             exact: staging
   *       on_match:
   *         action:
   *           typed_config:
   *             '@type': type.googleapis.com/envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction
   *             cluster: "staging-cluster"
   *
   *     - predicate:
   *         single_predicate:
   *           input:
   *             typed_config:
   *               '@type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
   *               header_name: env
   *           value_match:
   *             exact: prod
   *       on_match:
   *         action:
   *           typed_config:
   *             '@type': type.googleapis.com/envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction
   *             cluster: "prod-cluster"
   *
   *   # Catch-all with a default cluster.
   *   on_no_match:
   *     action:
   *       typed_config:
   *         '@type': type.googleapis.com/envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction
   *         cluster: "default-cluster"
   */
  cluster_matcher?: Matcher | undefined;
}

function createBaseClusterAction(): ClusterAction {
  return { $type: "envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction" };
}

export const ClusterAction: MessageFns<
  ClusterAction,
  "envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction"
> = {
  $type: "envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction" as const,

  encode(message: ClusterAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== undefined && message.cluster !== "") {
      writer.uint32(10).string(message.cluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterAction {
    return {
      $type: ClusterAction.$type,
      cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : undefined,
    };
  },

  toJSON(message: ClusterAction): unknown {
    const obj: any = {};
    if (message.cluster !== undefined) {
      obj.cluster = message.cluster;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterAction>, I>>(base?: I): ClusterAction {
    return ClusterAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterAction>, I>>(object: I): ClusterAction {
    const message = createBaseClusterAction();
    message.cluster = object.cluster ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ClusterAction.$type, ClusterAction);

function createBaseMatcherClusterSpecifier(): MatcherClusterSpecifier {
  return { $type: "envoy.extensions.router.cluster_specifiers.matcher.v3.MatcherClusterSpecifier" };
}

export const MatcherClusterSpecifier: MessageFns<
  MatcherClusterSpecifier,
  "envoy.extensions.router.cluster_specifiers.matcher.v3.MatcherClusterSpecifier"
> = {
  $type: "envoy.extensions.router.cluster_specifiers.matcher.v3.MatcherClusterSpecifier" as const,

  encode(message: MatcherClusterSpecifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster_matcher !== undefined) {
      Matcher.encode(message.cluster_matcher, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatcherClusterSpecifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatcherClusterSpecifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster_matcher = Matcher.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatcherClusterSpecifier {
    return {
      $type: MatcherClusterSpecifier.$type,
      cluster_matcher: isSet(object.cluster_matcher) ? Matcher.fromJSON(object.cluster_matcher) : undefined,
    };
  },

  toJSON(message: MatcherClusterSpecifier): unknown {
    const obj: any = {};
    if (message.cluster_matcher !== undefined) {
      obj.cluster_matcher = Matcher.toJSON(message.cluster_matcher);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MatcherClusterSpecifier>, I>>(base?: I): MatcherClusterSpecifier {
    return MatcherClusterSpecifier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MatcherClusterSpecifier>, I>>(object: I): MatcherClusterSpecifier {
    const message = createBaseMatcherClusterSpecifier();
    message.cluster_matcher = (object.cluster_matcher !== undefined && object.cluster_matcher !== null)
      ? Matcher.fromPartial(object.cluster_matcher)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(MatcherClusterSpecifier.$type, MatcherClusterSpecifier);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
