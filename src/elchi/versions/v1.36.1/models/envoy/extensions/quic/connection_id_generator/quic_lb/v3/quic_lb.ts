// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/quic/connection_id_generator/quic_lb/v3/quic_lb.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DataSource } from "../../../../../config/core/v3/base";
import { SdsSecretConfig } from "../../../../transport_sockets/tls/v3/secret";

export const protobufPackage = "envoy.extensions.quic.connection_id_generator.quic_lb.v3";

/**
 * Configuration for a connection ID generator implementation for the QUIC-LB draft RFC for
 * routable connection IDs.
 *
 * Connection IDs always have the length self encoded, as described in
 * https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers#name-length-self-description.
 *
 * See https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers for details.
 *
 * .. warning::
 *
 *    This is still a work in progress. Interoperability testing has not yet been performed.
 * [#next-free-field: 7]
 */
export interface Config {
  $type: "envoy.extensions.quic.connection_id_generator.quic_lb.v3.Config";
  /**
   * Must be at least 1 octet.
   * The length of server_id and nonce_length_bytes must be 18 or less.
   * See https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers#name-server-id-allocation.
   */
  server_id?:
    | DataSource
    | undefined;
  /**
   * If true, indicates that the :ref:`server_id
   * <envoy_v3_api_field_extensions.quic.connection_id_generator.quic_lb.v3.Config.server_id>` is base64 encoded.
   *
   * This can be useful if the ID may contain binary data and must be transmitted as a string, for example in
   * an environment variable.
   */
  server_id_base64_encoded?:
    | boolean
    | undefined;
  /**
   * Optional validation of the expected server ID length. If this is non-zero and the value in ``server_id``
   * does not have a matching length, a configuration error is generated. This can be useful for validating
   * that the server ID is valid.
   */
  expected_server_id_length?:
    | number
    | undefined;
  /**
   * The nonce length must be at least 4 bytes.
   * The length of server_id and nonce_length_bytes must be 18 bytes or less.
   */
  nonce_length_bytes?:
    | number
    | undefined;
  /**
   * Configuration to fetch the encryption key and configuration version.
   *
   * The SDS service is for a :ref:`GenericSecret <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.GenericSecret>`.
   * The data should populate :ref:`secrets <envoy_v3_api_field_extensions.transport_sockets.tls.v3.GenericSecret.secrets>`:
   *
   * "encryption_key" must contain the 16 byte encryption key.
   *
   * "configuration_version" must contain a 1 byte unsigned integer of value less than 7.
   * See https://datatracker.ietf.org/doc/html/draft-ietf-quic-load-balancers#name-config-rotation.
   */
  encryption_parameters?:
    | SdsSecretConfig
    | undefined;
  /**
   * Use the unencrypted mode. This is useful for testing or a simplified implementation of the
   * downstream load balancer, but allows for linking different CIDs for the same connection, and
   * leaks information about the valid server IDs in use. This mode does not comply with the RFC.
   *
   * Note that in this mode, :ref:`encryption_parameters
   * <envoy_v3_api_field_extensions.quic.connection_id_generator.quic_lb.v3.Config.encryption_parameters>`
   * is still required because it contains ``configuration_version``, which is still
   * needed. ``encryption_key`` can be set to ``inline_string: '0000000000000000'``.
   */
  unencrypted_mode?: boolean | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.quic.connection_id_generator.quic_lb.v3.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.quic.connection_id_generator.quic_lb.v3.Config"> = {
  $type: "envoy.extensions.quic.connection_id_generator.quic_lb.v3.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.server_id !== undefined) {
      DataSource.encode(message.server_id, writer.uint32(18).fork()).join();
    }
    if (message.server_id_base64_encoded !== undefined && message.server_id_base64_encoded !== false) {
      writer.uint32(48).bool(message.server_id_base64_encoded);
    }
    if (message.expected_server_id_length !== undefined && message.expected_server_id_length !== 0) {
      writer.uint32(24).uint32(message.expected_server_id_length);
    }
    if (message.nonce_length_bytes !== undefined && message.nonce_length_bytes !== 0) {
      writer.uint32(32).uint32(message.nonce_length_bytes);
    }
    if (message.encryption_parameters !== undefined) {
      SdsSecretConfig.encode(message.encryption_parameters, writer.uint32(42).fork()).join();
    }
    if (message.unencrypted_mode !== undefined && message.unencrypted_mode !== false) {
      writer.uint32(8).bool(message.unencrypted_mode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.server_id = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.server_id_base64_encoded = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expected_server_id_length = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.nonce_length_bytes = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.encryption_parameters = SdsSecretConfig.decode(reader, reader.uint32());
          continue;
        }
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unencrypted_mode = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      server_id: isSet(object.server_id) ? DataSource.fromJSON(object.server_id) : undefined,
      server_id_base64_encoded: isSet(object.server_id_base64_encoded)
        ? globalThis.Boolean(object.server_id_base64_encoded)
        : undefined,
      expected_server_id_length: isSet(object.expected_server_id_length)
        ? globalThis.Number(object.expected_server_id_length)
        : undefined,
      nonce_length_bytes: isSet(object.nonce_length_bytes) ? globalThis.Number(object.nonce_length_bytes) : undefined,
      encryption_parameters: isSet(object.encryption_parameters)
        ? SdsSecretConfig.fromJSON(object.encryption_parameters)
        : undefined,
      unencrypted_mode: isSet(object.unencrypted_mode) ? globalThis.Boolean(object.unencrypted_mode) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.server_id !== undefined) {
      obj.server_id = DataSource.toJSON(message.server_id);
    }
    if (message.server_id_base64_encoded !== undefined) {
      obj.server_id_base64_encoded = message.server_id_base64_encoded;
    }
    if (message.expected_server_id_length !== undefined) {
      obj.expected_server_id_length = Math.round(message.expected_server_id_length);
    }
    if (message.nonce_length_bytes !== undefined) {
      obj.nonce_length_bytes = Math.round(message.nonce_length_bytes);
    }
    if (message.encryption_parameters !== undefined) {
      obj.encryption_parameters = SdsSecretConfig.toJSON(message.encryption_parameters);
    }
    if (message.unencrypted_mode !== undefined) {
      obj.unencrypted_mode = message.unencrypted_mode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.server_id = (object.server_id !== undefined && object.server_id !== null)
      ? DataSource.fromPartial(object.server_id)
      : undefined;
    message.server_id_base64_encoded = object.server_id_base64_encoded ?? undefined;
    message.expected_server_id_length = object.expected_server_id_length ?? undefined;
    message.nonce_length_bytes = object.nonce_length_bytes ?? undefined;
    message.encryption_parameters =
      (object.encryption_parameters !== undefined && object.encryption_parameters !== null)
        ? SdsSecretConfig.fromPartial(object.encryption_parameters)
        : undefined;
    message.unencrypted_mode = object.unencrypted_mode ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
