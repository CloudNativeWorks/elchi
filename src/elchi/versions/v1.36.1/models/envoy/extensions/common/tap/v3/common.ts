// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/common/tap/v3/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { TapConfig } from "../../../../config/tap/v3/common";

export const protobufPackage = "envoy.extensions.common.tap.v3";

/** Common configuration for all tap extensions. */
export interface CommonExtensionConfig {
  $type: "envoy.extensions.common.tap.v3.CommonExtensionConfig";
  config_type?:
    | //
    /** If specified, the tap filter will be configured via an admin handler. */
    { $case: "admin_config"; admin_config: AdminConfig }
    | //
    /**
     * If specified, the tap filter will be configured via a static configuration that cannot be
     * changed.
     */
    { $case: "static_config"; static_config: TapConfig }
    | undefined;
}

/**
 * Configuration for the admin handler. See :ref:`here <config_http_filters_tap_admin_handler>` for
 * more information.
 */
export interface AdminConfig {
  $type: "envoy.extensions.common.tap.v3.AdminConfig";
  /**
   * Opaque configuration ID. When requests are made to the admin handler, the passed opaque ID is
   * matched to the configured filter opaque ID to determine which filter to configure.
   */
  config_id?: string | undefined;
}

function createBaseCommonExtensionConfig(): CommonExtensionConfig {
  return { $type: "envoy.extensions.common.tap.v3.CommonExtensionConfig", config_type: undefined };
}

export const CommonExtensionConfig: MessageFns<
  CommonExtensionConfig,
  "envoy.extensions.common.tap.v3.CommonExtensionConfig"
> = {
  $type: "envoy.extensions.common.tap.v3.CommonExtensionConfig" as const,

  encode(message: CommonExtensionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.config_type?.$case) {
      case "admin_config":
        AdminConfig.encode(message.config_type.admin_config, writer.uint32(10).fork()).join();
        break;
      case "static_config":
        TapConfig.encode(message.config_type.static_config, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonExtensionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonExtensionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config_type = { $case: "admin_config", admin_config: AdminConfig.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config_type = { $case: "static_config", static_config: TapConfig.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonExtensionConfig {
    return {
      $type: CommonExtensionConfig.$type,
      config_type: isSet(object.admin_config)
        ? { $case: "admin_config", admin_config: AdminConfig.fromJSON(object.admin_config) }
        : isSet(object.static_config)
        ? { $case: "static_config", static_config: TapConfig.fromJSON(object.static_config) }
        : undefined,
    };
  },

  toJSON(message: CommonExtensionConfig): unknown {
    const obj: any = {};
    if (message.config_type?.$case === "admin_config") {
      obj.admin_config = AdminConfig.toJSON(message.config_type.admin_config);
    }
    if (message.config_type?.$case === "static_config") {
      obj.static_config = TapConfig.toJSON(message.config_type.static_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonExtensionConfig>, I>>(base?: I): CommonExtensionConfig {
    return CommonExtensionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonExtensionConfig>, I>>(object: I): CommonExtensionConfig {
    const message = createBaseCommonExtensionConfig();
    if (
      object.config_type?.$case === "admin_config" &&
      object.config_type?.admin_config !== undefined &&
      object.config_type?.admin_config !== null
    ) {
      message.config_type = {
        $case: "admin_config",
        admin_config: AdminConfig.fromPartial(object.config_type.admin_config),
      };
    }
    if (
      object.config_type?.$case === "static_config" &&
      object.config_type?.static_config !== undefined &&
      object.config_type?.static_config !== null
    ) {
      message.config_type = {
        $case: "static_config",
        static_config: TapConfig.fromPartial(object.config_type.static_config),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(CommonExtensionConfig.$type, CommonExtensionConfig);

function createBaseAdminConfig(): AdminConfig {
  return { $type: "envoy.extensions.common.tap.v3.AdminConfig" };
}

export const AdminConfig: MessageFns<AdminConfig, "envoy.extensions.common.tap.v3.AdminConfig"> = {
  $type: "envoy.extensions.common.tap.v3.AdminConfig" as const,

  encode(message: AdminConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config_id !== undefined && message.config_id !== "") {
      writer.uint32(10).string(message.config_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdminConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdminConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdminConfig {
    return {
      $type: AdminConfig.$type,
      config_id: isSet(object.config_id) ? globalThis.String(object.config_id) : undefined,
    };
  },

  toJSON(message: AdminConfig): unknown {
    const obj: any = {};
    if (message.config_id !== undefined) {
      obj.config_id = message.config_id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdminConfig>, I>>(base?: I): AdminConfig {
    return AdminConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdminConfig>, I>>(object: I): AdminConfig {
    const message = createBaseAdminConfig();
    message.config_id = object.config_id ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(AdminConfig.$type, AdminConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
