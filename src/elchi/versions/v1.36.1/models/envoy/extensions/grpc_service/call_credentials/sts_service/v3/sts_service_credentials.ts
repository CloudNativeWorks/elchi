// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/grpc_service/call_credentials/sts_service/v3/sts_service_credentials.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.grpc_service.call_credentials.sts_service.v3";

/**
 * Security token service configuration that allows Google gRPC to
 * fetch security token from an OAuth 2.0 authorization server.
 * See https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16 and
 * https://github.com/grpc/grpc/pull/19587.
 * [#not-implemented-hide:]
 * [#next-free-field: 10]
 */
export interface StsServiceCredentials {
  $type: "envoy.extensions.grpc_service.call_credentials.sts_service.v3.StsServiceCredentials";
  /**
   * URI of the token exchange service that handles token exchange requests.
   * [#comment:TODO(asraa): Add URI validation when implemented. Tracked by
   * https://github.com/bufbuild/protoc-gen-validate/issues/303]
   */
  token_exchange_service_uri?:
    | string
    | undefined;
  /**
   * Location of the target service or resource where the client
   * intends to use the requested security token.
   */
  resource?:
    | string
    | undefined;
  /**
   * Logical name of the target service where the client intends to
   * use the requested security token.
   */
  audience?:
    | string
    | undefined;
  /**
   * The desired scope of the requested security token in the
   * context of the service or resource where the token will be used.
   */
  scope?:
    | string
    | undefined;
  /** Type of the requested security token. */
  requested_token_type?:
    | string
    | undefined;
  /**
   * The path of subject token, a security token that represents the
   * identity of the party on behalf of whom the request is being made.
   */
  subject_token_path?:
    | string
    | undefined;
  /** Type of the subject token. */
  subject_token_type?:
    | string
    | undefined;
  /**
   * The path of actor token, a security token that represents the identity
   * of the acting party. The acting party is authorized to use the
   * requested security token and act on behalf of the subject.
   */
  actor_token_path?:
    | string
    | undefined;
  /** Type of the actor token. */
  actor_token_type?: string | undefined;
}

function createBaseStsServiceCredentials(): StsServiceCredentials {
  return { $type: "envoy.extensions.grpc_service.call_credentials.sts_service.v3.StsServiceCredentials" };
}

export const StsServiceCredentials: MessageFns<
  StsServiceCredentials,
  "envoy.extensions.grpc_service.call_credentials.sts_service.v3.StsServiceCredentials"
> = {
  $type: "envoy.extensions.grpc_service.call_credentials.sts_service.v3.StsServiceCredentials" as const,

  encode(message: StsServiceCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token_exchange_service_uri !== undefined && message.token_exchange_service_uri !== "") {
      writer.uint32(10).string(message.token_exchange_service_uri);
    }
    if (message.resource !== undefined && message.resource !== "") {
      writer.uint32(18).string(message.resource);
    }
    if (message.audience !== undefined && message.audience !== "") {
      writer.uint32(26).string(message.audience);
    }
    if (message.scope !== undefined && message.scope !== "") {
      writer.uint32(34).string(message.scope);
    }
    if (message.requested_token_type !== undefined && message.requested_token_type !== "") {
      writer.uint32(42).string(message.requested_token_type);
    }
    if (message.subject_token_path !== undefined && message.subject_token_path !== "") {
      writer.uint32(50).string(message.subject_token_path);
    }
    if (message.subject_token_type !== undefined && message.subject_token_type !== "") {
      writer.uint32(58).string(message.subject_token_type);
    }
    if (message.actor_token_path !== undefined && message.actor_token_path !== "") {
      writer.uint32(66).string(message.actor_token_path);
    }
    if (message.actor_token_type !== undefined && message.actor_token_type !== "") {
      writer.uint32(74).string(message.actor_token_type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StsServiceCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStsServiceCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token_exchange_service_uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resource = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.audience = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.scope = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.requested_token_type = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.subject_token_path = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.subject_token_type = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.actor_token_path = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.actor_token_type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StsServiceCredentials {
    return {
      $type: StsServiceCredentials.$type,
      token_exchange_service_uri: isSet(object.token_exchange_service_uri)
        ? globalThis.String(object.token_exchange_service_uri)
        : undefined,
      resource: isSet(object.resource) ? globalThis.String(object.resource) : undefined,
      audience: isSet(object.audience) ? globalThis.String(object.audience) : undefined,
      scope: isSet(object.scope) ? globalThis.String(object.scope) : undefined,
      requested_token_type: isSet(object.requested_token_type)
        ? globalThis.String(object.requested_token_type)
        : undefined,
      subject_token_path: isSet(object.subject_token_path) ? globalThis.String(object.subject_token_path) : undefined,
      subject_token_type: isSet(object.subject_token_type) ? globalThis.String(object.subject_token_type) : undefined,
      actor_token_path: isSet(object.actor_token_path) ? globalThis.String(object.actor_token_path) : undefined,
      actor_token_type: isSet(object.actor_token_type) ? globalThis.String(object.actor_token_type) : undefined,
    };
  },

  toJSON(message: StsServiceCredentials): unknown {
    const obj: any = {};
    if (message.token_exchange_service_uri !== undefined) {
      obj.token_exchange_service_uri = message.token_exchange_service_uri;
    }
    if (message.resource !== undefined) {
      obj.resource = message.resource;
    }
    if (message.audience !== undefined) {
      obj.audience = message.audience;
    }
    if (message.scope !== undefined) {
      obj.scope = message.scope;
    }
    if (message.requested_token_type !== undefined) {
      obj.requested_token_type = message.requested_token_type;
    }
    if (message.subject_token_path !== undefined) {
      obj.subject_token_path = message.subject_token_path;
    }
    if (message.subject_token_type !== undefined) {
      obj.subject_token_type = message.subject_token_type;
    }
    if (message.actor_token_path !== undefined) {
      obj.actor_token_path = message.actor_token_path;
    }
    if (message.actor_token_type !== undefined) {
      obj.actor_token_type = message.actor_token_type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StsServiceCredentials>, I>>(base?: I): StsServiceCredentials {
    return StsServiceCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StsServiceCredentials>, I>>(object: I): StsServiceCredentials {
    const message = createBaseStsServiceCredentials();
    message.token_exchange_service_uri = object.token_exchange_service_uri ?? undefined;
    message.resource = object.resource ?? undefined;
    message.audience = object.audience ?? undefined;
    message.scope = object.scope ?? undefined;
    message.requested_token_type = object.requested_token_type ?? undefined;
    message.subject_token_path = object.subject_token_path ?? undefined;
    message.subject_token_type = object.subject_token_type ?? undefined;
    message.actor_token_path = object.actor_token_path ?? undefined;
    message.actor_token_type = object.actor_token_type ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(StsServiceCredentials.$type, StsServiceCredentials);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
