// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/grpc_service/channel_credentials/tls/v3/tls_credentials.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CommonTlsContext_CertificateProviderInstance } from "../../../../transport_sockets/tls/v3/tls";

export const protobufPackage = "envoy.extensions.grpc_service.channel_credentials.tls.v3";

/** [#not-implemented-hide:] */
export interface TlsCredentials {
  $type: "envoy.extensions.grpc_service.channel_credentials.tls.v3.TlsCredentials";
  /** The certificate provider instance for the root cert. Must be set. */
  root_certificate_provider?:
    | CommonTlsContext_CertificateProviderInstance
    | undefined;
  /**
   * The certificate provider instance for the identity cert. Optional;
   * if unset, no identity certificate will be sent to the server.
   */
  identity_certificate_provider?: CommonTlsContext_CertificateProviderInstance | undefined;
}

function createBaseTlsCredentials(): TlsCredentials {
  return { $type: "envoy.extensions.grpc_service.channel_credentials.tls.v3.TlsCredentials" };
}

export const TlsCredentials: MessageFns<
  TlsCredentials,
  "envoy.extensions.grpc_service.channel_credentials.tls.v3.TlsCredentials"
> = {
  $type: "envoy.extensions.grpc_service.channel_credentials.tls.v3.TlsCredentials" as const,

  encode(message: TlsCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.root_certificate_provider !== undefined) {
      CommonTlsContext_CertificateProviderInstance.encode(message.root_certificate_provider, writer.uint32(10).fork())
        .join();
    }
    if (message.identity_certificate_provider !== undefined) {
      CommonTlsContext_CertificateProviderInstance.encode(
        message.identity_certificate_provider,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlsCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlsCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.root_certificate_provider = CommonTlsContext_CertificateProviderInstance.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identity_certificate_provider = CommonTlsContext_CertificateProviderInstance.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlsCredentials {
    return {
      $type: TlsCredentials.$type,
      root_certificate_provider: isSet(object.root_certificate_provider)
        ? CommonTlsContext_CertificateProviderInstance.fromJSON(object.root_certificate_provider)
        : undefined,
      identity_certificate_provider: isSet(object.identity_certificate_provider)
        ? CommonTlsContext_CertificateProviderInstance.fromJSON(object.identity_certificate_provider)
        : undefined,
    };
  },

  toJSON(message: TlsCredentials): unknown {
    const obj: any = {};
    if (message.root_certificate_provider !== undefined) {
      obj.root_certificate_provider = CommonTlsContext_CertificateProviderInstance.toJSON(
        message.root_certificate_provider,
      );
    }
    if (message.identity_certificate_provider !== undefined) {
      obj.identity_certificate_provider = CommonTlsContext_CertificateProviderInstance.toJSON(
        message.identity_certificate_provider,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TlsCredentials>, I>>(base?: I): TlsCredentials {
    return TlsCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TlsCredentials>, I>>(object: I): TlsCredentials {
    const message = createBaseTlsCredentials();
    message.root_certificate_provider =
      (object.root_certificate_provider !== undefined && object.root_certificate_provider !== null)
        ? CommonTlsContext_CertificateProviderInstance.fromPartial(object.root_certificate_provider)
        : undefined;
    message.identity_certificate_provider =
      (object.identity_certificate_provider !== undefined && object.identity_certificate_provider !== null)
        ? CommonTlsContext_CertificateProviderInstance.fromPartial(object.identity_certificate_provider)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(TlsCredentials.$type, TlsCredentials);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
