// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/resource_monitors/cpu_utilization/v3/cpu_utilization.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.resource_monitors.cpu_utilization.v3";

/** The CPU utilization resource monitor reports the Envoy process the CPU Utilization across different platforms. */
export interface CpuUtilizationConfig {
  $type: "envoy.extensions.resource_monitors.cpu_utilization.v3.CpuUtilizationConfig";
  mode?: CpuUtilizationConfig_UtilizationComputeStrategy | undefined;
}

export enum CpuUtilizationConfig_UtilizationComputeStrategy {
  /** HOST - Reports CPU Utilization of the entire Linux Host machine */
  HOST = "HOST",
  /** CONTAINER - Reports CPU Utilization of Envoy Container using CGROUP stats in Linux K8s environment */
  CONTAINER = "CONTAINER",
}

export function cpuUtilizationConfig_UtilizationComputeStrategyFromJSON(
  object: any,
): CpuUtilizationConfig_UtilizationComputeStrategy {
  switch (object) {
    case 0:
    case "HOST":
      return CpuUtilizationConfig_UtilizationComputeStrategy.HOST;
    case 1:
    case "CONTAINER":
      return CpuUtilizationConfig_UtilizationComputeStrategy.CONTAINER;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CpuUtilizationConfig_UtilizationComputeStrategy",
      );
  }
}

export function cpuUtilizationConfig_UtilizationComputeStrategyToJSON(
  object: CpuUtilizationConfig_UtilizationComputeStrategy,
): string {
  switch (object) {
    case CpuUtilizationConfig_UtilizationComputeStrategy.HOST:
      return "HOST";
    case CpuUtilizationConfig_UtilizationComputeStrategy.CONTAINER:
      return "CONTAINER";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CpuUtilizationConfig_UtilizationComputeStrategy",
      );
  }
}

export function cpuUtilizationConfig_UtilizationComputeStrategyToNumber(
  object: CpuUtilizationConfig_UtilizationComputeStrategy,
): number {
  switch (object) {
    case CpuUtilizationConfig_UtilizationComputeStrategy.HOST:
      return 0;
    case CpuUtilizationConfig_UtilizationComputeStrategy.CONTAINER:
      return 1;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CpuUtilizationConfig_UtilizationComputeStrategy",
      );
  }
}

function createBaseCpuUtilizationConfig(): CpuUtilizationConfig {
  return { $type: "envoy.extensions.resource_monitors.cpu_utilization.v3.CpuUtilizationConfig" };
}

export const CpuUtilizationConfig: MessageFns<
  CpuUtilizationConfig,
  "envoy.extensions.resource_monitors.cpu_utilization.v3.CpuUtilizationConfig"
> = {
  $type: "envoy.extensions.resource_monitors.cpu_utilization.v3.CpuUtilizationConfig" as const,

  encode(message: CpuUtilizationConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mode !== undefined && message.mode !== CpuUtilizationConfig_UtilizationComputeStrategy.HOST) {
      writer.uint32(8).int32(cpuUtilizationConfig_UtilizationComputeStrategyToNumber(message.mode));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CpuUtilizationConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCpuUtilizationConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mode = cpuUtilizationConfig_UtilizationComputeStrategyFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CpuUtilizationConfig {
    return {
      $type: CpuUtilizationConfig.$type,
      mode: isSet(object.mode) ? cpuUtilizationConfig_UtilizationComputeStrategyFromJSON(object.mode) : undefined,
    };
  },

  toJSON(message: CpuUtilizationConfig): unknown {
    const obj: any = {};
    if (message.mode !== undefined) {
      obj.mode = cpuUtilizationConfig_UtilizationComputeStrategyToJSON(message.mode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CpuUtilizationConfig>, I>>(base?: I): CpuUtilizationConfig {
    return CpuUtilizationConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CpuUtilizationConfig>, I>>(object: I): CpuUtilizationConfig {
    const message = createBaseCpuUtilizationConfig();
    message.mode = object.mode ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CpuUtilizationConfig.$type, CpuUtilizationConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
