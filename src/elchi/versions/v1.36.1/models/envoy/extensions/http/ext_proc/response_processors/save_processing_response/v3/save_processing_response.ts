// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/ext_proc/response_processors/save_processing_response/v3/save_processing_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3";

/**
 * Extension to save the :ref:`response
 * <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>` from the external processor as
 * filter state with name
 * "envoy.http.ext_proc.response_processors.save_processing_response[.:ref:`filter_state_name_suffix
 * <envoy_v3_api_field_extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse.filter_state_name>`].
 * This extension supports saving of request and response headers and trailers,
 * and immediate response.
 *
 * .. note::
 *   Response processors are currently in alpha.
 *
 * [#next-free-field: 7]
 */
export interface SaveProcessingResponse {
  $type: "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse";
  /**
   * The default filter state name is
   * "envoy.http.ext_proc.response_processors.save_processing_response".
   * If defined, ``filter_state_name_suffix`` is appended to this.
   * For example, setting ``filter_state_name_suffix`` to "xyz" will set the
   * filter state name to "envoy.http.ext_proc.response_processors.save_processing_response.xyz"
   */
  filter_state_name_suffix?:
    | string
    | undefined;
  /**
   * Save the response to filter state when :ref:`request_headers
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.request_headers>` is set.
   */
  save_request_headers?:
    | SaveProcessingResponse_SaveOptions
    | undefined;
  /**
   * Save the response to filter state when :ref:`response_headers
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.response_headers>` is set.
   */
  save_response_headers?:
    | SaveProcessingResponse_SaveOptions
    | undefined;
  /**
   * Save the response to filter state when :ref:`request_trailers
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.request_trailers>` is set.
   */
  save_request_trailers?:
    | SaveProcessingResponse_SaveOptions
    | undefined;
  /**
   * Save the response to filter state when :ref:`response_trailers
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.response_trailers>` is set.
   */
  save_response_trailers?:
    | SaveProcessingResponse_SaveOptions
    | undefined;
  /**
   * Save the response to filter state when :ref:`immediate_response
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.immediate_response>` is set.
   */
  save_immediate_response?: SaveProcessingResponse_SaveOptions | undefined;
}

export interface SaveProcessingResponse_SaveOptions {
  $type:
    "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse.SaveOptions";
  /** Whether or not to save the response for the response type. */
  save_response?:
    | boolean
    | undefined;
  /**
   * When true, saves the response if there was an error when processing
   * the response from the external processor.
   */
  save_on_error?: boolean | undefined;
}

function createBaseSaveProcessingResponse(): SaveProcessingResponse {
  return {
    $type: "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse",
  };
}

export const SaveProcessingResponse: MessageFns<
  SaveProcessingResponse,
  "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse"
> = {
  $type:
    "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse" as const,

  encode(message: SaveProcessingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter_state_name_suffix !== undefined && message.filter_state_name_suffix !== "") {
      writer.uint32(10).string(message.filter_state_name_suffix);
    }
    if (message.save_request_headers !== undefined) {
      SaveProcessingResponse_SaveOptions.encode(message.save_request_headers, writer.uint32(18).fork()).join();
    }
    if (message.save_response_headers !== undefined) {
      SaveProcessingResponse_SaveOptions.encode(message.save_response_headers, writer.uint32(26).fork()).join();
    }
    if (message.save_request_trailers !== undefined) {
      SaveProcessingResponse_SaveOptions.encode(message.save_request_trailers, writer.uint32(34).fork()).join();
    }
    if (message.save_response_trailers !== undefined) {
      SaveProcessingResponse_SaveOptions.encode(message.save_response_trailers, writer.uint32(42).fork()).join();
    }
    if (message.save_immediate_response !== undefined) {
      SaveProcessingResponse_SaveOptions.encode(message.save_immediate_response, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveProcessingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveProcessingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter_state_name_suffix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.save_request_headers = SaveProcessingResponse_SaveOptions.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.save_response_headers = SaveProcessingResponse_SaveOptions.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.save_request_trailers = SaveProcessingResponse_SaveOptions.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.save_response_trailers = SaveProcessingResponse_SaveOptions.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.save_immediate_response = SaveProcessingResponse_SaveOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveProcessingResponse {
    return {
      $type: SaveProcessingResponse.$type,
      filter_state_name_suffix: isSet(object.filter_state_name_suffix)
        ? globalThis.String(object.filter_state_name_suffix)
        : undefined,
      save_request_headers: isSet(object.save_request_headers)
        ? SaveProcessingResponse_SaveOptions.fromJSON(object.save_request_headers)
        : undefined,
      save_response_headers: isSet(object.save_response_headers)
        ? SaveProcessingResponse_SaveOptions.fromJSON(object.save_response_headers)
        : undefined,
      save_request_trailers: isSet(object.save_request_trailers)
        ? SaveProcessingResponse_SaveOptions.fromJSON(object.save_request_trailers)
        : undefined,
      save_response_trailers: isSet(object.save_response_trailers)
        ? SaveProcessingResponse_SaveOptions.fromJSON(object.save_response_trailers)
        : undefined,
      save_immediate_response: isSet(object.save_immediate_response)
        ? SaveProcessingResponse_SaveOptions.fromJSON(object.save_immediate_response)
        : undefined,
    };
  },

  toJSON(message: SaveProcessingResponse): unknown {
    const obj: any = {};
    if (message.filter_state_name_suffix !== undefined) {
      obj.filter_state_name_suffix = message.filter_state_name_suffix;
    }
    if (message.save_request_headers !== undefined) {
      obj.save_request_headers = SaveProcessingResponse_SaveOptions.toJSON(message.save_request_headers);
    }
    if (message.save_response_headers !== undefined) {
      obj.save_response_headers = SaveProcessingResponse_SaveOptions.toJSON(message.save_response_headers);
    }
    if (message.save_request_trailers !== undefined) {
      obj.save_request_trailers = SaveProcessingResponse_SaveOptions.toJSON(message.save_request_trailers);
    }
    if (message.save_response_trailers !== undefined) {
      obj.save_response_trailers = SaveProcessingResponse_SaveOptions.toJSON(message.save_response_trailers);
    }
    if (message.save_immediate_response !== undefined) {
      obj.save_immediate_response = SaveProcessingResponse_SaveOptions.toJSON(message.save_immediate_response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveProcessingResponse>, I>>(base?: I): SaveProcessingResponse {
    return SaveProcessingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveProcessingResponse>, I>>(object: I): SaveProcessingResponse {
    const message = createBaseSaveProcessingResponse();
    message.filter_state_name_suffix = object.filter_state_name_suffix ?? undefined;
    message.save_request_headers = (object.save_request_headers !== undefined && object.save_request_headers !== null)
      ? SaveProcessingResponse_SaveOptions.fromPartial(object.save_request_headers)
      : undefined;
    message.save_response_headers =
      (object.save_response_headers !== undefined && object.save_response_headers !== null)
        ? SaveProcessingResponse_SaveOptions.fromPartial(object.save_response_headers)
        : undefined;
    message.save_request_trailers =
      (object.save_request_trailers !== undefined && object.save_request_trailers !== null)
        ? SaveProcessingResponse_SaveOptions.fromPartial(object.save_request_trailers)
        : undefined;
    message.save_response_trailers =
      (object.save_response_trailers !== undefined && object.save_response_trailers !== null)
        ? SaveProcessingResponse_SaveOptions.fromPartial(object.save_response_trailers)
        : undefined;
    message.save_immediate_response =
      (object.save_immediate_response !== undefined && object.save_immediate_response !== null)
        ? SaveProcessingResponse_SaveOptions.fromPartial(object.save_immediate_response)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(SaveProcessingResponse.$type, SaveProcessingResponse);

function createBaseSaveProcessingResponse_SaveOptions(): SaveProcessingResponse_SaveOptions {
  return {
    $type:
      "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse.SaveOptions",
  };
}

export const SaveProcessingResponse_SaveOptions: MessageFns<
  SaveProcessingResponse_SaveOptions,
  "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse.SaveOptions"
> = {
  $type:
    "envoy.extensions.http.ext_proc.response_processors.save_processing_response.v3.SaveProcessingResponse.SaveOptions" as const,

  encode(message: SaveProcessingResponse_SaveOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.save_response !== undefined && message.save_response !== false) {
      writer.uint32(8).bool(message.save_response);
    }
    if (message.save_on_error !== undefined && message.save_on_error !== false) {
      writer.uint32(16).bool(message.save_on_error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveProcessingResponse_SaveOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveProcessingResponse_SaveOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.save_response = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.save_on_error = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveProcessingResponse_SaveOptions {
    return {
      $type: SaveProcessingResponse_SaveOptions.$type,
      save_response: isSet(object.save_response) ? globalThis.Boolean(object.save_response) : undefined,
      save_on_error: isSet(object.save_on_error) ? globalThis.Boolean(object.save_on_error) : undefined,
    };
  },

  toJSON(message: SaveProcessingResponse_SaveOptions): unknown {
    const obj: any = {};
    if (message.save_response !== undefined) {
      obj.save_response = message.save_response;
    }
    if (message.save_on_error !== undefined) {
      obj.save_on_error = message.save_on_error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveProcessingResponse_SaveOptions>, I>>(
    base?: I,
  ): SaveProcessingResponse_SaveOptions {
    return SaveProcessingResponse_SaveOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveProcessingResponse_SaveOptions>, I>>(
    object: I,
  ): SaveProcessingResponse_SaveOptions {
    const message = createBaseSaveProcessingResponse_SaveOptions();
    message.save_response = object.save_response ?? undefined;
    message.save_on_error = object.save_on_error ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(SaveProcessingResponse_SaveOptions.$type, SaveProcessingResponse_SaveOptions);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
