// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/compression/zstd/compressor/v3/zstd.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DataSource } from "../../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.compression.zstd.compressor.v3";

/** [#next-free-field: 6] */
export interface Zstd {
  $type: "envoy.extensions.compression.zstd.compressor.v3.Zstd";
  /**
   * Set compression parameters according to pre-defined compression level table.
   * Note that exact compression parameters are dynamically determined,
   * depending on both compression level and source content size (when known).
   * Value 0 means default, and default level is 3.
   * Setting a level does not automatically set all other compression parameters
   * to default. Setting this will however eventually dynamically impact the compression
   * parameters which have not been manually set. The manually set
   * ones will 'stick'.
   */
  compression_level?:
    | number
    | undefined;
  /** A 32-bits checksum of content is written at end of frame. If not set, defaults to false. */
  enable_checksum?:
    | boolean
    | undefined;
  /**
   * The higher the value of selected strategy, the more complex it is,
   * resulting in stronger and slower compression.
   * Special: value 0 means "use default strategy".
   */
  strategy?:
    | Zstd_Strategy
    | undefined;
  /**
   * A dictionary for compression. Zstd offers dictionary compression, which greatly improves
   * efficiency on small files and messages. Each dictionary will be generated with a dictionary ID
   * that can be used to search the same dictionary during decompression.
   * Please refer to `zstd manual <https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder>`_
   * to train a specific dictionary for compression.
   */
  dictionary?:
    | DataSource
    | undefined;
  /** Value for compressor's next output buffer. If not set, defaults to 4096. */
  chunk_size?: number | undefined;
}

/** Reference to http://facebook.github.io/zstd/zstd_manual.html */
export enum Zstd_Strategy {
  DEFAULT = "DEFAULT",
  FAST = "FAST",
  DFAST = "DFAST",
  GREEDY = "GREEDY",
  LAZY = "LAZY",
  LAZY2 = "LAZY2",
  BTLAZY2 = "BTLAZY2",
  BTOPT = "BTOPT",
  BTULTRA = "BTULTRA",
  BTULTRA2 = "BTULTRA2",
}

export function zstd_StrategyFromJSON(object: any): Zstd_Strategy {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Zstd_Strategy.DEFAULT;
    case 1:
    case "FAST":
      return Zstd_Strategy.FAST;
    case 2:
    case "DFAST":
      return Zstd_Strategy.DFAST;
    case 3:
    case "GREEDY":
      return Zstd_Strategy.GREEDY;
    case 4:
    case "LAZY":
      return Zstd_Strategy.LAZY;
    case 5:
    case "LAZY2":
      return Zstd_Strategy.LAZY2;
    case 6:
    case "BTLAZY2":
      return Zstd_Strategy.BTLAZY2;
    case 7:
    case "BTOPT":
      return Zstd_Strategy.BTOPT;
    case 8:
    case "BTULTRA":
      return Zstd_Strategy.BTULTRA;
    case 9:
    case "BTULTRA2":
      return Zstd_Strategy.BTULTRA2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Zstd_Strategy");
  }
}

export function zstd_StrategyToJSON(object: Zstd_Strategy): string {
  switch (object) {
    case Zstd_Strategy.DEFAULT:
      return "DEFAULT";
    case Zstd_Strategy.FAST:
      return "FAST";
    case Zstd_Strategy.DFAST:
      return "DFAST";
    case Zstd_Strategy.GREEDY:
      return "GREEDY";
    case Zstd_Strategy.LAZY:
      return "LAZY";
    case Zstd_Strategy.LAZY2:
      return "LAZY2";
    case Zstd_Strategy.BTLAZY2:
      return "BTLAZY2";
    case Zstd_Strategy.BTOPT:
      return "BTOPT";
    case Zstd_Strategy.BTULTRA:
      return "BTULTRA";
    case Zstd_Strategy.BTULTRA2:
      return "BTULTRA2";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Zstd_Strategy");
  }
}

export function zstd_StrategyToNumber(object: Zstd_Strategy): number {
  switch (object) {
    case Zstd_Strategy.DEFAULT:
      return 0;
    case Zstd_Strategy.FAST:
      return 1;
    case Zstd_Strategy.DFAST:
      return 2;
    case Zstd_Strategy.GREEDY:
      return 3;
    case Zstd_Strategy.LAZY:
      return 4;
    case Zstd_Strategy.LAZY2:
      return 5;
    case Zstd_Strategy.BTLAZY2:
      return 6;
    case Zstd_Strategy.BTOPT:
      return 7;
    case Zstd_Strategy.BTULTRA:
      return 8;
    case Zstd_Strategy.BTULTRA2:
      return 9;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Zstd_Strategy");
  }
}

function createBaseZstd(): Zstd {
  return { $type: "envoy.extensions.compression.zstd.compressor.v3.Zstd" };
}

export const Zstd: MessageFns<Zstd, "envoy.extensions.compression.zstd.compressor.v3.Zstd"> = {
  $type: "envoy.extensions.compression.zstd.compressor.v3.Zstd" as const,

  encode(message: Zstd, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.compression_level !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.compression_level! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.enable_checksum !== undefined && message.enable_checksum !== false) {
      writer.uint32(16).bool(message.enable_checksum);
    }
    if (message.strategy !== undefined && message.strategy !== Zstd_Strategy.DEFAULT) {
      writer.uint32(24).int32(zstd_StrategyToNumber(message.strategy));
    }
    if (message.dictionary !== undefined) {
      DataSource.encode(message.dictionary, writer.uint32(34).fork()).join();
    }
    if (message.chunk_size !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.chunk_size! }, writer.uint32(42).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Zstd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZstd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.compression_level = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.enable_checksum = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.strategy = zstd_StrategyFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dictionary = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chunk_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Zstd {
    return {
      $type: Zstd.$type,
      compression_level: isSet(object.compression_level) ? Number(object.compression_level) : undefined,
      enable_checksum: isSet(object.enable_checksum) ? globalThis.Boolean(object.enable_checksum) : undefined,
      strategy: isSet(object.strategy) ? zstd_StrategyFromJSON(object.strategy) : undefined,
      dictionary: isSet(object.dictionary) ? DataSource.fromJSON(object.dictionary) : undefined,
      chunk_size: isSet(object.chunk_size) ? Number(object.chunk_size) : undefined,
    };
  },

  toJSON(message: Zstd): unknown {
    const obj: any = {};
    if (message.compression_level !== undefined) {
      obj.compression_level = message.compression_level;
    }
    if (message.enable_checksum !== undefined) {
      obj.enable_checksum = message.enable_checksum;
    }
    if (message.strategy !== undefined) {
      obj.strategy = zstd_StrategyToJSON(message.strategy);
    }
    if (message.dictionary !== undefined) {
      obj.dictionary = DataSource.toJSON(message.dictionary);
    }
    if (message.chunk_size !== undefined) {
      obj.chunk_size = message.chunk_size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Zstd>, I>>(base?: I): Zstd {
    return Zstd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Zstd>, I>>(object: I): Zstd {
    const message = createBaseZstd();
    message.compression_level = object.compression_level ?? undefined;
    message.enable_checksum = object.enable_checksum ?? undefined;
    message.strategy = object.strategy ?? undefined;
    message.dictionary = (object.dictionary !== undefined && object.dictionary !== null)
      ? DataSource.fromPartial(object.dictionary)
      : undefined;
    message.chunk_size = object.chunk_size ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Zstd.$type, Zstd);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
