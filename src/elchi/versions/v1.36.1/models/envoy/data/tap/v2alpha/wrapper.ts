// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/tap/v2alpha/wrapper.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { HttpBufferedTrace, HttpStreamedTraceSegment } from "./http";
import { SocketBufferedTrace, SocketStreamedTraceSegment } from "./transport";

export const protobufPackage = "envoy.data.tap.v2alpha";

/**
 * Wrapper for all fully buffered and streamed tap traces that Envoy emits. This is required for
 * sending traces over gRPC APIs or more easily persisting binary messages to files.
 */
export interface TraceWrapper {
  $type: "envoy.data.tap.v2alpha.TraceWrapper";
  trace?:
    | //
    /** An HTTP buffered tap trace. */
    { $case: "http_buffered_trace"; http_buffered_trace: HttpBufferedTrace }
    | //
    /** An HTTP streamed tap trace segment. */
    { $case: "http_streamed_trace_segment"; http_streamed_trace_segment: HttpStreamedTraceSegment }
    | //
    /** A socket buffered tap trace. */
    { $case: "socket_buffered_trace"; socket_buffered_trace: SocketBufferedTrace }
    | //
    /** A socket streamed tap trace segment. */
    { $case: "socket_streamed_trace_segment"; socket_streamed_trace_segment: SocketStreamedTraceSegment }
    | undefined;
}

function createBaseTraceWrapper(): TraceWrapper {
  return { $type: "envoy.data.tap.v2alpha.TraceWrapper", trace: undefined };
}

export const TraceWrapper: MessageFns<TraceWrapper, "envoy.data.tap.v2alpha.TraceWrapper"> = {
  $type: "envoy.data.tap.v2alpha.TraceWrapper" as const,

  encode(message: TraceWrapper, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.trace?.$case) {
      case "http_buffered_trace":
        HttpBufferedTrace.encode(message.trace.http_buffered_trace, writer.uint32(10).fork()).join();
        break;
      case "http_streamed_trace_segment":
        HttpStreamedTraceSegment.encode(message.trace.http_streamed_trace_segment, writer.uint32(18).fork()).join();
        break;
      case "socket_buffered_trace":
        SocketBufferedTrace.encode(message.trace.socket_buffered_trace, writer.uint32(26).fork()).join();
        break;
      case "socket_streamed_trace_segment":
        SocketStreamedTraceSegment.encode(message.trace.socket_streamed_trace_segment, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraceWrapper {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraceWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trace = {
            $case: "http_buffered_trace",
            http_buffered_trace: HttpBufferedTrace.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trace = {
            $case: "http_streamed_trace_segment",
            http_streamed_trace_segment: HttpStreamedTraceSegment.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.trace = {
            $case: "socket_buffered_trace",
            socket_buffered_trace: SocketBufferedTrace.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.trace = {
            $case: "socket_streamed_trace_segment",
            socket_streamed_trace_segment: SocketStreamedTraceSegment.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraceWrapper {
    return {
      $type: TraceWrapper.$type,
      trace: isSet(object.http_buffered_trace)
        ? { $case: "http_buffered_trace", http_buffered_trace: HttpBufferedTrace.fromJSON(object.http_buffered_trace) }
        : isSet(object.http_streamed_trace_segment)
        ? {
          $case: "http_streamed_trace_segment",
          http_streamed_trace_segment: HttpStreamedTraceSegment.fromJSON(object.http_streamed_trace_segment),
        }
        : isSet(object.socket_buffered_trace)
        ? {
          $case: "socket_buffered_trace",
          socket_buffered_trace: SocketBufferedTrace.fromJSON(object.socket_buffered_trace),
        }
        : isSet(object.socket_streamed_trace_segment)
        ? {
          $case: "socket_streamed_trace_segment",
          socket_streamed_trace_segment: SocketStreamedTraceSegment.fromJSON(object.socket_streamed_trace_segment),
        }
        : undefined,
    };
  },

  toJSON(message: TraceWrapper): unknown {
    const obj: any = {};
    if (message.trace?.$case === "http_buffered_trace") {
      obj.http_buffered_trace = HttpBufferedTrace.toJSON(message.trace.http_buffered_trace);
    }
    if (message.trace?.$case === "http_streamed_trace_segment") {
      obj.http_streamed_trace_segment = HttpStreamedTraceSegment.toJSON(message.trace.http_streamed_trace_segment);
    }
    if (message.trace?.$case === "socket_buffered_trace") {
      obj.socket_buffered_trace = SocketBufferedTrace.toJSON(message.trace.socket_buffered_trace);
    }
    if (message.trace?.$case === "socket_streamed_trace_segment") {
      obj.socket_streamed_trace_segment = SocketStreamedTraceSegment.toJSON(
        message.trace.socket_streamed_trace_segment,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TraceWrapper>, I>>(base?: I): TraceWrapper {
    return TraceWrapper.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TraceWrapper>, I>>(object: I): TraceWrapper {
    const message = createBaseTraceWrapper();
    if (
      object.trace?.$case === "http_buffered_trace" &&
      object.trace?.http_buffered_trace !== undefined &&
      object.trace?.http_buffered_trace !== null
    ) {
      message.trace = {
        $case: "http_buffered_trace",
        http_buffered_trace: HttpBufferedTrace.fromPartial(object.trace.http_buffered_trace),
      };
    }
    if (
      object.trace?.$case === "http_streamed_trace_segment" &&
      object.trace?.http_streamed_trace_segment !== undefined &&
      object.trace?.http_streamed_trace_segment !== null
    ) {
      message.trace = {
        $case: "http_streamed_trace_segment",
        http_streamed_trace_segment: HttpStreamedTraceSegment.fromPartial(object.trace.http_streamed_trace_segment),
      };
    }
    if (
      object.trace?.$case === "socket_buffered_trace" &&
      object.trace?.socket_buffered_trace !== undefined &&
      object.trace?.socket_buffered_trace !== null
    ) {
      message.trace = {
        $case: "socket_buffered_trace",
        socket_buffered_trace: SocketBufferedTrace.fromPartial(object.trace.socket_buffered_trace),
      };
    }
    if (
      object.trace?.$case === "socket_streamed_trace_segment" &&
      object.trace?.socket_streamed_trace_segment !== undefined &&
      object.trace?.socket_streamed_trace_segment !== null
    ) {
      message.trace = {
        $case: "socket_streamed_trace_segment",
        socket_streamed_trace_segment: SocketStreamedTraceSegment.fromPartial(
          object.trace.socket_streamed_trace_segment,
        ),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(TraceWrapper.$type, TraceWrapper);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
