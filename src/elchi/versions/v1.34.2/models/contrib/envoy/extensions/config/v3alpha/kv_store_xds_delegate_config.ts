// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/config/v3alpha/kv_store_xds_delegate_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { KeyValueStoreConfig } from "../../../../../envoy/config/common/key_value/v3/config";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.config.v3alpha";

/**
 * [#extension: envoy.xds_delegates.kv_store]
 *
 * Configuration for a KeyValueStore-based XdsResourcesDelegate implementation. This implementation
 * updates the underlying KV store with xDS resources received from the configured management
 * servers, enabling configuration to be persisted locally and used on startup in case connectivity
 * with the xDS management servers could not be established.
 *
 * The KV Store based delegate's handling of wildcard resources (empty resource list or "*") is
 * designed for use with O(100) resources or fewer, so it's not currently advised to use this
 * feature for large configurations with heavy use of wildcard resources.
 */
export interface KeyValueStoreXdsDelegateConfig {
  $type: "envoy.extensions.config.v3alpha.KeyValueStoreXdsDelegateConfig";
  /**
   * Configuration for the KeyValueStore that holds the xDS resources.
   * [#allow-fully-qualified-name:]
   */
  key_value_store_config?: KeyValueStoreConfig | undefined;
}

function createBaseKeyValueStoreXdsDelegateConfig(): KeyValueStoreXdsDelegateConfig {
  return { $type: "envoy.extensions.config.v3alpha.KeyValueStoreXdsDelegateConfig" };
}

export const KeyValueStoreXdsDelegateConfig: MessageFns<
  KeyValueStoreXdsDelegateConfig,
  "envoy.extensions.config.v3alpha.KeyValueStoreXdsDelegateConfig"
> = {
  $type: "envoy.extensions.config.v3alpha.KeyValueStoreXdsDelegateConfig" as const,

  encode(message: KeyValueStoreXdsDelegateConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key_value_store_config !== undefined) {
      KeyValueStoreConfig.encode(message.key_value_store_config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyValueStoreXdsDelegateConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyValueStoreXdsDelegateConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key_value_store_config = KeyValueStoreConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyValueStoreXdsDelegateConfig {
    return {
      $type: KeyValueStoreXdsDelegateConfig.$type,
      key_value_store_config: isSet(object.key_value_store_config)
        ? KeyValueStoreConfig.fromJSON(object.key_value_store_config)
        : undefined,
    };
  },

  toJSON(message: KeyValueStoreXdsDelegateConfig): unknown {
    const obj: any = {};
    if (message.key_value_store_config !== undefined) {
      obj.key_value_store_config = KeyValueStoreConfig.toJSON(message.key_value_store_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyValueStoreXdsDelegateConfig>, I>>(base?: I): KeyValueStoreXdsDelegateConfig {
    return KeyValueStoreXdsDelegateConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyValueStoreXdsDelegateConfig>, I>>(
    object: I,
  ): KeyValueStoreXdsDelegateConfig {
    const message = createBaseKeyValueStoreXdsDelegateConfig();
    message.key_value_store_config =
      (object.key_value_store_config !== undefined && object.key_value_store_config !== null)
        ? KeyValueStoreConfig.fromPartial(object.key_value_store_config)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(KeyValueStoreXdsDelegateConfig.$type, KeyValueStoreXdsDelegateConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
