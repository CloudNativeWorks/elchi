// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/http/language/v3alpha/language.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.language.v3alpha";

/** Language detection filter config. */
export interface Language {
  $type: "envoy.extensions.filters.http.language.v3alpha.Language";
  /**
   * The default language to be used as a fallback.
   * The value will be included in the list of the supported languages.
   *
   * See https://unicode-org.github.io/icu/userguide/locale/
   */
  default_language?:
    | string
    | undefined;
  /**
   * The set of supported languages. There is no order priority.
   * The order will be determined by the Accept-Language header priority list
   * of the client.
   *
   * See https://unicode-org.github.io/icu/userguide/locale/
   */
  supported_languages?:
    | string[]
    | undefined;
  /**
   * If the x-language header is altered, clear the route cache for the current request.
   * This should be set if the route configuration may depend on the x-language header.
   * Otherwise it should be unset to avoid the performance cost of route recalculation.
   */
  clear_route_cache?: boolean | undefined;
}

function createBaseLanguage(): Language {
  return { $type: "envoy.extensions.filters.http.language.v3alpha.Language" };
}

export const Language: MessageFns<Language, "envoy.extensions.filters.http.language.v3alpha.Language"> = {
  $type: "envoy.extensions.filters.http.language.v3alpha.Language" as const,

  encode(message: Language, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.default_language !== undefined && message.default_language !== "") {
      writer.uint32(10).string(message.default_language);
    }
    if (message.supported_languages !== undefined && message.supported_languages.length !== 0) {
      for (const v of message.supported_languages) {
        writer.uint32(18).string(v!);
      }
    }
    if (message.clear_route_cache !== undefined && message.clear_route_cache !== false) {
      writer.uint32(24).bool(message.clear_route_cache);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Language {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLanguage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.default_language = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.supported_languages === undefined) {
            message.supported_languages = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.supported_languages!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.clear_route_cache = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Language {
    return {
      $type: Language.$type,
      default_language: isSet(object.default_language) ? globalThis.String(object.default_language) : undefined,
      supported_languages: globalThis.Array.isArray(object?.supported_languages)
        ? object.supported_languages.map((e: any) => globalThis.String(e))
        : undefined,
      clear_route_cache: isSet(object.clear_route_cache) ? globalThis.Boolean(object.clear_route_cache) : undefined,
    };
  },

  toJSON(message: Language): unknown {
    const obj: any = {};
    if (message.default_language !== undefined) {
      obj.default_language = message.default_language;
    }
    if (message.supported_languages?.length) {
      obj.supported_languages = message.supported_languages;
    }
    if (message.clear_route_cache !== undefined) {
      obj.clear_route_cache = message.clear_route_cache;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Language>, I>>(base?: I): Language {
    return Language.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Language>, I>>(object: I): Language {
    const message = createBaseLanguage();
    message.default_language = object.default_language ?? undefined;
    message.supported_languages = object.supported_languages?.map((e) => e) || undefined;
    message.clear_route_cache = object.clear_route_cache ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Language.$type, Language);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
