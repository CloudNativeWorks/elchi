// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/http/sxg/v3alpha/sxg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SdsSecretConfig } from "../../../../../../../envoy/extensions/transport_sockets/tls/v3/secret";
import { Duration } from "../../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.sxg.v3alpha";

/** [#next-free-field: 10] */
export interface SXG {
  $type: "envoy.extensions.filters.http.sxg.v3alpha.SXG";
  /**
   * The SDS configuration for the public key data for the SSL certificate that will be used to sign the
   * SXG response.
   */
  certificate?:
    | SdsSecretConfig
    | undefined;
  /**
   * The SDS configuration for the private key data for the SSL certificate that will be used to sign the
   * SXG response.
   */
  private_key?:
    | SdsSecretConfig
    | undefined;
  /**
   * The duration for which the generated SXG package will be valid. Default is 604800s (7 days in seconds).
   * Note that in order to account for clock skew, the timestamp will be backdated by a day. So, if duration
   * is set to 7 days, that will be 7 days from 24 hours ago (6 days from now). Also note that while 6/7 days
   * is appropriate for most content, if the downstream service is serving Javascript, or HTML with inline
   * Javascript, 1 day (so, with backdated expiry, 2 days, or 172800 seconds) is more appropriate.
   */
  duration?:
    | Duration
    | undefined;
  /**
   * The SXG response payload is Merkle Integrity Content Encoding (MICE) encoded (specification is [here](https://datatracker.ietf.org/doc/html/draft-thomson-http-mice-03))
   * This value indicates the record size in the encoded payload. The default value is 4096.
   */
  mi_record_size?:
    | number
    | undefined;
  /**
   * The URI of certificate CBOR file published. Since it is required that the certificate CBOR file
   * be served from the same domain as the SXG document, this should be a relative URI.
   */
  cbor_url?:
    | string
    | undefined;
  /** URL to retrieve validity data for signature, a CBOR map. See specification [here](https://tools.ietf.org/html/draft-yasskin-httpbis-origin-signed-exchanges-impl-00#section-3.6) */
  validity_url?:
    | string
    | undefined;
  /**
   * Header that will be set if it is determined that the client can accept SXG (typically ``accept: application/signed-exchange;v=b3``)
   * If not set, filter will default to: ``x-client-can-accept-sxg``
   */
  client_can_accept_sxg_header?:
    | string
    | undefined;
  /**
   * Header set by downstream service to signal that the response should be transformed to SXG If not set,
   * filter will default to: ``x-should-encode-sxg``
   */
  should_encode_sxg_header?:
    | string
    | undefined;
  /**
   * Headers that will be stripped from the SXG document, by listing a prefix (i.e. ``x-custom-`` will cause
   * all headers prefixed by ``x-custom-`` to be omitted from the SXG document)
   */
  header_prefix_filters?: string[] | undefined;
}

function createBaseSXG(): SXG {
  return { $type: "envoy.extensions.filters.http.sxg.v3alpha.SXG" };
}

export const SXG: MessageFns<SXG, "envoy.extensions.filters.http.sxg.v3alpha.SXG"> = {
  $type: "envoy.extensions.filters.http.sxg.v3alpha.SXG" as const,

  encode(message: SXG, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certificate !== undefined) {
      SdsSecretConfig.encode(message.certificate, writer.uint32(10).fork()).join();
    }
    if (message.private_key !== undefined) {
      SdsSecretConfig.encode(message.private_key, writer.uint32(18).fork()).join();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(26).fork()).join();
    }
    if (message.mi_record_size !== undefined && message.mi_record_size !== 0) {
      writer.uint32(32).uint64(message.mi_record_size);
    }
    if (message.cbor_url !== undefined && message.cbor_url !== "") {
      writer.uint32(42).string(message.cbor_url);
    }
    if (message.validity_url !== undefined && message.validity_url !== "") {
      writer.uint32(50).string(message.validity_url);
    }
    if (message.client_can_accept_sxg_header !== undefined && message.client_can_accept_sxg_header !== "") {
      writer.uint32(58).string(message.client_can_accept_sxg_header);
    }
    if (message.should_encode_sxg_header !== undefined && message.should_encode_sxg_header !== "") {
      writer.uint32(66).string(message.should_encode_sxg_header);
    }
    if (message.header_prefix_filters !== undefined && message.header_prefix_filters.length !== 0) {
      for (const v of message.header_prefix_filters) {
        writer.uint32(74).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SXG {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSXG();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.certificate = SdsSecretConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.private_key = SdsSecretConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.mi_record_size = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cbor_url = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.validity_url = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.client_can_accept_sxg_header = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.should_encode_sxg_header = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          if (message.header_prefix_filters === undefined) {
            message.header_prefix_filters = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.header_prefix_filters!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SXG {
    return {
      $type: SXG.$type,
      certificate: isSet(object.certificate) ? SdsSecretConfig.fromJSON(object.certificate) : undefined,
      private_key: isSet(object.private_key) ? SdsSecretConfig.fromJSON(object.private_key) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      mi_record_size: isSet(object.mi_record_size) ? globalThis.Number(object.mi_record_size) : undefined,
      cbor_url: isSet(object.cbor_url) ? globalThis.String(object.cbor_url) : undefined,
      validity_url: isSet(object.validity_url) ? globalThis.String(object.validity_url) : undefined,
      client_can_accept_sxg_header: isSet(object.client_can_accept_sxg_header)
        ? globalThis.String(object.client_can_accept_sxg_header)
        : undefined,
      should_encode_sxg_header: isSet(object.should_encode_sxg_header)
        ? globalThis.String(object.should_encode_sxg_header)
        : undefined,
      header_prefix_filters: globalThis.Array.isArray(object?.header_prefix_filters)
        ? object.header_prefix_filters.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: SXG): unknown {
    const obj: any = {};
    if (message.certificate !== undefined) {
      obj.certificate = SdsSecretConfig.toJSON(message.certificate);
    }
    if (message.private_key !== undefined) {
      obj.private_key = SdsSecretConfig.toJSON(message.private_key);
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.mi_record_size !== undefined) {
      obj.mi_record_size = Math.round(message.mi_record_size);
    }
    if (message.cbor_url !== undefined) {
      obj.cbor_url = message.cbor_url;
    }
    if (message.validity_url !== undefined) {
      obj.validity_url = message.validity_url;
    }
    if (message.client_can_accept_sxg_header !== undefined) {
      obj.client_can_accept_sxg_header = message.client_can_accept_sxg_header;
    }
    if (message.should_encode_sxg_header !== undefined) {
      obj.should_encode_sxg_header = message.should_encode_sxg_header;
    }
    if (message.header_prefix_filters?.length) {
      obj.header_prefix_filters = message.header_prefix_filters;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SXG>, I>>(base?: I): SXG {
    return SXG.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SXG>, I>>(object: I): SXG {
    const message = createBaseSXG();
    message.certificate = (object.certificate !== undefined && object.certificate !== null)
      ? SdsSecretConfig.fromPartial(object.certificate)
      : undefined;
    message.private_key = (object.private_key !== undefined && object.private_key !== null)
      ? SdsSecretConfig.fromPartial(object.private_key)
      : undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.mi_record_size = object.mi_record_size ?? undefined;
    message.cbor_url = object.cbor_url ?? undefined;
    message.validity_url = object.validity_url ?? undefined;
    message.client_can_accept_sxg_header = object.client_can_accept_sxg_header ?? undefined;
    message.should_encode_sxg_header = object.should_encode_sxg_header ?? undefined;
    message.header_prefix_filters = object.header_prefix_filters?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(SXG.$type, SXG);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
