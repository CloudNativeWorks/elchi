// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/http/squash/v3/squash.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../../google/protobuf/duration";
import { Struct } from "../../../../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.squash.v3";

/** [#next-free-field: 6] */
export interface Squash {
  $type: "envoy.extensions.filters.http.squash.v3.Squash";
  /** The name of the cluster that hosts the Squash server. */
  cluster?:
    | string
    | undefined;
  /**
   * When the filter requests the Squash server to create a DebugAttachment, it will use this
   * structure as template for the body of the request. It can contain reference to environment
   * variables in the form of '{{ ENV_VAR_NAME }}'. These can be used to provide the Squash server
   * with more information to find the process to attach the debugger to. For example, in a
   * Istio/k8s environment, this will contain information on the pod:
   *
   * .. code-block:: json
   *
   *  {
   *    "spec": {
   *      "attachment": {
   *        "pod": "{{ POD_NAME }}",
   *        "namespace": "{{ POD_NAMESPACE }}"
   *      },
   *      "match_request": true
   *    }
   *  }
   *
   * (where POD_NAME, POD_NAMESPACE are configured in the pod via the Downward API)
   */
  attachment_template?:
    | { [key: string]: any }
    | undefined;
  /** The timeout for individual requests sent to the Squash cluster. Defaults to 1 second. */
  request_timeout?:
    | Duration
    | undefined;
  /**
   * The total timeout Squash will delay a request and wait for it to be attached. Defaults to 60
   * seconds.
   */
  attachment_timeout?:
    | Duration
    | undefined;
  /**
   * Amount of time to poll for the status of the attachment object in the Squash server
   * (to check if has been attached). Defaults to 1 second.
   */
  attachment_poll_period?: Duration | undefined;
}

function createBaseSquash(): Squash {
  return { $type: "envoy.extensions.filters.http.squash.v3.Squash" };
}

export const Squash: MessageFns<Squash, "envoy.extensions.filters.http.squash.v3.Squash"> = {
  $type: "envoy.extensions.filters.http.squash.v3.Squash" as const,

  encode(message: Squash, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== undefined && message.cluster !== "") {
      writer.uint32(10).string(message.cluster);
    }
    if (message.attachment_template !== undefined) {
      Struct.encode(Struct.wrap(message.attachment_template), writer.uint32(18).fork()).join();
    }
    if (message.request_timeout !== undefined) {
      Duration.encode(message.request_timeout, writer.uint32(26).fork()).join();
    }
    if (message.attachment_timeout !== undefined) {
      Duration.encode(message.attachment_timeout, writer.uint32(34).fork()).join();
    }
    if (message.attachment_poll_period !== undefined) {
      Duration.encode(message.attachment_poll_period, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Squash {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSquash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attachment_template = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.request_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attachment_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.attachment_poll_period = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Squash {
    return {
      $type: Squash.$type,
      cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : undefined,
      attachment_template: isObject(object.attachment_template) ? object.attachment_template : undefined,
      request_timeout: isSet(object.request_timeout) ? Duration.fromJSON(object.request_timeout) : undefined,
      attachment_timeout: isSet(object.attachment_timeout) ? Duration.fromJSON(object.attachment_timeout) : undefined,
      attachment_poll_period: isSet(object.attachment_poll_period)
        ? Duration.fromJSON(object.attachment_poll_period)
        : undefined,
    };
  },

  toJSON(message: Squash): unknown {
    const obj: any = {};
    if (message.cluster !== undefined) {
      obj.cluster = message.cluster;
    }
    if (message.attachment_template !== undefined) {
      obj.attachment_template = message.attachment_template;
    }
    if (message.request_timeout !== undefined) {
      obj.request_timeout = Duration.toJSON(message.request_timeout);
    }
    if (message.attachment_timeout !== undefined) {
      obj.attachment_timeout = Duration.toJSON(message.attachment_timeout);
    }
    if (message.attachment_poll_period !== undefined) {
      obj.attachment_poll_period = Duration.toJSON(message.attachment_poll_period);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Squash>, I>>(base?: I): Squash {
    return Squash.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Squash>, I>>(object: I): Squash {
    const message = createBaseSquash();
    message.cluster = object.cluster ?? undefined;
    message.attachment_template = object.attachment_template ?? undefined;
    message.request_timeout = (object.request_timeout !== undefined && object.request_timeout !== null)
      ? Duration.fromPartial(object.request_timeout)
      : undefined;
    message.attachment_timeout = (object.attachment_timeout !== undefined && object.attachment_timeout !== null)
      ? Duration.fromPartial(object.attachment_timeout)
      : undefined;
    message.attachment_poll_period =
      (object.attachment_poll_period !== undefined && object.attachment_poll_period !== null)
        ? Duration.fromPartial(object.attachment_poll_period)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(Squash.$type, Squash);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
