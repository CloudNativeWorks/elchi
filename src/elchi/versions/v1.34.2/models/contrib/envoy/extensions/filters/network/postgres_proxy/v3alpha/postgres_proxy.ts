// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/network/postgres_proxy/v3alpha/postgres_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.network.postgres_proxy.v3alpha";

export interface PostgresProxy {
  $type: "envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy";
  /**
   * The human readable prefix to use when emitting :ref:`statistics
   * <config_network_filters_postgres_proxy_stats>`.
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * Controls whether SQL statements received in Frontend Query messages
   * are parsed. Parsing is required to produce Postgres proxy filter
   * metadata. Defaults to true.
   */
  enable_sql_parsing?:
    | boolean
    | undefined;
  /**
   * Controls whether to terminate SSL session initiated by a client.
   * If the value is false, the Postgres proxy filter will not try to
   * terminate SSL session, but will pass all the packets to the upstream server.
   * If the value is true, the Postgres proxy filter will try to terminate SSL
   * session. In order to do that, the filter chain must use :ref:`starttls transport socket
   * <envoy_v3_api_msg_extensions.transport_sockets.starttls.v3.StartTlsConfig>`.
   * If the filter does not manage to terminate the SSL session, it will close the connection from the client.
   * Refer to official documentation for details
   * `SSL Session Encryption Message Flow <https://www.postgresql.org/docs/current/protocol-flow.html#id-1.10.5.7.11>`_.
   */
  terminate_ssl?:
    | boolean
    | undefined;
  /**
   * Controls whether to establish upstream SSL connection to the server.
   * Envoy will try to establish upstream SSL connection to the server only when
   * Postgres filter is able to read Postgres payload in clear-text. It happens when
   * a client established a clear-text connection to Envoy or when a client established
   * SSL connection to Envoy and Postgres filter is configured to terminate SSL.
   * In order for upstream encryption to work, the corresponding cluster must be configured to use
   * :ref:`starttls transport socket <envoy_v3_api_msg_extensions.transport_sockets.starttls.v3.UpstreamStartTlsConfig>`.
   * Defaults to ``SSL_DISABLE``.
   */
  upstream_ssl?: PostgresProxy_SSLMode | undefined;
}

/** Upstream SSL operational modes. */
export enum PostgresProxy_SSLMode {
  /** DISABLE - Do not encrypt upstream connection to the server. */
  DISABLE = "DISABLE",
  /**
   * REQUIRE - Establish upstream SSL connection to the server. If the server does not
   * accept the request for SSL connection, the session is terminated.
   */
  REQUIRE = "REQUIRE",
}

export function postgresProxy_SSLModeFromJSON(object: any): PostgresProxy_SSLMode {
  switch (object) {
    case 0:
    case "DISABLE":
      return PostgresProxy_SSLMode.DISABLE;
    case 1:
    case "REQUIRE":
      return PostgresProxy_SSLMode.REQUIRE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PostgresProxy_SSLMode");
  }
}

export function postgresProxy_SSLModeToJSON(object: PostgresProxy_SSLMode): string {
  switch (object) {
    case PostgresProxy_SSLMode.DISABLE:
      return "DISABLE";
    case PostgresProxy_SSLMode.REQUIRE:
      return "REQUIRE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PostgresProxy_SSLMode");
  }
}

export function postgresProxy_SSLModeToNumber(object: PostgresProxy_SSLMode): number {
  switch (object) {
    case PostgresProxy_SSLMode.DISABLE:
      return 0;
    case PostgresProxy_SSLMode.REQUIRE:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PostgresProxy_SSLMode");
  }
}

function createBasePostgresProxy(): PostgresProxy {
  return { $type: "envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy" };
}

export const PostgresProxy: MessageFns<
  PostgresProxy,
  "envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy"
> = {
  $type: "envoy.extensions.filters.network.postgres_proxy.v3alpha.PostgresProxy" as const,

  encode(message: PostgresProxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.enable_sql_parsing !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.enable_sql_parsing! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.terminate_ssl !== undefined && message.terminate_ssl !== false) {
      writer.uint32(24).bool(message.terminate_ssl);
    }
    if (message.upstream_ssl !== undefined && message.upstream_ssl !== PostgresProxy_SSLMode.DISABLE) {
      writer.uint32(32).int32(postgresProxy_SSLModeToNumber(message.upstream_ssl));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PostgresProxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePostgresProxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enable_sql_parsing = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.terminate_ssl = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.upstream_ssl = postgresProxy_SSLModeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PostgresProxy {
    return {
      $type: PostgresProxy.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      enable_sql_parsing: isSet(object.enable_sql_parsing) ? Boolean(object.enable_sql_parsing) : undefined,
      terminate_ssl: isSet(object.terminate_ssl) ? globalThis.Boolean(object.terminate_ssl) : undefined,
      upstream_ssl: isSet(object.upstream_ssl) ? postgresProxy_SSLModeFromJSON(object.upstream_ssl) : undefined,
    };
  },

  toJSON(message: PostgresProxy): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.enable_sql_parsing !== undefined) {
      obj.enable_sql_parsing = message.enable_sql_parsing;
    }
    if (message.terminate_ssl !== undefined) {
      obj.terminate_ssl = message.terminate_ssl;
    }
    if (message.upstream_ssl !== undefined) {
      obj.upstream_ssl = postgresProxy_SSLModeToJSON(message.upstream_ssl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PostgresProxy>, I>>(base?: I): PostgresProxy {
    return PostgresProxy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PostgresProxy>, I>>(object: I): PostgresProxy {
    const message = createBasePostgresProxy();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.enable_sql_parsing = object.enable_sql_parsing ?? undefined;
    message.terminate_ssl = object.terminate_ssl ?? undefined;
    message.upstream_ssl = object.upstream_ssl ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(PostgresProxy.$type, PostgresProxy);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
