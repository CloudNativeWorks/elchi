// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/clusters/redis/v3/redis_cluster.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.clusters.redis.v3";

/** [#next-free-field: 7] */
export interface RedisClusterConfig {
  $type: "envoy.extensions.clusters.redis.v3.RedisClusterConfig";
  /** Interval between successive topology refresh requests. If not set, this defaults to 5s. */
  cluster_refresh_rate?:
    | Duration
    | undefined;
  /** Timeout for topology refresh request. If not set, this defaults to 3s. */
  cluster_refresh_timeout?:
    | Duration
    | undefined;
  /**
   * The minimum interval that must pass after triggering a topology refresh request before a new
   * request can possibly be triggered again. Any errors received during one of these
   * time intervals are ignored. If not set, this defaults to 5s.
   */
  redirect_refresh_interval?:
    | Duration
    | undefined;
  /**
   * The number of redirection errors that must be received before
   * triggering a topology refresh request. If not set, this defaults to 5.
   * If this is set to 0, topology refresh after redirect is disabled.
   */
  redirect_refresh_threshold?:
    | number
    | undefined;
  /**
   * The number of failures that must be received before triggering a topology refresh request.
   * If not set, this defaults to 0, which disables the topology refresh due to failure.
   */
  failure_refresh_threshold?:
    | number
    | undefined;
  /**
   * The number of hosts became degraded or unhealthy before triggering a topology refresh request.
   * If not set, this defaults to 0, which disables the topology refresh due to degraded or
   * unhealthy host.
   */
  host_degraded_refresh_threshold?: number | undefined;
}

function createBaseRedisClusterConfig(): RedisClusterConfig {
  return { $type: "envoy.extensions.clusters.redis.v3.RedisClusterConfig" };
}

export const RedisClusterConfig: MessageFns<
  RedisClusterConfig,
  "envoy.extensions.clusters.redis.v3.RedisClusterConfig"
> = {
  $type: "envoy.extensions.clusters.redis.v3.RedisClusterConfig" as const,

  encode(message: RedisClusterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster_refresh_rate !== undefined) {
      Duration.encode(message.cluster_refresh_rate, writer.uint32(10).fork()).join();
    }
    if (message.cluster_refresh_timeout !== undefined) {
      Duration.encode(message.cluster_refresh_timeout, writer.uint32(18).fork()).join();
    }
    if (message.redirect_refresh_interval !== undefined) {
      Duration.encode(message.redirect_refresh_interval, writer.uint32(26).fork()).join();
    }
    if (message.redirect_refresh_threshold !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.redirect_refresh_threshold! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.failure_refresh_threshold !== undefined && message.failure_refresh_threshold !== 0) {
      writer.uint32(40).uint32(message.failure_refresh_threshold);
    }
    if (message.host_degraded_refresh_threshold !== undefined && message.host_degraded_refresh_threshold !== 0) {
      writer.uint32(48).uint32(message.host_degraded_refresh_threshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RedisClusterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedisClusterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster_refresh_rate = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cluster_refresh_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.redirect_refresh_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.redirect_refresh_threshold = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.failure_refresh_threshold = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.host_degraded_refresh_threshold = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedisClusterConfig {
    return {
      $type: RedisClusterConfig.$type,
      cluster_refresh_rate: isSet(object.cluster_refresh_rate)
        ? Duration.fromJSON(object.cluster_refresh_rate)
        : undefined,
      cluster_refresh_timeout: isSet(object.cluster_refresh_timeout)
        ? Duration.fromJSON(object.cluster_refresh_timeout)
        : undefined,
      redirect_refresh_interval: isSet(object.redirect_refresh_interval)
        ? Duration.fromJSON(object.redirect_refresh_interval)
        : undefined,
      redirect_refresh_threshold: isSet(object.redirect_refresh_threshold)
        ? Number(object.redirect_refresh_threshold)
        : undefined,
      failure_refresh_threshold: isSet(object.failure_refresh_threshold)
        ? globalThis.Number(object.failure_refresh_threshold)
        : undefined,
      host_degraded_refresh_threshold: isSet(object.host_degraded_refresh_threshold)
        ? globalThis.Number(object.host_degraded_refresh_threshold)
        : undefined,
    };
  },

  toJSON(message: RedisClusterConfig): unknown {
    const obj: any = {};
    if (message.cluster_refresh_rate !== undefined) {
      obj.cluster_refresh_rate = Duration.toJSON(message.cluster_refresh_rate);
    }
    if (message.cluster_refresh_timeout !== undefined) {
      obj.cluster_refresh_timeout = Duration.toJSON(message.cluster_refresh_timeout);
    }
    if (message.redirect_refresh_interval !== undefined) {
      obj.redirect_refresh_interval = Duration.toJSON(message.redirect_refresh_interval);
    }
    if (message.redirect_refresh_threshold !== undefined) {
      obj.redirect_refresh_threshold = message.redirect_refresh_threshold;
    }
    if (message.failure_refresh_threshold !== undefined) {
      obj.failure_refresh_threshold = Math.round(message.failure_refresh_threshold);
    }
    if (message.host_degraded_refresh_threshold !== undefined) {
      obj.host_degraded_refresh_threshold = Math.round(message.host_degraded_refresh_threshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedisClusterConfig>, I>>(base?: I): RedisClusterConfig {
    return RedisClusterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedisClusterConfig>, I>>(object: I): RedisClusterConfig {
    const message = createBaseRedisClusterConfig();
    message.cluster_refresh_rate = (object.cluster_refresh_rate !== undefined && object.cluster_refresh_rate !== null)
      ? Duration.fromPartial(object.cluster_refresh_rate)
      : undefined;
    message.cluster_refresh_timeout =
      (object.cluster_refresh_timeout !== undefined && object.cluster_refresh_timeout !== null)
        ? Duration.fromPartial(object.cluster_refresh_timeout)
        : undefined;
    message.redirect_refresh_interval =
      (object.redirect_refresh_interval !== undefined && object.redirect_refresh_interval !== null)
        ? Duration.fromPartial(object.redirect_refresh_interval)
        : undefined;
    message.redirect_refresh_threshold = object.redirect_refresh_threshold ?? undefined;
    message.failure_refresh_threshold = object.failure_refresh_threshold ?? undefined;
    message.host_degraded_refresh_threshold = object.host_degraded_refresh_threshold ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RedisClusterConfig.$type, RedisClusterConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
