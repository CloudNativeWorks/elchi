// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CidrRange } from "../../../../../config/core/v3/address";
import { Int64Range } from "../../../../../type/v3/range";

export const protobufPackage = "envoy.extensions.rbac.matchers.upstream_ip_port.v3";

/**
 * This is configuration for matching upstream ip and port.
 * Note that although both fields are optional, at least one of IP or port must be supplied. If only
 * one is supplied the other is a wildcard match.
 * This matcher requires a filter in the chain to have saved the upstream address in the
 * filter state before the matcher is executed by RBAC filter. The state should be saved with key
 * ``envoy.stream.upstream_address`` (See
 * :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
 * Also, See :repo:`proxy_filter.cc<source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>`
 * for an example of a filter which populates the FilterState.
 */
export interface UpstreamIpPortMatcher {
  $type: "envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher";
  /**
   * A CIDR block that will be used to match the upstream IP.
   * Both Ipv4 and Ipv6 ranges can be matched.
   */
  upstream_ip?:
    | CidrRange
    | undefined;
  /** A port range that will be used to match the upstream port. */
  upstream_port_range?: Int64Range | undefined;
}

function createBaseUpstreamIpPortMatcher(): UpstreamIpPortMatcher {
  return { $type: "envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher" };
}

export const UpstreamIpPortMatcher: MessageFns<
  UpstreamIpPortMatcher,
  "envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher"
> = {
  $type: "envoy.extensions.rbac.matchers.upstream_ip_port.v3.UpstreamIpPortMatcher" as const,

  encode(message: UpstreamIpPortMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upstream_ip !== undefined) {
      CidrRange.encode(message.upstream_ip, writer.uint32(10).fork()).join();
    }
    if (message.upstream_port_range !== undefined) {
      Int64Range.encode(message.upstream_port_range, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpstreamIpPortMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpstreamIpPortMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.upstream_ip = CidrRange.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.upstream_port_range = Int64Range.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpstreamIpPortMatcher {
    return {
      $type: UpstreamIpPortMatcher.$type,
      upstream_ip: isSet(object.upstream_ip) ? CidrRange.fromJSON(object.upstream_ip) : undefined,
      upstream_port_range: isSet(object.upstream_port_range)
        ? Int64Range.fromJSON(object.upstream_port_range)
        : undefined,
    };
  },

  toJSON(message: UpstreamIpPortMatcher): unknown {
    const obj: any = {};
    if (message.upstream_ip !== undefined) {
      obj.upstream_ip = CidrRange.toJSON(message.upstream_ip);
    }
    if (message.upstream_port_range !== undefined) {
      obj.upstream_port_range = Int64Range.toJSON(message.upstream_port_range);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpstreamIpPortMatcher>, I>>(base?: I): UpstreamIpPortMatcher {
    return UpstreamIpPortMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpstreamIpPortMatcher>, I>>(object: I): UpstreamIpPortMatcher {
    const message = createBaseUpstreamIpPortMatcher();
    message.upstream_ip = (object.upstream_ip !== undefined && object.upstream_ip !== null)
      ? CidrRange.fromPartial(object.upstream_ip)
      : undefined;
    message.upstream_port_range = (object.upstream_port_range !== undefined && object.upstream_port_range !== null)
      ? Int64Range.fromPartial(object.upstream_port_range)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(UpstreamIpPortMatcher.$type, UpstreamIpPortMatcher);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
