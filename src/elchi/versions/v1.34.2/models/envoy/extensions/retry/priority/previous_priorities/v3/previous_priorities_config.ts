// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/retry/priority/previous_priorities/v3/previous_priorities_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.retry.priority.previous_priorities.v3";

/**
 * A retry host selector that attempts to spread retries between priorities, even if certain
 * priorities would not normally be attempted due to higher priorities being available.
 *
 * As priorities get excluded, load will be distributed amongst the remaining healthy priorities
 * based on the relative health of the priorities, matching how load is distributed during regular
 * host selection. For example, given priority healths of {100, 50, 50}, the original load will be
 * {100, 0, 0} (since P0 has capacity to handle 100% of the traffic). If P0 is excluded, the load
 * changes to {0, 50, 50}, because P1 is only able to handle 50% of the traffic, causing the
 * remaining to spill over to P2.
 *
 * Each priority attempted will be excluded until there are no healthy priorities left, at which
 * point the list of attempted priorities will be reset, essentially starting from the beginning.
 * For example, given three priorities P0, P1, P2 with healthy % of 100, 0 and 50 respectively, the
 * following sequence of priorities would be selected (assuming update_frequency = 1):
 * Attempt 1: P0 (P0 is 100% healthy)
 * Attempt 2: P2 (P0 already attempted, P2 only healthy priority)
 * Attempt 3: P0 (no healthy priorities, reset)
 * Attempt 4: P2
 *
 * In the case of all upstream hosts being unhealthy, no adjustments will be made to the original
 * priority load, so behavior should be identical to not using this plugin.
 *
 * Using this PriorityFilter requires rebuilding the priority load, which runs in O(# of
 * priorities), which might incur significant overhead for clusters with many priorities.
 * [#extension: envoy.retry_priorities.previous_priorities]
 */
export interface PreviousPrioritiesConfig {
  $type: "envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig";
  /**
   * How often the priority load should be updated based on previously attempted priorities. Useful
   * to allow each priorities to receive more than one request before being excluded or to reduce
   * the number of times that the priority load has to be recomputed.
   *
   * For example, by setting this to 2, then the first two attempts (initial attempt and first
   * retry) will use the unmodified priority load. The third and fourth attempt will use priority
   * load which excludes the priorities routed to with the first two attempts, and the fifth and
   * sixth attempt will use the priority load excluding the priorities used for the first four
   * attempts.
   *
   * Must be greater than 0.
   */
  update_frequency?: number | undefined;
}

function createBasePreviousPrioritiesConfig(): PreviousPrioritiesConfig {
  return { $type: "envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig" };
}

export const PreviousPrioritiesConfig: MessageFns<
  PreviousPrioritiesConfig,
  "envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig"
> = {
  $type: "envoy.extensions.retry.priority.previous_priorities.v3.PreviousPrioritiesConfig" as const,

  encode(message: PreviousPrioritiesConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.update_frequency !== undefined && message.update_frequency !== 0) {
      writer.uint32(8).int32(message.update_frequency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PreviousPrioritiesConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePreviousPrioritiesConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.update_frequency = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PreviousPrioritiesConfig {
    return {
      $type: PreviousPrioritiesConfig.$type,
      update_frequency: isSet(object.update_frequency) ? globalThis.Number(object.update_frequency) : undefined,
    };
  },

  toJSON(message: PreviousPrioritiesConfig): unknown {
    const obj: any = {};
    if (message.update_frequency !== undefined) {
      obj.update_frequency = Math.round(message.update_frequency);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PreviousPrioritiesConfig>, I>>(base?: I): PreviousPrioritiesConfig {
    return PreviousPrioritiesConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PreviousPrioritiesConfig>, I>>(object: I): PreviousPrioritiesConfig {
    const message = createBasePreviousPrioritiesConfig();
    message.update_frequency = object.update_frequency ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(PreviousPrioritiesConfig.$type, PreviousPrioritiesConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
