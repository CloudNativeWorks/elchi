// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/tracers/opentelemetry/samplers/v3/cel_sampler.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CelExpression } from "../../../../../../xds/type/v3/cel";

export const protobufPackage = "envoy.extensions.tracers.opentelemetry.samplers.v3";

export interface CELSamplerConfig {
  $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.CELSamplerConfig";
  /** Expression that, when evaluated, will be used to make sample decision. */
  expression?: CelExpression | undefined;
}

function createBaseCELSamplerConfig(): CELSamplerConfig {
  return { $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.CELSamplerConfig" };
}

export const CELSamplerConfig: MessageFns<
  CELSamplerConfig,
  "envoy.extensions.tracers.opentelemetry.samplers.v3.CELSamplerConfig"
> = {
  $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.CELSamplerConfig" as const,

  encode(message: CELSamplerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expression !== undefined) {
      CelExpression.encode(message.expression, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CELSamplerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCELSamplerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.expression = CelExpression.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CELSamplerConfig {
    return {
      $type: CELSamplerConfig.$type,
      expression: isSet(object.expression) ? CelExpression.fromJSON(object.expression) : undefined,
    };
  },

  toJSON(message: CELSamplerConfig): unknown {
    const obj: any = {};
    if (message.expression !== undefined) {
      obj.expression = CelExpression.toJSON(message.expression);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CELSamplerConfig>, I>>(base?: I): CELSamplerConfig {
    return CELSamplerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CELSamplerConfig>, I>>(object: I): CELSamplerConfig {
    const message = createBaseCELSamplerConfig();
    message.expression = (object.expression !== undefined && object.expression !== null)
      ? CelExpression.fromPartial(object.expression)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CELSamplerConfig.$type, CELSamplerConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
