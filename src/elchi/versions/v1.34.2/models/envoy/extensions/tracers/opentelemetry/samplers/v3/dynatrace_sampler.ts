// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/tracers/opentelemetry/samplers/v3/dynatrace_sampler.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { HttpService } from "../../../../../config/core/v3/http_service";

export const protobufPackage = "envoy.extensions.tracers.opentelemetry.samplers.v3";

/**
 * Configuration for the Dynatrace Sampler extension.
 * [#extension: envoy.tracers.opentelemetry.samplers.dynatrace]
 */
export interface DynatraceSamplerConfig {
  $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.DynatraceSamplerConfig";
  /**
   * The Dynatrace tenant.
   *
   * The value can be obtained from the Envoy deployment page in Dynatrace.
   */
  tenant?:
    | string
    | undefined;
  /**
   * The id of the Dynatrace cluster id.
   *
   * The value can be obtained from the Envoy deployment page in Dynatrace.
   */
  cluster_id?:
    | number
    | undefined;
  /**
   * The HTTP service to fetch the sampler configuration from the Dynatrace API (root spans per minute). For example:
   *
   * .. code-block:: yaml
   *
   *    http_service:
   *      http_uri:
   *        cluster: dynatrace
   *        uri: <tenant>.dev.dynatracelabs.com/api/v2/samplingConfiguration
   *        timeout: 10s
   *      request_headers_to_add:
   *      - header:
   *          key : "authorization"
   *          value: "Api-Token dt..."
   */
  http_service?:
    | HttpService
    | undefined;
  /**
   * Default number of root spans per minute, used when the value can't be obtained from the Dynatrace API.
   *
   * A default value of ``1000`` is used when:
   *
   * - ``root_spans_per_minute`` is unset
   * - ``root_spans_per_minute`` is set to 0
   */
  root_spans_per_minute?: number | undefined;
}

function createBaseDynatraceSamplerConfig(): DynatraceSamplerConfig {
  return { $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.DynatraceSamplerConfig" };
}

export const DynatraceSamplerConfig: MessageFns<
  DynatraceSamplerConfig,
  "envoy.extensions.tracers.opentelemetry.samplers.v3.DynatraceSamplerConfig"
> = {
  $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.DynatraceSamplerConfig" as const,

  encode(message: DynatraceSamplerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tenant !== undefined && message.tenant !== "") {
      writer.uint32(10).string(message.tenant);
    }
    if (message.cluster_id !== undefined && message.cluster_id !== 0) {
      writer.uint32(16).int32(message.cluster_id);
    }
    if (message.http_service !== undefined) {
      HttpService.encode(message.http_service, writer.uint32(26).fork()).join();
    }
    if (message.root_spans_per_minute !== undefined && message.root_spans_per_minute !== 0) {
      writer.uint32(32).uint32(message.root_spans_per_minute);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynatraceSamplerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynatraceSamplerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tenant = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.cluster_id = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.http_service = HttpService.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.root_spans_per_minute = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynatraceSamplerConfig {
    return {
      $type: DynatraceSamplerConfig.$type,
      tenant: isSet(object.tenant) ? globalThis.String(object.tenant) : undefined,
      cluster_id: isSet(object.cluster_id) ? globalThis.Number(object.cluster_id) : undefined,
      http_service: isSet(object.http_service) ? HttpService.fromJSON(object.http_service) : undefined,
      root_spans_per_minute: isSet(object.root_spans_per_minute)
        ? globalThis.Number(object.root_spans_per_minute)
        : undefined,
    };
  },

  toJSON(message: DynatraceSamplerConfig): unknown {
    const obj: any = {};
    if (message.tenant !== undefined) {
      obj.tenant = message.tenant;
    }
    if (message.cluster_id !== undefined) {
      obj.cluster_id = Math.round(message.cluster_id);
    }
    if (message.http_service !== undefined) {
      obj.http_service = HttpService.toJSON(message.http_service);
    }
    if (message.root_spans_per_minute !== undefined) {
      obj.root_spans_per_minute = Math.round(message.root_spans_per_minute);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynatraceSamplerConfig>, I>>(base?: I): DynatraceSamplerConfig {
    return DynatraceSamplerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynatraceSamplerConfig>, I>>(object: I): DynatraceSamplerConfig {
    const message = createBaseDynatraceSamplerConfig();
    message.tenant = object.tenant ?? undefined;
    message.cluster_id = object.cluster_id ?? undefined;
    message.http_service = (object.http_service !== undefined && object.http_service !== null)
      ? HttpService.fromPartial(object.http_service)
      : undefined;
    message.root_spans_per_minute = object.root_spans_per_minute ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DynatraceSamplerConfig.$type, DynatraceSamplerConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
