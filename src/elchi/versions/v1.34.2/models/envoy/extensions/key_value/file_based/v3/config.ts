// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/key_value/file_based/v3/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.key_value.file_based.v3";

/**
 * [#extension: envoy.key_value.file_based]
 * This is configuration to flush a key value store out to disk.
 */
export interface FileBasedKeyValueStoreConfig {
  $type: "envoy.extensions.key_value.file_based.v3.FileBasedKeyValueStoreConfig";
  /**
   * The filename to read the keys and values from, and write the keys and
   * values to.
   */
  filename?:
    | string
    | undefined;
  /** The interval at which the key value store should be flushed to the file. */
  flush_interval?:
    | Duration
    | undefined;
  /**
   * The maximum number of entries to cache, or 0 to allow for unlimited entries.
   * Defaults to 1000 if not present.
   */
  max_entries?: number | undefined;
}

function createBaseFileBasedKeyValueStoreConfig(): FileBasedKeyValueStoreConfig {
  return { $type: "envoy.extensions.key_value.file_based.v3.FileBasedKeyValueStoreConfig" };
}

export const FileBasedKeyValueStoreConfig: MessageFns<
  FileBasedKeyValueStoreConfig,
  "envoy.extensions.key_value.file_based.v3.FileBasedKeyValueStoreConfig"
> = {
  $type: "envoy.extensions.key_value.file_based.v3.FileBasedKeyValueStoreConfig" as const,

  encode(message: FileBasedKeyValueStoreConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filename !== undefined && message.filename !== "") {
      writer.uint32(10).string(message.filename);
    }
    if (message.flush_interval !== undefined) {
      Duration.encode(message.flush_interval, writer.uint32(18).fork()).join();
    }
    if (message.max_entries !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_entries! },
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileBasedKeyValueStoreConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileBasedKeyValueStoreConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.flush_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.max_entries = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileBasedKeyValueStoreConfig {
    return {
      $type: FileBasedKeyValueStoreConfig.$type,
      filename: isSet(object.filename) ? globalThis.String(object.filename) : undefined,
      flush_interval: isSet(object.flush_interval) ? Duration.fromJSON(object.flush_interval) : undefined,
      max_entries: isSet(object.max_entries) ? Number(object.max_entries) : undefined,
    };
  },

  toJSON(message: FileBasedKeyValueStoreConfig): unknown {
    const obj: any = {};
    if (message.filename !== undefined) {
      obj.filename = message.filename;
    }
    if (message.flush_interval !== undefined) {
      obj.flush_interval = Duration.toJSON(message.flush_interval);
    }
    if (message.max_entries !== undefined) {
      obj.max_entries = message.max_entries;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileBasedKeyValueStoreConfig>, I>>(base?: I): FileBasedKeyValueStoreConfig {
    return FileBasedKeyValueStoreConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileBasedKeyValueStoreConfig>, I>>(object: I): FileBasedKeyValueStoreConfig {
    const message = createBaseFileBasedKeyValueStoreConfig();
    message.filename = object.filename ?? undefined;
    message.flush_interval = (object.flush_interval !== undefined && object.flush_interval !== null)
      ? Duration.fromPartial(object.flush_interval)
      : undefined;
    message.max_entries = object.max_entries ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FileBasedKeyValueStoreConfig.$type, FileBasedKeyValueStoreConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
