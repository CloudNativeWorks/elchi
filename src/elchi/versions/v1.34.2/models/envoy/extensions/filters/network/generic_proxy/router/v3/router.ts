// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/generic_proxy/router/v3/router.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.network.generic_proxy.router.v3";

export interface Router {
  $type: "envoy.extensions.filters.network.generic_proxy.router.v3.Router";
  /**
   * Set to true if the upstream connection should be bound to the downstream connection, false
   * otherwise.
   *
   * By default, one random upstream connection will be selected from the upstream connection pool
   * and used for every request. And after the request is finished, the upstream connection will be
   * released back to the upstream connection pool.
   *
   * If this option is true, the upstream connection will be bound to the downstream connection and
   * have same lifetime as the downstream connection. The same upstream connection will be used for
   * all requests from the same downstream connection.
   *
   * And if this options is true, one of the following requirements must be met:
   *
   * 1. The request must be handled one by one. That is, the next request can not be sent to the
   *    upstream until the previous request is finished.
   * 2. Unique request id must be provided for each request and response. The request id must be
   *    unique for each request and response pair in same connection pair. And the request id must
   *    be the same for the corresponding request and response.
   *
   * This could be useful for some protocols that require the same upstream connection to be used
   * for all requests from the same downstream connection. For example, the protocol using stateful
   * connection.
   */
  bind_upstream_connection?: boolean | undefined;
}

function createBaseRouter(): Router {
  return { $type: "envoy.extensions.filters.network.generic_proxy.router.v3.Router" };
}

export const Router: MessageFns<Router, "envoy.extensions.filters.network.generic_proxy.router.v3.Router"> = {
  $type: "envoy.extensions.filters.network.generic_proxy.router.v3.Router" as const,

  encode(message: Router, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bind_upstream_connection !== undefined && message.bind_upstream_connection !== false) {
      writer.uint32(8).bool(message.bind_upstream_connection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Router {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.bind_upstream_connection = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Router {
    return {
      $type: Router.$type,
      bind_upstream_connection: isSet(object.bind_upstream_connection)
        ? globalThis.Boolean(object.bind_upstream_connection)
        : undefined,
    };
  },

  toJSON(message: Router): unknown {
    const obj: any = {};
    if (message.bind_upstream_connection !== undefined) {
      obj.bind_upstream_connection = message.bind_upstream_connection;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Router>, I>>(base?: I): Router {
    return Router.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Router>, I>>(object: I): Router {
    const message = createBaseRouter();
    message.bind_upstream_connection = object.bind_upstream_connection ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Router.$type, Router);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
