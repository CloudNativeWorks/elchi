// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/dubbo_proxy/v3/dubbo_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../../../google/protobuf/any";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { ConfigSource } from "../../../../../config/core/v3/config_source";
import { MultipleRouteConfiguration, RouteConfiguration } from "./route";

export const protobufPackage = "envoy.extensions.filters.network.dubbo_proxy.v3";

/** Dubbo Protocol types supported by Envoy. */
export enum ProtocolType {
  /** Dubbo - the default protocol. */
  Dubbo = "Dubbo",
}

export function protocolTypeFromJSON(object: any): ProtocolType {
  switch (object) {
    case 0:
    case "Dubbo":
      return ProtocolType.Dubbo;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProtocolType");
  }
}

export function protocolTypeToJSON(object: ProtocolType): string {
  switch (object) {
    case ProtocolType.Dubbo:
      return "Dubbo";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProtocolType");
  }
}

export function protocolTypeToNumber(object: ProtocolType): number {
  switch (object) {
    case ProtocolType.Dubbo:
      return 0;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ProtocolType");
  }
}

/** Dubbo Serialization types supported by Envoy. */
export enum SerializationType {
  /** Hessian2 - the default serialization protocol. */
  Hessian2 = "Hessian2",
}

export function serializationTypeFromJSON(object: any): SerializationType {
  switch (object) {
    case 0:
    case "Hessian2":
      return SerializationType.Hessian2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SerializationType");
  }
}

export function serializationTypeToJSON(object: SerializationType): string {
  switch (object) {
    case SerializationType.Hessian2:
      return "Hessian2";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SerializationType");
  }
}

export function serializationTypeToNumber(object: SerializationType): number {
  switch (object) {
    case SerializationType.Hessian2:
      return 0;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SerializationType");
  }
}

export interface Drds {
  $type: "envoy.extensions.filters.network.dubbo_proxy.v3.Drds";
  /**
   * Configuration source specifier.
   * In case of ``api_config_source`` only aggregated ``api_type`` is supported.
   */
  config_source?:
    | ConfigSource
    | undefined;
  /**
   * The name of the multiple route configuration. This allows to use different multiple route
   * configurations. Tells which multiple route configuration should be fetched from the configuration
   * source. Leave unspecified is also valid and means the unnamed multiple route configuration.
   */
  route_config_name?: string | undefined;
}

/** [#next-free-field: 8] */
export interface DubboProxy {
  $type: "envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy";
  /** The human readable prefix to use when emitting statistics. */
  stat_prefix?:
    | string
    | undefined;
  /** Configure the protocol used. */
  protocol_type?:
    | ProtocolType
    | undefined;
  /** Configure the serialization protocol used. */
  serialization_type?:
    | SerializationType
    | undefined;
  /**
   * The route table for the connection manager is static and is specified in this property.
   *
   * .. note::
   *
   *   This field is deprecated. Please use ``drds`` or ``multiple_route_config`` first.
   *
   * @deprecated
   */
  route_config?: RouteConfiguration[] | undefined;
  route_specifier?:
    | //
    /** Use xDS to fetch the route configuration. It is invalid to define both ``route_config`` and ``drds``. */
    { $case: "drds"; drds: Drds }
    | //
    { $case: "multiple_route_config"; multiple_route_config: MultipleRouteConfiguration }
    | undefined;
  /**
   * A list of individual Dubbo filters that make up the filter chain for requests made to the
   * Dubbo proxy. Order matters as the filters are processed sequentially. For backwards
   * compatibility, if no dubbo_filters are specified, a default Dubbo router filter
   * (``envoy.filters.dubbo.router``) is used.
   */
  dubbo_filters?: DubboFilter[] | undefined;
}

/** DubboFilter configures a Dubbo filter. */
export interface DubboFilter {
  $type: "envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter";
  /**
   * The name of the filter to instantiate. The name must match a supported
   * filter.
   */
  name?:
    | string
    | undefined;
  /**
   * Filter specific configuration which depends on the filter being
   * instantiated. See the supported filters for further documentation.
   */
  config?: Any | undefined;
}

function createBaseDrds(): Drds {
  return { $type: "envoy.extensions.filters.network.dubbo_proxy.v3.Drds" };
}

export const Drds: MessageFns<Drds, "envoy.extensions.filters.network.dubbo_proxy.v3.Drds"> = {
  $type: "envoy.extensions.filters.network.dubbo_proxy.v3.Drds" as const,

  encode(message: Drds, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config_source !== undefined) {
      ConfigSource.encode(message.config_source, writer.uint32(10).fork()).join();
    }
    if (message.route_config_name !== undefined && message.route_config_name !== "") {
      writer.uint32(18).string(message.route_config_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Drds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config_source = ConfigSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.route_config_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Drds {
    return {
      $type: Drds.$type,
      config_source: isSet(object.config_source) ? ConfigSource.fromJSON(object.config_source) : undefined,
      route_config_name: isSet(object.route_config_name) ? globalThis.String(object.route_config_name) : undefined,
    };
  },

  toJSON(message: Drds): unknown {
    const obj: any = {};
    if (message.config_source !== undefined) {
      obj.config_source = ConfigSource.toJSON(message.config_source);
    }
    if (message.route_config_name !== undefined) {
      obj.route_config_name = message.route_config_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Drds>, I>>(base?: I): Drds {
    return Drds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Drds>, I>>(object: I): Drds {
    const message = createBaseDrds();
    message.config_source = (object.config_source !== undefined && object.config_source !== null)
      ? ConfigSource.fromPartial(object.config_source)
      : undefined;
    message.route_config_name = object.route_config_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Drds.$type, Drds);

function createBaseDubboProxy(): DubboProxy {
  return { $type: "envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy", route_specifier: undefined };
}

export const DubboProxy: MessageFns<DubboProxy, "envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy"> = {
  $type: "envoy.extensions.filters.network.dubbo_proxy.v3.DubboProxy" as const,

  encode(message: DubboProxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.protocol_type !== undefined && message.protocol_type !== ProtocolType.Dubbo) {
      writer.uint32(16).int32(protocolTypeToNumber(message.protocol_type));
    }
    if (message.serialization_type !== undefined && message.serialization_type !== SerializationType.Hessian2) {
      writer.uint32(24).int32(serializationTypeToNumber(message.serialization_type));
    }
    if (message.route_config !== undefined && message.route_config.length !== 0) {
      for (const v of message.route_config) {
        RouteConfiguration.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    switch (message.route_specifier?.$case) {
      case "drds":
        Drds.encode(message.route_specifier.drds, writer.uint32(50).fork()).join();
        break;
      case "multiple_route_config":
        MultipleRouteConfiguration.encode(message.route_specifier.multiple_route_config, writer.uint32(58).fork())
          .join();
        break;
    }
    if (message.dubbo_filters !== undefined && message.dubbo_filters.length !== 0) {
      for (const v of message.dubbo_filters) {
        DubboFilter.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DubboProxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDubboProxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.protocol_type = protocolTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.serialization_type = serializationTypeFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.route_config === undefined) {
            message.route_config = [];
          }
          const el = RouteConfiguration.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.route_config!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.route_specifier = { $case: "drds", drds: Drds.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.route_specifier = {
            $case: "multiple_route_config",
            multiple_route_config: MultipleRouteConfiguration.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.dubbo_filters === undefined) {
            message.dubbo_filters = [];
          }
          const el = DubboFilter.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.dubbo_filters!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DubboProxy {
    return {
      $type: DubboProxy.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      protocol_type: isSet(object.protocol_type) ? protocolTypeFromJSON(object.protocol_type) : undefined,
      serialization_type: isSet(object.serialization_type)
        ? serializationTypeFromJSON(object.serialization_type)
        : undefined,
      route_config: globalThis.Array.isArray(object?.route_config)
        ? object.route_config.map((e: any) => RouteConfiguration.fromJSON(e))
        : undefined,
      route_specifier: isSet(object.drds)
        ? { $case: "drds", drds: Drds.fromJSON(object.drds) }
        : isSet(object.multiple_route_config)
        ? {
          $case: "multiple_route_config",
          multiple_route_config: MultipleRouteConfiguration.fromJSON(object.multiple_route_config),
        }
        : undefined,
      dubbo_filters: globalThis.Array.isArray(object?.dubbo_filters)
        ? object.dubbo_filters.map((e: any) => DubboFilter.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: DubboProxy): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.protocol_type !== undefined) {
      obj.protocol_type = protocolTypeToJSON(message.protocol_type);
    }
    if (message.serialization_type !== undefined) {
      obj.serialization_type = serializationTypeToJSON(message.serialization_type);
    }
    if (message.route_config?.length) {
      obj.route_config = message.route_config.map((e) => RouteConfiguration.toJSON(e));
    }
    if (message.route_specifier?.$case === "drds") {
      obj.drds = Drds.toJSON(message.route_specifier.drds);
    }
    if (message.route_specifier?.$case === "multiple_route_config") {
      obj.multiple_route_config = MultipleRouteConfiguration.toJSON(message.route_specifier.multiple_route_config);
    }
    if (message.dubbo_filters?.length) {
      obj.dubbo_filters = message.dubbo_filters.map((e) => DubboFilter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DubboProxy>, I>>(base?: I): DubboProxy {
    return DubboProxy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DubboProxy>, I>>(object: I): DubboProxy {
    const message = createBaseDubboProxy();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.protocol_type = object.protocol_type ?? undefined;
    message.serialization_type = object.serialization_type ?? undefined;
    message.route_config = object.route_config?.map((e) => RouteConfiguration.fromPartial(e)) || undefined;
    if (
      object.route_specifier?.$case === "drds" &&
      object.route_specifier?.drds !== undefined &&
      object.route_specifier?.drds !== null
    ) {
      message.route_specifier = { $case: "drds", drds: Drds.fromPartial(object.route_specifier.drds) };
    }
    if (
      object.route_specifier?.$case === "multiple_route_config" &&
      object.route_specifier?.multiple_route_config !== undefined &&
      object.route_specifier?.multiple_route_config !== null
    ) {
      message.route_specifier = {
        $case: "multiple_route_config",
        multiple_route_config: MultipleRouteConfiguration.fromPartial(object.route_specifier.multiple_route_config),
      };
    }
    message.dubbo_filters = object.dubbo_filters?.map((e) => DubboFilter.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(DubboProxy.$type, DubboProxy);

function createBaseDubboFilter(): DubboFilter {
  return { $type: "envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter" };
}

export const DubboFilter: MessageFns<DubboFilter, "envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter"> = {
  $type: "envoy.extensions.filters.network.dubbo_proxy.v3.DubboFilter" as const,

  encode(message: DubboFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.config !== undefined) {
      Any.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DubboFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDubboFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DubboFilter {
    return {
      $type: DubboFilter.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      config: isSet(object.config) ? Any.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: DubboFilter): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.config !== undefined) {
      obj.config = Any.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DubboFilter>, I>>(base?: I): DubboFilter {
    return DubboFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DubboFilter>, I>>(object: I): DubboFilter {
    const message = createBaseDubboFilter();
    message.name = object.name ?? undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? Any.fromPartial(object.config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DubboFilter.$type, DubboFilter);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
