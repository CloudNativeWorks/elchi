// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/composite/v3/composite.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFractionalPercent } from "../../../../../config/core/v3/base";
import { ExtensionConfigSource } from "../../../../../config/core/v3/config_source";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";

export const protobufPackage = "envoy.extensions.filters.http.composite.v3";

/**
 * :ref:`Composite filter <config_http_filters_composite>` config. The composite filter config
 * allows delegating filter handling to another filter as determined by matching on the request
 * headers. This makes it possible to use different filters or filter configurations based on the
 * incoming request.
 *
 * This is intended to be used with
 * :ref:`ExtensionWithMatcher <envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher>`
 * where a match tree is specified that indicates (via
 * :ref:`ExecuteFilterAction <envoy_v3_api_msg_extensions.filters.http.composite.v3.ExecuteFilterAction>`)
 * which filter configuration to create and delegate to.
 */
export interface Composite {
  $type: "envoy.extensions.filters.http.composite.v3.Composite";
}

/** Configuration for an extension configuration discovery service with name. */
export interface DynamicConfig {
  $type: "envoy.extensions.filters.http.composite.v3.DynamicConfig";
  /** The name of the extension configuration. It also serves as a resource name in ExtensionConfigDS. */
  name?:
    | string
    | undefined;
  /**
   * Configuration source specifier for an extension configuration discovery
   * service. In case of a failure and without the default configuration,
   * 500(Internal Server Error) will be returned.
   */
  config_discovery?: ExtensionConfigSource | undefined;
}

/**
 * Composite match action (see :ref:`matching docs <arch_overview_matching_api>` for more info on match actions).
 * This specifies the filter configuration of the filter that the composite filter should delegate filter interactions to.
 */
export interface ExecuteFilterAction {
  $type: "envoy.extensions.filters.http.composite.v3.ExecuteFilterAction";
  /**
   * Filter specific configuration which depends on the filter being
   * instantiated. See the supported filters for further documentation.
   * Only one of ``typed_config`` or ``dynamic_config`` can be set.
   * [#extension-category: envoy.filters.http]
   */
  typed_config?:
    | TypedExtensionConfig
    | undefined;
  /**
   * Dynamic configuration of filter obtained via extension configuration discovery service.
   * Only one of ``typed_config`` or ``dynamic_config`` can be set.
   */
  dynamic_config?:
    | DynamicConfig
    | undefined;
  /**
   * Probability of the action execution. If not specified, this is 100%.
   * This allows sampling behavior for the configured actions.
   * For example, if
   * :ref:`default_value <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.default_value>`
   * under the ``sample_percent`` is configured with 30%, a dice roll with that
   * probability is done. The underline action will only be executed if the
   * dice roll returns positive. Otherwise, the action is skipped.
   */
  sample_percent?: RuntimeFractionalPercent | undefined;
}

function createBaseComposite(): Composite {
  return { $type: "envoy.extensions.filters.http.composite.v3.Composite" };
}

export const Composite: MessageFns<Composite, "envoy.extensions.filters.http.composite.v3.Composite"> = {
  $type: "envoy.extensions.filters.http.composite.v3.Composite" as const,

  encode(_: Composite, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Composite {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComposite();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Composite {
    return { $type: Composite.$type };
  },

  toJSON(_: Composite): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Composite>, I>>(base?: I): Composite {
    return Composite.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Composite>, I>>(_: I): Composite {
    const message = createBaseComposite();
    return message;
  },
};

messageTypeRegistry.set(Composite.$type, Composite);

function createBaseDynamicConfig(): DynamicConfig {
  return { $type: "envoy.extensions.filters.http.composite.v3.DynamicConfig" };
}

export const DynamicConfig: MessageFns<DynamicConfig, "envoy.extensions.filters.http.composite.v3.DynamicConfig"> = {
  $type: "envoy.extensions.filters.http.composite.v3.DynamicConfig" as const,

  encode(message: DynamicConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.config_discovery !== undefined) {
      ExtensionConfigSource.encode(message.config_discovery, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config_discovery = ExtensionConfigSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicConfig {
    return {
      $type: DynamicConfig.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      config_discovery: isSet(object.config_discovery)
        ? ExtensionConfigSource.fromJSON(object.config_discovery)
        : undefined,
    };
  },

  toJSON(message: DynamicConfig): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.config_discovery !== undefined) {
      obj.config_discovery = ExtensionConfigSource.toJSON(message.config_discovery);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicConfig>, I>>(base?: I): DynamicConfig {
    return DynamicConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicConfig>, I>>(object: I): DynamicConfig {
    const message = createBaseDynamicConfig();
    message.name = object.name ?? undefined;
    message.config_discovery = (object.config_discovery !== undefined && object.config_discovery !== null)
      ? ExtensionConfigSource.fromPartial(object.config_discovery)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DynamicConfig.$type, DynamicConfig);

function createBaseExecuteFilterAction(): ExecuteFilterAction {
  return { $type: "envoy.extensions.filters.http.composite.v3.ExecuteFilterAction" };
}

export const ExecuteFilterAction: MessageFns<
  ExecuteFilterAction,
  "envoy.extensions.filters.http.composite.v3.ExecuteFilterAction"
> = {
  $type: "envoy.extensions.filters.http.composite.v3.ExecuteFilterAction" as const,

  encode(message: ExecuteFilterAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.typed_config !== undefined) {
      TypedExtensionConfig.encode(message.typed_config, writer.uint32(10).fork()).join();
    }
    if (message.dynamic_config !== undefined) {
      DynamicConfig.encode(message.dynamic_config, writer.uint32(18).fork()).join();
    }
    if (message.sample_percent !== undefined) {
      RuntimeFractionalPercent.encode(message.sample_percent, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExecuteFilterAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExecuteFilterAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.typed_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dynamic_config = DynamicConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sample_percent = RuntimeFractionalPercent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExecuteFilterAction {
    return {
      $type: ExecuteFilterAction.$type,
      typed_config: isSet(object.typed_config) ? TypedExtensionConfig.fromJSON(object.typed_config) : undefined,
      dynamic_config: isSet(object.dynamic_config) ? DynamicConfig.fromJSON(object.dynamic_config) : undefined,
      sample_percent: isSet(object.sample_percent)
        ? RuntimeFractionalPercent.fromJSON(object.sample_percent)
        : undefined,
    };
  },

  toJSON(message: ExecuteFilterAction): unknown {
    const obj: any = {};
    if (message.typed_config !== undefined) {
      obj.typed_config = TypedExtensionConfig.toJSON(message.typed_config);
    }
    if (message.dynamic_config !== undefined) {
      obj.dynamic_config = DynamicConfig.toJSON(message.dynamic_config);
    }
    if (message.sample_percent !== undefined) {
      obj.sample_percent = RuntimeFractionalPercent.toJSON(message.sample_percent);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExecuteFilterAction>, I>>(base?: I): ExecuteFilterAction {
    return ExecuteFilterAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExecuteFilterAction>, I>>(object: I): ExecuteFilterAction {
    const message = createBaseExecuteFilterAction();
    message.typed_config = (object.typed_config !== undefined && object.typed_config !== null)
      ? TypedExtensionConfig.fromPartial(object.typed_config)
      : undefined;
    message.dynamic_config = (object.dynamic_config !== undefined && object.dynamic_config !== null)
      ? DynamicConfig.fromPartial(object.dynamic_config)
      : undefined;
    message.sample_percent = (object.sample_percent !== undefined && object.sample_percent !== null)
      ? RuntimeFractionalPercent.fromPartial(object.sample_percent)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ExecuteFilterAction.$type, ExecuteFilterAction);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
