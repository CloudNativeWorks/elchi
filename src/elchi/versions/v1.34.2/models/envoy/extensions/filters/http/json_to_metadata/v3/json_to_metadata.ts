// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/json_to_metadata/v3/json_to_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Value } from "../../../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RegexMatcher } from "../../../../../type/matcher/v3/regex";

export const protobufPackage = "envoy.extensions.filters.http.json_to_metadata.v3";

export interface JsonToMetadata {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata";
  /**
   * At least one of request_rules and response_rules must be provided.
   * Rules to match json body of requests.
   */
  request_rules?:
    | JsonToMetadata_MatchRules
    | undefined;
  /** Rules to match json body of responses. */
  response_rules?: JsonToMetadata_MatchRules | undefined;
}

export enum JsonToMetadata_ValueType {
  /**
   * PROTOBUF_VALUE - The value is a serialized `protobuf.Value
   * <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
   */
  PROTOBUF_VALUE = "PROTOBUF_VALUE",
  STRING = "STRING",
  NUMBER = "NUMBER",
}

export function jsonToMetadata_ValueTypeFromJSON(object: any): JsonToMetadata_ValueType {
  switch (object) {
    case 0:
    case "PROTOBUF_VALUE":
      return JsonToMetadata_ValueType.PROTOBUF_VALUE;
    case 1:
    case "STRING":
      return JsonToMetadata_ValueType.STRING;
    case 2:
    case "NUMBER":
      return JsonToMetadata_ValueType.NUMBER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum JsonToMetadata_ValueType");
  }
}

export function jsonToMetadata_ValueTypeToJSON(object: JsonToMetadata_ValueType): string {
  switch (object) {
    case JsonToMetadata_ValueType.PROTOBUF_VALUE:
      return "PROTOBUF_VALUE";
    case JsonToMetadata_ValueType.STRING:
      return "STRING";
    case JsonToMetadata_ValueType.NUMBER:
      return "NUMBER";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum JsonToMetadata_ValueType");
  }
}

export function jsonToMetadata_ValueTypeToNumber(object: JsonToMetadata_ValueType): number {
  switch (object) {
    case JsonToMetadata_ValueType.PROTOBUF_VALUE:
      return 0;
    case JsonToMetadata_ValueType.STRING:
      return 1;
    case JsonToMetadata_ValueType.NUMBER:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum JsonToMetadata_ValueType");
  }
}

/** [#next-free-field: 6] */
export interface JsonToMetadata_KeyValuePair {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.KeyValuePair";
  /** The namespace — if this is empty, the filter's namespace will be used. */
  metadata_namespace?:
    | string
    | undefined;
  /** The key to use within the namespace. */
  key?: string | undefined;
  value_type?:
    | //
    /**
     * The value to pair with the given key.
     *
     * When used for on_present case, if value is non-empty it'll be used instead
     * of the the value of the JSON key. If both are empty, the the value of the
     * JSON key is used as-is.
     *
     * When used for on_missing/on_error case, a non-empty value
     * must be provided.
     *
     * It ignores ValueType, i.e., not type casting.
     */
    { $case: "value"; value: any | undefined }
    | undefined;
  /** The value's type — defaults to protobuf.Value. */
  type?:
    | JsonToMetadata_ValueType
    | undefined;
  /** False if we want to overwrite the existing metadata value. Default to false. */
  preserve_existing_metadata_value?: boolean | undefined;
}

export interface JsonToMetadata_Selector {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Selector";
  selector?:
    | //
    /** key to match */
    { $case: "key"; key: string }
    | undefined;
}

/**
 * A Rule defines what metadata to apply when a key-value is present, missing in the json
 * or fail to parse the payload.
 */
export interface JsonToMetadata_Rule {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Rule";
  /**
   * Specifies that a match will be performed on the value of a property.
   * Here's an example to match on 1 in {"foo": {"bar": 1}, "bar": 2}
   *
   * selectors:
   * - key: foo
   * - key: bar
   */
  selectors?:
    | JsonToMetadata_Selector[]
    | undefined;
  /** If the attribute is present, apply this metadata KeyValuePair. */
  on_present?:
    | JsonToMetadata_KeyValuePair
    | undefined;
  /**
   * If the attribute is missing, apply this metadata KeyValuePair.
   *
   * The value in the KeyValuePair must be set.
   */
  on_missing?:
    | JsonToMetadata_KeyValuePair
    | undefined;
  /**
   * If the body is too large or fail to parse or content-type is mismatched, apply this metadata KeyValuePair.
   *
   * The value in the KeyValuePair must be set.
   */
  on_error?: JsonToMetadata_KeyValuePair | undefined;
}

export interface JsonToMetadata_MatchRules {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.MatchRules";
  /** The list of rules to apply. */
  rules?:
    | JsonToMetadata_Rule[]
    | undefined;
  /**
   * Allowed content-type for json to metadata transformation.
   * Default to ``{"application/json"}``.
   *
   * Set ``allow_empty_content_type`` if empty/missing content-type header
   * is allowed.
   */
  allow_content_types?:
    | string[]
    | undefined;
  /**
   * Allowed empty content-type for json to metadata transformation.
   * Default to false.
   */
  allow_empty_content_type?:
    | boolean
    | undefined;
  /**
   * Allowed content-type by regex match for json to metadata transformation.
   * This can be used in parallel with ``allow_content_types``.
   */
  allow_content_types_regex?: RegexMatcher | undefined;
}

function createBaseJsonToMetadata(): JsonToMetadata {
  return { $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata" };
}

export const JsonToMetadata: MessageFns<
  JsonToMetadata,
  "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata"
> = {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata" as const,

  encode(message: JsonToMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request_rules !== undefined) {
      JsonToMetadata_MatchRules.encode(message.request_rules, writer.uint32(10).fork()).join();
    }
    if (message.response_rules !== undefined) {
      JsonToMetadata_MatchRules.encode(message.response_rules, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JsonToMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJsonToMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request_rules = JsonToMetadata_MatchRules.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response_rules = JsonToMetadata_MatchRules.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JsonToMetadata {
    return {
      $type: JsonToMetadata.$type,
      request_rules: isSet(object.request_rules) ? JsonToMetadata_MatchRules.fromJSON(object.request_rules) : undefined,
      response_rules: isSet(object.response_rules)
        ? JsonToMetadata_MatchRules.fromJSON(object.response_rules)
        : undefined,
    };
  },

  toJSON(message: JsonToMetadata): unknown {
    const obj: any = {};
    if (message.request_rules !== undefined) {
      obj.request_rules = JsonToMetadata_MatchRules.toJSON(message.request_rules);
    }
    if (message.response_rules !== undefined) {
      obj.response_rules = JsonToMetadata_MatchRules.toJSON(message.response_rules);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JsonToMetadata>, I>>(base?: I): JsonToMetadata {
    return JsonToMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JsonToMetadata>, I>>(object: I): JsonToMetadata {
    const message = createBaseJsonToMetadata();
    message.request_rules = (object.request_rules !== undefined && object.request_rules !== null)
      ? JsonToMetadata_MatchRules.fromPartial(object.request_rules)
      : undefined;
    message.response_rules = (object.response_rules !== undefined && object.response_rules !== null)
      ? JsonToMetadata_MatchRules.fromPartial(object.response_rules)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(JsonToMetadata.$type, JsonToMetadata);

function createBaseJsonToMetadata_KeyValuePair(): JsonToMetadata_KeyValuePair {
  return {
    $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.KeyValuePair",
    value_type: undefined,
  };
}

export const JsonToMetadata_KeyValuePair: MessageFns<
  JsonToMetadata_KeyValuePair,
  "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.KeyValuePair"
> = {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.KeyValuePair" as const,

  encode(message: JsonToMetadata_KeyValuePair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata_namespace !== undefined && message.metadata_namespace !== "") {
      writer.uint32(10).string(message.metadata_namespace);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    switch (message.value_type?.$case) {
      case "value":
        Value.encode(Value.wrap(message.value_type.value), writer.uint32(26).fork()).join();
        break;
    }
    if (message.type !== undefined && message.type !== JsonToMetadata_ValueType.PROTOBUF_VALUE) {
      writer.uint32(32).int32(jsonToMetadata_ValueTypeToNumber(message.type));
    }
    if (message.preserve_existing_metadata_value !== undefined && message.preserve_existing_metadata_value !== false) {
      writer.uint32(40).bool(message.preserve_existing_metadata_value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JsonToMetadata_KeyValuePair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJsonToMetadata_KeyValuePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata_namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value_type = { $case: "value", value: Value.unwrap(Value.decode(reader, reader.uint32())) };
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = jsonToMetadata_ValueTypeFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.preserve_existing_metadata_value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JsonToMetadata_KeyValuePair {
    return {
      $type: JsonToMetadata_KeyValuePair.$type,
      metadata_namespace: isSet(object.metadata_namespace) ? globalThis.String(object.metadata_namespace) : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      value_type: isSet(object.value) ? { $case: "value", value: object.value } : undefined,
      type: isSet(object.type) ? jsonToMetadata_ValueTypeFromJSON(object.type) : undefined,
      preserve_existing_metadata_value: isSet(object.preserve_existing_metadata_value)
        ? globalThis.Boolean(object.preserve_existing_metadata_value)
        : undefined,
    };
  },

  toJSON(message: JsonToMetadata_KeyValuePair): unknown {
    const obj: any = {};
    if (message.metadata_namespace !== undefined) {
      obj.metadata_namespace = message.metadata_namespace;
    }
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value_type?.$case === "value") {
      obj.value = message.value_type.value;
    }
    if (message.type !== undefined) {
      obj.type = jsonToMetadata_ValueTypeToJSON(message.type);
    }
    if (message.preserve_existing_metadata_value !== undefined) {
      obj.preserve_existing_metadata_value = message.preserve_existing_metadata_value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JsonToMetadata_KeyValuePair>, I>>(base?: I): JsonToMetadata_KeyValuePair {
    return JsonToMetadata_KeyValuePair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JsonToMetadata_KeyValuePair>, I>>(object: I): JsonToMetadata_KeyValuePair {
    const message = createBaseJsonToMetadata_KeyValuePair();
    message.metadata_namespace = object.metadata_namespace ?? undefined;
    message.key = object.key ?? undefined;
    if (
      object.value_type?.$case === "value" &&
      object.value_type?.value !== undefined &&
      object.value_type?.value !== null
    ) {
      message.value_type = { $case: "value", value: object.value_type.value };
    }
    message.type = object.type ?? undefined;
    message.preserve_existing_metadata_value = object.preserve_existing_metadata_value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(JsonToMetadata_KeyValuePair.$type, JsonToMetadata_KeyValuePair);

function createBaseJsonToMetadata_Selector(): JsonToMetadata_Selector {
  return { $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Selector", selector: undefined };
}

export const JsonToMetadata_Selector: MessageFns<
  JsonToMetadata_Selector,
  "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Selector"
> = {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Selector" as const,

  encode(message: JsonToMetadata_Selector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.selector?.$case) {
      case "key":
        writer.uint32(10).string(message.selector.key);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JsonToMetadata_Selector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJsonToMetadata_Selector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.selector = { $case: "key", key: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JsonToMetadata_Selector {
    return {
      $type: JsonToMetadata_Selector.$type,
      selector: isSet(object.key) ? { $case: "key", key: globalThis.String(object.key) } : undefined,
    };
  },

  toJSON(message: JsonToMetadata_Selector): unknown {
    const obj: any = {};
    if (message.selector?.$case === "key") {
      obj.key = message.selector.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JsonToMetadata_Selector>, I>>(base?: I): JsonToMetadata_Selector {
    return JsonToMetadata_Selector.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JsonToMetadata_Selector>, I>>(object: I): JsonToMetadata_Selector {
    const message = createBaseJsonToMetadata_Selector();
    if (object.selector?.$case === "key" && object.selector?.key !== undefined && object.selector?.key !== null) {
      message.selector = { $case: "key", key: object.selector.key };
    }
    return message;
  },
};

messageTypeRegistry.set(JsonToMetadata_Selector.$type, JsonToMetadata_Selector);

function createBaseJsonToMetadata_Rule(): JsonToMetadata_Rule {
  return { $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Rule" };
}

export const JsonToMetadata_Rule: MessageFns<
  JsonToMetadata_Rule,
  "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Rule"
> = {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.Rule" as const,

  encode(message: JsonToMetadata_Rule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.selectors !== undefined && message.selectors.length !== 0) {
      for (const v of message.selectors) {
        JsonToMetadata_Selector.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.on_present !== undefined) {
      JsonToMetadata_KeyValuePair.encode(message.on_present, writer.uint32(18).fork()).join();
    }
    if (message.on_missing !== undefined) {
      JsonToMetadata_KeyValuePair.encode(message.on_missing, writer.uint32(26).fork()).join();
    }
    if (message.on_error !== undefined) {
      JsonToMetadata_KeyValuePair.encode(message.on_error, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JsonToMetadata_Rule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJsonToMetadata_Rule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.selectors === undefined) {
            message.selectors = [];
          }
          const el = JsonToMetadata_Selector.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.selectors!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.on_present = JsonToMetadata_KeyValuePair.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.on_missing = JsonToMetadata_KeyValuePair.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.on_error = JsonToMetadata_KeyValuePair.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JsonToMetadata_Rule {
    return {
      $type: JsonToMetadata_Rule.$type,
      selectors: globalThis.Array.isArray(object?.selectors)
        ? object.selectors.map((e: any) => JsonToMetadata_Selector.fromJSON(e))
        : undefined,
      on_present: isSet(object.on_present) ? JsonToMetadata_KeyValuePair.fromJSON(object.on_present) : undefined,
      on_missing: isSet(object.on_missing) ? JsonToMetadata_KeyValuePair.fromJSON(object.on_missing) : undefined,
      on_error: isSet(object.on_error) ? JsonToMetadata_KeyValuePair.fromJSON(object.on_error) : undefined,
    };
  },

  toJSON(message: JsonToMetadata_Rule): unknown {
    const obj: any = {};
    if (message.selectors?.length) {
      obj.selectors = message.selectors.map((e) => JsonToMetadata_Selector.toJSON(e));
    }
    if (message.on_present !== undefined) {
      obj.on_present = JsonToMetadata_KeyValuePair.toJSON(message.on_present);
    }
    if (message.on_missing !== undefined) {
      obj.on_missing = JsonToMetadata_KeyValuePair.toJSON(message.on_missing);
    }
    if (message.on_error !== undefined) {
      obj.on_error = JsonToMetadata_KeyValuePair.toJSON(message.on_error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JsonToMetadata_Rule>, I>>(base?: I): JsonToMetadata_Rule {
    return JsonToMetadata_Rule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JsonToMetadata_Rule>, I>>(object: I): JsonToMetadata_Rule {
    const message = createBaseJsonToMetadata_Rule();
    message.selectors = object.selectors?.map((e) => JsonToMetadata_Selector.fromPartial(e)) || undefined;
    message.on_present = (object.on_present !== undefined && object.on_present !== null)
      ? JsonToMetadata_KeyValuePair.fromPartial(object.on_present)
      : undefined;
    message.on_missing = (object.on_missing !== undefined && object.on_missing !== null)
      ? JsonToMetadata_KeyValuePair.fromPartial(object.on_missing)
      : undefined;
    message.on_error = (object.on_error !== undefined && object.on_error !== null)
      ? JsonToMetadata_KeyValuePair.fromPartial(object.on_error)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(JsonToMetadata_Rule.$type, JsonToMetadata_Rule);

function createBaseJsonToMetadata_MatchRules(): JsonToMetadata_MatchRules {
  return { $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.MatchRules" };
}

export const JsonToMetadata_MatchRules: MessageFns<
  JsonToMetadata_MatchRules,
  "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.MatchRules"
> = {
  $type: "envoy.extensions.filters.http.json_to_metadata.v3.JsonToMetadata.MatchRules" as const,

  encode(message: JsonToMetadata_MatchRules, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rules !== undefined && message.rules.length !== 0) {
      for (const v of message.rules) {
        JsonToMetadata_Rule.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.allow_content_types !== undefined && message.allow_content_types.length !== 0) {
      for (const v of message.allow_content_types) {
        writer.uint32(18).string(v!);
      }
    }
    if (message.allow_empty_content_type !== undefined && message.allow_empty_content_type !== false) {
      writer.uint32(24).bool(message.allow_empty_content_type);
    }
    if (message.allow_content_types_regex !== undefined) {
      RegexMatcher.encode(message.allow_content_types_regex, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JsonToMetadata_MatchRules {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJsonToMetadata_MatchRules();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.rules === undefined) {
            message.rules = [];
          }
          const el = JsonToMetadata_Rule.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.rules!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.allow_content_types === undefined) {
            message.allow_content_types = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.allow_content_types!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.allow_empty_content_type = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.allow_content_types_regex = RegexMatcher.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JsonToMetadata_MatchRules {
    return {
      $type: JsonToMetadata_MatchRules.$type,
      rules: globalThis.Array.isArray(object?.rules)
        ? object.rules.map((e: any) => JsonToMetadata_Rule.fromJSON(e))
        : undefined,
      allow_content_types: globalThis.Array.isArray(object?.allow_content_types)
        ? object.allow_content_types.map((e: any) => globalThis.String(e))
        : undefined,
      allow_empty_content_type: isSet(object.allow_empty_content_type)
        ? globalThis.Boolean(object.allow_empty_content_type)
        : undefined,
      allow_content_types_regex: isSet(object.allow_content_types_regex)
        ? RegexMatcher.fromJSON(object.allow_content_types_regex)
        : undefined,
    };
  },

  toJSON(message: JsonToMetadata_MatchRules): unknown {
    const obj: any = {};
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => JsonToMetadata_Rule.toJSON(e));
    }
    if (message.allow_content_types?.length) {
      obj.allow_content_types = message.allow_content_types;
    }
    if (message.allow_empty_content_type !== undefined) {
      obj.allow_empty_content_type = message.allow_empty_content_type;
    }
    if (message.allow_content_types_regex !== undefined) {
      obj.allow_content_types_regex = RegexMatcher.toJSON(message.allow_content_types_regex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JsonToMetadata_MatchRules>, I>>(base?: I): JsonToMetadata_MatchRules {
    return JsonToMetadata_MatchRules.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JsonToMetadata_MatchRules>, I>>(object: I): JsonToMetadata_MatchRules {
    const message = createBaseJsonToMetadata_MatchRules();
    message.rules = object.rules?.map((e) => JsonToMetadata_Rule.fromPartial(e)) || undefined;
    message.allow_content_types = object.allow_content_types?.map((e) => e) || undefined;
    message.allow_empty_content_type = object.allow_empty_content_type ?? undefined;
    message.allow_content_types_regex =
      (object.allow_content_types_regex !== undefined && object.allow_content_types_regex !== null)
        ? RegexMatcher.fromPartial(object.allow_content_types_regex)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(JsonToMetadata_MatchRules.$type, JsonToMetadata_MatchRules);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
