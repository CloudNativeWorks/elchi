// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.aws_lambda.v3";

/**
 * AWS Lambda filter config
 * [#next-free-field: 7]
 */
export interface Config {
  $type: "envoy.extensions.filters.http.aws_lambda.v3.Config";
  /**
   * The ARN of the AWS Lambda to invoke when the filter is engaged
   * Must be in the following format:
   * arn:<partition>:lambda:<region>:<account-number>:function:<function-name>
   */
  arn?:
    | string
    | undefined;
  /** Whether to transform the request (headers and body) to a JSON payload or pass it as is. */
  payload_passthrough?:
    | boolean
    | undefined;
  /** Determines the way to invoke the Lambda function. */
  invocation_mode?:
    | Config_InvocationMode
    | undefined;
  /**
   * Indicates that before signing headers, the host header will be swapped with
   * this value. If not set or empty, the original host header value
   * will be used and no rewrite will happen.
   *
   * Note: this rewrite affects both signing and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
   * value set here would be used for signing whereas the value set in the HCM would be used
   * for host header forwarding which is not the desired outcome.
   * Changing the value of the host header can result in a different route to be selected
   * if an HTTP filter after AWS lambda re-evaluates the route (clears route cache).
   */
  host_rewrite?:
    | string
    | undefined;
  /**
   * Specifies the credentials profile to be used from the AWS credentials file.
   * This parameter is optional. If set, it will override the value set in the AWS_PROFILE env variable and
   * the provider chain is limited to the AWS credentials file Provider.
   * If credentials configuration is provided, this configuration will be ignored.
   * If this field is provided, then the default providers chain specified in the documentation will be ignored.
   * (See :ref:`default credentials providers <config_http_filters_aws_lambda_credentials>`).
   */
  credentials_profile?:
    | string
    | undefined;
  /**
   * Specifies the credentials to be used. This parameter is optional and if it is set,
   * it will override other providers and will take precedence over credentials_profile.
   * The provider chain is limited to the configuration credentials provider.
   * If this field is provided, then the default providers chain specified in the documentation will be ignored.
   * (See :ref:`default credentials providers <config_http_filters_aws_lambda_credentials>`).
   *
   * .. warning::
   *   Distributing the AWS credentials via this configuration should not be done in production.
   */
  credentials?: Credentials | undefined;
}

export enum Config_InvocationMode {
  /**
   * SYNCHRONOUS - This is the more common mode of invocation, in which Lambda responds after it has completed the function. In
   * this mode the output of the Lambda function becomes the response of the HTTP request.
   */
  SYNCHRONOUS = "SYNCHRONOUS",
  /**
   * ASYNCHRONOUS - In this mode Lambda responds immediately but continues to process the function asynchronously. This mode can be
   * used to signal events for example. In this mode, Lambda responds with an acknowledgment that it received the
   * call which is translated to an HTTP 200 OK by the filter.
   */
  ASYNCHRONOUS = "ASYNCHRONOUS",
}

export function config_InvocationModeFromJSON(object: any): Config_InvocationMode {
  switch (object) {
    case 0:
    case "SYNCHRONOUS":
      return Config_InvocationMode.SYNCHRONOUS;
    case 1:
    case "ASYNCHRONOUS":
      return Config_InvocationMode.ASYNCHRONOUS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_InvocationMode");
  }
}

export function config_InvocationModeToJSON(object: Config_InvocationMode): string {
  switch (object) {
    case Config_InvocationMode.SYNCHRONOUS:
      return "SYNCHRONOUS";
    case Config_InvocationMode.ASYNCHRONOUS:
      return "ASYNCHRONOUS";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_InvocationMode");
  }
}

export function config_InvocationModeToNumber(object: Config_InvocationMode): number {
  switch (object) {
    case Config_InvocationMode.SYNCHRONOUS:
      return 0;
    case Config_InvocationMode.ASYNCHRONOUS:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_InvocationMode");
  }
}

/** AWS Lambda Credentials config. */
export interface Credentials {
  $type: "envoy.extensions.filters.http.aws_lambda.v3.Credentials";
  /** AWS access key id. */
  access_key_id?:
    | string
    | undefined;
  /** AWS secret access key. */
  secret_access_key?:
    | string
    | undefined;
  /**
   * AWS session token.
   * This parameter is optional. If it is set to empty string it will not be consider in the request.
   * It is required if temporary security credentials retrieved directly from AWS STS operations are used.
   */
  session_token?: string | undefined;
}

/**
 * Per-route configuration for AWS Lambda. This can be useful when invoking a different Lambda function or a different
 * version of the same Lambda depending on the route.
 */
export interface PerRouteConfig {
  $type: "envoy.extensions.filters.http.aws_lambda.v3.PerRouteConfig";
  invoke_config?: Config | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.filters.http.aws_lambda.v3.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.filters.http.aws_lambda.v3.Config"> = {
  $type: "envoy.extensions.filters.http.aws_lambda.v3.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.arn !== undefined && message.arn !== "") {
      writer.uint32(10).string(message.arn);
    }
    if (message.payload_passthrough !== undefined && message.payload_passthrough !== false) {
      writer.uint32(16).bool(message.payload_passthrough);
    }
    if (message.invocation_mode !== undefined && message.invocation_mode !== Config_InvocationMode.SYNCHRONOUS) {
      writer.uint32(24).int32(config_InvocationModeToNumber(message.invocation_mode));
    }
    if (message.host_rewrite !== undefined && message.host_rewrite !== "") {
      writer.uint32(34).string(message.host_rewrite);
    }
    if (message.credentials_profile !== undefined && message.credentials_profile !== "") {
      writer.uint32(42).string(message.credentials_profile);
    }
    if (message.credentials !== undefined) {
      Credentials.encode(message.credentials, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.arn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.payload_passthrough = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.invocation_mode = config_InvocationModeFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.host_rewrite = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.credentials_profile = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.credentials = Credentials.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      arn: isSet(object.arn) ? globalThis.String(object.arn) : undefined,
      payload_passthrough: isSet(object.payload_passthrough)
        ? globalThis.Boolean(object.payload_passthrough)
        : undefined,
      invocation_mode: isSet(object.invocation_mode)
        ? config_InvocationModeFromJSON(object.invocation_mode)
        : undefined,
      host_rewrite: isSet(object.host_rewrite) ? globalThis.String(object.host_rewrite) : undefined,
      credentials_profile: isSet(object.credentials_profile)
        ? globalThis.String(object.credentials_profile)
        : undefined,
      credentials: isSet(object.credentials) ? Credentials.fromJSON(object.credentials) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.arn !== undefined) {
      obj.arn = message.arn;
    }
    if (message.payload_passthrough !== undefined) {
      obj.payload_passthrough = message.payload_passthrough;
    }
    if (message.invocation_mode !== undefined) {
      obj.invocation_mode = config_InvocationModeToJSON(message.invocation_mode);
    }
    if (message.host_rewrite !== undefined) {
      obj.host_rewrite = message.host_rewrite;
    }
    if (message.credentials_profile !== undefined) {
      obj.credentials_profile = message.credentials_profile;
    }
    if (message.credentials !== undefined) {
      obj.credentials = Credentials.toJSON(message.credentials);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.arn = object.arn ?? undefined;
    message.payload_passthrough = object.payload_passthrough ?? undefined;
    message.invocation_mode = object.invocation_mode ?? undefined;
    message.host_rewrite = object.host_rewrite ?? undefined;
    message.credentials_profile = object.credentials_profile ?? undefined;
    message.credentials = (object.credentials !== undefined && object.credentials !== null)
      ? Credentials.fromPartial(object.credentials)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseCredentials(): Credentials {
  return { $type: "envoy.extensions.filters.http.aws_lambda.v3.Credentials" };
}

export const Credentials: MessageFns<Credentials, "envoy.extensions.filters.http.aws_lambda.v3.Credentials"> = {
  $type: "envoy.extensions.filters.http.aws_lambda.v3.Credentials" as const,

  encode(message: Credentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_key_id !== undefined && message.access_key_id !== "") {
      writer.uint32(10).string(message.access_key_id);
    }
    if (message.secret_access_key !== undefined && message.secret_access_key !== "") {
      writer.uint32(18).string(message.secret_access_key);
    }
    if (message.session_token !== undefined && message.session_token !== "") {
      writer.uint32(26).string(message.session_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Credentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_key_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret_access_key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.session_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Credentials {
    return {
      $type: Credentials.$type,
      access_key_id: isSet(object.access_key_id) ? globalThis.String(object.access_key_id) : undefined,
      secret_access_key: isSet(object.secret_access_key) ? globalThis.String(object.secret_access_key) : undefined,
      session_token: isSet(object.session_token) ? globalThis.String(object.session_token) : undefined,
    };
  },

  toJSON(message: Credentials): unknown {
    const obj: any = {};
    if (message.access_key_id !== undefined) {
      obj.access_key_id = message.access_key_id;
    }
    if (message.secret_access_key !== undefined) {
      obj.secret_access_key = message.secret_access_key;
    }
    if (message.session_token !== undefined) {
      obj.session_token = message.session_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Credentials>, I>>(base?: I): Credentials {
    return Credentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Credentials>, I>>(object: I): Credentials {
    const message = createBaseCredentials();
    message.access_key_id = object.access_key_id ?? undefined;
    message.secret_access_key = object.secret_access_key ?? undefined;
    message.session_token = object.session_token ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Credentials.$type, Credentials);

function createBasePerRouteConfig(): PerRouteConfig {
  return { $type: "envoy.extensions.filters.http.aws_lambda.v3.PerRouteConfig" };
}

export const PerRouteConfig: MessageFns<PerRouteConfig, "envoy.extensions.filters.http.aws_lambda.v3.PerRouteConfig"> =
  {
    $type: "envoy.extensions.filters.http.aws_lambda.v3.PerRouteConfig" as const,

    encode(message: PerRouteConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.invoke_config !== undefined) {
        Config.encode(message.invoke_config, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PerRouteConfig {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBasePerRouteConfig();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.invoke_config = Config.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): PerRouteConfig {
      return {
        $type: PerRouteConfig.$type,
        invoke_config: isSet(object.invoke_config) ? Config.fromJSON(object.invoke_config) : undefined,
      };
    },

    toJSON(message: PerRouteConfig): unknown {
      const obj: any = {};
      if (message.invoke_config !== undefined) {
        obj.invoke_config = Config.toJSON(message.invoke_config);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<PerRouteConfig>, I>>(base?: I): PerRouteConfig {
      return PerRouteConfig.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<PerRouteConfig>, I>>(object: I): PerRouteConfig {
      const message = createBasePerRouteConfig();
      message.invoke_config = (object.invoke_config !== undefined && object.invoke_config !== null)
        ? Config.fromPartial(object.invoke_config)
        : undefined;
      return message;
    },
  };

messageTypeRegistry.set(PerRouteConfig.$type, PerRouteConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
