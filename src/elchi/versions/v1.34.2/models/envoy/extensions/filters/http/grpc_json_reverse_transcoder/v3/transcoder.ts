// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/grpc_json_reverse_transcoder/v3/transcoder.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.grpc_json_reverse_transcoder.v3";

/**
 * [#next-free-field: 6]
 * ``GrpcJsonReverseTranscoder`` is the filter configuration for the gRPC JSON
 * reverse transcoder. The reverse transcoder acts as a bridge between a gRPC
 * client and an HTTP/JSON server, converting the gRPC request into HTTP/JSON
 * for the HTTP backend and the HTTP/JSON response back to gRPC for the gRPC
 * client. This effectively reverses the behavior of the
 * :ref:`grpc_json_transcoder filter <config_http_filters_grpc_json_transcoder>`,
 * allowing a gRPC client to communicate with an HTTP/JSON server.
 */
export interface GrpcJsonReverseTranscoder {
  $type: "envoy.extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder";
  /**
   * Supplies the filename of
   * :ref:`the proto descriptor set
   * <config_grpc_json_reverse_transcoder_generate_proto_descriptor_set>` for the gRPC services.
   * If set, takes precedence over the ``descriptor_binary`` field.
   */
  descriptor_path?:
    | string
    | undefined;
  /**
   * Supplies the binary content of
   * :ref:`the proto descriptor set
   * <config_grpc_json_reverse_transcoder_generate_proto_descriptor_set>` for the gRPC services.
   * If ``descriptor_path`` is set, this field is not used.
   */
  descriptor_binary?:
    | Uint8Array
    | undefined;
  /**
   * The maximum size of a request body to be transcoded, in bytes. A body exceeding this size will
   * provoke a ``gRPC status: ResourceExhausted`` response.
   *
   * Large values may cause envoy to use a lot of memory if there are many
   * concurrent requests.
   *
   * If unset, the current stream buffer size is used.
   */
  max_request_body_size?:
    | number
    | undefined;
  /**
   * The maximum size of a response body to be transcoded, in bytes. A body exceeding this size will
   * provoke a ``gRPC status: Internal`` response.
   *
   * Large values may cause envoy to use a lot of memory if there are many
   * concurrent requests.
   *
   * If unset, the current stream buffer size is used.
   */
  max_response_body_size?:
    | number
    | undefined;
  /** The name of the header field that has the API version of the request. */
  api_version_header?: string | undefined;
}

function createBaseGrpcJsonReverseTranscoder(): GrpcJsonReverseTranscoder {
  return { $type: "envoy.extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder" };
}

export const GrpcJsonReverseTranscoder: MessageFns<
  GrpcJsonReverseTranscoder,
  "envoy.extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder"
> = {
  $type: "envoy.extensions.filters.http.grpc_json_reverse_transcoder.v3.GrpcJsonReverseTranscoder" as const,

  encode(message: GrpcJsonReverseTranscoder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.descriptor_path !== undefined && message.descriptor_path !== "") {
      writer.uint32(10).string(message.descriptor_path);
    }
    if (message.descriptor_binary !== undefined && message.descriptor_binary.length !== 0) {
      writer.uint32(18).bytes(message.descriptor_binary);
    }
    if (message.max_request_body_size !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_request_body_size! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.max_response_body_size !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_response_body_size! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.api_version_header !== undefined && message.api_version_header !== "") {
      writer.uint32(42).string(message.api_version_header);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcJsonReverseTranscoder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcJsonReverseTranscoder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.descriptor_path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.descriptor_binary = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.max_request_body_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.max_response_body_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.api_version_header = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcJsonReverseTranscoder {
    return {
      $type: GrpcJsonReverseTranscoder.$type,
      descriptor_path: isSet(object.descriptor_path) ? globalThis.String(object.descriptor_path) : undefined,
      descriptor_binary: isSet(object.descriptor_binary) ? bytesFromBase64(object.descriptor_binary) : undefined,
      max_request_body_size: isSet(object.max_request_body_size) ? Number(object.max_request_body_size) : undefined,
      max_response_body_size: isSet(object.max_response_body_size) ? Number(object.max_response_body_size) : undefined,
      api_version_header: isSet(object.api_version_header) ? globalThis.String(object.api_version_header) : undefined,
    };
  },

  toJSON(message: GrpcJsonReverseTranscoder): unknown {
    const obj: any = {};
    if (message.descriptor_path !== undefined) {
      obj.descriptor_path = message.descriptor_path;
    }
    if (message.descriptor_binary !== undefined) {
      obj.descriptor_binary = base64FromBytes(message.descriptor_binary);
    }
    if (message.max_request_body_size !== undefined) {
      obj.max_request_body_size = message.max_request_body_size;
    }
    if (message.max_response_body_size !== undefined) {
      obj.max_response_body_size = message.max_response_body_size;
    }
    if (message.api_version_header !== undefined) {
      obj.api_version_header = message.api_version_header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcJsonReverseTranscoder>, I>>(base?: I): GrpcJsonReverseTranscoder {
    return GrpcJsonReverseTranscoder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcJsonReverseTranscoder>, I>>(object: I): GrpcJsonReverseTranscoder {
    const message = createBaseGrpcJsonReverseTranscoder();
    message.descriptor_path = object.descriptor_path ?? undefined;
    message.descriptor_binary = object.descriptor_binary ?? undefined;
    message.max_request_body_size = object.max_request_body_size ?? undefined;
    message.max_response_body_size = object.max_response_body_size ?? undefined;
    message.api_version_header = object.api_version_header ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(GrpcJsonReverseTranscoder.$type, GrpcJsonReverseTranscoder);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
