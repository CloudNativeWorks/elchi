// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/fault/v3/fault.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../../../../google/protobuf/struct";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { HeaderMatcher } from "../../../../../config/route/v3/route_components";
import { FractionalPercent } from "../../../../../type/v3/percent";
import { FaultDelay, FaultRateLimit } from "../../../common/fault/v3/fault";

export const protobufPackage = "envoy.extensions.filters.http.fault.v3";

/** [#next-free-field: 6] */
export interface FaultAbort {
  $type: "envoy.extensions.filters.http.fault.v3.FaultAbort";
  error_type?:
    | //
    /** HTTP status code to use to abort the HTTP request. */
    { $case: "http_status"; http_status: number }
    | //
    /** gRPC status code to use to abort the gRPC request. */
    { $case: "grpc_status"; grpc_status: number }
    | //
    /** Fault aborts are controlled via an HTTP header (if applicable). */
    { $case: "header_abort"; header_abort: FaultAbort_HeaderAbort }
    | undefined;
  /**
   * The percentage of requests/operations/connections that will be aborted with the error code
   * provided.
   */
  percentage?: FractionalPercent | undefined;
}

/**
 * Fault aborts are controlled via an HTTP header (if applicable). See the
 * :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
 * more information.
 */
export interface FaultAbort_HeaderAbort {
  $type: "envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort";
}

/** [#next-free-field: 17] */
export interface HTTPFault {
  $type: "envoy.extensions.filters.http.fault.v3.HTTPFault";
  /**
   * If specified, the filter will inject delays based on the values in the
   * object.
   */
  delay?:
    | FaultDelay
    | undefined;
  /**
   * If specified, the filter will abort requests based on the values in
   * the object. At least ``abort`` or ``delay`` must be specified.
   */
  abort?:
    | FaultAbort
    | undefined;
  /**
   * Specifies the name of the (destination) upstream cluster that the
   * filter should match on. Fault injection will be restricted to requests
   * bound to the specific upstream cluster.
   */
  upstream_cluster?:
    | string
    | undefined;
  /**
   * Specifies a set of headers that the filter should match on. The fault
   * injection filter can be applied selectively to requests that match a set of
   * headers specified in the fault filter config. The chances of actual fault
   * injection further depend on the value of the :ref:`percentage
   * <envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage>` field.
   * The filter will check the request's headers against all the specified
   * headers in the filter config. A match will happen if all the headers in the
   * config are present in the request with the same values (or based on
   * presence if the ``value`` field is not in the config).
   */
  headers?:
    | HeaderMatcher[]
    | undefined;
  /**
   * Faults are injected for the specified list of downstream hosts. If this
   * setting is not set, faults are injected for all downstream nodes.
   * Downstream node name is taken from :ref:`the HTTP
   * x-envoy-downstream-service-node
   * <config_http_conn_man_headers_downstream-service-node>` header and compared
   * against downstream_nodes list.
   */
  downstream_nodes?:
    | string[]
    | undefined;
  /**
   * The maximum number of faults that can be active at a single time via the configured fault
   * filter. Note that because this setting can be overridden at the route level, it's possible
   * for the number of active faults to be greater than this value (if injected via a different
   * route). If not specified, defaults to unlimited. This setting can be overridden via
   * ``runtime <config_http_filters_fault_injection_runtime>`` and any faults that are not injected
   * due to overflow will be indicated via the ``faults_overflow
   * <config_http_filters_fault_injection_stats>`` stat.
   *
   * .. attention::
   *   Like other :ref:`circuit breakers <arch_overview_circuit_break>` in Envoy, this is a fuzzy
   *   limit. It's possible for the number of active faults to rise slightly above the configured
   *   amount due to the implementation details.
   */
  max_active_faults?:
    | number
    | undefined;
  /**
   * The response rate limit to be applied to the response body of the stream. When configured,
   * the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
   * <config_http_filters_fault_injection_runtime>` runtime key.
   *
   * .. attention::
   *  This is a per-stream limit versus a connection level limit. This means that concurrent streams
   *  will each get an independent limit.
   */
  response_rate_limit?:
    | FaultRateLimit
    | undefined;
  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.delay.fixed_delay_percent
   */
  delay_percent_runtime?:
    | string
    | undefined;
  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.abort.abort_percent
   */
  abort_percent_runtime?:
    | string
    | undefined;
  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.delay.fixed_duration_ms
   */
  delay_duration_runtime?:
    | string
    | undefined;
  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.abort.http_status
   */
  abort_http_status_runtime?:
    | string
    | undefined;
  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.max_active_faults
   */
  max_active_faults_runtime?:
    | string
    | undefined;
  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.rate_limit.response_percent
   */
  response_rate_limit_percent_runtime?:
    | string
    | undefined;
  /**
   * The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
   * runtime. The default is: fault.http.abort.grpc_status
   */
  abort_grpc_status_runtime?:
    | string
    | undefined;
  /**
   * To control whether stats storage is allocated dynamically for each downstream server.
   * If set to true, "x-envoy-downstream-service-cluster" field of header will be ignored by this filter.
   * If set to false, dynamic stats storage will be allocated for the downstream cluster name.
   * Default value is false.
   */
  disable_downstream_cluster_stats?:
    | boolean
    | undefined;
  /**
   * When an abort or delay fault is executed, the metadata struct provided here will be added to the
   * request's dynamic metadata under the namespace corresponding to the name of the fault filter.
   * This data can be logged as part of Access Logs using the :ref:`command operator
   * <config_access_log_command_operators>` %DYNAMIC_METADATA(NAMESPACE)%, where NAMESPACE is the name of
   * the fault filter.
   */
  filter_metadata?: { [key: string]: any } | undefined;
}

function createBaseFaultAbort(): FaultAbort {
  return { $type: "envoy.extensions.filters.http.fault.v3.FaultAbort", error_type: undefined };
}

export const FaultAbort: MessageFns<FaultAbort, "envoy.extensions.filters.http.fault.v3.FaultAbort"> = {
  $type: "envoy.extensions.filters.http.fault.v3.FaultAbort" as const,

  encode(message: FaultAbort, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.error_type?.$case) {
      case "http_status":
        writer.uint32(16).uint32(message.error_type.http_status);
        break;
      case "grpc_status":
        writer.uint32(40).uint32(message.error_type.grpc_status);
        break;
      case "header_abort":
        FaultAbort_HeaderAbort.encode(message.error_type.header_abort, writer.uint32(34).fork()).join();
        break;
    }
    if (message.percentage !== undefined) {
      FractionalPercent.encode(message.percentage, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaultAbort {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaultAbort();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.error_type = { $case: "http_status", http_status: reader.uint32() };
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.error_type = { $case: "grpc_status", grpc_status: reader.uint32() };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error_type = {
            $case: "header_abort",
            header_abort: FaultAbort_HeaderAbort.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.percentage = FractionalPercent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaultAbort {
    return {
      $type: FaultAbort.$type,
      error_type: isSet(object.http_status)
        ? { $case: "http_status", http_status: globalThis.Number(object.http_status) }
        : isSet(object.grpc_status)
        ? { $case: "grpc_status", grpc_status: globalThis.Number(object.grpc_status) }
        : isSet(object.header_abort)
        ? { $case: "header_abort", header_abort: FaultAbort_HeaderAbort.fromJSON(object.header_abort) }
        : undefined,
      percentage: isSet(object.percentage) ? FractionalPercent.fromJSON(object.percentage) : undefined,
    };
  },

  toJSON(message: FaultAbort): unknown {
    const obj: any = {};
    if (message.error_type?.$case === "http_status") {
      obj.http_status = Math.round(message.error_type.http_status);
    }
    if (message.error_type?.$case === "grpc_status") {
      obj.grpc_status = Math.round(message.error_type.grpc_status);
    }
    if (message.error_type?.$case === "header_abort") {
      obj.header_abort = FaultAbort_HeaderAbort.toJSON(message.error_type.header_abort);
    }
    if (message.percentage !== undefined) {
      obj.percentage = FractionalPercent.toJSON(message.percentage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FaultAbort>, I>>(base?: I): FaultAbort {
    return FaultAbort.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaultAbort>, I>>(object: I): FaultAbort {
    const message = createBaseFaultAbort();
    if (
      object.error_type?.$case === "http_status" &&
      object.error_type?.http_status !== undefined &&
      object.error_type?.http_status !== null
    ) {
      message.error_type = { $case: "http_status", http_status: object.error_type.http_status };
    }
    if (
      object.error_type?.$case === "grpc_status" &&
      object.error_type?.grpc_status !== undefined &&
      object.error_type?.grpc_status !== null
    ) {
      message.error_type = { $case: "grpc_status", grpc_status: object.error_type.grpc_status };
    }
    if (
      object.error_type?.$case === "header_abort" &&
      object.error_type?.header_abort !== undefined &&
      object.error_type?.header_abort !== null
    ) {
      message.error_type = {
        $case: "header_abort",
        header_abort: FaultAbort_HeaderAbort.fromPartial(object.error_type.header_abort),
      };
    }
    message.percentage = (object.percentage !== undefined && object.percentage !== null)
      ? FractionalPercent.fromPartial(object.percentage)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(FaultAbort.$type, FaultAbort);

function createBaseFaultAbort_HeaderAbort(): FaultAbort_HeaderAbort {
  return { $type: "envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort" };
}

export const FaultAbort_HeaderAbort: MessageFns<
  FaultAbort_HeaderAbort,
  "envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort"
> = {
  $type: "envoy.extensions.filters.http.fault.v3.FaultAbort.HeaderAbort" as const,

  encode(_: FaultAbort_HeaderAbort, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaultAbort_HeaderAbort {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaultAbort_HeaderAbort();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FaultAbort_HeaderAbort {
    return { $type: FaultAbort_HeaderAbort.$type };
  },

  toJSON(_: FaultAbort_HeaderAbort): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FaultAbort_HeaderAbort>, I>>(base?: I): FaultAbort_HeaderAbort {
    return FaultAbort_HeaderAbort.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaultAbort_HeaderAbort>, I>>(_: I): FaultAbort_HeaderAbort {
    const message = createBaseFaultAbort_HeaderAbort();
    return message;
  },
};

messageTypeRegistry.set(FaultAbort_HeaderAbort.$type, FaultAbort_HeaderAbort);

function createBaseHTTPFault(): HTTPFault {
  return { $type: "envoy.extensions.filters.http.fault.v3.HTTPFault" };
}

export const HTTPFault: MessageFns<HTTPFault, "envoy.extensions.filters.http.fault.v3.HTTPFault"> = {
  $type: "envoy.extensions.filters.http.fault.v3.HTTPFault" as const,

  encode(message: HTTPFault, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.delay !== undefined) {
      FaultDelay.encode(message.delay, writer.uint32(10).fork()).join();
    }
    if (message.abort !== undefined) {
      FaultAbort.encode(message.abort, writer.uint32(18).fork()).join();
    }
    if (message.upstream_cluster !== undefined && message.upstream_cluster !== "") {
      writer.uint32(26).string(message.upstream_cluster);
    }
    if (message.headers !== undefined && message.headers.length !== 0) {
      for (const v of message.headers) {
        HeaderMatcher.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    if (message.downstream_nodes !== undefined && message.downstream_nodes.length !== 0) {
      for (const v of message.downstream_nodes) {
        writer.uint32(42).string(v!);
      }
    }
    if (message.max_active_faults !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_active_faults! },
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.response_rate_limit !== undefined) {
      FaultRateLimit.encode(message.response_rate_limit, writer.uint32(58).fork()).join();
    }
    if (message.delay_percent_runtime !== undefined && message.delay_percent_runtime !== "") {
      writer.uint32(66).string(message.delay_percent_runtime);
    }
    if (message.abort_percent_runtime !== undefined && message.abort_percent_runtime !== "") {
      writer.uint32(74).string(message.abort_percent_runtime);
    }
    if (message.delay_duration_runtime !== undefined && message.delay_duration_runtime !== "") {
      writer.uint32(82).string(message.delay_duration_runtime);
    }
    if (message.abort_http_status_runtime !== undefined && message.abort_http_status_runtime !== "") {
      writer.uint32(90).string(message.abort_http_status_runtime);
    }
    if (message.max_active_faults_runtime !== undefined && message.max_active_faults_runtime !== "") {
      writer.uint32(98).string(message.max_active_faults_runtime);
    }
    if (
      message.response_rate_limit_percent_runtime !== undefined && message.response_rate_limit_percent_runtime !== ""
    ) {
      writer.uint32(106).string(message.response_rate_limit_percent_runtime);
    }
    if (message.abort_grpc_status_runtime !== undefined && message.abort_grpc_status_runtime !== "") {
      writer.uint32(114).string(message.abort_grpc_status_runtime);
    }
    if (message.disable_downstream_cluster_stats !== undefined && message.disable_downstream_cluster_stats !== false) {
      writer.uint32(120).bool(message.disable_downstream_cluster_stats);
    }
    if (message.filter_metadata !== undefined) {
      Struct.encode(Struct.wrap(message.filter_metadata), writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HTTPFault {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHTTPFault();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.delay = FaultDelay.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.abort = FaultAbort.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.upstream_cluster = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.headers === undefined) {
            message.headers = [];
          }
          const el = HeaderMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.headers!.push(el);
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.downstream_nodes === undefined) {
            message.downstream_nodes = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.downstream_nodes!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.max_active_faults = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.response_rate_limit = FaultRateLimit.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.delay_percent_runtime = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.abort_percent_runtime = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.delay_duration_runtime = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.abort_http_status_runtime = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.max_active_faults_runtime = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.response_rate_limit_percent_runtime = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.abort_grpc_status_runtime = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.disable_downstream_cluster_stats = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.filter_metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HTTPFault {
    return {
      $type: HTTPFault.$type,
      delay: isSet(object.delay) ? FaultDelay.fromJSON(object.delay) : undefined,
      abort: isSet(object.abort) ? FaultAbort.fromJSON(object.abort) : undefined,
      upstream_cluster: isSet(object.upstream_cluster) ? globalThis.String(object.upstream_cluster) : undefined,
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => HeaderMatcher.fromJSON(e))
        : undefined,
      downstream_nodes: globalThis.Array.isArray(object?.downstream_nodes)
        ? object.downstream_nodes.map((e: any) => globalThis.String(e))
        : undefined,
      max_active_faults: isSet(object.max_active_faults) ? Number(object.max_active_faults) : undefined,
      response_rate_limit: isSet(object.response_rate_limit)
        ? FaultRateLimit.fromJSON(object.response_rate_limit)
        : undefined,
      delay_percent_runtime: isSet(object.delay_percent_runtime)
        ? globalThis.String(object.delay_percent_runtime)
        : undefined,
      abort_percent_runtime: isSet(object.abort_percent_runtime)
        ? globalThis.String(object.abort_percent_runtime)
        : undefined,
      delay_duration_runtime: isSet(object.delay_duration_runtime)
        ? globalThis.String(object.delay_duration_runtime)
        : undefined,
      abort_http_status_runtime: isSet(object.abort_http_status_runtime)
        ? globalThis.String(object.abort_http_status_runtime)
        : undefined,
      max_active_faults_runtime: isSet(object.max_active_faults_runtime)
        ? globalThis.String(object.max_active_faults_runtime)
        : undefined,
      response_rate_limit_percent_runtime: isSet(object.response_rate_limit_percent_runtime)
        ? globalThis.String(object.response_rate_limit_percent_runtime)
        : undefined,
      abort_grpc_status_runtime: isSet(object.abort_grpc_status_runtime)
        ? globalThis.String(object.abort_grpc_status_runtime)
        : undefined,
      disable_downstream_cluster_stats: isSet(object.disable_downstream_cluster_stats)
        ? globalThis.Boolean(object.disable_downstream_cluster_stats)
        : undefined,
      filter_metadata: isObject(object.filter_metadata) ? object.filter_metadata : undefined,
    };
  },

  toJSON(message: HTTPFault): unknown {
    const obj: any = {};
    if (message.delay !== undefined) {
      obj.delay = FaultDelay.toJSON(message.delay);
    }
    if (message.abort !== undefined) {
      obj.abort = FaultAbort.toJSON(message.abort);
    }
    if (message.upstream_cluster !== undefined) {
      obj.upstream_cluster = message.upstream_cluster;
    }
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => HeaderMatcher.toJSON(e));
    }
    if (message.downstream_nodes?.length) {
      obj.downstream_nodes = message.downstream_nodes;
    }
    if (message.max_active_faults !== undefined) {
      obj.max_active_faults = message.max_active_faults;
    }
    if (message.response_rate_limit !== undefined) {
      obj.response_rate_limit = FaultRateLimit.toJSON(message.response_rate_limit);
    }
    if (message.delay_percent_runtime !== undefined) {
      obj.delay_percent_runtime = message.delay_percent_runtime;
    }
    if (message.abort_percent_runtime !== undefined) {
      obj.abort_percent_runtime = message.abort_percent_runtime;
    }
    if (message.delay_duration_runtime !== undefined) {
      obj.delay_duration_runtime = message.delay_duration_runtime;
    }
    if (message.abort_http_status_runtime !== undefined) {
      obj.abort_http_status_runtime = message.abort_http_status_runtime;
    }
    if (message.max_active_faults_runtime !== undefined) {
      obj.max_active_faults_runtime = message.max_active_faults_runtime;
    }
    if (message.response_rate_limit_percent_runtime !== undefined) {
      obj.response_rate_limit_percent_runtime = message.response_rate_limit_percent_runtime;
    }
    if (message.abort_grpc_status_runtime !== undefined) {
      obj.abort_grpc_status_runtime = message.abort_grpc_status_runtime;
    }
    if (message.disable_downstream_cluster_stats !== undefined) {
      obj.disable_downstream_cluster_stats = message.disable_downstream_cluster_stats;
    }
    if (message.filter_metadata !== undefined) {
      obj.filter_metadata = message.filter_metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HTTPFault>, I>>(base?: I): HTTPFault {
    return HTTPFault.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HTTPFault>, I>>(object: I): HTTPFault {
    const message = createBaseHTTPFault();
    message.delay = (object.delay !== undefined && object.delay !== null)
      ? FaultDelay.fromPartial(object.delay)
      : undefined;
    message.abort = (object.abort !== undefined && object.abort !== null)
      ? FaultAbort.fromPartial(object.abort)
      : undefined;
    message.upstream_cluster = object.upstream_cluster ?? undefined;
    message.headers = object.headers?.map((e) => HeaderMatcher.fromPartial(e)) || undefined;
    message.downstream_nodes = object.downstream_nodes?.map((e) => e) || undefined;
    message.max_active_faults = object.max_active_faults ?? undefined;
    message.response_rate_limit = (object.response_rate_limit !== undefined && object.response_rate_limit !== null)
      ? FaultRateLimit.fromPartial(object.response_rate_limit)
      : undefined;
    message.delay_percent_runtime = object.delay_percent_runtime ?? undefined;
    message.abort_percent_runtime = object.abort_percent_runtime ?? undefined;
    message.delay_duration_runtime = object.delay_duration_runtime ?? undefined;
    message.abort_http_status_runtime = object.abort_http_status_runtime ?? undefined;
    message.max_active_faults_runtime = object.max_active_faults_runtime ?? undefined;
    message.response_rate_limit_percent_runtime = object.response_rate_limit_percent_runtime ?? undefined;
    message.abort_grpc_status_runtime = object.abort_grpc_status_runtime ?? undefined;
    message.disable_downstream_cluster_stats = object.disable_downstream_cluster_stats ?? undefined;
    message.filter_metadata = object.filter_metadata ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HTTPFault.$type, HTTPFault);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
