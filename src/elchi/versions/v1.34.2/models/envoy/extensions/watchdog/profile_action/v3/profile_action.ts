// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/watchdog/profile_action/v3/profile_action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.watchdog.profile_action.v3";

/** Configuration for the profile watchdog action. */
export interface ProfileActionConfig {
  $type: "envoy.extensions.watchdog.profile_action.v3.ProfileActionConfig";
  /** How long the profile should last. If not set defaults to 5 seconds. */
  profile_duration?:
    | Duration
    | undefined;
  /** File path to the directory to output profiles. */
  profile_path?:
    | string
    | undefined;
  /**
   * Limits the max number of profiles that can be generated by this action
   * over its lifetime to avoid filling the disk.
   * If not set (i.e. it's 0), a default of 10 will be used.
   */
  max_profiles?: number | undefined;
}

function createBaseProfileActionConfig(): ProfileActionConfig {
  return { $type: "envoy.extensions.watchdog.profile_action.v3.ProfileActionConfig" };
}

export const ProfileActionConfig: MessageFns<
  ProfileActionConfig,
  "envoy.extensions.watchdog.profile_action.v3.ProfileActionConfig"
> = {
  $type: "envoy.extensions.watchdog.profile_action.v3.ProfileActionConfig" as const,

  encode(message: ProfileActionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile_duration !== undefined) {
      Duration.encode(message.profile_duration, writer.uint32(10).fork()).join();
    }
    if (message.profile_path !== undefined && message.profile_path !== "") {
      writer.uint32(18).string(message.profile_path);
    }
    if (message.max_profiles !== undefined && message.max_profiles !== 0) {
      writer.uint32(24).uint64(message.max_profiles);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileActionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileActionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile_duration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profile_path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.max_profiles = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileActionConfig {
    return {
      $type: ProfileActionConfig.$type,
      profile_duration: isSet(object.profile_duration) ? Duration.fromJSON(object.profile_duration) : undefined,
      profile_path: isSet(object.profile_path) ? globalThis.String(object.profile_path) : undefined,
      max_profiles: isSet(object.max_profiles) ? globalThis.Number(object.max_profiles) : undefined,
    };
  },

  toJSON(message: ProfileActionConfig): unknown {
    const obj: any = {};
    if (message.profile_duration !== undefined) {
      obj.profile_duration = Duration.toJSON(message.profile_duration);
    }
    if (message.profile_path !== undefined) {
      obj.profile_path = message.profile_path;
    }
    if (message.max_profiles !== undefined) {
      obj.max_profiles = Math.round(message.max_profiles);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileActionConfig>, I>>(base?: I): ProfileActionConfig {
    return ProfileActionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileActionConfig>, I>>(object: I): ProfileActionConfig {
    const message = createBaseProfileActionConfig();
    message.profile_duration = (object.profile_duration !== undefined && object.profile_duration !== null)
      ? Duration.fromPartial(object.profile_duration)
      : undefined;
    message.profile_path = object.profile_path ?? undefined;
    message.max_profiles = object.max_profiles ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ProfileActionConfig.$type, ProfileActionConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
