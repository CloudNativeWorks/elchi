// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/compression/brotli/compressor/v3/brotli.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.compression.brotli.compressor.v3";

/** [#next-free-field: 7] */
export interface Brotli {
  $type: "envoy.extensions.compression.brotli.compressor.v3.Brotli";
  /**
   * Value from 0 to 11 that controls the main compression speed-density lever.
   * The higher quality, the slower compression. The default value is 3.
   */
  quality?:
    | number
    | undefined;
  /**
   * A value used to tune encoder for specific input. For more information about modes,
   * please refer to brotli manual: https://brotli.org/encode.html#aa6f
   * This field will be set to "DEFAULT" if not specified.
   */
  encoder_mode?:
    | Brotli_EncoderMode
    | undefined;
  /**
   * Value from 10 to 24 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 18.
   * For more details about this parameter, please refer to brotli manual:
   * https://brotli.org/encode.html#a9a8
   */
  window_bits?:
    | number
    | undefined;
  /**
   * Value from 16 to 24 that represents the base two logarithmic of the compressor's input block
   * size. Larger input block results in better compression at the expense of memory usage. The
   * default is 24. For more details about this parameter, please refer to brotli manual:
   * https://brotli.org/encode.html#a9a8
   */
  input_block_bits?:
    | number
    | undefined;
  /** Value for compressor's next output buffer. If not set, defaults to 4096. */
  chunk_size?:
    | number
    | undefined;
  /**
   * If true, disables "literal context modeling" format feature.
   * This flag is a "decoding-speed vs compression ratio" trade-off.
   */
  disable_literal_context_modeling?: boolean | undefined;
}

export enum Brotli_EncoderMode {
  DEFAULT = "DEFAULT",
  GENERIC = "GENERIC",
  TEXT = "TEXT",
  FONT = "FONT",
}

export function brotli_EncoderModeFromJSON(object: any): Brotli_EncoderMode {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Brotli_EncoderMode.DEFAULT;
    case 1:
    case "GENERIC":
      return Brotli_EncoderMode.GENERIC;
    case 2:
    case "TEXT":
      return Brotli_EncoderMode.TEXT;
    case 3:
    case "FONT":
      return Brotli_EncoderMode.FONT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Brotli_EncoderMode");
  }
}

export function brotli_EncoderModeToJSON(object: Brotli_EncoderMode): string {
  switch (object) {
    case Brotli_EncoderMode.DEFAULT:
      return "DEFAULT";
    case Brotli_EncoderMode.GENERIC:
      return "GENERIC";
    case Brotli_EncoderMode.TEXT:
      return "TEXT";
    case Brotli_EncoderMode.FONT:
      return "FONT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Brotli_EncoderMode");
  }
}

export function brotli_EncoderModeToNumber(object: Brotli_EncoderMode): number {
  switch (object) {
    case Brotli_EncoderMode.DEFAULT:
      return 0;
    case Brotli_EncoderMode.GENERIC:
      return 1;
    case Brotli_EncoderMode.TEXT:
      return 2;
    case Brotli_EncoderMode.FONT:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Brotli_EncoderMode");
  }
}

function createBaseBrotli(): Brotli {
  return { $type: "envoy.extensions.compression.brotli.compressor.v3.Brotli" };
}

export const Brotli: MessageFns<Brotli, "envoy.extensions.compression.brotli.compressor.v3.Brotli"> = {
  $type: "envoy.extensions.compression.brotli.compressor.v3.Brotli" as const,

  encode(message: Brotli, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quality !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.quality! }, writer.uint32(10).fork())
        .join();
    }
    if (message.encoder_mode !== undefined && message.encoder_mode !== Brotli_EncoderMode.DEFAULT) {
      writer.uint32(16).int32(brotli_EncoderModeToNumber(message.encoder_mode));
    }
    if (message.window_bits !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.window_bits! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.input_block_bits !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.input_block_bits! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.chunk_size !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.chunk_size! }, writer.uint32(42).fork())
        .join();
    }
    if (message.disable_literal_context_modeling !== undefined && message.disable_literal_context_modeling !== false) {
      writer.uint32(48).bool(message.disable_literal_context_modeling);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Brotli {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrotli();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quality = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.encoder_mode = brotli_EncoderModeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.window_bits = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.input_block_bits = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chunk_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.disable_literal_context_modeling = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Brotli {
    return {
      $type: Brotli.$type,
      quality: isSet(object.quality) ? Number(object.quality) : undefined,
      encoder_mode: isSet(object.encoder_mode) ? brotli_EncoderModeFromJSON(object.encoder_mode) : undefined,
      window_bits: isSet(object.window_bits) ? Number(object.window_bits) : undefined,
      input_block_bits: isSet(object.input_block_bits) ? Number(object.input_block_bits) : undefined,
      chunk_size: isSet(object.chunk_size) ? Number(object.chunk_size) : undefined,
      disable_literal_context_modeling: isSet(object.disable_literal_context_modeling)
        ? globalThis.Boolean(object.disable_literal_context_modeling)
        : undefined,
    };
  },

  toJSON(message: Brotli): unknown {
    const obj: any = {};
    if (message.quality !== undefined) {
      obj.quality = message.quality;
    }
    if (message.encoder_mode !== undefined) {
      obj.encoder_mode = brotli_EncoderModeToJSON(message.encoder_mode);
    }
    if (message.window_bits !== undefined) {
      obj.window_bits = message.window_bits;
    }
    if (message.input_block_bits !== undefined) {
      obj.input_block_bits = message.input_block_bits;
    }
    if (message.chunk_size !== undefined) {
      obj.chunk_size = message.chunk_size;
    }
    if (message.disable_literal_context_modeling !== undefined) {
      obj.disable_literal_context_modeling = message.disable_literal_context_modeling;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Brotli>, I>>(base?: I): Brotli {
    return Brotli.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Brotli>, I>>(object: I): Brotli {
    const message = createBaseBrotli();
    message.quality = object.quality ?? undefined;
    message.encoder_mode = object.encoder_mode ?? undefined;
    message.window_bits = object.window_bits ?? undefined;
    message.input_block_bits = object.input_block_bits ?? undefined;
    message.chunk_size = object.chunk_size ?? undefined;
    message.disable_literal_context_modeling = object.disable_literal_context_modeling ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Brotli.$type, Brotli);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
