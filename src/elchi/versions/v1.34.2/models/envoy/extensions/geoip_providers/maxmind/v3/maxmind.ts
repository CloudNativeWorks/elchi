// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/geoip_providers/maxmind/v3/maxmind.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { CommonGeoipProviderConfig } from "../../common/v3/common";

export const protobufPackage = "envoy.extensions.geoip_providers.maxmind.v3";

/** [#next-free-field: 6] */
export interface MaxMindConfig {
  $type: "envoy.extensions.geoip_providers.maxmind.v3.MaxMindConfig";
  /**
   * Full file path to the Maxmind city database, e.g. /etc/GeoLite2-City.mmdb.
   * Database file is expected to have .mmdb extension.
   */
  city_db_path?:
    | string
    | undefined;
  /**
   * Full file path to the Maxmind ASN database, e.g. /etc/GeoLite2-ASN.mmdb.
   * Database file is expected to have .mmdb extension.
   */
  asn_db_path?:
    | string
    | undefined;
  /**
   * Full file path to the Maxmind anonymous IP database, e.g. /etc/GeoIP2-Anonymous-IP.mmdb.
   * Database file is expected to have .mmdb extension.
   */
  anon_db_path?:
    | string
    | undefined;
  /**
   * Full file path to the Maxmind ISP database, e.g. /etc/GeoLite2-ISP.mmdb.
   * Database file is expected to have .mmdb extension.
   */
  isp_db_path?:
    | string
    | undefined;
  /** Common provider configuration that specifies which geolocation headers will be populated with geolocation data. */
  common_provider_config?: CommonGeoipProviderConfig | undefined;
}

function createBaseMaxMindConfig(): MaxMindConfig {
  return { $type: "envoy.extensions.geoip_providers.maxmind.v3.MaxMindConfig" };
}

export const MaxMindConfig: MessageFns<MaxMindConfig, "envoy.extensions.geoip_providers.maxmind.v3.MaxMindConfig"> = {
  $type: "envoy.extensions.geoip_providers.maxmind.v3.MaxMindConfig" as const,

  encode(message: MaxMindConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.city_db_path !== undefined && message.city_db_path !== "") {
      writer.uint32(10).string(message.city_db_path);
    }
    if (message.asn_db_path !== undefined && message.asn_db_path !== "") {
      writer.uint32(18).string(message.asn_db_path);
    }
    if (message.anon_db_path !== undefined && message.anon_db_path !== "") {
      writer.uint32(26).string(message.anon_db_path);
    }
    if (message.isp_db_path !== undefined && message.isp_db_path !== "") {
      writer.uint32(42).string(message.isp_db_path);
    }
    if (message.common_provider_config !== undefined) {
      CommonGeoipProviderConfig.encode(message.common_provider_config, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaxMindConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaxMindConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.city_db_path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.asn_db_path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.anon_db_path = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.isp_db_path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.common_provider_config = CommonGeoipProviderConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaxMindConfig {
    return {
      $type: MaxMindConfig.$type,
      city_db_path: isSet(object.city_db_path) ? globalThis.String(object.city_db_path) : undefined,
      asn_db_path: isSet(object.asn_db_path) ? globalThis.String(object.asn_db_path) : undefined,
      anon_db_path: isSet(object.anon_db_path) ? globalThis.String(object.anon_db_path) : undefined,
      isp_db_path: isSet(object.isp_db_path) ? globalThis.String(object.isp_db_path) : undefined,
      common_provider_config: isSet(object.common_provider_config)
        ? CommonGeoipProviderConfig.fromJSON(object.common_provider_config)
        : undefined,
    };
  },

  toJSON(message: MaxMindConfig): unknown {
    const obj: any = {};
    if (message.city_db_path !== undefined) {
      obj.city_db_path = message.city_db_path;
    }
    if (message.asn_db_path !== undefined) {
      obj.asn_db_path = message.asn_db_path;
    }
    if (message.anon_db_path !== undefined) {
      obj.anon_db_path = message.anon_db_path;
    }
    if (message.isp_db_path !== undefined) {
      obj.isp_db_path = message.isp_db_path;
    }
    if (message.common_provider_config !== undefined) {
      obj.common_provider_config = CommonGeoipProviderConfig.toJSON(message.common_provider_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MaxMindConfig>, I>>(base?: I): MaxMindConfig {
    return MaxMindConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MaxMindConfig>, I>>(object: I): MaxMindConfig {
    const message = createBaseMaxMindConfig();
    message.city_db_path = object.city_db_path ?? undefined;
    message.asn_db_path = object.asn_db_path ?? undefined;
    message.anon_db_path = object.anon_db_path ?? undefined;
    message.isp_db_path = object.isp_db_path ?? undefined;
    message.common_provider_config =
      (object.common_provider_config !== undefined && object.common_provider_config !== null)
        ? CommonGeoipProviderConfig.fromPartial(object.common_provider_config)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(MaxMindConfig.$type, MaxMindConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
