// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/original_ip_detection/custom_header/v3/custom_header.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { HttpStatus } from "../../../../../type/v3/http_status";

export const protobufPackage = "envoy.extensions.http.original_ip_detection.custom_header.v3";

/**
 * This extension allows for the original downstream remote IP to be detected
 * by reading the value from a configured header name. If the value is successfully parsed
 * as an IP, it'll be treated as the effective downstream remote address and seen as such
 * by all filters. See :ref:`original_ip_detection_extensions
 * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.original_ip_detection_extensions>`
 * for an overview of how extensions operate and what happens when an extension fails
 * to detect the remote IP.
 *
 * [#extension: envoy.http.original_ip_detection.custom_header]
 */
export interface CustomHeaderConfig {
  $type: "envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig";
  /**
   * The header name containing the original downstream remote address, if present.
   *
   * Note: in the case of a multi-valued header, only the first value is tried and the rest are ignored.
   */
  header_name?:
    | string
    | undefined;
  /**
   * If set to true, the extension could decide that the detected address should be treated as
   * trusted by the HCM. If the address is considered :ref:`trusted<config_http_conn_man_headers_x-forwarded-for_trusted_client_address>`,
   * it might be used as input to determine if the request is internal (among other things).
   */
  allow_extension_to_set_address_as_trusted?:
    | boolean
    | undefined;
  /**
   * If this is set, the request will be rejected when detection fails using it as the HTTP response status.
   *
   * .. note::
   *   If this is set to < 400 or > 511, the default status 403 will be used instead.
   */
  reject_with_status?: HttpStatus | undefined;
}

function createBaseCustomHeaderConfig(): CustomHeaderConfig {
  return { $type: "envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig" };
}

export const CustomHeaderConfig: MessageFns<
  CustomHeaderConfig,
  "envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig"
> = {
  $type: "envoy.extensions.http.original_ip_detection.custom_header.v3.CustomHeaderConfig" as const,

  encode(message: CustomHeaderConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header_name !== undefined && message.header_name !== "") {
      writer.uint32(10).string(message.header_name);
    }
    if (
      message.allow_extension_to_set_address_as_trusted !== undefined &&
      message.allow_extension_to_set_address_as_trusted !== false
    ) {
      writer.uint32(16).bool(message.allow_extension_to_set_address_as_trusted);
    }
    if (message.reject_with_status !== undefined) {
      HttpStatus.encode(message.reject_with_status, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomHeaderConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomHeaderConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.allow_extension_to_set_address_as_trusted = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reject_with_status = HttpStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomHeaderConfig {
    return {
      $type: CustomHeaderConfig.$type,
      header_name: isSet(object.header_name) ? globalThis.String(object.header_name) : undefined,
      allow_extension_to_set_address_as_trusted: isSet(object.allow_extension_to_set_address_as_trusted)
        ? globalThis.Boolean(object.allow_extension_to_set_address_as_trusted)
        : undefined,
      reject_with_status: isSet(object.reject_with_status) ? HttpStatus.fromJSON(object.reject_with_status) : undefined,
    };
  },

  toJSON(message: CustomHeaderConfig): unknown {
    const obj: any = {};
    if (message.header_name !== undefined) {
      obj.header_name = message.header_name;
    }
    if (message.allow_extension_to_set_address_as_trusted !== undefined) {
      obj.allow_extension_to_set_address_as_trusted = message.allow_extension_to_set_address_as_trusted;
    }
    if (message.reject_with_status !== undefined) {
      obj.reject_with_status = HttpStatus.toJSON(message.reject_with_status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomHeaderConfig>, I>>(base?: I): CustomHeaderConfig {
    return CustomHeaderConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomHeaderConfig>, I>>(object: I): CustomHeaderConfig {
    const message = createBaseCustomHeaderConfig();
    message.header_name = object.header_name ?? undefined;
    message.allow_extension_to_set_address_as_trusted = object.allow_extension_to_set_address_as_trusted ?? undefined;
    message.reject_with_status = (object.reject_with_status !== undefined && object.reject_with_status !== null)
      ? HttpStatus.fromPartial(object.reject_with_status)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CustomHeaderConfig.$type, CustomHeaderConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
