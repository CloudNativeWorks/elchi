// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/matching/common_inputs/ssl/v3/ssl_inputs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.matching.common_inputs.ssl.v3";

/**
 * List of comma-delimited URIs in the SAN field of the peer certificate for a downstream.
 * [#extension: envoy.matching.inputs.uri_san]
 */
export interface UriSanInput {
  $type: "envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput";
}

/**
 * List of comma-delimited DNS entries in the SAN field of the peer certificate for a downstream.
 * [#extension: envoy.matching.inputs.dns_san]
 */
export interface DnsSanInput {
  $type: "envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput";
}

/**
 * Input that matches the subject field of the peer certificate in RFC 2253 format for a
 * downstream.
 * [#extension: envoy.matching.inputs.subject]
 */
export interface SubjectInput {
  $type: "envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput";
}

function createBaseUriSanInput(): UriSanInput {
  return { $type: "envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput" };
}

export const UriSanInput: MessageFns<UriSanInput, "envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput"> = {
  $type: "envoy.extensions.matching.common_inputs.ssl.v3.UriSanInput" as const,

  encode(_: UriSanInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UriSanInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUriSanInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UriSanInput {
    return { $type: UriSanInput.$type };
  },

  toJSON(_: UriSanInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UriSanInput>, I>>(base?: I): UriSanInput {
    return UriSanInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UriSanInput>, I>>(_: I): UriSanInput {
    const message = createBaseUriSanInput();
    return message;
  },
};

messageTypeRegistry.set(UriSanInput.$type, UriSanInput);

function createBaseDnsSanInput(): DnsSanInput {
  return { $type: "envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput" };
}

export const DnsSanInput: MessageFns<DnsSanInput, "envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput"> = {
  $type: "envoy.extensions.matching.common_inputs.ssl.v3.DnsSanInput" as const,

  encode(_: DnsSanInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsSanInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsSanInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DnsSanInput {
    return { $type: DnsSanInput.$type };
  },

  toJSON(_: DnsSanInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsSanInput>, I>>(base?: I): DnsSanInput {
    return DnsSanInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsSanInput>, I>>(_: I): DnsSanInput {
    const message = createBaseDnsSanInput();
    return message;
  },
};

messageTypeRegistry.set(DnsSanInput.$type, DnsSanInput);

function createBaseSubjectInput(): SubjectInput {
  return { $type: "envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput" };
}

export const SubjectInput: MessageFns<SubjectInput, "envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput"> = {
  $type: "envoy.extensions.matching.common_inputs.ssl.v3.SubjectInput" as const,

  encode(_: SubjectInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubjectInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubjectInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubjectInput {
    return { $type: SubjectInput.$type };
  },

  toJSON(_: SubjectInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SubjectInput>, I>>(base?: I): SubjectInput {
    return SubjectInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubjectInput>, I>>(_: I): SubjectInput {
    const message = createBaseSubjectInput();
    return message;
  },
};

messageTypeRegistry.set(SubjectInput.$type, SubjectInput);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
