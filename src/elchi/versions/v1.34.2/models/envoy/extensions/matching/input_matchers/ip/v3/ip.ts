// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/matching/input_matchers/ip/v3/ip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CidrRange } from "../../../../../config/core/v3/address";

export const protobufPackage = "envoy.extensions.matching.input_matchers.ip.v3";

/**
 * This input matcher matches IPv4 or IPv6 addresses against a list of CIDR
 * ranges. It returns true if and only if the input IP belongs to at least one
 * of these CIDR ranges. Internally, it uses a Level-Compressed trie, as
 * described in the paper `IP-address lookup using LC-tries
 * <https://www.nada.kth.se/~snilsson/publications/IP-address-lookup-using-LC-tries/>`_
 * by S. Nilsson and G. Karlsson. For "big" lists of IPs, this matcher is more
 * efficient than multiple single IP matcher, that would have a linear cost.
 */
export interface Ip {
  $type: "envoy.extensions.matching.input_matchers.ip.v3.Ip";
  /** Match if the IP belongs to any of these CIDR ranges. */
  cidr_ranges?:
    | CidrRange[]
    | undefined;
  /**
   * The human readable prefix to use when emitting statistics for the IP input
   * matcher. Names in the table below are concatenated to this prefix.
   *
   * .. csv-table::
   *    :header: Name, Type, Description
   *    :widths: 1, 1, 2
   *
   *    ip_parsing_failed, Counter, Total number of IP addresses the matcher was unable to parse
   */
  stat_prefix?: string | undefined;
}

function createBaseIp(): Ip {
  return { $type: "envoy.extensions.matching.input_matchers.ip.v3.Ip" };
}

export const Ip: MessageFns<Ip, "envoy.extensions.matching.input_matchers.ip.v3.Ip"> = {
  $type: "envoy.extensions.matching.input_matchers.ip.v3.Ip" as const,

  encode(message: Ip, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cidr_ranges !== undefined && message.cidr_ranges.length !== 0) {
      for (const v of message.cidr_ranges) {
        CidrRange.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(18).string(message.stat_prefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ip {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.cidr_ranges === undefined) {
            message.cidr_ranges = [];
          }
          const el = CidrRange.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.cidr_ranges!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ip {
    return {
      $type: Ip.$type,
      cidr_ranges: globalThis.Array.isArray(object?.cidr_ranges)
        ? object.cidr_ranges.map((e: any) => CidrRange.fromJSON(e))
        : undefined,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
    };
  },

  toJSON(message: Ip): unknown {
    const obj: any = {};
    if (message.cidr_ranges?.length) {
      obj.cidr_ranges = message.cidr_ranges.map((e) => CidrRange.toJSON(e));
    }
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ip>, I>>(base?: I): Ip {
    return Ip.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ip>, I>>(object: I): Ip {
    const message = createBaseIp();
    message.cidr_ranges = object.cidr_ranges?.map((e) => CidrRange.fromPartial(e)) || undefined;
    message.stat_prefix = object.stat_prefix ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Ip.$type, Ip);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
