// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/matching/input_matchers/runtime_fraction/v3/runtime_fraction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFractionalPercent } from "../../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.matching.input_matchers.runtime_fraction.v3";

/**
 * The runtime fraction matchers computes a hash from the input and matches if runtime feature is enabled
 * for the the resulting hash. Every time the input is considered for a match, its hash must fall within
 * the percentage of matches indicated by this field. For a fraction N/D, a number is computed as a hash
 * of the input on a field in the range [0,D). If the number is less than or equal to the value of the
 * numerator N, the matcher evaluates to true. A runtime_fraction input matcher can be used to gradually
 * roll out matcher changes without requiring full code or configuration deployments.
 * Note that distribution of matching results is only as good as one of the input.
 */
export interface RuntimeFraction {
  $type: "envoy.extensions.matching.input_matchers.runtime_fraction.v3.RuntimeFraction";
  /**
   * Match the input against the given runtime key. The specified default value is used if key is not
   * present in the runtime configuration.
   */
  runtime_fraction?:
    | RuntimeFractionalPercent
    | undefined;
  /**
   * Optional seed passed through the hash function. This allows using additional information when computing
   * the hash value: by changing the seed value, a potentially different outcome can be achieved for the same input.
   */
  seed?: number | undefined;
}

function createBaseRuntimeFraction(): RuntimeFraction {
  return { $type: "envoy.extensions.matching.input_matchers.runtime_fraction.v3.RuntimeFraction" };
}

export const RuntimeFraction: MessageFns<
  RuntimeFraction,
  "envoy.extensions.matching.input_matchers.runtime_fraction.v3.RuntimeFraction"
> = {
  $type: "envoy.extensions.matching.input_matchers.runtime_fraction.v3.RuntimeFraction" as const,

  encode(message: RuntimeFraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.runtime_fraction !== undefined) {
      RuntimeFractionalPercent.encode(message.runtime_fraction, writer.uint32(10).fork()).join();
    }
    if (message.seed !== undefined && message.seed !== 0) {
      writer.uint32(16).uint64(message.seed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RuntimeFraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeFraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.runtime_fraction = RuntimeFractionalPercent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.seed = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeFraction {
    return {
      $type: RuntimeFraction.$type,
      runtime_fraction: isSet(object.runtime_fraction)
        ? RuntimeFractionalPercent.fromJSON(object.runtime_fraction)
        : undefined,
      seed: isSet(object.seed) ? globalThis.Number(object.seed) : undefined,
    };
  },

  toJSON(message: RuntimeFraction): unknown {
    const obj: any = {};
    if (message.runtime_fraction !== undefined) {
      obj.runtime_fraction = RuntimeFractionalPercent.toJSON(message.runtime_fraction);
    }
    if (message.seed !== undefined) {
      obj.seed = Math.round(message.seed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RuntimeFraction>, I>>(base?: I): RuntimeFraction {
    return RuntimeFraction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RuntimeFraction>, I>>(object: I): RuntimeFraction {
    const message = createBaseRuntimeFraction();
    message.runtime_fraction = (object.runtime_fraction !== undefined && object.runtime_fraction !== null)
      ? RuntimeFractionalPercent.fromPartial(object.runtime_fraction)
      : undefined;
    message.seed = object.seed ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RuntimeFraction.$type, RuntimeFraction);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
