// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/load_balancing_policies/least_request/v3/least_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue, UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { RuntimeDouble } from "../../../../config/core/v3/base";
import { LocalityLbConfig, SlowStartConfig } from "../../common/v3/common";

export const protobufPackage = "envoy.extensions.load_balancing_policies.least_request.v3";

/**
 * This configuration allows the built-in LEAST_REQUEST LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 * [#next-free-field: 7]
 */
export interface LeastRequest {
  $type: "envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest";
  /**
   * The number of random healthy hosts from which the host with the fewest active requests will
   * be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
   * Only applies to the ``N_CHOICES`` selection method.
   */
  choice_count?:
    | number
    | undefined;
  /**
   * The following formula is used to calculate the dynamic weights when hosts have different load
   * balancing weights:
   *
   * ``weight = load_balancing_weight / (active_requests + 1)^active_request_bias``
   *
   * The larger the active request bias is, the more aggressively active requests will lower the
   * effective weight when all host weights are not equal.
   *
   * ``active_request_bias`` must be greater than or equal to 0.0.
   *
   * When ``active_request_bias == 0.0`` the Least Request Load Balancer doesn't consider the number
   * of active requests at the time it picks a host and behaves like the Round Robin Load
   * Balancer.
   *
   * When ``active_request_bias > 0.0`` the Least Request Load Balancer scales the load balancing
   * weight by the number of active requests at the time it does a pick.
   *
   * The value is cached for performance reasons and refreshed whenever one of the Load Balancer's
   * host sets changes, e.g., whenever there is a host membership update or a host load balancing
   * weight change.
   *
   * .. note::
   *   This setting only takes effect if all host weights are not equal.
   */
  active_request_bias?:
    | RuntimeDouble
    | undefined;
  /**
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   */
  slow_start_config?:
    | SlowStartConfig
    | undefined;
  /** Configuration for local zone aware load balancing or locality weighted load balancing. */
  locality_lb_config?:
    | LocalityLbConfig
    | undefined;
  /**
   * [#not-implemented-hide:]
   * Unused. Replaced by the `selection_method` enum for better extensibility.
   *
   * @deprecated
   */
  enable_full_scan?:
    | boolean
    | undefined;
  /**
   * Method for selecting the host set from which to return the host with the fewest active requests.
   *
   * Defaults to ``N_CHOICES``.
   */
  selection_method?: LeastRequest_SelectionMethod | undefined;
}

/**
 * Available methods for selecting the host set from which to return the host with the
 * fewest active requests.
 */
export enum LeastRequest_SelectionMethod {
  /**
   * N_CHOICES - Return host with fewest requests from a set of ``choice_count`` randomly selected hosts.
   * Best selection method for most scenarios.
   */
  N_CHOICES = "N_CHOICES",
  /**
   * FULL_SCAN - Return host with fewest requests from all hosts.
   * Useful in some niche use cases involving low request rates and one of:
   * (example 1) low request limits on workloads, or (example 2) few hosts.
   *
   * Example 1: Consider a workload type that can only accept one connection at a time.
   * If such workloads are deployed across many hosts, only a small percentage of those
   * workloads have zero connections at any given time, and the rate of new connections is low,
   * the ``FULL_SCAN`` method is more likely to select a suitable host than ``N_CHOICES``.
   *
   * Example 2: Consider a workload type that is only deployed on 2 hosts. With default settings,
   * the ``N_CHOICES`` method will return the host with more active requests 25% of the time.
   * If the request rate is sufficiently low, the behavior of always selecting the host with least
   * requests as of the last metrics refresh may be preferable.
   */
  FULL_SCAN = "FULL_SCAN",
}

export function leastRequest_SelectionMethodFromJSON(object: any): LeastRequest_SelectionMethod {
  switch (object) {
    case 0:
    case "N_CHOICES":
      return LeastRequest_SelectionMethod.N_CHOICES;
    case 1:
    case "FULL_SCAN":
      return LeastRequest_SelectionMethod.FULL_SCAN;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LeastRequest_SelectionMethod");
  }
}

export function leastRequest_SelectionMethodToJSON(object: LeastRequest_SelectionMethod): string {
  switch (object) {
    case LeastRequest_SelectionMethod.N_CHOICES:
      return "N_CHOICES";
    case LeastRequest_SelectionMethod.FULL_SCAN:
      return "FULL_SCAN";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LeastRequest_SelectionMethod");
  }
}

export function leastRequest_SelectionMethodToNumber(object: LeastRequest_SelectionMethod): number {
  switch (object) {
    case LeastRequest_SelectionMethod.N_CHOICES:
      return 0;
    case LeastRequest_SelectionMethod.FULL_SCAN:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LeastRequest_SelectionMethod");
  }
}

function createBaseLeastRequest(): LeastRequest {
  return { $type: "envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest" };
}

export const LeastRequest: MessageFns<
  LeastRequest,
  "envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest"
> = {
  $type: "envoy.extensions.load_balancing_policies.least_request.v3.LeastRequest" as const,

  encode(message: LeastRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.choice_count !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.choice_count! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.active_request_bias !== undefined) {
      RuntimeDouble.encode(message.active_request_bias, writer.uint32(18).fork()).join();
    }
    if (message.slow_start_config !== undefined) {
      SlowStartConfig.encode(message.slow_start_config, writer.uint32(26).fork()).join();
    }
    if (message.locality_lb_config !== undefined) {
      LocalityLbConfig.encode(message.locality_lb_config, writer.uint32(34).fork()).join();
    }
    if (message.enable_full_scan !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.enable_full_scan! },
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.selection_method !== undefined && message.selection_method !== LeastRequest_SelectionMethod.N_CHOICES) {
      writer.uint32(48).int32(leastRequest_SelectionMethodToNumber(message.selection_method));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeastRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.choice_count = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.active_request_bias = RuntimeDouble.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slow_start_config = SlowStartConfig.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.locality_lb_config = LocalityLbConfig.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.enable_full_scan = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.selection_method = leastRequest_SelectionMethodFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeastRequest {
    return {
      $type: LeastRequest.$type,
      choice_count: isSet(object.choice_count) ? Number(object.choice_count) : undefined,
      active_request_bias: isSet(object.active_request_bias)
        ? RuntimeDouble.fromJSON(object.active_request_bias)
        : undefined,
      slow_start_config: isSet(object.slow_start_config)
        ? SlowStartConfig.fromJSON(object.slow_start_config)
        : undefined,
      locality_lb_config: isSet(object.locality_lb_config)
        ? LocalityLbConfig.fromJSON(object.locality_lb_config)
        : undefined,
      enable_full_scan: isSet(object.enable_full_scan) ? Boolean(object.enable_full_scan) : undefined,
      selection_method: isSet(object.selection_method)
        ? leastRequest_SelectionMethodFromJSON(object.selection_method)
        : undefined,
    };
  },

  toJSON(message: LeastRequest): unknown {
    const obj: any = {};
    if (message.choice_count !== undefined) {
      obj.choice_count = message.choice_count;
    }
    if (message.active_request_bias !== undefined) {
      obj.active_request_bias = RuntimeDouble.toJSON(message.active_request_bias);
    }
    if (message.slow_start_config !== undefined) {
      obj.slow_start_config = SlowStartConfig.toJSON(message.slow_start_config);
    }
    if (message.locality_lb_config !== undefined) {
      obj.locality_lb_config = LocalityLbConfig.toJSON(message.locality_lb_config);
    }
    if (message.enable_full_scan !== undefined) {
      obj.enable_full_scan = message.enable_full_scan;
    }
    if (message.selection_method !== undefined) {
      obj.selection_method = leastRequest_SelectionMethodToJSON(message.selection_method);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeastRequest>, I>>(base?: I): LeastRequest {
    return LeastRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeastRequest>, I>>(object: I): LeastRequest {
    const message = createBaseLeastRequest();
    message.choice_count = object.choice_count ?? undefined;
    message.active_request_bias = (object.active_request_bias !== undefined && object.active_request_bias !== null)
      ? RuntimeDouble.fromPartial(object.active_request_bias)
      : undefined;
    message.slow_start_config = (object.slow_start_config !== undefined && object.slow_start_config !== null)
      ? SlowStartConfig.fromPartial(object.slow_start_config)
      : undefined;
    message.locality_lb_config = (object.locality_lb_config !== undefined && object.locality_lb_config !== null)
      ? LocalityLbConfig.fromPartial(object.locality_lb_config)
      : undefined;
    message.enable_full_scan = object.enable_full_scan ?? undefined;
    message.selection_method = object.selection_method ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LeastRequest.$type, LeastRequest);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
