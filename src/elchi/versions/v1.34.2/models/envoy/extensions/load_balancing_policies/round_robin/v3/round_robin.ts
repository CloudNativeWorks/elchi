// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/load_balancing_policies/round_robin/v3/round_robin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { LocalityLbConfig, SlowStartConfig } from "../../common/v3/common";

export const protobufPackage = "envoy.extensions.load_balancing_policies.round_robin.v3";

/**
 * This configuration allows the built-in ROUND_ROBIN LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 */
export interface RoundRobin {
  $type: "envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin";
  /**
   * Configuration for slow start mode.
   * If this configuration is not set, slow start will not be not enabled.
   */
  slow_start_config?:
    | SlowStartConfig
    | undefined;
  /** Configuration for local zone aware load balancing or locality weighted load balancing. */
  locality_lb_config?: LocalityLbConfig | undefined;
}

function createBaseRoundRobin(): RoundRobin {
  return { $type: "envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin" };
}

export const RoundRobin: MessageFns<RoundRobin, "envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin"> =
  {
    $type: "envoy.extensions.load_balancing_policies.round_robin.v3.RoundRobin" as const,

    encode(message: RoundRobin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.slow_start_config !== undefined) {
        SlowStartConfig.encode(message.slow_start_config, writer.uint32(10).fork()).join();
      }
      if (message.locality_lb_config !== undefined) {
        LocalityLbConfig.encode(message.locality_lb_config, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RoundRobin {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseRoundRobin();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.slow_start_config = SlowStartConfig.decode(reader, reader.uint32());
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.locality_lb_config = LocalityLbConfig.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): RoundRobin {
      return {
        $type: RoundRobin.$type,
        slow_start_config: isSet(object.slow_start_config)
          ? SlowStartConfig.fromJSON(object.slow_start_config)
          : undefined,
        locality_lb_config: isSet(object.locality_lb_config)
          ? LocalityLbConfig.fromJSON(object.locality_lb_config)
          : undefined,
      };
    },

    toJSON(message: RoundRobin): unknown {
      const obj: any = {};
      if (message.slow_start_config !== undefined) {
        obj.slow_start_config = SlowStartConfig.toJSON(message.slow_start_config);
      }
      if (message.locality_lb_config !== undefined) {
        obj.locality_lb_config = LocalityLbConfig.toJSON(message.locality_lb_config);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<RoundRobin>, I>>(base?: I): RoundRobin {
      return RoundRobin.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<RoundRobin>, I>>(object: I): RoundRobin {
      const message = createBaseRoundRobin();
      message.slow_start_config = (object.slow_start_config !== undefined && object.slow_start_config !== null)
        ? SlowStartConfig.fromPartial(object.slow_start_config)
        : undefined;
      message.locality_lb_config = (object.locality_lb_config !== undefined && object.locality_lb_config !== null)
        ? LocalityLbConfig.fromPartial(object.locality_lb_config)
        : undefined;
      return message;
    },
  };

messageTypeRegistry.set(RoundRobin.$type, RoundRobin);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
