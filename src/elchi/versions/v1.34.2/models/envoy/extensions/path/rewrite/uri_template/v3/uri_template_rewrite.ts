// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/path/rewrite/uri_template/v3/uri_template_rewrite.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.path.rewrite.uri_template.v3";

/**
 * Indicates that during forwarding, portions of the path that match the
 * pattern should be rewritten, even allowing the substitution of variables
 * from the match pattern into the new path as specified by the rewrite template.
 * This is useful to allow application paths to be
 * rewritten in a way that is aware of segments with variable content like
 * identifiers. The router filter will place the original path as it was
 * before the rewrite into the :ref:`x-envoy-original-path
 * <config_http_filters_router_x-envoy-original-path>` header.
 *
 * Only one of :ref:`prefix_rewrite <envoy_v3_api_field_config.route.v3.RouteAction.prefix_rewrite>`,
 * :ref:`regex_rewrite <envoy_v3_api_field_config.route.v3.RouteAction.regex_rewrite>`,
 * or *path_template_rewrite* may be specified.
 *
 * Template pattern matching types:
 *
 * * ``*`` : Matches a single path component, up to the next path separator: /
 *
 * * ``**`` : Matches zero or more path segments. If present, must be the last operator.
 *
 * * ``{name} or {name=*}`` :  A named variable matching one path segment up to the next path separator: /.
 *
 * * ``{name=videos/*}`` : A named variable matching more than one path segment.
 *      The path component matching videos/* is captured as the named variable.
 *
 * * ``{name=**}`` : A named variable matching zero or more path segments.
 *
 * Only named matches can be used to perform rewrites.
 *
 * Examples using path_template_rewrite:
 *
 * * The pattern ``/{one}/{two}`` paired with a substitution string of ``/{two}/{one}`` would
 *   transform ``/cat/dog`` into ``/dog/cat``.
 *
 * * The pattern ``/videos/{language=lang/*}/*`` paired with a substitution string of
 *   ``/{language}`` would transform ``/videos/lang/en/video.m4s`` into ``lang/en``.
 *
 * * The path pattern ``/content/{format}/{lang}/{id}/{file}.vtt`` paired with a substitution
 *   string of ``/{lang}/{format}/{file}.vtt`` would transform ``/content/hls/en-us/12345/en_193913.vtt``
 *   into ``/en-us/hls/en_193913.vtt``.
 */
export interface UriTemplateRewriteConfig {
  $type: "envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig";
  path_template_rewrite?: string | undefined;
}

function createBaseUriTemplateRewriteConfig(): UriTemplateRewriteConfig {
  return { $type: "envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig" };
}

export const UriTemplateRewriteConfig: MessageFns<
  UriTemplateRewriteConfig,
  "envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig"
> = {
  $type: "envoy.extensions.path.rewrite.uri_template.v3.UriTemplateRewriteConfig" as const,

  encode(message: UriTemplateRewriteConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path_template_rewrite !== undefined && message.path_template_rewrite !== "") {
      writer.uint32(10).string(message.path_template_rewrite);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UriTemplateRewriteConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUriTemplateRewriteConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path_template_rewrite = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UriTemplateRewriteConfig {
    return {
      $type: UriTemplateRewriteConfig.$type,
      path_template_rewrite: isSet(object.path_template_rewrite)
        ? globalThis.String(object.path_template_rewrite)
        : undefined,
    };
  },

  toJSON(message: UriTemplateRewriteConfig): unknown {
    const obj: any = {};
    if (message.path_template_rewrite !== undefined) {
      obj.path_template_rewrite = message.path_template_rewrite;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UriTemplateRewriteConfig>, I>>(base?: I): UriTemplateRewriteConfig {
    return UriTemplateRewriteConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UriTemplateRewriteConfig>, I>>(object: I): UriTemplateRewriteConfig {
    const message = createBaseUriTemplateRewriteConfig();
    message.path_template_rewrite = object.path_template_rewrite ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(UriTemplateRewriteConfig.$type, UriTemplateRewriteConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
