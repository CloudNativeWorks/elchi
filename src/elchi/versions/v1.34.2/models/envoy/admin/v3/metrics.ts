// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/admin/v3/metrics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.admin.v3";

/** Proto representation of an Envoy Counter or Gauge value. */
export interface SimpleMetric {
  $type: "envoy.admin.v3.SimpleMetric";
  /** Type of the metric represented. */
  type?:
    | SimpleMetric_Type
    | undefined;
  /** Current metric value. */
  value?:
    | number
    | undefined;
  /** Name of the metric. */
  name?: string | undefined;
}

export enum SimpleMetric_Type {
  COUNTER = "COUNTER",
  GAUGE = "GAUGE",
}

export function simpleMetric_TypeFromJSON(object: any): SimpleMetric_Type {
  switch (object) {
    case 0:
    case "COUNTER":
      return SimpleMetric_Type.COUNTER;
    case 1:
    case "GAUGE":
      return SimpleMetric_Type.GAUGE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SimpleMetric_Type");
  }
}

export function simpleMetric_TypeToJSON(object: SimpleMetric_Type): string {
  switch (object) {
    case SimpleMetric_Type.COUNTER:
      return "COUNTER";
    case SimpleMetric_Type.GAUGE:
      return "GAUGE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SimpleMetric_Type");
  }
}

export function simpleMetric_TypeToNumber(object: SimpleMetric_Type): number {
  switch (object) {
    case SimpleMetric_Type.COUNTER:
      return 0;
    case SimpleMetric_Type.GAUGE:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SimpleMetric_Type");
  }
}

function createBaseSimpleMetric(): SimpleMetric {
  return { $type: "envoy.admin.v3.SimpleMetric" };
}

export const SimpleMetric: MessageFns<SimpleMetric, "envoy.admin.v3.SimpleMetric"> = {
  $type: "envoy.admin.v3.SimpleMetric" as const,

  encode(message: SimpleMetric, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== SimpleMetric_Type.COUNTER) {
      writer.uint32(8).int32(simpleMetric_TypeToNumber(message.type));
    }
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(16).uint64(message.value);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimpleMetric {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimpleMetric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = simpleMetric_TypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimpleMetric {
    return {
      $type: SimpleMetric.$type,
      type: isSet(object.type) ? simpleMetric_TypeFromJSON(object.type) : undefined,
      value: isSet(object.value) ? globalThis.Number(object.value) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: SimpleMetric): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = simpleMetric_TypeToJSON(message.type);
    }
    if (message.value !== undefined) {
      obj.value = Math.round(message.value);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SimpleMetric>, I>>(base?: I): SimpleMetric {
    return SimpleMetric.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SimpleMetric>, I>>(object: I): SimpleMetric {
    const message = createBaseSimpleMetric();
    message.type = object.type ?? undefined;
    message.value = object.value ?? undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(SimpleMetric.$type, SimpleMetric);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
