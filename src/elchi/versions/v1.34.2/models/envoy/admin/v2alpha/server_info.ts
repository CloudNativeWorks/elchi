// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/admin/v2alpha/server_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.admin.v2alpha";

/**
 * Proto representation of the value returned by /server_info, containing
 * server version/server status information.
 * [#next-free-field: 7]
 */
export interface ServerInfo {
  $type: "envoy.admin.v2alpha.ServerInfo";
  /** Server version. */
  version?:
    | string
    | undefined;
  /** State of the server. */
  state?:
    | ServerInfo_State
    | undefined;
  /** Uptime since current epoch was started. */
  uptime_current_epoch?:
    | Duration
    | undefined;
  /** Uptime since the start of the first epoch. */
  uptime_all_epochs?:
    | Duration
    | undefined;
  /** Hot restart version. */
  hot_restart_version?:
    | string
    | undefined;
  /** Command line options the server is currently running with. */
  command_line_options?: CommandLineOptions | undefined;
}

export enum ServerInfo_State {
  /** LIVE - Server is live and serving traffic. */
  LIVE = "LIVE",
  /** DRAINING - Server is draining listeners in response to external health checks failing. */
  DRAINING = "DRAINING",
  /** PRE_INITIALIZING - Server has not yet completed cluster manager initialization. */
  PRE_INITIALIZING = "PRE_INITIALIZING",
  /** INITIALIZING - Server is running the cluster manager initialization callbacks (e.g., RDS). */
  INITIALIZING = "INITIALIZING",
}

export function serverInfo_StateFromJSON(object: any): ServerInfo_State {
  switch (object) {
    case 0:
    case "LIVE":
      return ServerInfo_State.LIVE;
    case 1:
    case "DRAINING":
      return ServerInfo_State.DRAINING;
    case 2:
    case "PRE_INITIALIZING":
      return ServerInfo_State.PRE_INITIALIZING;
    case 3:
    case "INITIALIZING":
      return ServerInfo_State.INITIALIZING;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ServerInfo_State");
  }
}

export function serverInfo_StateToJSON(object: ServerInfo_State): string {
  switch (object) {
    case ServerInfo_State.LIVE:
      return "LIVE";
    case ServerInfo_State.DRAINING:
      return "DRAINING";
    case ServerInfo_State.PRE_INITIALIZING:
      return "PRE_INITIALIZING";
    case ServerInfo_State.INITIALIZING:
      return "INITIALIZING";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ServerInfo_State");
  }
}

export function serverInfo_StateToNumber(object: ServerInfo_State): number {
  switch (object) {
    case ServerInfo_State.LIVE:
      return 0;
    case ServerInfo_State.DRAINING:
      return 1;
    case ServerInfo_State.PRE_INITIALIZING:
      return 2;
    case ServerInfo_State.INITIALIZING:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ServerInfo_State");
  }
}

/** [#next-free-field: 29] */
export interface CommandLineOptions {
  $type: "envoy.admin.v2alpha.CommandLineOptions";
  /** See :option:`--base-id` for details. */
  base_id?:
    | number
    | undefined;
  /** See :option:`--concurrency` for details. */
  concurrency?:
    | number
    | undefined;
  /** See :option:`--config-path` for details. */
  config_path?:
    | string
    | undefined;
  /** See :option:`--config-yaml` for details. */
  config_yaml?:
    | string
    | undefined;
  /** See :option:`--allow-unknown-static-fields` for details. */
  allow_unknown_static_fields?:
    | boolean
    | undefined;
  /** See :option:`--reject-unknown-dynamic-fields` for details. */
  reject_unknown_dynamic_fields?:
    | boolean
    | undefined;
  /** See :option:`--admin-address-path` for details. */
  admin_address_path?:
    | string
    | undefined;
  /** See :option:`--local-address-ip-version` for details. */
  local_address_ip_version?:
    | CommandLineOptions_IpVersion
    | undefined;
  /** See :option:`--log-level` for details. */
  log_level?:
    | string
    | undefined;
  /** See :option:`--component-log-level` for details. */
  component_log_level?:
    | string
    | undefined;
  /** See :option:`--log-format` for details. */
  log_format?:
    | string
    | undefined;
  /** See :option:`--log-format-escaped` for details. */
  log_format_escaped?:
    | boolean
    | undefined;
  /** See :option:`--log-path` for details. */
  log_path?:
    | string
    | undefined;
  /** See :option:`--service-cluster` for details. */
  service_cluster?:
    | string
    | undefined;
  /** See :option:`--service-node` for details. */
  service_node?:
    | string
    | undefined;
  /** See :option:`--service-zone` for details. */
  service_zone?:
    | string
    | undefined;
  /** See :option:`--file-flush-interval-msec` for details. */
  file_flush_interval?:
    | Duration
    | undefined;
  /** See :option:`--drain-time-s` for details. */
  drain_time?:
    | Duration
    | undefined;
  /** See :option:`--parent-shutdown-time-s` for details. */
  parent_shutdown_time?:
    | Duration
    | undefined;
  /** See :option:`--mode` for details. */
  mode?:
    | CommandLineOptions_Mode
    | undefined;
  /**
   * max_stats and max_obj_name_len are now unused and have no effect.
   *
   * @deprecated
   */
  max_stats?:
    | number
    | undefined;
  /** @deprecated */
  max_obj_name_len?:
    | number
    | undefined;
  /** See :option:`--disable-hot-restart` for details. */
  disable_hot_restart?:
    | boolean
    | undefined;
  /** See :option:`--enable-mutex-tracing` for details. */
  enable_mutex_tracing?:
    | boolean
    | undefined;
  /** See :option:`--restart-epoch` for details. */
  restart_epoch?:
    | number
    | undefined;
  /** See :option:`--cpuset-threads` for details. */
  cpuset_threads?:
    | boolean
    | undefined;
  /** See :option:`--disable-extensions` for details. */
  disabled_extensions?: string[] | undefined;
}

export enum CommandLineOptions_IpVersion {
  v4 = "v4",
  v6 = "v6",
}

export function commandLineOptions_IpVersionFromJSON(object: any): CommandLineOptions_IpVersion {
  switch (object) {
    case 0:
    case "v4":
      return CommandLineOptions_IpVersion.v4;
    case 1:
    case "v6":
      return CommandLineOptions_IpVersion.v6;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CommandLineOptions_IpVersion");
  }
}

export function commandLineOptions_IpVersionToJSON(object: CommandLineOptions_IpVersion): string {
  switch (object) {
    case CommandLineOptions_IpVersion.v4:
      return "v4";
    case CommandLineOptions_IpVersion.v6:
      return "v6";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CommandLineOptions_IpVersion");
  }
}

export function commandLineOptions_IpVersionToNumber(object: CommandLineOptions_IpVersion): number {
  switch (object) {
    case CommandLineOptions_IpVersion.v4:
      return 0;
    case CommandLineOptions_IpVersion.v6:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CommandLineOptions_IpVersion");
  }
}

export enum CommandLineOptions_Mode {
  /** Serve - Validate configs and then serve traffic normally. */
  Serve = "Serve",
  /** Validate - Validate configs and exit. */
  Validate = "Validate",
  /** InitOnly - Completely load and initialize the config, and then exit without running the listener loop. */
  InitOnly = "InitOnly",
}

export function commandLineOptions_ModeFromJSON(object: any): CommandLineOptions_Mode {
  switch (object) {
    case 0:
    case "Serve":
      return CommandLineOptions_Mode.Serve;
    case 1:
    case "Validate":
      return CommandLineOptions_Mode.Validate;
    case 2:
    case "InitOnly":
      return CommandLineOptions_Mode.InitOnly;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CommandLineOptions_Mode");
  }
}

export function commandLineOptions_ModeToJSON(object: CommandLineOptions_Mode): string {
  switch (object) {
    case CommandLineOptions_Mode.Serve:
      return "Serve";
    case CommandLineOptions_Mode.Validate:
      return "Validate";
    case CommandLineOptions_Mode.InitOnly:
      return "InitOnly";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CommandLineOptions_Mode");
  }
}

export function commandLineOptions_ModeToNumber(object: CommandLineOptions_Mode): number {
  switch (object) {
    case CommandLineOptions_Mode.Serve:
      return 0;
    case CommandLineOptions_Mode.Validate:
      return 1;
    case CommandLineOptions_Mode.InitOnly:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CommandLineOptions_Mode");
  }
}

function createBaseServerInfo(): ServerInfo {
  return { $type: "envoy.admin.v2alpha.ServerInfo" };
}

export const ServerInfo: MessageFns<ServerInfo, "envoy.admin.v2alpha.ServerInfo"> = {
  $type: "envoy.admin.v2alpha.ServerInfo" as const,

  encode(message: ServerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined && message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.state !== undefined && message.state !== ServerInfo_State.LIVE) {
      writer.uint32(16).int32(serverInfo_StateToNumber(message.state));
    }
    if (message.uptime_current_epoch !== undefined) {
      Duration.encode(message.uptime_current_epoch, writer.uint32(26).fork()).join();
    }
    if (message.uptime_all_epochs !== undefined) {
      Duration.encode(message.uptime_all_epochs, writer.uint32(34).fork()).join();
    }
    if (message.hot_restart_version !== undefined && message.hot_restart_version !== "") {
      writer.uint32(42).string(message.hot_restart_version);
    }
    if (message.command_line_options !== undefined) {
      CommandLineOptions.encode(message.command_line_options, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = serverInfo_StateFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uptime_current_epoch = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.uptime_all_epochs = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hot_restart_version = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.command_line_options = CommandLineOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerInfo {
    return {
      $type: ServerInfo.$type,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
      state: isSet(object.state) ? serverInfo_StateFromJSON(object.state) : undefined,
      uptime_current_epoch: isSet(object.uptime_current_epoch)
        ? Duration.fromJSON(object.uptime_current_epoch)
        : undefined,
      uptime_all_epochs: isSet(object.uptime_all_epochs) ? Duration.fromJSON(object.uptime_all_epochs) : undefined,
      hot_restart_version: isSet(object.hot_restart_version)
        ? globalThis.String(object.hot_restart_version)
        : undefined,
      command_line_options: isSet(object.command_line_options)
        ? CommandLineOptions.fromJSON(object.command_line_options)
        : undefined,
    };
  },

  toJSON(message: ServerInfo): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    if (message.state !== undefined) {
      obj.state = serverInfo_StateToJSON(message.state);
    }
    if (message.uptime_current_epoch !== undefined) {
      obj.uptime_current_epoch = Duration.toJSON(message.uptime_current_epoch);
    }
    if (message.uptime_all_epochs !== undefined) {
      obj.uptime_all_epochs = Duration.toJSON(message.uptime_all_epochs);
    }
    if (message.hot_restart_version !== undefined) {
      obj.hot_restart_version = message.hot_restart_version;
    }
    if (message.command_line_options !== undefined) {
      obj.command_line_options = CommandLineOptions.toJSON(message.command_line_options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerInfo>, I>>(base?: I): ServerInfo {
    return ServerInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerInfo>, I>>(object: I): ServerInfo {
    const message = createBaseServerInfo();
    message.version = object.version ?? undefined;
    message.state = object.state ?? undefined;
    message.uptime_current_epoch = (object.uptime_current_epoch !== undefined && object.uptime_current_epoch !== null)
      ? Duration.fromPartial(object.uptime_current_epoch)
      : undefined;
    message.uptime_all_epochs = (object.uptime_all_epochs !== undefined && object.uptime_all_epochs !== null)
      ? Duration.fromPartial(object.uptime_all_epochs)
      : undefined;
    message.hot_restart_version = object.hot_restart_version ?? undefined;
    message.command_line_options = (object.command_line_options !== undefined && object.command_line_options !== null)
      ? CommandLineOptions.fromPartial(object.command_line_options)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ServerInfo.$type, ServerInfo);

function createBaseCommandLineOptions(): CommandLineOptions {
  return { $type: "envoy.admin.v2alpha.CommandLineOptions" };
}

export const CommandLineOptions: MessageFns<CommandLineOptions, "envoy.admin.v2alpha.CommandLineOptions"> = {
  $type: "envoy.admin.v2alpha.CommandLineOptions" as const,

  encode(message: CommandLineOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.base_id !== undefined && message.base_id !== 0) {
      writer.uint32(8).uint64(message.base_id);
    }
    if (message.concurrency !== undefined && message.concurrency !== 0) {
      writer.uint32(16).uint32(message.concurrency);
    }
    if (message.config_path !== undefined && message.config_path !== "") {
      writer.uint32(26).string(message.config_path);
    }
    if (message.config_yaml !== undefined && message.config_yaml !== "") {
      writer.uint32(34).string(message.config_yaml);
    }
    if (message.allow_unknown_static_fields !== undefined && message.allow_unknown_static_fields !== false) {
      writer.uint32(40).bool(message.allow_unknown_static_fields);
    }
    if (message.reject_unknown_dynamic_fields !== undefined && message.reject_unknown_dynamic_fields !== false) {
      writer.uint32(208).bool(message.reject_unknown_dynamic_fields);
    }
    if (message.admin_address_path !== undefined && message.admin_address_path !== "") {
      writer.uint32(50).string(message.admin_address_path);
    }
    if (
      message.local_address_ip_version !== undefined &&
      message.local_address_ip_version !== CommandLineOptions_IpVersion.v4
    ) {
      writer.uint32(56).int32(commandLineOptions_IpVersionToNumber(message.local_address_ip_version));
    }
    if (message.log_level !== undefined && message.log_level !== "") {
      writer.uint32(66).string(message.log_level);
    }
    if (message.component_log_level !== undefined && message.component_log_level !== "") {
      writer.uint32(74).string(message.component_log_level);
    }
    if (message.log_format !== undefined && message.log_format !== "") {
      writer.uint32(82).string(message.log_format);
    }
    if (message.log_format_escaped !== undefined && message.log_format_escaped !== false) {
      writer.uint32(216).bool(message.log_format_escaped);
    }
    if (message.log_path !== undefined && message.log_path !== "") {
      writer.uint32(90).string(message.log_path);
    }
    if (message.service_cluster !== undefined && message.service_cluster !== "") {
      writer.uint32(106).string(message.service_cluster);
    }
    if (message.service_node !== undefined && message.service_node !== "") {
      writer.uint32(114).string(message.service_node);
    }
    if (message.service_zone !== undefined && message.service_zone !== "") {
      writer.uint32(122).string(message.service_zone);
    }
    if (message.file_flush_interval !== undefined) {
      Duration.encode(message.file_flush_interval, writer.uint32(130).fork()).join();
    }
    if (message.drain_time !== undefined) {
      Duration.encode(message.drain_time, writer.uint32(138).fork()).join();
    }
    if (message.parent_shutdown_time !== undefined) {
      Duration.encode(message.parent_shutdown_time, writer.uint32(146).fork()).join();
    }
    if (message.mode !== undefined && message.mode !== CommandLineOptions_Mode.Serve) {
      writer.uint32(152).int32(commandLineOptions_ModeToNumber(message.mode));
    }
    if (message.max_stats !== undefined && message.max_stats !== 0) {
      writer.uint32(160).uint64(message.max_stats);
    }
    if (message.max_obj_name_len !== undefined && message.max_obj_name_len !== 0) {
      writer.uint32(168).uint64(message.max_obj_name_len);
    }
    if (message.disable_hot_restart !== undefined && message.disable_hot_restart !== false) {
      writer.uint32(176).bool(message.disable_hot_restart);
    }
    if (message.enable_mutex_tracing !== undefined && message.enable_mutex_tracing !== false) {
      writer.uint32(184).bool(message.enable_mutex_tracing);
    }
    if (message.restart_epoch !== undefined && message.restart_epoch !== 0) {
      writer.uint32(192).uint32(message.restart_epoch);
    }
    if (message.cpuset_threads !== undefined && message.cpuset_threads !== false) {
      writer.uint32(200).bool(message.cpuset_threads);
    }
    if (message.disabled_extensions !== undefined && message.disabled_extensions.length !== 0) {
      for (const v of message.disabled_extensions) {
        writer.uint32(226).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandLineOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandLineOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.base_id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.concurrency = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.config_path = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.config_yaml = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.allow_unknown_static_fields = reader.bool();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.reject_unknown_dynamic_fields = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.admin_address_path = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.local_address_ip_version = commandLineOptions_IpVersionFromJSON(reader.int32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.log_level = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.component_log_level = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.log_format = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.log_format_escaped = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.log_path = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.service_cluster = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.service_node = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.service_zone = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.file_flush_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.drain_time = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.parent_shutdown_time = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.mode = commandLineOptions_ModeFromJSON(reader.int32());
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.max_stats = longToNumber(reader.uint64());
          continue;
        }
        case 21: {
          if (tag !== 168) {
            break;
          }

          message.max_obj_name_len = longToNumber(reader.uint64());
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.disable_hot_restart = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 184) {
            break;
          }

          message.enable_mutex_tracing = reader.bool();
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.restart_epoch = reader.uint32();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.cpuset_threads = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          if (message.disabled_extensions === undefined) {
            message.disabled_extensions = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.disabled_extensions!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandLineOptions {
    return {
      $type: CommandLineOptions.$type,
      base_id: isSet(object.base_id) ? globalThis.Number(object.base_id) : undefined,
      concurrency: isSet(object.concurrency) ? globalThis.Number(object.concurrency) : undefined,
      config_path: isSet(object.config_path) ? globalThis.String(object.config_path) : undefined,
      config_yaml: isSet(object.config_yaml) ? globalThis.String(object.config_yaml) : undefined,
      allow_unknown_static_fields: isSet(object.allow_unknown_static_fields)
        ? globalThis.Boolean(object.allow_unknown_static_fields)
        : undefined,
      reject_unknown_dynamic_fields: isSet(object.reject_unknown_dynamic_fields)
        ? globalThis.Boolean(object.reject_unknown_dynamic_fields)
        : undefined,
      admin_address_path: isSet(object.admin_address_path) ? globalThis.String(object.admin_address_path) : undefined,
      local_address_ip_version: isSet(object.local_address_ip_version)
        ? commandLineOptions_IpVersionFromJSON(object.local_address_ip_version)
        : undefined,
      log_level: isSet(object.log_level) ? globalThis.String(object.log_level) : undefined,
      component_log_level: isSet(object.component_log_level)
        ? globalThis.String(object.component_log_level)
        : undefined,
      log_format: isSet(object.log_format) ? globalThis.String(object.log_format) : undefined,
      log_format_escaped: isSet(object.log_format_escaped) ? globalThis.Boolean(object.log_format_escaped) : undefined,
      log_path: isSet(object.log_path) ? globalThis.String(object.log_path) : undefined,
      service_cluster: isSet(object.service_cluster) ? globalThis.String(object.service_cluster) : undefined,
      service_node: isSet(object.service_node) ? globalThis.String(object.service_node) : undefined,
      service_zone: isSet(object.service_zone) ? globalThis.String(object.service_zone) : undefined,
      file_flush_interval: isSet(object.file_flush_interval)
        ? Duration.fromJSON(object.file_flush_interval)
        : undefined,
      drain_time: isSet(object.drain_time) ? Duration.fromJSON(object.drain_time) : undefined,
      parent_shutdown_time: isSet(object.parent_shutdown_time)
        ? Duration.fromJSON(object.parent_shutdown_time)
        : undefined,
      mode: isSet(object.mode) ? commandLineOptions_ModeFromJSON(object.mode) : undefined,
      max_stats: isSet(object.max_stats) ? globalThis.Number(object.max_stats) : undefined,
      max_obj_name_len: isSet(object.max_obj_name_len) ? globalThis.Number(object.max_obj_name_len) : undefined,
      disable_hot_restart: isSet(object.disable_hot_restart)
        ? globalThis.Boolean(object.disable_hot_restart)
        : undefined,
      enable_mutex_tracing: isSet(object.enable_mutex_tracing)
        ? globalThis.Boolean(object.enable_mutex_tracing)
        : undefined,
      restart_epoch: isSet(object.restart_epoch) ? globalThis.Number(object.restart_epoch) : undefined,
      cpuset_threads: isSet(object.cpuset_threads) ? globalThis.Boolean(object.cpuset_threads) : undefined,
      disabled_extensions: globalThis.Array.isArray(object?.disabled_extensions)
        ? object.disabled_extensions.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: CommandLineOptions): unknown {
    const obj: any = {};
    if (message.base_id !== undefined) {
      obj.base_id = Math.round(message.base_id);
    }
    if (message.concurrency !== undefined) {
      obj.concurrency = Math.round(message.concurrency);
    }
    if (message.config_path !== undefined) {
      obj.config_path = message.config_path;
    }
    if (message.config_yaml !== undefined) {
      obj.config_yaml = message.config_yaml;
    }
    if (message.allow_unknown_static_fields !== undefined) {
      obj.allow_unknown_static_fields = message.allow_unknown_static_fields;
    }
    if (message.reject_unknown_dynamic_fields !== undefined) {
      obj.reject_unknown_dynamic_fields = message.reject_unknown_dynamic_fields;
    }
    if (message.admin_address_path !== undefined) {
      obj.admin_address_path = message.admin_address_path;
    }
    if (message.local_address_ip_version !== undefined) {
      obj.local_address_ip_version = commandLineOptions_IpVersionToJSON(message.local_address_ip_version);
    }
    if (message.log_level !== undefined) {
      obj.log_level = message.log_level;
    }
    if (message.component_log_level !== undefined) {
      obj.component_log_level = message.component_log_level;
    }
    if (message.log_format !== undefined) {
      obj.log_format = message.log_format;
    }
    if (message.log_format_escaped !== undefined) {
      obj.log_format_escaped = message.log_format_escaped;
    }
    if (message.log_path !== undefined) {
      obj.log_path = message.log_path;
    }
    if (message.service_cluster !== undefined) {
      obj.service_cluster = message.service_cluster;
    }
    if (message.service_node !== undefined) {
      obj.service_node = message.service_node;
    }
    if (message.service_zone !== undefined) {
      obj.service_zone = message.service_zone;
    }
    if (message.file_flush_interval !== undefined) {
      obj.file_flush_interval = Duration.toJSON(message.file_flush_interval);
    }
    if (message.drain_time !== undefined) {
      obj.drain_time = Duration.toJSON(message.drain_time);
    }
    if (message.parent_shutdown_time !== undefined) {
      obj.parent_shutdown_time = Duration.toJSON(message.parent_shutdown_time);
    }
    if (message.mode !== undefined) {
      obj.mode = commandLineOptions_ModeToJSON(message.mode);
    }
    if (message.max_stats !== undefined) {
      obj.max_stats = Math.round(message.max_stats);
    }
    if (message.max_obj_name_len !== undefined) {
      obj.max_obj_name_len = Math.round(message.max_obj_name_len);
    }
    if (message.disable_hot_restart !== undefined) {
      obj.disable_hot_restart = message.disable_hot_restart;
    }
    if (message.enable_mutex_tracing !== undefined) {
      obj.enable_mutex_tracing = message.enable_mutex_tracing;
    }
    if (message.restart_epoch !== undefined) {
      obj.restart_epoch = Math.round(message.restart_epoch);
    }
    if (message.cpuset_threads !== undefined) {
      obj.cpuset_threads = message.cpuset_threads;
    }
    if (message.disabled_extensions?.length) {
      obj.disabled_extensions = message.disabled_extensions;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandLineOptions>, I>>(base?: I): CommandLineOptions {
    return CommandLineOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandLineOptions>, I>>(object: I): CommandLineOptions {
    const message = createBaseCommandLineOptions();
    message.base_id = object.base_id ?? undefined;
    message.concurrency = object.concurrency ?? undefined;
    message.config_path = object.config_path ?? undefined;
    message.config_yaml = object.config_yaml ?? undefined;
    message.allow_unknown_static_fields = object.allow_unknown_static_fields ?? undefined;
    message.reject_unknown_dynamic_fields = object.reject_unknown_dynamic_fields ?? undefined;
    message.admin_address_path = object.admin_address_path ?? undefined;
    message.local_address_ip_version = object.local_address_ip_version ?? undefined;
    message.log_level = object.log_level ?? undefined;
    message.component_log_level = object.component_log_level ?? undefined;
    message.log_format = object.log_format ?? undefined;
    message.log_format_escaped = object.log_format_escaped ?? undefined;
    message.log_path = object.log_path ?? undefined;
    message.service_cluster = object.service_cluster ?? undefined;
    message.service_node = object.service_node ?? undefined;
    message.service_zone = object.service_zone ?? undefined;
    message.file_flush_interval = (object.file_flush_interval !== undefined && object.file_flush_interval !== null)
      ? Duration.fromPartial(object.file_flush_interval)
      : undefined;
    message.drain_time = (object.drain_time !== undefined && object.drain_time !== null)
      ? Duration.fromPartial(object.drain_time)
      : undefined;
    message.parent_shutdown_time = (object.parent_shutdown_time !== undefined && object.parent_shutdown_time !== null)
      ? Duration.fromPartial(object.parent_shutdown_time)
      : undefined;
    message.mode = object.mode ?? undefined;
    message.max_stats = object.max_stats ?? undefined;
    message.max_obj_name_len = object.max_obj_name_len ?? undefined;
    message.disable_hot_restart = object.disable_hot_restart ?? undefined;
    message.enable_mutex_tracing = object.enable_mutex_tracing ?? undefined;
    message.restart_epoch = object.restart_epoch ?? undefined;
    message.cpuset_threads = object.cpuset_threads ?? undefined;
    message.disabled_extensions = object.disabled_extensions?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(CommandLineOptions.$type, CommandLineOptions);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
