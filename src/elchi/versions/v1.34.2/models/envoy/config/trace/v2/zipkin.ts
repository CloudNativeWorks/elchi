// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v2/zipkin.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.config.trace.v2";

/**
 * Configuration for the Zipkin tracer.
 * [#extension: envoy.tracers.zipkin]
 * [#next-free-field: 6]
 */
export interface ZipkinConfig {
  $type: "envoy.config.trace.v2.ZipkinConfig";
  /**
   * The cluster manager cluster that hosts the Zipkin collectors. Note that the
   * Zipkin cluster must be defined in the :ref:`Bootstrap static cluster
   * resources <envoy_api_field_config.bootstrap.v2.Bootstrap.StaticResources.clusters>`.
   */
  collector_cluster?:
    | string
    | undefined;
  /**
   * The API endpoint of the Zipkin service where the spans will be sent. When
   * using a standard Zipkin installation, the API endpoint is typically
   * /api/v1/spans, which is the default value.
   */
  collector_endpoint?:
    | string
    | undefined;
  /**
   * Determines whether a 128bit trace id will be used when creating a new
   * trace instance. The default value is false, which will result in a 64 bit trace id being used.
   */
  trace_id_128bit?:
    | boolean
    | undefined;
  /**
   * Determines whether client and server spans will share the same span context.
   * The default value is true.
   */
  shared_span_context?:
    | boolean
    | undefined;
  /**
   * Determines the selected collector endpoint version. By default, the ``HTTP_JSON_V1`` will be
   * used.
   */
  collector_endpoint_version?: ZipkinConfig_CollectorEndpointVersion | undefined;
}

/** Available Zipkin collector endpoint versions. */
export enum ZipkinConfig_CollectorEndpointVersion {
  /**
   * HTTP_JSON_V1 - Zipkin API v1, JSON over HTTP.
   * [#comment: The default implementation of Zipkin client before this field is added was only v1
   * and the way user configure this was by not explicitly specifying the version. Consequently,
   * before this is added, the corresponding Zipkin collector expected to receive v1 payload.
   * Hence the motivation of adding HTTP_JSON_V1 as the default is to avoid a breaking change when
   * user upgrading Envoy with this change. Furthermore, we also immediately deprecate this field,
   * since in Zipkin realm this v1 version is considered to be not preferable anymore.]
   *
   * @deprecated
   */
  HTTP_JSON_V1 = "HTTP_JSON_V1",
  /** HTTP_JSON - Zipkin API v2, JSON over HTTP. */
  HTTP_JSON = "HTTP_JSON",
  /** HTTP_PROTO - Zipkin API v2, protobuf over HTTP. */
  HTTP_PROTO = "HTTP_PROTO",
  /** GRPC - [#not-implemented-hide:] */
  GRPC = "GRPC",
}

export function zipkinConfig_CollectorEndpointVersionFromJSON(object: any): ZipkinConfig_CollectorEndpointVersion {
  switch (object) {
    case 0:
    case "HTTP_JSON_V1":
      return ZipkinConfig_CollectorEndpointVersion.HTTP_JSON_V1;
    case 1:
    case "HTTP_JSON":
      return ZipkinConfig_CollectorEndpointVersion.HTTP_JSON;
    case 2:
    case "HTTP_PROTO":
      return ZipkinConfig_CollectorEndpointVersion.HTTP_PROTO;
    case 3:
    case "GRPC":
      return ZipkinConfig_CollectorEndpointVersion.GRPC;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ZipkinConfig_CollectorEndpointVersion",
      );
  }
}

export function zipkinConfig_CollectorEndpointVersionToJSON(object: ZipkinConfig_CollectorEndpointVersion): string {
  switch (object) {
    case ZipkinConfig_CollectorEndpointVersion.HTTP_JSON_V1:
      return "HTTP_JSON_V1";
    case ZipkinConfig_CollectorEndpointVersion.HTTP_JSON:
      return "HTTP_JSON";
    case ZipkinConfig_CollectorEndpointVersion.HTTP_PROTO:
      return "HTTP_PROTO";
    case ZipkinConfig_CollectorEndpointVersion.GRPC:
      return "GRPC";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ZipkinConfig_CollectorEndpointVersion",
      );
  }
}

export function zipkinConfig_CollectorEndpointVersionToNumber(object: ZipkinConfig_CollectorEndpointVersion): number {
  switch (object) {
    case ZipkinConfig_CollectorEndpointVersion.HTTP_JSON_V1:
      return 0;
    case ZipkinConfig_CollectorEndpointVersion.HTTP_JSON:
      return 1;
    case ZipkinConfig_CollectorEndpointVersion.HTTP_PROTO:
      return 2;
    case ZipkinConfig_CollectorEndpointVersion.GRPC:
      return 3;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ZipkinConfig_CollectorEndpointVersion",
      );
  }
}

function createBaseZipkinConfig(): ZipkinConfig {
  return { $type: "envoy.config.trace.v2.ZipkinConfig" };
}

export const ZipkinConfig: MessageFns<ZipkinConfig, "envoy.config.trace.v2.ZipkinConfig"> = {
  $type: "envoy.config.trace.v2.ZipkinConfig" as const,

  encode(message: ZipkinConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collector_cluster !== undefined && message.collector_cluster !== "") {
      writer.uint32(10).string(message.collector_cluster);
    }
    if (message.collector_endpoint !== undefined && message.collector_endpoint !== "") {
      writer.uint32(18).string(message.collector_endpoint);
    }
    if (message.trace_id_128bit !== undefined && message.trace_id_128bit !== false) {
      writer.uint32(24).bool(message.trace_id_128bit);
    }
    if (message.shared_span_context !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.shared_span_context! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (
      message.collector_endpoint_version !== undefined &&
      message.collector_endpoint_version !== ZipkinConfig_CollectorEndpointVersion.HTTP_JSON_V1
    ) {
      writer.uint32(40).int32(zipkinConfig_CollectorEndpointVersionToNumber(message.collector_endpoint_version));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZipkinConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZipkinConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collector_cluster = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.collector_endpoint = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.trace_id_128bit = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shared_span_context = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.collector_endpoint_version = zipkinConfig_CollectorEndpointVersionFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZipkinConfig {
    return {
      $type: ZipkinConfig.$type,
      collector_cluster: isSet(object.collector_cluster) ? globalThis.String(object.collector_cluster) : undefined,
      collector_endpoint: isSet(object.collector_endpoint) ? globalThis.String(object.collector_endpoint) : undefined,
      trace_id_128bit: isSet(object.trace_id_128bit) ? globalThis.Boolean(object.trace_id_128bit) : undefined,
      shared_span_context: isSet(object.shared_span_context) ? Boolean(object.shared_span_context) : undefined,
      collector_endpoint_version: isSet(object.collector_endpoint_version)
        ? zipkinConfig_CollectorEndpointVersionFromJSON(object.collector_endpoint_version)
        : undefined,
    };
  },

  toJSON(message: ZipkinConfig): unknown {
    const obj: any = {};
    if (message.collector_cluster !== undefined) {
      obj.collector_cluster = message.collector_cluster;
    }
    if (message.collector_endpoint !== undefined) {
      obj.collector_endpoint = message.collector_endpoint;
    }
    if (message.trace_id_128bit !== undefined) {
      obj.trace_id_128bit = message.trace_id_128bit;
    }
    if (message.shared_span_context !== undefined) {
      obj.shared_span_context = message.shared_span_context;
    }
    if (message.collector_endpoint_version !== undefined) {
      obj.collector_endpoint_version = zipkinConfig_CollectorEndpointVersionToJSON(message.collector_endpoint_version);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZipkinConfig>, I>>(base?: I): ZipkinConfig {
    return ZipkinConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZipkinConfig>, I>>(object: I): ZipkinConfig {
    const message = createBaseZipkinConfig();
    message.collector_cluster = object.collector_cluster ?? undefined;
    message.collector_endpoint = object.collector_endpoint ?? undefined;
    message.trace_id_128bit = object.trace_id_128bit ?? undefined;
    message.shared_span_context = object.shared_span_context ?? undefined;
    message.collector_endpoint_version = object.collector_endpoint_version ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ZipkinConfig.$type, ZipkinConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
