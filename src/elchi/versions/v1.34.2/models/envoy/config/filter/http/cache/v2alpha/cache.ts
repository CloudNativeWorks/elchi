// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/http/cache/v2alpha/cache.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../../../google/protobuf/any";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { QueryParameterMatcher } from "../../../../../api/v2/route/route_components";
import { StringMatcher } from "../../../../../type/matcher/string";

export const protobufPackage = "envoy.config.filter.http.cache.v2alpha";

export interface CacheConfig {
  $type: "envoy.config.filter.http.cache.v2alpha.CacheConfig";
  /** Config specific to the cache storage implementation. */
  typed_config?:
    | Any
    | undefined;
  /**
   * List of matching rules that defines allowed *Vary* headers.
   *
   * The *vary* response header holds a list of header names that affect the
   * contents of a response, as described by
   * https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.
   *
   * During insertion, *allowed_vary_headers* acts as a allowlist: if a
   * response's *vary* header mentions any header names that aren't matched by any rules in
   * *allowed_vary_headers*, that response will not be cached.
   *
   * During lookup, *allowed_vary_headers* controls what request headers will be
   * sent to the cache storage implementation.
   */
  allowed_vary_headers?:
    | StringMatcher[]
    | undefined;
  /**
   * [#not-implemented-hide:]
   * <TODO(toddmgreer) implement key customization>
   *
   * Modifies cache key creation by restricting which parts of the URL are included.
   */
  key_creator_params?:
    | CacheConfig_KeyCreatorParams
    | undefined;
  /**
   * [#not-implemented-hide:]
   * <TODO(toddmgreer) implement size limit>
   *
   * Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
   * storage implementation may have its own limit beyond which it will reject insertions).
   */
  max_body_bytes?: number | undefined;
}

/**
 * [#not-implemented-hide:]
 * Modifies cache key creation by restricting which parts of the URL are included.
 */
export interface CacheConfig_KeyCreatorParams {
  $type: "envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams";
  /**
   * If true, exclude the URL scheme from the cache key. Set to true if your origins always
   * produce the same response for http and https requests.
   */
  exclude_scheme?:
    | boolean
    | undefined;
  /**
   * If true, exclude the host from the cache key. Set to true if your origins' responses don't
   * ever depend on host.
   */
  exclude_host?:
    | boolean
    | undefined;
  /**
   * If *query_parameters_included* is nonempty, only query parameters matched
   * by one or more of its matchers are included in the cache key. Any other
   * query params will not affect cache lookup.
   */
  query_parameters_included?:
    | QueryParameterMatcher[]
    | undefined;
  /**
   * If *query_parameters_excluded* is nonempty, query parameters matched by one
   * or more of its matchers are excluded from the cache key (even if also
   * matched by *query_parameters_included*), and will not affect cache lookup.
   */
  query_parameters_excluded?: QueryParameterMatcher[] | undefined;
}

function createBaseCacheConfig(): CacheConfig {
  return { $type: "envoy.config.filter.http.cache.v2alpha.CacheConfig" };
}

export const CacheConfig: MessageFns<CacheConfig, "envoy.config.filter.http.cache.v2alpha.CacheConfig"> = {
  $type: "envoy.config.filter.http.cache.v2alpha.CacheConfig" as const,

  encode(message: CacheConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.typed_config !== undefined) {
      Any.encode(message.typed_config, writer.uint32(10).fork()).join();
    }
    if (message.allowed_vary_headers !== undefined && message.allowed_vary_headers.length !== 0) {
      for (const v of message.allowed_vary_headers) {
        StringMatcher.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.key_creator_params !== undefined) {
      CacheConfig_KeyCreatorParams.encode(message.key_creator_params, writer.uint32(26).fork()).join();
    }
    if (message.max_body_bytes !== undefined && message.max_body_bytes !== 0) {
      writer.uint32(32).uint32(message.max_body_bytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CacheConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCacheConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.typed_config = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.allowed_vary_headers === undefined) {
            message.allowed_vary_headers = [];
          }
          const el = StringMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.allowed_vary_headers!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.key_creator_params = CacheConfig_KeyCreatorParams.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.max_body_bytes = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CacheConfig {
    return {
      $type: CacheConfig.$type,
      typed_config: isSet(object.typed_config) ? Any.fromJSON(object.typed_config) : undefined,
      allowed_vary_headers: globalThis.Array.isArray(object?.allowed_vary_headers)
        ? object.allowed_vary_headers.map((e: any) => StringMatcher.fromJSON(e))
        : undefined,
      key_creator_params: isSet(object.key_creator_params)
        ? CacheConfig_KeyCreatorParams.fromJSON(object.key_creator_params)
        : undefined,
      max_body_bytes: isSet(object.max_body_bytes) ? globalThis.Number(object.max_body_bytes) : undefined,
    };
  },

  toJSON(message: CacheConfig): unknown {
    const obj: any = {};
    if (message.typed_config !== undefined) {
      obj.typed_config = Any.toJSON(message.typed_config);
    }
    if (message.allowed_vary_headers?.length) {
      obj.allowed_vary_headers = message.allowed_vary_headers.map((e) => StringMatcher.toJSON(e));
    }
    if (message.key_creator_params !== undefined) {
      obj.key_creator_params = CacheConfig_KeyCreatorParams.toJSON(message.key_creator_params);
    }
    if (message.max_body_bytes !== undefined) {
      obj.max_body_bytes = Math.round(message.max_body_bytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CacheConfig>, I>>(base?: I): CacheConfig {
    return CacheConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CacheConfig>, I>>(object: I): CacheConfig {
    const message = createBaseCacheConfig();
    message.typed_config = (object.typed_config !== undefined && object.typed_config !== null)
      ? Any.fromPartial(object.typed_config)
      : undefined;
    message.allowed_vary_headers = object.allowed_vary_headers?.map((e) => StringMatcher.fromPartial(e)) || undefined;
    message.key_creator_params = (object.key_creator_params !== undefined && object.key_creator_params !== null)
      ? CacheConfig_KeyCreatorParams.fromPartial(object.key_creator_params)
      : undefined;
    message.max_body_bytes = object.max_body_bytes ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CacheConfig.$type, CacheConfig);

function createBaseCacheConfig_KeyCreatorParams(): CacheConfig_KeyCreatorParams {
  return { $type: "envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams" };
}

export const CacheConfig_KeyCreatorParams: MessageFns<
  CacheConfig_KeyCreatorParams,
  "envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams"
> = {
  $type: "envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams" as const,

  encode(message: CacheConfig_KeyCreatorParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.exclude_scheme !== undefined && message.exclude_scheme !== false) {
      writer.uint32(8).bool(message.exclude_scheme);
    }
    if (message.exclude_host !== undefined && message.exclude_host !== false) {
      writer.uint32(16).bool(message.exclude_host);
    }
    if (message.query_parameters_included !== undefined && message.query_parameters_included.length !== 0) {
      for (const v of message.query_parameters_included) {
        QueryParameterMatcher.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.query_parameters_excluded !== undefined && message.query_parameters_excluded.length !== 0) {
      for (const v of message.query_parameters_excluded) {
        QueryParameterMatcher.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CacheConfig_KeyCreatorParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCacheConfig_KeyCreatorParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.exclude_scheme = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.exclude_host = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.query_parameters_included === undefined) {
            message.query_parameters_included = [];
          }
          const el = QueryParameterMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.query_parameters_included!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.query_parameters_excluded === undefined) {
            message.query_parameters_excluded = [];
          }
          const el = QueryParameterMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.query_parameters_excluded!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CacheConfig_KeyCreatorParams {
    return {
      $type: CacheConfig_KeyCreatorParams.$type,
      exclude_scheme: isSet(object.exclude_scheme) ? globalThis.Boolean(object.exclude_scheme) : undefined,
      exclude_host: isSet(object.exclude_host) ? globalThis.Boolean(object.exclude_host) : undefined,
      query_parameters_included: globalThis.Array.isArray(object?.query_parameters_included)
        ? object.query_parameters_included.map((e: any) => QueryParameterMatcher.fromJSON(e))
        : undefined,
      query_parameters_excluded: globalThis.Array.isArray(object?.query_parameters_excluded)
        ? object.query_parameters_excluded.map((e: any) => QueryParameterMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: CacheConfig_KeyCreatorParams): unknown {
    const obj: any = {};
    if (message.exclude_scheme !== undefined) {
      obj.exclude_scheme = message.exclude_scheme;
    }
    if (message.exclude_host !== undefined) {
      obj.exclude_host = message.exclude_host;
    }
    if (message.query_parameters_included?.length) {
      obj.query_parameters_included = message.query_parameters_included.map((e) => QueryParameterMatcher.toJSON(e));
    }
    if (message.query_parameters_excluded?.length) {
      obj.query_parameters_excluded = message.query_parameters_excluded.map((e) => QueryParameterMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CacheConfig_KeyCreatorParams>, I>>(base?: I): CacheConfig_KeyCreatorParams {
    return CacheConfig_KeyCreatorParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CacheConfig_KeyCreatorParams>, I>>(object: I): CacheConfig_KeyCreatorParams {
    const message = createBaseCacheConfig_KeyCreatorParams();
    message.exclude_scheme = object.exclude_scheme ?? undefined;
    message.exclude_host = object.exclude_host ?? undefined;
    message.query_parameters_included =
      object.query_parameters_included?.map((e) => QueryParameterMatcher.fromPartial(e)) || undefined;
    message.query_parameters_excluded =
      object.query_parameters_excluded?.map((e) => QueryParameterMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(CacheConfig_KeyCreatorParams.$type, CacheConfig_KeyCreatorParams);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
