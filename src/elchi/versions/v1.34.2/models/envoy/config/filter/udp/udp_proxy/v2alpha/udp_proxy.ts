// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/udp/udp_proxy/v2alpha/udp_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.config.filter.udp.udp_proxy.v2alpha";

/** Configuration for the UDP proxy filter. */
export interface UdpProxyConfig {
  $type: "envoy.config.filter.udp.udp_proxy.v2alpha.UdpProxyConfig";
  /** The stat prefix used when emitting UDP proxy filter stats. */
  stat_prefix?: string | undefined;
  route_specifier?:
    | //
    /** The upstream cluster to connect to. */
    { $case: "cluster"; cluster: string }
    | undefined;
  /**
   * The idle timeout for sessions. Idle is defined as no datagrams between received or sent by
   * the session. The default if not specified is 1 minute.
   */
  idle_timeout?: Duration | undefined;
}

function createBaseUdpProxyConfig(): UdpProxyConfig {
  return { $type: "envoy.config.filter.udp.udp_proxy.v2alpha.UdpProxyConfig", route_specifier: undefined };
}

export const UdpProxyConfig: MessageFns<UdpProxyConfig, "envoy.config.filter.udp.udp_proxy.v2alpha.UdpProxyConfig"> = {
  $type: "envoy.config.filter.udp.udp_proxy.v2alpha.UdpProxyConfig" as const,

  encode(message: UdpProxyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    switch (message.route_specifier?.$case) {
      case "cluster":
        writer.uint32(18).string(message.route_specifier.cluster);
        break;
    }
    if (message.idle_timeout !== undefined) {
      Duration.encode(message.idle_timeout, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UdpProxyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUdpProxyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.route_specifier = { $case: "cluster", cluster: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.idle_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UdpProxyConfig {
    return {
      $type: UdpProxyConfig.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      route_specifier: isSet(object.cluster)
        ? { $case: "cluster", cluster: globalThis.String(object.cluster) }
        : undefined,
      idle_timeout: isSet(object.idle_timeout) ? Duration.fromJSON(object.idle_timeout) : undefined,
    };
  },

  toJSON(message: UdpProxyConfig): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.route_specifier?.$case === "cluster") {
      obj.cluster = message.route_specifier.cluster;
    }
    if (message.idle_timeout !== undefined) {
      obj.idle_timeout = Duration.toJSON(message.idle_timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UdpProxyConfig>, I>>(base?: I): UdpProxyConfig {
    return UdpProxyConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UdpProxyConfig>, I>>(object: I): UdpProxyConfig {
    const message = createBaseUdpProxyConfig();
    message.stat_prefix = object.stat_prefix ?? undefined;
    if (
      object.route_specifier?.$case === "cluster" &&
      object.route_specifier?.cluster !== undefined &&
      object.route_specifier?.cluster !== null
    ) {
      message.route_specifier = { $case: "cluster", cluster: object.route_specifier.cluster };
    }
    message.idle_timeout = (object.idle_timeout !== undefined && object.idle_timeout !== null)
      ? Duration.fromPartial(object.idle_timeout)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(UdpProxyConfig.$type, UdpProxyConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
