// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/dubbo_proxy/v2alpha1/route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { HeaderMatcher, WeightedCluster } from "../../../../../api/v2/route/route_components";
import { StringMatcher } from "../../../../../type/matcher/string";
import { Int64Range } from "../../../../../type/range";

export const protobufPackage = "envoy.config.filter.network.dubbo_proxy.v2alpha1";

/** [#next-free-field: 6] */
export interface RouteConfiguration {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteConfiguration";
  /** The name of the route configuration. Reserved for future use in asynchronous route discovery. */
  name?:
    | string
    | undefined;
  /** The interface name of the service. */
  interface?:
    | string
    | undefined;
  /** Which group does the interface belong to. */
  group?:
    | string
    | undefined;
  /** The version number of the interface. */
  version?:
    | string
    | undefined;
  /**
   * The list of routes that will be matched, in order, against incoming requests. The first route
   * that matches will be used.
   */
  routes?: Route[] | undefined;
}

export interface Route {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.Route";
  /** Route matching parameters. */
  match?:
    | RouteMatch
    | undefined;
  /** Route request to some upstream cluster. */
  route?: RouteAction | undefined;
}

export interface RouteMatch {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch";
  /** Method level routing matching. */
  method?:
    | MethodMatch
    | undefined;
  /**
   * Specifies a set of headers that the route should match on. The router will check the requestâ€™s
   * headers against all the specified headers in the route config. A match will happen if all the
   * headers in the route are present in the request with the same values (or based on presence if
   * the value field is not in the config).
   */
  headers?: HeaderMatcher[] | undefined;
}

export interface RouteAction {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction";
  cluster_specifier?:
    | //
    /** Indicates the upstream cluster to which the request should be routed. */
    { $case: "cluster"; cluster: string }
    | //
    /**
     * Multiple upstream clusters can be specified for a given route. The
     * request is routed to one of the upstream clusters based on weights
     * assigned to each cluster.
     * Currently ClusterWeight only supports the name and weight fields.
     */
    { $case: "weighted_clusters"; weighted_clusters: WeightedCluster }
    | undefined;
}

export interface MethodMatch {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch";
  /** The name of the method. */
  name?:
    | StringMatcher
    | undefined;
  /**
   * Method parameter definition.
   * The key is the parameter index, starting from 0.
   * The value is the parameter matching type.
   */
  params_match?: Map<number, MethodMatch_ParameterMatchSpecifier> | undefined;
}

/** The parameter matching type. */
export interface MethodMatch_ParameterMatchSpecifier {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifier";
  parameter_match_specifier?:
    | //
    /** If specified, header match will be performed based on the value of the header. */
    { $case: "exact_match"; exact_match: string }
    | //
    /**
     * If specified, header match will be performed based on range.
     * The rule will match if the request header value is within this range.
     * The entire request header value must represent an integer in base 10 notation: consisting
     * of an optional plus or minus sign followed by a sequence of digits. The rule will not match
     * if the header value does not represent an integer. Match will fail for empty values,
     * floating point numbers or if only a subsequence of the header value is an integer.
     *
     * Examples:
     *
     * * For range [-10,0), route will match for header value -1, but not for 0,
     *   "somestring", 10.9, "-1somestring"
     */
    { $case: "range_match"; range_match: Int64Range }
    | undefined;
}

export interface MethodMatch_ParamsMatchEntry {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry";
  key: number;
  value?: MethodMatch_ParameterMatchSpecifier | undefined;
}

function createBaseRouteConfiguration(): RouteConfiguration {
  return { $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteConfiguration" };
}

export const RouteConfiguration: MessageFns<
  RouteConfiguration,
  "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteConfiguration"
> = {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteConfiguration" as const,

  encode(message: RouteConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.interface !== undefined && message.interface !== "") {
      writer.uint32(18).string(message.interface);
    }
    if (message.group !== undefined && message.group !== "") {
      writer.uint32(26).string(message.group);
    }
    if (message.version !== undefined && message.version !== "") {
      writer.uint32(34).string(message.version);
    }
    if (message.routes !== undefined && message.routes.length !== 0) {
      for (const v of message.routes) {
        Route.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.interface = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.group = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.routes === undefined) {
            message.routes = [];
          }
          const el = Route.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.routes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteConfiguration {
    return {
      $type: RouteConfiguration.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      interface: isSet(object.interface) ? globalThis.String(object.interface) : undefined,
      group: isSet(object.group) ? globalThis.String(object.group) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
      routes: globalThis.Array.isArray(object?.routes) ? object.routes.map((e: any) => Route.fromJSON(e)) : undefined,
    };
  },

  toJSON(message: RouteConfiguration): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.interface !== undefined) {
      obj.interface = message.interface;
    }
    if (message.group !== undefined) {
      obj.group = message.group;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    if (message.routes?.length) {
      obj.routes = message.routes.map((e) => Route.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteConfiguration>, I>>(base?: I): RouteConfiguration {
    return RouteConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteConfiguration>, I>>(object: I): RouteConfiguration {
    const message = createBaseRouteConfiguration();
    message.name = object.name ?? undefined;
    message.interface = object.interface ?? undefined;
    message.group = object.group ?? undefined;
    message.version = object.version ?? undefined;
    message.routes = object.routes?.map((e) => Route.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteConfiguration.$type, RouteConfiguration);

function createBaseRoute(): Route {
  return { $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.Route" };
}

export const Route: MessageFns<Route, "envoy.config.filter.network.dubbo_proxy.v2alpha1.Route"> = {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.Route" as const,

  encode(message: Route, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.match !== undefined) {
      RouteMatch.encode(message.match, writer.uint32(10).fork()).join();
    }
    if (message.route !== undefined) {
      RouteAction.encode(message.route, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Route {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match = RouteMatch.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.route = RouteAction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Route {
    return {
      $type: Route.$type,
      match: isSet(object.match) ? RouteMatch.fromJSON(object.match) : undefined,
      route: isSet(object.route) ? RouteAction.fromJSON(object.route) : undefined,
    };
  },

  toJSON(message: Route): unknown {
    const obj: any = {};
    if (message.match !== undefined) {
      obj.match = RouteMatch.toJSON(message.match);
    }
    if (message.route !== undefined) {
      obj.route = RouteAction.toJSON(message.route);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Route>, I>>(base?: I): Route {
    return Route.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Route>, I>>(object: I): Route {
    const message = createBaseRoute();
    message.match = (object.match !== undefined && object.match !== null)
      ? RouteMatch.fromPartial(object.match)
      : undefined;
    message.route = (object.route !== undefined && object.route !== null)
      ? RouteAction.fromPartial(object.route)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Route.$type, Route);

function createBaseRouteMatch(): RouteMatch {
  return { $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch" };
}

export const RouteMatch: MessageFns<RouteMatch, "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch"> = {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch" as const,

  encode(message: RouteMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method !== undefined) {
      MethodMatch.encode(message.method, writer.uint32(10).fork()).join();
    }
    if (message.headers !== undefined && message.headers.length !== 0) {
      for (const v of message.headers) {
        HeaderMatcher.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method = MethodMatch.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.headers === undefined) {
            message.headers = [];
          }
          const el = HeaderMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.headers!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteMatch {
    return {
      $type: RouteMatch.$type,
      method: isSet(object.method) ? MethodMatch.fromJSON(object.method) : undefined,
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => HeaderMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: RouteMatch): unknown {
    const obj: any = {};
    if (message.method !== undefined) {
      obj.method = MethodMatch.toJSON(message.method);
    }
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => HeaderMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteMatch>, I>>(base?: I): RouteMatch {
    return RouteMatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteMatch>, I>>(object: I): RouteMatch {
    const message = createBaseRouteMatch();
    message.method = (object.method !== undefined && object.method !== null)
      ? MethodMatch.fromPartial(object.method)
      : undefined;
    message.headers = object.headers?.map((e) => HeaderMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteMatch.$type, RouteMatch);

function createBaseRouteAction(): RouteAction {
  return { $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction", cluster_specifier: undefined };
}

export const RouteAction: MessageFns<RouteAction, "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction"> = {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction" as const,

  encode(message: RouteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.cluster_specifier?.$case) {
      case "cluster":
        writer.uint32(10).string(message.cluster_specifier.cluster);
        break;
      case "weighted_clusters":
        WeightedCluster.encode(message.cluster_specifier.weighted_clusters, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster_specifier = { $case: "cluster", cluster: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cluster_specifier = {
            $case: "weighted_clusters",
            weighted_clusters: WeightedCluster.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteAction {
    return {
      $type: RouteAction.$type,
      cluster_specifier: isSet(object.cluster)
        ? { $case: "cluster", cluster: globalThis.String(object.cluster) }
        : isSet(object.weighted_clusters)
        ? { $case: "weighted_clusters", weighted_clusters: WeightedCluster.fromJSON(object.weighted_clusters) }
        : undefined,
    };
  },

  toJSON(message: RouteAction): unknown {
    const obj: any = {};
    if (message.cluster_specifier?.$case === "cluster") {
      obj.cluster = message.cluster_specifier.cluster;
    }
    if (message.cluster_specifier?.$case === "weighted_clusters") {
      obj.weighted_clusters = WeightedCluster.toJSON(message.cluster_specifier.weighted_clusters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteAction>, I>>(base?: I): RouteAction {
    return RouteAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteAction>, I>>(object: I): RouteAction {
    const message = createBaseRouteAction();
    if (
      object.cluster_specifier?.$case === "cluster" &&
      object.cluster_specifier?.cluster !== undefined &&
      object.cluster_specifier?.cluster !== null
    ) {
      message.cluster_specifier = { $case: "cluster", cluster: object.cluster_specifier.cluster };
    }
    if (
      object.cluster_specifier?.$case === "weighted_clusters" &&
      object.cluster_specifier?.weighted_clusters !== undefined &&
      object.cluster_specifier?.weighted_clusters !== null
    ) {
      message.cluster_specifier = {
        $case: "weighted_clusters",
        weighted_clusters: WeightedCluster.fromPartial(object.cluster_specifier.weighted_clusters),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(RouteAction.$type, RouteAction);

function createBaseMethodMatch(): MethodMatch {
  return { $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch" };
}

export const MethodMatch: MessageFns<MethodMatch, "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch"> = {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch" as const,

  encode(message: MethodMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      StringMatcher.encode(message.name, writer.uint32(10).fork()).join();
    }
    (message.params_match || new Map()).forEach((value, key) => {
      MethodMatch_ParamsMatchEntry.encode({
        $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry",
        key: key as any,
        value,
      }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = StringMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = MethodMatch_ParamsMatchEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            if (message.params_match === undefined) {
              message.params_match = new Map();
            }
            message.params_match!.set(entry2.key, entry2.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodMatch {
    return {
      $type: MethodMatch.$type,
      name: isSet(object.name) ? StringMatcher.fromJSON(object.name) : undefined,
      params_match: isObject(object.params_match)
        ? Object.entries(object.params_match).reduce<Map<number, MethodMatch_ParameterMatchSpecifier>>(
          (acc, [key, value]) => {
            acc.set(globalThis.Number(key), MethodMatch_ParameterMatchSpecifier.fromJSON(value));
            return acc;
          },
          new Map(),
        )
        : undefined,
    };
  },

  toJSON(message: MethodMatch): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = StringMatcher.toJSON(message.name);
    }
    if (message.params_match?.size) {
      obj.params_match = {};
      message.params_match.forEach((v, k) => {
        obj.params_match[k] = MethodMatch_ParameterMatchSpecifier.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MethodMatch>, I>>(base?: I): MethodMatch {
    return MethodMatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MethodMatch>, I>>(object: I): MethodMatch {
    const message = createBaseMethodMatch();
    message.name = (object.name !== undefined && object.name !== null)
      ? StringMatcher.fromPartial(object.name)
      : undefined;
    message.params_match = (object.params_match === undefined || object.params_match === null) ? undefined : (() => {
      const m = new Map();
      (object.params_match as Map<number, MethodMatch_ParameterMatchSpecifier> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, MethodMatch_ParameterMatchSpecifier.fromPartial(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(MethodMatch.$type, MethodMatch);

function createBaseMethodMatch_ParameterMatchSpecifier(): MethodMatch_ParameterMatchSpecifier {
  return {
    $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifier",
    parameter_match_specifier: undefined,
  };
}

export const MethodMatch_ParameterMatchSpecifier: MessageFns<
  MethodMatch_ParameterMatchSpecifier,
  "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifier"
> = {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParameterMatchSpecifier" as const,

  encode(message: MethodMatch_ParameterMatchSpecifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.parameter_match_specifier?.$case) {
      case "exact_match":
        writer.uint32(26).string(message.parameter_match_specifier.exact_match);
        break;
      case "range_match":
        Int64Range.encode(message.parameter_match_specifier.range_match, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodMatch_ParameterMatchSpecifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodMatch_ParameterMatchSpecifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parameter_match_specifier = { $case: "exact_match", exact_match: reader.string() };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.parameter_match_specifier = {
            $case: "range_match",
            range_match: Int64Range.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodMatch_ParameterMatchSpecifier {
    return {
      $type: MethodMatch_ParameterMatchSpecifier.$type,
      parameter_match_specifier: isSet(object.exact_match)
        ? { $case: "exact_match", exact_match: globalThis.String(object.exact_match) }
        : isSet(object.range_match)
        ? { $case: "range_match", range_match: Int64Range.fromJSON(object.range_match) }
        : undefined,
    };
  },

  toJSON(message: MethodMatch_ParameterMatchSpecifier): unknown {
    const obj: any = {};
    if (message.parameter_match_specifier?.$case === "exact_match") {
      obj.exact_match = message.parameter_match_specifier.exact_match;
    }
    if (message.parameter_match_specifier?.$case === "range_match") {
      obj.range_match = Int64Range.toJSON(message.parameter_match_specifier.range_match);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MethodMatch_ParameterMatchSpecifier>, I>>(
    base?: I,
  ): MethodMatch_ParameterMatchSpecifier {
    return MethodMatch_ParameterMatchSpecifier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MethodMatch_ParameterMatchSpecifier>, I>>(
    object: I,
  ): MethodMatch_ParameterMatchSpecifier {
    const message = createBaseMethodMatch_ParameterMatchSpecifier();
    if (
      object.parameter_match_specifier?.$case === "exact_match" &&
      object.parameter_match_specifier?.exact_match !== undefined &&
      object.parameter_match_specifier?.exact_match !== null
    ) {
      message.parameter_match_specifier = {
        $case: "exact_match",
        exact_match: object.parameter_match_specifier.exact_match,
      };
    }
    if (
      object.parameter_match_specifier?.$case === "range_match" &&
      object.parameter_match_specifier?.range_match !== undefined &&
      object.parameter_match_specifier?.range_match !== null
    ) {
      message.parameter_match_specifier = {
        $case: "range_match",
        range_match: Int64Range.fromPartial(object.parameter_match_specifier.range_match),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(MethodMatch_ParameterMatchSpecifier.$type, MethodMatch_ParameterMatchSpecifier);

function createBaseMethodMatch_ParamsMatchEntry(): MethodMatch_ParamsMatchEntry {
  return { $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry", key: 0 };
}

export const MethodMatch_ParamsMatchEntry: MessageFns<
  MethodMatch_ParamsMatchEntry,
  "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry"
> = {
  $type: "envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry" as const,

  encode(message: MethodMatch_ParamsMatchEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      MethodMatch_ParameterMatchSpecifier.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodMatch_ParamsMatchEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodMatch_ParamsMatchEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = MethodMatch_ParameterMatchSpecifier.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodMatch_ParamsMatchEntry {
    return {
      $type: MethodMatch_ParamsMatchEntry.$type,
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? MethodMatch_ParameterMatchSpecifier.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: MethodMatch_ParamsMatchEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = MethodMatch_ParameterMatchSpecifier.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MethodMatch_ParamsMatchEntry>, I>>(base?: I): MethodMatch_ParamsMatchEntry {
    return MethodMatch_ParamsMatchEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MethodMatch_ParamsMatchEntry>, I>>(object: I): MethodMatch_ParamsMatchEntry {
    const message = createBaseMethodMatch_ParamsMatchEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? MethodMatch_ParameterMatchSpecifier.fromPartial(object.value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(MethodMatch_ParamsMatchEntry.$type, MethodMatch_ParamsMatchEntry);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
