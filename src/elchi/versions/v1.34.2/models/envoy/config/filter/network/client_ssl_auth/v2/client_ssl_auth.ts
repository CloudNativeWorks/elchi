// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/client_ssl_auth/v2/client_ssl_auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { CidrRange } from "../../../../../api/v2/core/address";

export const protobufPackage = "envoy.config.filter.network.client_ssl_auth.v2";

export interface ClientSSLAuth {
  $type: "envoy.config.filter.network.client_ssl_auth.v2.ClientSSLAuth";
  /**
   * The :ref:`cluster manager <arch_overview_cluster_manager>` cluster that runs
   * the authentication service. The filter will connect to the service every 60s to fetch the list
   * of principals. The service must support the expected :ref:`REST API
   * <config_network_filters_client_ssl_auth_rest_api>`.
   */
  auth_api_cluster?:
    | string
    | undefined;
  /**
   * The prefix to use when emitting :ref:`statistics
   * <config_network_filters_client_ssl_auth_stats>`.
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * Time in milliseconds between principal refreshes from the
   * authentication service. Default is 60000 (60s). The actual fetch time
   * will be this value plus a random jittered value between
   * 0-refresh_delay_ms milliseconds.
   */
  refresh_delay?:
    | Duration
    | undefined;
  /**
   * An optional list of IP address and subnet masks that should be white
   * listed for access by the filter. If no list is provided, there is no
   * IP allowlist.
   */
  ip_white_list?: CidrRange[] | undefined;
}

function createBaseClientSSLAuth(): ClientSSLAuth {
  return { $type: "envoy.config.filter.network.client_ssl_auth.v2.ClientSSLAuth" };
}

export const ClientSSLAuth: MessageFns<ClientSSLAuth, "envoy.config.filter.network.client_ssl_auth.v2.ClientSSLAuth"> =
  {
    $type: "envoy.config.filter.network.client_ssl_auth.v2.ClientSSLAuth" as const,

    encode(message: ClientSSLAuth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.auth_api_cluster !== undefined && message.auth_api_cluster !== "") {
        writer.uint32(10).string(message.auth_api_cluster);
      }
      if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
        writer.uint32(18).string(message.stat_prefix);
      }
      if (message.refresh_delay !== undefined) {
        Duration.encode(message.refresh_delay, writer.uint32(26).fork()).join();
      }
      if (message.ip_white_list !== undefined && message.ip_white_list.length !== 0) {
        for (const v of message.ip_white_list) {
          CidrRange.encode(v!, writer.uint32(34).fork()).join();
        }
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ClientSSLAuth {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseClientSSLAuth();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.auth_api_cluster = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.stat_prefix = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.refresh_delay = Duration.decode(reader, reader.uint32());
            continue;
          }
          case 4: {
            if (tag !== 34) {
              break;
            }

            if (message.ip_white_list === undefined) {
              message.ip_white_list = [];
            }
            const el = CidrRange.decode(reader, reader.uint32());
            if (el !== undefined) {
              message.ip_white_list!.push(el);
            }
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ClientSSLAuth {
      return {
        $type: ClientSSLAuth.$type,
        auth_api_cluster: isSet(object.auth_api_cluster) ? globalThis.String(object.auth_api_cluster) : undefined,
        stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
        refresh_delay: isSet(object.refresh_delay) ? Duration.fromJSON(object.refresh_delay) : undefined,
        ip_white_list: globalThis.Array.isArray(object?.ip_white_list)
          ? object.ip_white_list.map((e: any) => CidrRange.fromJSON(e))
          : undefined,
      };
    },

    toJSON(message: ClientSSLAuth): unknown {
      const obj: any = {};
      if (message.auth_api_cluster !== undefined) {
        obj.auth_api_cluster = message.auth_api_cluster;
      }
      if (message.stat_prefix !== undefined) {
        obj.stat_prefix = message.stat_prefix;
      }
      if (message.refresh_delay !== undefined) {
        obj.refresh_delay = Duration.toJSON(message.refresh_delay);
      }
      if (message.ip_white_list?.length) {
        obj.ip_white_list = message.ip_white_list.map((e) => CidrRange.toJSON(e));
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<ClientSSLAuth>, I>>(base?: I): ClientSSLAuth {
      return ClientSSLAuth.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<ClientSSLAuth>, I>>(object: I): ClientSSLAuth {
      const message = createBaseClientSSLAuth();
      message.auth_api_cluster = object.auth_api_cluster ?? undefined;
      message.stat_prefix = object.stat_prefix ?? undefined;
      message.refresh_delay = (object.refresh_delay !== undefined && object.refresh_delay !== null)
        ? Duration.fromPartial(object.refresh_delay)
        : undefined;
      message.ip_white_list = object.ip_white_list?.map((e) => CidrRange.fromPartial(e)) || undefined;
      return message;
    },
  };

messageTypeRegistry.set(ClientSSLAuth.$type, ClientSSLAuth);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
