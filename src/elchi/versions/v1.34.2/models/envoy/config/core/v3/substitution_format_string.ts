// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/core/v3/substitution_format_string.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { DataSource } from "./base";
import { TypedExtensionConfig } from "./extension";

export const protobufPackage = "envoy.config.core.v3";

/** Optional configuration options to be used with json_format. */
export interface JsonFormatOptions {
  $type: "envoy.config.core.v3.JsonFormatOptions";
  /**
   * The output JSON string properties will be sorted.
   *
   * .. note::
   *   As the properties are always sorted, this option has no effect and is deprecated.
   *
   * @deprecated
   */
  sort_properties?: boolean | undefined;
}

/**
 * Configuration to use multiple :ref:`command operators <config_access_log_command_operators>`
 * to generate a new string in either plain text or JSON format.
 * [#next-free-field: 8]
 */
export interface SubstitutionFormatString {
  $type: "envoy.config.core.v3.SubstitutionFormatString";
  format?:
    | //
    /**
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string<config_access_log_format_strings>`.
     *
     * For example, setting ``text_format`` like below,
     *
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *
     *   text_format: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"
     *
     * generates plain text similar to:
     *
     * .. code-block:: text
     *
     *   upstream connect error:503:path=/foo
     *
     * Deprecated in favor of :ref:`text_format_source <envoy_v3_api_field_config.core.v3.SubstitutionFormatString.text_format_source>`. To migrate text format strings, use the :ref:`inline_string <envoy_v3_api_field_config.core.v3.DataSource.inline_string>` field.
     */
    { $case: "text_format"; text_format: string }
    | //
    /**
     * Specify a format with command operators to form a JSON string.
     * Its details is described in :ref:`format dictionary<config_access_log_format_dictionaries>`.
     * Values are rendered as strings, numbers, or boolean values as appropriate.
     * Nested JSON objects may be produced by some command operators (e.g. FILTER_STATE or DYNAMIC_METADATA).
     * See the documentation for a specific command operator for details.
     *
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *
     *   json_format:
     *     status: "%RESPONSE_CODE%"
     *     message: "%LOCAL_REPLY_BODY%"
     *
     * The following JSON object would be created:
     *
     * .. code-block:: json
     *
     *  {
     *    "status": 500,
     *    "message": "My error message"
     *  }
     */
    { $case: "json_format"; json_format: { [key: string]: any } | undefined }
    | //
    /**
     * Specify a format with command operators to form a text string.
     * Its details is described in :ref:`format string<config_access_log_format_strings>`.
     *
     * For example, setting ``text_format`` like below,
     *
     * .. validated-code-block:: yaml
     *   :type-name: envoy.config.core.v3.SubstitutionFormatString
     *
     *   text_format_source:
     *     inline_string: "%LOCAL_REPLY_BODY%:%RESPONSE_CODE%:path=%REQ(:path)%\n"
     *
     * generates plain text similar to:
     *
     * .. code-block:: text
     *
     *   upstream connect error:503:path=/foo
     */
    { $case: "text_format_source"; text_format_source: DataSource }
    | undefined;
  /**
   * If set to true, when command operators are evaluated to null,
   *
   * * for ``text_format``, the output of the empty operator is changed from ``-`` to an
   *   empty string, so that empty values are omitted entirely.
   * * for ``json_format`` the keys with null values are omitted in the output structure.
   *
   * .. note::
   *   This option does not work perfectly with ``json_format`` as keys with ``null`` values
   *   will still be included in the output. See https://github.com/envoyproxy/envoy/issues/37941
   *   for more details.
   */
  omit_empty_values?:
    | boolean
    | undefined;
  /**
   * Specify a ``content_type`` field.
   * If this field is not set then ``text/plain`` is used for ``text_format`` and
   * ``application/json`` is used for ``json_format``.
   *
   * .. validated-code-block:: yaml
   *   :type-name: envoy.config.core.v3.SubstitutionFormatString
   *
   *   content_type: "text/html; charset=UTF-8"
   */
  content_type?:
    | string
    | undefined;
  /**
   * Specifies a collection of Formatter plugins that can be called from the access log configuration.
   * See the formatters extensions documentation for details.
   * [#extension-category: envoy.formatter]
   */
  formatters?:
    | TypedExtensionConfig[]
    | undefined;
  /** If json_format is used, the options will be applied to the output JSON string. */
  json_format_options?: JsonFormatOptions | undefined;
}

function createBaseJsonFormatOptions(): JsonFormatOptions {
  return { $type: "envoy.config.core.v3.JsonFormatOptions" };
}

export const JsonFormatOptions: MessageFns<JsonFormatOptions, "envoy.config.core.v3.JsonFormatOptions"> = {
  $type: "envoy.config.core.v3.JsonFormatOptions" as const,

  encode(message: JsonFormatOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sort_properties !== undefined && message.sort_properties !== false) {
      writer.uint32(8).bool(message.sort_properties);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JsonFormatOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJsonFormatOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sort_properties = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JsonFormatOptions {
    return {
      $type: JsonFormatOptions.$type,
      sort_properties: isSet(object.sort_properties) ? globalThis.Boolean(object.sort_properties) : undefined,
    };
  },

  toJSON(message: JsonFormatOptions): unknown {
    const obj: any = {};
    if (message.sort_properties !== undefined) {
      obj.sort_properties = message.sort_properties;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JsonFormatOptions>, I>>(base?: I): JsonFormatOptions {
    return JsonFormatOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JsonFormatOptions>, I>>(object: I): JsonFormatOptions {
    const message = createBaseJsonFormatOptions();
    message.sort_properties = object.sort_properties ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(JsonFormatOptions.$type, JsonFormatOptions);

function createBaseSubstitutionFormatString(): SubstitutionFormatString {
  return { $type: "envoy.config.core.v3.SubstitutionFormatString", format: undefined };
}

export const SubstitutionFormatString: MessageFns<
  SubstitutionFormatString,
  "envoy.config.core.v3.SubstitutionFormatString"
> = {
  $type: "envoy.config.core.v3.SubstitutionFormatString" as const,

  encode(message: SubstitutionFormatString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.format?.$case) {
      case "text_format":
        writer.uint32(10).string(message.format.text_format);
        break;
      case "json_format":
        Struct.encode(Struct.wrap(message.format.json_format), writer.uint32(18).fork()).join();
        break;
      case "text_format_source":
        DataSource.encode(message.format.text_format_source, writer.uint32(42).fork()).join();
        break;
    }
    if (message.omit_empty_values !== undefined && message.omit_empty_values !== false) {
      writer.uint32(24).bool(message.omit_empty_values);
    }
    if (message.content_type !== undefined && message.content_type !== "") {
      writer.uint32(34).string(message.content_type);
    }
    if (message.formatters !== undefined && message.formatters.length !== 0) {
      for (const v of message.formatters) {
        TypedExtensionConfig.encode(v!, writer.uint32(50).fork()).join();
      }
    }
    if (message.json_format_options !== undefined) {
      JsonFormatOptions.encode(message.json_format_options, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubstitutionFormatString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubstitutionFormatString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.format = { $case: "text_format", text_format: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.format = { $case: "json_format", json_format: Struct.unwrap(Struct.decode(reader, reader.uint32())) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.format = {
            $case: "text_format_source",
            text_format_source: DataSource.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.omit_empty_values = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content_type = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          if (message.formatters === undefined) {
            message.formatters = [];
          }
          const el = TypedExtensionConfig.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.formatters!.push(el);
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.json_format_options = JsonFormatOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubstitutionFormatString {
    return {
      $type: SubstitutionFormatString.$type,
      format: isSet(object.text_format)
        ? { $case: "text_format", text_format: globalThis.String(object.text_format) }
        : isSet(object.json_format)
        ? { $case: "json_format", json_format: object.json_format }
        : isSet(object.text_format_source)
        ? { $case: "text_format_source", text_format_source: DataSource.fromJSON(object.text_format_source) }
        : undefined,
      omit_empty_values: isSet(object.omit_empty_values) ? globalThis.Boolean(object.omit_empty_values) : undefined,
      content_type: isSet(object.content_type) ? globalThis.String(object.content_type) : undefined,
      formatters: globalThis.Array.isArray(object?.formatters)
        ? object.formatters.map((e: any) => TypedExtensionConfig.fromJSON(e))
        : undefined,
      json_format_options: isSet(object.json_format_options)
        ? JsonFormatOptions.fromJSON(object.json_format_options)
        : undefined,
    };
  },

  toJSON(message: SubstitutionFormatString): unknown {
    const obj: any = {};
    if (message.format?.$case === "text_format") {
      obj.text_format = message.format.text_format;
    }
    if (message.format?.$case === "json_format") {
      obj.json_format = message.format.json_format;
    }
    if (message.format?.$case === "text_format_source") {
      obj.text_format_source = DataSource.toJSON(message.format.text_format_source);
    }
    if (message.omit_empty_values !== undefined) {
      obj.omit_empty_values = message.omit_empty_values;
    }
    if (message.content_type !== undefined) {
      obj.content_type = message.content_type;
    }
    if (message.formatters?.length) {
      obj.formatters = message.formatters.map((e) => TypedExtensionConfig.toJSON(e));
    }
    if (message.json_format_options !== undefined) {
      obj.json_format_options = JsonFormatOptions.toJSON(message.json_format_options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubstitutionFormatString>, I>>(base?: I): SubstitutionFormatString {
    return SubstitutionFormatString.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubstitutionFormatString>, I>>(object: I): SubstitutionFormatString {
    const message = createBaseSubstitutionFormatString();
    if (
      object.format?.$case === "text_format" &&
      object.format?.text_format !== undefined &&
      object.format?.text_format !== null
    ) {
      message.format = { $case: "text_format", text_format: object.format.text_format };
    }
    if (
      object.format?.$case === "json_format" &&
      object.format?.json_format !== undefined &&
      object.format?.json_format !== null
    ) {
      message.format = { $case: "json_format", json_format: object.format.json_format };
    }
    if (
      object.format?.$case === "text_format_source" &&
      object.format?.text_format_source !== undefined &&
      object.format?.text_format_source !== null
    ) {
      message.format = {
        $case: "text_format_source",
        text_format_source: DataSource.fromPartial(object.format.text_format_source),
      };
    }
    message.omit_empty_values = object.omit_empty_values ?? undefined;
    message.content_type = object.content_type ?? undefined;
    message.formatters = object.formatters?.map((e) => TypedExtensionConfig.fromPartial(e)) || undefined;
    message.json_format_options = (object.json_format_options !== undefined && object.json_format_options !== null)
      ? JsonFormatOptions.fromPartial(object.json_format_options)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SubstitutionFormatString.$type, SubstitutionFormatString);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
