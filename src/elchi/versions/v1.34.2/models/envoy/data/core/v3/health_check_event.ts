// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/core/v3/health_check_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Address } from "../../../config/core/v3/address";
import { Locality, Metadata } from "../../../config/core/v3/base";

export const protobufPackage = "envoy.data.core.v3";

export enum HealthCheckFailureType {
  ACTIVE = "ACTIVE",
  PASSIVE = "PASSIVE",
  NETWORK = "NETWORK",
  NETWORK_TIMEOUT = "NETWORK_TIMEOUT",
}

export function healthCheckFailureTypeFromJSON(object: any): HealthCheckFailureType {
  switch (object) {
    case 0:
    case "ACTIVE":
      return HealthCheckFailureType.ACTIVE;
    case 1:
    case "PASSIVE":
      return HealthCheckFailureType.PASSIVE;
    case 2:
    case "NETWORK":
      return HealthCheckFailureType.NETWORK;
    case 3:
    case "NETWORK_TIMEOUT":
      return HealthCheckFailureType.NETWORK_TIMEOUT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HealthCheckFailureType");
  }
}

export function healthCheckFailureTypeToJSON(object: HealthCheckFailureType): string {
  switch (object) {
    case HealthCheckFailureType.ACTIVE:
      return "ACTIVE";
    case HealthCheckFailureType.PASSIVE:
      return "PASSIVE";
    case HealthCheckFailureType.NETWORK:
      return "NETWORK";
    case HealthCheckFailureType.NETWORK_TIMEOUT:
      return "NETWORK_TIMEOUT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HealthCheckFailureType");
  }
}

export function healthCheckFailureTypeToNumber(object: HealthCheckFailureType): number {
  switch (object) {
    case HealthCheckFailureType.ACTIVE:
      return 0;
    case HealthCheckFailureType.PASSIVE:
      return 1;
    case HealthCheckFailureType.NETWORK:
      return 2;
    case HealthCheckFailureType.NETWORK_TIMEOUT:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HealthCheckFailureType");
  }
}

export enum HealthCheckerType {
  HTTP = "HTTP",
  TCP = "TCP",
  GRPC = "GRPC",
  REDIS = "REDIS",
  THRIFT = "THRIFT",
}

export function healthCheckerTypeFromJSON(object: any): HealthCheckerType {
  switch (object) {
    case 0:
    case "HTTP":
      return HealthCheckerType.HTTP;
    case 1:
    case "TCP":
      return HealthCheckerType.TCP;
    case 2:
    case "GRPC":
      return HealthCheckerType.GRPC;
    case 3:
    case "REDIS":
      return HealthCheckerType.REDIS;
    case 4:
    case "THRIFT":
      return HealthCheckerType.THRIFT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HealthCheckerType");
  }
}

export function healthCheckerTypeToJSON(object: HealthCheckerType): string {
  switch (object) {
    case HealthCheckerType.HTTP:
      return "HTTP";
    case HealthCheckerType.TCP:
      return "TCP";
    case HealthCheckerType.GRPC:
      return "GRPC";
    case HealthCheckerType.REDIS:
      return "REDIS";
    case HealthCheckerType.THRIFT:
      return "THRIFT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HealthCheckerType");
  }
}

export function healthCheckerTypeToNumber(object: HealthCheckerType): number {
  switch (object) {
    case HealthCheckerType.HTTP:
      return 0;
    case HealthCheckerType.TCP:
      return 1;
    case HealthCheckerType.GRPC:
      return 2;
    case HealthCheckerType.REDIS:
      return 3;
    case HealthCheckerType.THRIFT:
      return 4;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HealthCheckerType");
  }
}

/** [#next-free-field: 13] */
export interface HealthCheckEvent {
  $type: "envoy.data.core.v3.HealthCheckEvent";
  health_checker_type?: HealthCheckerType | undefined;
  host?: Address | undefined;
  cluster_name?: string | undefined;
  event?:
    | //
    /** Host ejection. */
    { $case: "eject_unhealthy_event"; eject_unhealthy_event: HealthCheckEjectUnhealthy }
    | //
    /** Host addition. */
    { $case: "add_healthy_event"; add_healthy_event: HealthCheckAddHealthy }
    | //
    /**
     * A health check was successful. Note: a host will be considered healthy either if it is
     * the first ever health check, or if the healthy threshold is reached. This kind of event
     * indicate that a health check was successful, but does not indicates that the host is
     * considered healthy. A host is considered healthy if HealthCheckAddHealthy kind of event is sent.
     */
    { $case: "successful_health_check_event"; successful_health_check_event: HealthCheckSuccessful }
    | //
    /** Host failure. */
    { $case: "health_check_failure_event"; health_check_failure_event: HealthCheckFailure }
    | //
    /** Healthy host became degraded. */
    { $case: "degraded_healthy_host"; degraded_healthy_host: DegradedHealthyHost }
    | //
    /** A degraded host returned to being healthy. */
    { $case: "no_longer_degraded_host"; no_longer_degraded_host: NoLongerDegradedHost }
    | undefined;
  /** Timestamp for event. */
  timestamp?:
    | Date
    | undefined;
  /** Host metadata */
  metadata?:
    | Metadata
    | undefined;
  /** Host locality */
  locality?: Locality | undefined;
}

export interface HealthCheckEjectUnhealthy {
  $type: "envoy.data.core.v3.HealthCheckEjectUnhealthy";
  /** The type of failure that caused this ejection. */
  failure_type?: HealthCheckFailureType | undefined;
}

export interface HealthCheckAddHealthy {
  $type: "envoy.data.core.v3.HealthCheckAddHealthy";
  /**
   * Whether this addition is the result of the first ever health check on a host, in which case
   * the configured :ref:`healthy threshold <envoy_v3_api_field_config.core.v3.HealthCheck.healthy_threshold>`
   * is bypassed and the host is immediately added.
   */
  first_check?: boolean | undefined;
}

export interface HealthCheckSuccessful {
  $type: "envoy.data.core.v3.HealthCheckSuccessful";
}

export interface HealthCheckFailure {
  $type: "envoy.data.core.v3.HealthCheckFailure";
  /** The type of failure that caused this event. */
  failure_type?:
    | HealthCheckFailureType
    | undefined;
  /** Whether this event is the result of the first ever health check on a host. */
  first_check?: boolean | undefined;
}

export interface DegradedHealthyHost {
  $type: "envoy.data.core.v3.DegradedHealthyHost";
}

export interface NoLongerDegradedHost {
  $type: "envoy.data.core.v3.NoLongerDegradedHost";
}

function createBaseHealthCheckEvent(): HealthCheckEvent {
  return { $type: "envoy.data.core.v3.HealthCheckEvent", event: undefined };
}

export const HealthCheckEvent: MessageFns<HealthCheckEvent, "envoy.data.core.v3.HealthCheckEvent"> = {
  $type: "envoy.data.core.v3.HealthCheckEvent" as const,

  encode(message: HealthCheckEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.health_checker_type !== undefined && message.health_checker_type !== HealthCheckerType.HTTP) {
      writer.uint32(8).int32(healthCheckerTypeToNumber(message.health_checker_type));
    }
    if (message.host !== undefined) {
      Address.encode(message.host, writer.uint32(18).fork()).join();
    }
    if (message.cluster_name !== undefined && message.cluster_name !== "") {
      writer.uint32(26).string(message.cluster_name);
    }
    switch (message.event?.$case) {
      case "eject_unhealthy_event":
        HealthCheckEjectUnhealthy.encode(message.event.eject_unhealthy_event, writer.uint32(34).fork()).join();
        break;
      case "add_healthy_event":
        HealthCheckAddHealthy.encode(message.event.add_healthy_event, writer.uint32(42).fork()).join();
        break;
      case "successful_health_check_event":
        HealthCheckSuccessful.encode(message.event.successful_health_check_event, writer.uint32(98).fork()).join();
        break;
      case "health_check_failure_event":
        HealthCheckFailure.encode(message.event.health_check_failure_event, writer.uint32(58).fork()).join();
        break;
      case "degraded_healthy_host":
        DegradedHealthyHost.encode(message.event.degraded_healthy_host, writer.uint32(66).fork()).join();
        break;
      case "no_longer_degraded_host":
        NoLongerDegradedHost.encode(message.event.no_longer_degraded_host, writer.uint32(74).fork()).join();
        break;
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(82).fork()).join();
    }
    if (message.locality !== undefined) {
      Locality.encode(message.locality, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.health_checker_type = healthCheckerTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.host = Address.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cluster_name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.event = {
            $case: "eject_unhealthy_event",
            eject_unhealthy_event: HealthCheckEjectUnhealthy.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.event = {
            $case: "add_healthy_event",
            add_healthy_event: HealthCheckAddHealthy.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.event = {
            $case: "successful_health_check_event",
            successful_health_check_event: HealthCheckSuccessful.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.event = {
            $case: "health_check_failure_event",
            health_check_failure_event: HealthCheckFailure.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.event = {
            $case: "degraded_healthy_host",
            degraded_healthy_host: DegradedHealthyHost.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.event = {
            $case: "no_longer_degraded_host",
            no_longer_degraded_host: NoLongerDegradedHost.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.locality = Locality.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckEvent {
    return {
      $type: HealthCheckEvent.$type,
      health_checker_type: isSet(object.health_checker_type)
        ? healthCheckerTypeFromJSON(object.health_checker_type)
        : undefined,
      host: isSet(object.host) ? Address.fromJSON(object.host) : undefined,
      cluster_name: isSet(object.cluster_name) ? globalThis.String(object.cluster_name) : undefined,
      event: isSet(object.eject_unhealthy_event)
        ? {
          $case: "eject_unhealthy_event",
          eject_unhealthy_event: HealthCheckEjectUnhealthy.fromJSON(object.eject_unhealthy_event),
        }
        : isSet(object.add_healthy_event)
        ? { $case: "add_healthy_event", add_healthy_event: HealthCheckAddHealthy.fromJSON(object.add_healthy_event) }
        : isSet(object.successful_health_check_event)
        ? {
          $case: "successful_health_check_event",
          successful_health_check_event: HealthCheckSuccessful.fromJSON(object.successful_health_check_event),
        }
        : isSet(object.health_check_failure_event)
        ? {
          $case: "health_check_failure_event",
          health_check_failure_event: HealthCheckFailure.fromJSON(object.health_check_failure_event),
        }
        : isSet(object.degraded_healthy_host)
        ? {
          $case: "degraded_healthy_host",
          degraded_healthy_host: DegradedHealthyHost.fromJSON(object.degraded_healthy_host),
        }
        : isSet(object.no_longer_degraded_host)
        ? {
          $case: "no_longer_degraded_host",
          no_longer_degraded_host: NoLongerDegradedHost.fromJSON(object.no_longer_degraded_host),
        }
        : undefined,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      locality: isSet(object.locality) ? Locality.fromJSON(object.locality) : undefined,
    };
  },

  toJSON(message: HealthCheckEvent): unknown {
    const obj: any = {};
    if (message.health_checker_type !== undefined) {
      obj.health_checker_type = healthCheckerTypeToJSON(message.health_checker_type);
    }
    if (message.host !== undefined) {
      obj.host = Address.toJSON(message.host);
    }
    if (message.cluster_name !== undefined) {
      obj.cluster_name = message.cluster_name;
    }
    if (message.event?.$case === "eject_unhealthy_event") {
      obj.eject_unhealthy_event = HealthCheckEjectUnhealthy.toJSON(message.event.eject_unhealthy_event);
    }
    if (message.event?.$case === "add_healthy_event") {
      obj.add_healthy_event = HealthCheckAddHealthy.toJSON(message.event.add_healthy_event);
    }
    if (message.event?.$case === "successful_health_check_event") {
      obj.successful_health_check_event = HealthCheckSuccessful.toJSON(message.event.successful_health_check_event);
    }
    if (message.event?.$case === "health_check_failure_event") {
      obj.health_check_failure_event = HealthCheckFailure.toJSON(message.event.health_check_failure_event);
    }
    if (message.event?.$case === "degraded_healthy_host") {
      obj.degraded_healthy_host = DegradedHealthyHost.toJSON(message.event.degraded_healthy_host);
    }
    if (message.event?.$case === "no_longer_degraded_host") {
      obj.no_longer_degraded_host = NoLongerDegradedHost.toJSON(message.event.no_longer_degraded_host);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.locality !== undefined) {
      obj.locality = Locality.toJSON(message.locality);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckEvent>, I>>(base?: I): HealthCheckEvent {
    return HealthCheckEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckEvent>, I>>(object: I): HealthCheckEvent {
    const message = createBaseHealthCheckEvent();
    message.health_checker_type = object.health_checker_type ?? undefined;
    message.host = (object.host !== undefined && object.host !== null) ? Address.fromPartial(object.host) : undefined;
    message.cluster_name = object.cluster_name ?? undefined;
    if (
      object.event?.$case === "eject_unhealthy_event" &&
      object.event?.eject_unhealthy_event !== undefined &&
      object.event?.eject_unhealthy_event !== null
    ) {
      message.event = {
        $case: "eject_unhealthy_event",
        eject_unhealthy_event: HealthCheckEjectUnhealthy.fromPartial(object.event.eject_unhealthy_event),
      };
    }
    if (
      object.event?.$case === "add_healthy_event" &&
      object.event?.add_healthy_event !== undefined &&
      object.event?.add_healthy_event !== null
    ) {
      message.event = {
        $case: "add_healthy_event",
        add_healthy_event: HealthCheckAddHealthy.fromPartial(object.event.add_healthy_event),
      };
    }
    if (
      object.event?.$case === "successful_health_check_event" &&
      object.event?.successful_health_check_event !== undefined &&
      object.event?.successful_health_check_event !== null
    ) {
      message.event = {
        $case: "successful_health_check_event",
        successful_health_check_event: HealthCheckSuccessful.fromPartial(object.event.successful_health_check_event),
      };
    }
    if (
      object.event?.$case === "health_check_failure_event" &&
      object.event?.health_check_failure_event !== undefined &&
      object.event?.health_check_failure_event !== null
    ) {
      message.event = {
        $case: "health_check_failure_event",
        health_check_failure_event: HealthCheckFailure.fromPartial(object.event.health_check_failure_event),
      };
    }
    if (
      object.event?.$case === "degraded_healthy_host" &&
      object.event?.degraded_healthy_host !== undefined &&
      object.event?.degraded_healthy_host !== null
    ) {
      message.event = {
        $case: "degraded_healthy_host",
        degraded_healthy_host: DegradedHealthyHost.fromPartial(object.event.degraded_healthy_host),
      };
    }
    if (
      object.event?.$case === "no_longer_degraded_host" &&
      object.event?.no_longer_degraded_host !== undefined &&
      object.event?.no_longer_degraded_host !== null
    ) {
      message.event = {
        $case: "no_longer_degraded_host",
        no_longer_degraded_host: NoLongerDegradedHost.fromPartial(object.event.no_longer_degraded_host),
      };
    }
    message.timestamp = object.timestamp ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.locality = (object.locality !== undefined && object.locality !== null)
      ? Locality.fromPartial(object.locality)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(HealthCheckEvent.$type, HealthCheckEvent);

function createBaseHealthCheckEjectUnhealthy(): HealthCheckEjectUnhealthy {
  return { $type: "envoy.data.core.v3.HealthCheckEjectUnhealthy" };
}

export const HealthCheckEjectUnhealthy: MessageFns<
  HealthCheckEjectUnhealthy,
  "envoy.data.core.v3.HealthCheckEjectUnhealthy"
> = {
  $type: "envoy.data.core.v3.HealthCheckEjectUnhealthy" as const,

  encode(message: HealthCheckEjectUnhealthy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.failure_type !== undefined && message.failure_type !== HealthCheckFailureType.ACTIVE) {
      writer.uint32(8).int32(healthCheckFailureTypeToNumber(message.failure_type));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckEjectUnhealthy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckEjectUnhealthy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.failure_type = healthCheckFailureTypeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckEjectUnhealthy {
    return {
      $type: HealthCheckEjectUnhealthy.$type,
      failure_type: isSet(object.failure_type) ? healthCheckFailureTypeFromJSON(object.failure_type) : undefined,
    };
  },

  toJSON(message: HealthCheckEjectUnhealthy): unknown {
    const obj: any = {};
    if (message.failure_type !== undefined) {
      obj.failure_type = healthCheckFailureTypeToJSON(message.failure_type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckEjectUnhealthy>, I>>(base?: I): HealthCheckEjectUnhealthy {
    return HealthCheckEjectUnhealthy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckEjectUnhealthy>, I>>(object: I): HealthCheckEjectUnhealthy {
    const message = createBaseHealthCheckEjectUnhealthy();
    message.failure_type = object.failure_type ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HealthCheckEjectUnhealthy.$type, HealthCheckEjectUnhealthy);

function createBaseHealthCheckAddHealthy(): HealthCheckAddHealthy {
  return { $type: "envoy.data.core.v3.HealthCheckAddHealthy" };
}

export const HealthCheckAddHealthy: MessageFns<HealthCheckAddHealthy, "envoy.data.core.v3.HealthCheckAddHealthy"> = {
  $type: "envoy.data.core.v3.HealthCheckAddHealthy" as const,

  encode(message: HealthCheckAddHealthy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.first_check !== undefined && message.first_check !== false) {
      writer.uint32(8).bool(message.first_check);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckAddHealthy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckAddHealthy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.first_check = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckAddHealthy {
    return {
      $type: HealthCheckAddHealthy.$type,
      first_check: isSet(object.first_check) ? globalThis.Boolean(object.first_check) : undefined,
    };
  },

  toJSON(message: HealthCheckAddHealthy): unknown {
    const obj: any = {};
    if (message.first_check !== undefined) {
      obj.first_check = message.first_check;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckAddHealthy>, I>>(base?: I): HealthCheckAddHealthy {
    return HealthCheckAddHealthy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckAddHealthy>, I>>(object: I): HealthCheckAddHealthy {
    const message = createBaseHealthCheckAddHealthy();
    message.first_check = object.first_check ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HealthCheckAddHealthy.$type, HealthCheckAddHealthy);

function createBaseHealthCheckSuccessful(): HealthCheckSuccessful {
  return { $type: "envoy.data.core.v3.HealthCheckSuccessful" };
}

export const HealthCheckSuccessful: MessageFns<HealthCheckSuccessful, "envoy.data.core.v3.HealthCheckSuccessful"> = {
  $type: "envoy.data.core.v3.HealthCheckSuccessful" as const,

  encode(_: HealthCheckSuccessful, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckSuccessful {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckSuccessful();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HealthCheckSuccessful {
    return { $type: HealthCheckSuccessful.$type };
  },

  toJSON(_: HealthCheckSuccessful): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckSuccessful>, I>>(base?: I): HealthCheckSuccessful {
    return HealthCheckSuccessful.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckSuccessful>, I>>(_: I): HealthCheckSuccessful {
    const message = createBaseHealthCheckSuccessful();
    return message;
  },
};

messageTypeRegistry.set(HealthCheckSuccessful.$type, HealthCheckSuccessful);

function createBaseHealthCheckFailure(): HealthCheckFailure {
  return { $type: "envoy.data.core.v3.HealthCheckFailure" };
}

export const HealthCheckFailure: MessageFns<HealthCheckFailure, "envoy.data.core.v3.HealthCheckFailure"> = {
  $type: "envoy.data.core.v3.HealthCheckFailure" as const,

  encode(message: HealthCheckFailure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.failure_type !== undefined && message.failure_type !== HealthCheckFailureType.ACTIVE) {
      writer.uint32(8).int32(healthCheckFailureTypeToNumber(message.failure_type));
    }
    if (message.first_check !== undefined && message.first_check !== false) {
      writer.uint32(16).bool(message.first_check);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HealthCheckFailure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthCheckFailure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.failure_type = healthCheckFailureTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.first_check = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthCheckFailure {
    return {
      $type: HealthCheckFailure.$type,
      failure_type: isSet(object.failure_type) ? healthCheckFailureTypeFromJSON(object.failure_type) : undefined,
      first_check: isSet(object.first_check) ? globalThis.Boolean(object.first_check) : undefined,
    };
  },

  toJSON(message: HealthCheckFailure): unknown {
    const obj: any = {};
    if (message.failure_type !== undefined) {
      obj.failure_type = healthCheckFailureTypeToJSON(message.failure_type);
    }
    if (message.first_check !== undefined) {
      obj.first_check = message.first_check;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthCheckFailure>, I>>(base?: I): HealthCheckFailure {
    return HealthCheckFailure.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthCheckFailure>, I>>(object: I): HealthCheckFailure {
    const message = createBaseHealthCheckFailure();
    message.failure_type = object.failure_type ?? undefined;
    message.first_check = object.first_check ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HealthCheckFailure.$type, HealthCheckFailure);

function createBaseDegradedHealthyHost(): DegradedHealthyHost {
  return { $type: "envoy.data.core.v3.DegradedHealthyHost" };
}

export const DegradedHealthyHost: MessageFns<DegradedHealthyHost, "envoy.data.core.v3.DegradedHealthyHost"> = {
  $type: "envoy.data.core.v3.DegradedHealthyHost" as const,

  encode(_: DegradedHealthyHost, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DegradedHealthyHost {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDegradedHealthyHost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DegradedHealthyHost {
    return { $type: DegradedHealthyHost.$type };
  },

  toJSON(_: DegradedHealthyHost): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DegradedHealthyHost>, I>>(base?: I): DegradedHealthyHost {
    return DegradedHealthyHost.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DegradedHealthyHost>, I>>(_: I): DegradedHealthyHost {
    const message = createBaseDegradedHealthyHost();
    return message;
  },
};

messageTypeRegistry.set(DegradedHealthyHost.$type, DegradedHealthyHost);

function createBaseNoLongerDegradedHost(): NoLongerDegradedHost {
  return { $type: "envoy.data.core.v3.NoLongerDegradedHost" };
}

export const NoLongerDegradedHost: MessageFns<NoLongerDegradedHost, "envoy.data.core.v3.NoLongerDegradedHost"> = {
  $type: "envoy.data.core.v3.NoLongerDegradedHost" as const,

  encode(_: NoLongerDegradedHost, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NoLongerDegradedHost {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNoLongerDegradedHost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): NoLongerDegradedHost {
    return { $type: NoLongerDegradedHost.$type };
  },

  toJSON(_: NoLongerDegradedHost): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<NoLongerDegradedHost>, I>>(base?: I): NoLongerDegradedHost {
    return NoLongerDegradedHost.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NoLongerDegradedHost>, I>>(_: I): NoLongerDegradedHost {
    const message = createBaseNoLongerDegradedHost();
    return message;
  },
};

messageTypeRegistry.set(NoLongerDegradedHost.$type, NoLongerDegradedHost);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
