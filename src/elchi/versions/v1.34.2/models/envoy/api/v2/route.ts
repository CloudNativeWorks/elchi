// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../typeRegistry";
import { HeaderValueOption } from "./core/base";
import { ConfigSource } from "./core/config_source";
import { VirtualHost } from "./route/route_components";

export const protobufPackage = "envoy.api.v2";

/** [#next-free-field: 11] */
export interface RouteConfiguration {
  $type: "envoy.api.v2.RouteConfiguration";
  /**
   * The name of the route configuration. For example, it might match
   * :ref:`route_config_name
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.Rds.route_config_name>` in
   * :ref:`envoy_api_msg_config.filter.network.http_connection_manager.v2.Rds`.
   */
  name?:
    | string
    | undefined;
  /** An array of virtual hosts that make up the route table. */
  virtual_hosts?:
    | VirtualHost[]
    | undefined;
  /**
   * An array of virtual hosts will be dynamically loaded via the VHDS API.
   * Both *virtual_hosts* and *vhds* fields will be used when present. *virtual_hosts* can be used
   * for a base routing table or for infrequently changing virtual hosts. *vhds* is used for
   * on-demand discovery of virtual hosts. The contents of these two fields will be merged to
   * generate a routing table for a given RouteConfiguration, with *vhds* derived configuration
   * taking precedence.
   */
  vhds?:
    | Vhds
    | undefined;
  /**
   * Optionally specifies a list of HTTP headers that the connection manager
   * will consider to be internal only. If they are found on external requests they will be cleaned
   * prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
   * information.
   */
  internal_only_headers?:
    | string[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be added to each response that
   * the connection manager encodes. Headers specified at this level are applied
   * after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
   * :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * <config_http_conn_man_headers_custom_request_headers>`.
   */
  response_headers_to_add?:
    | HeaderValueOption[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be removed from each response
   * that the connection manager encodes.
   */
  response_headers_to_remove?:
    | string[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be added to each request
   * routed by the HTTP connection manager. Headers specified at this level are
   * applied after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
   * :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * <config_http_conn_man_headers_custom_request_headers>`.
   */
  request_headers_to_add?:
    | HeaderValueOption[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be removed from each request
   * routed by the HTTP connection manager.
   */
  request_headers_to_remove?:
    | string[]
    | undefined;
  /**
   * By default, headers that should be added/removed are evaluated from most to least specific:
   *
   * * route level
   * * virtual host level
   * * connection manager level
   *
   * To allow setting overrides at the route or virtual host level, this order can be reversed
   * by setting this option to true. Defaults to false.
   *
   * [#next-major-version: In the v3 API, this will default to true.]
   */
  most_specific_header_mutations_wins?:
    | boolean
    | undefined;
  /**
   * An optional boolean that specifies whether the clusters that the route
   * table refers to will be validated by the cluster manager. If set to true
   * and a route refers to a non-existent cluster, the route table will not
   * load. If set to false and a route refers to a non-existent cluster, the
   * route table will load and the router filter will return a 404 if the route
   * is selected at runtime. This setting defaults to true if the route table
   * is statically defined via the :ref:`route_config
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_config>`
   * option. This setting default to false if the route table is loaded dynamically via the
   * :ref:`rds
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.rds>`
   * option. Users may wish to override the default behavior in certain cases (for example when
   * using CDS with a static route table).
   */
  validate_clusters?: boolean | undefined;
}

export interface Vhds {
  $type: "envoy.api.v2.Vhds";
  /** Configuration source specifier for VHDS. */
  config_source?: ConfigSource | undefined;
}

function createBaseRouteConfiguration(): RouteConfiguration {
  return { $type: "envoy.api.v2.RouteConfiguration" };
}

export const RouteConfiguration: MessageFns<RouteConfiguration, "envoy.api.v2.RouteConfiguration"> = {
  $type: "envoy.api.v2.RouteConfiguration" as const,

  encode(message: RouteConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.virtual_hosts !== undefined && message.virtual_hosts.length !== 0) {
      for (const v of message.virtual_hosts) {
        VirtualHost.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.vhds !== undefined) {
      Vhds.encode(message.vhds, writer.uint32(74).fork()).join();
    }
    if (message.internal_only_headers !== undefined && message.internal_only_headers.length !== 0) {
      for (const v of message.internal_only_headers) {
        writer.uint32(26).string(v!);
      }
    }
    if (message.response_headers_to_add !== undefined && message.response_headers_to_add.length !== 0) {
      for (const v of message.response_headers_to_add) {
        HeaderValueOption.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    if (message.response_headers_to_remove !== undefined && message.response_headers_to_remove.length !== 0) {
      for (const v of message.response_headers_to_remove) {
        writer.uint32(42).string(v!);
      }
    }
    if (message.request_headers_to_add !== undefined && message.request_headers_to_add.length !== 0) {
      for (const v of message.request_headers_to_add) {
        HeaderValueOption.encode(v!, writer.uint32(50).fork()).join();
      }
    }
    if (message.request_headers_to_remove !== undefined && message.request_headers_to_remove.length !== 0) {
      for (const v of message.request_headers_to_remove) {
        writer.uint32(66).string(v!);
      }
    }
    if (
      message.most_specific_header_mutations_wins !== undefined && message.most_specific_header_mutations_wins !== false
    ) {
      writer.uint32(80).bool(message.most_specific_header_mutations_wins);
    }
    if (message.validate_clusters !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.validate_clusters! },
        writer.uint32(58).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.virtual_hosts === undefined) {
            message.virtual_hosts = [];
          }
          const el = VirtualHost.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.virtual_hosts!.push(el);
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.vhds = Vhds.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.internal_only_headers === undefined) {
            message.internal_only_headers = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.internal_only_headers!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.response_headers_to_add === undefined) {
            message.response_headers_to_add = [];
          }
          const el = HeaderValueOption.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.response_headers_to_add!.push(el);
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.response_headers_to_remove === undefined) {
            message.response_headers_to_remove = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.response_headers_to_remove!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          if (message.request_headers_to_add === undefined) {
            message.request_headers_to_add = [];
          }
          const el = HeaderValueOption.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.request_headers_to_add!.push(el);
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          if (message.request_headers_to_remove === undefined) {
            message.request_headers_to_remove = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.request_headers_to_remove!.push(el);
          }
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.most_specific_header_mutations_wins = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.validate_clusters = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteConfiguration {
    return {
      $type: RouteConfiguration.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      virtual_hosts: globalThis.Array.isArray(object?.virtual_hosts)
        ? object.virtual_hosts.map((e: any) => VirtualHost.fromJSON(e))
        : undefined,
      vhds: isSet(object.vhds) ? Vhds.fromJSON(object.vhds) : undefined,
      internal_only_headers: globalThis.Array.isArray(object?.internal_only_headers)
        ? object.internal_only_headers.map((e: any) => globalThis.String(e))
        : undefined,
      response_headers_to_add: globalThis.Array.isArray(object?.response_headers_to_add)
        ? object.response_headers_to_add.map((e: any) => HeaderValueOption.fromJSON(e))
        : undefined,
      response_headers_to_remove: globalThis.Array.isArray(object?.response_headers_to_remove)
        ? object.response_headers_to_remove.map((e: any) => globalThis.String(e))
        : undefined,
      request_headers_to_add: globalThis.Array.isArray(object?.request_headers_to_add)
        ? object.request_headers_to_add.map((e: any) => HeaderValueOption.fromJSON(e))
        : undefined,
      request_headers_to_remove: globalThis.Array.isArray(object?.request_headers_to_remove)
        ? object.request_headers_to_remove.map((e: any) => globalThis.String(e))
        : undefined,
      most_specific_header_mutations_wins: isSet(object.most_specific_header_mutations_wins)
        ? globalThis.Boolean(object.most_specific_header_mutations_wins)
        : undefined,
      validate_clusters: isSet(object.validate_clusters) ? Boolean(object.validate_clusters) : undefined,
    };
  },

  toJSON(message: RouteConfiguration): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.virtual_hosts?.length) {
      obj.virtual_hosts = message.virtual_hosts.map((e) => VirtualHost.toJSON(e));
    }
    if (message.vhds !== undefined) {
      obj.vhds = Vhds.toJSON(message.vhds);
    }
    if (message.internal_only_headers?.length) {
      obj.internal_only_headers = message.internal_only_headers;
    }
    if (message.response_headers_to_add?.length) {
      obj.response_headers_to_add = message.response_headers_to_add.map((e) => HeaderValueOption.toJSON(e));
    }
    if (message.response_headers_to_remove?.length) {
      obj.response_headers_to_remove = message.response_headers_to_remove;
    }
    if (message.request_headers_to_add?.length) {
      obj.request_headers_to_add = message.request_headers_to_add.map((e) => HeaderValueOption.toJSON(e));
    }
    if (message.request_headers_to_remove?.length) {
      obj.request_headers_to_remove = message.request_headers_to_remove;
    }
    if (message.most_specific_header_mutations_wins !== undefined) {
      obj.most_specific_header_mutations_wins = message.most_specific_header_mutations_wins;
    }
    if (message.validate_clusters !== undefined) {
      obj.validate_clusters = message.validate_clusters;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteConfiguration>, I>>(base?: I): RouteConfiguration {
    return RouteConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteConfiguration>, I>>(object: I): RouteConfiguration {
    const message = createBaseRouteConfiguration();
    message.name = object.name ?? undefined;
    message.virtual_hosts = object.virtual_hosts?.map((e) => VirtualHost.fromPartial(e)) || undefined;
    message.vhds = (object.vhds !== undefined && object.vhds !== null) ? Vhds.fromPartial(object.vhds) : undefined;
    message.internal_only_headers = object.internal_only_headers?.map((e) => e) || undefined;
    message.response_headers_to_add = object.response_headers_to_add?.map((e) => HeaderValueOption.fromPartial(e)) ||
      undefined;
    message.response_headers_to_remove = object.response_headers_to_remove?.map((e) => e) || undefined;
    message.request_headers_to_add = object.request_headers_to_add?.map((e) => HeaderValueOption.fromPartial(e)) ||
      undefined;
    message.request_headers_to_remove = object.request_headers_to_remove?.map((e) => e) || undefined;
    message.most_specific_header_mutations_wins = object.most_specific_header_mutations_wins ?? undefined;
    message.validate_clusters = object.validate_clusters ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteConfiguration.$type, RouteConfiguration);

function createBaseVhds(): Vhds {
  return { $type: "envoy.api.v2.Vhds" };
}

export const Vhds: MessageFns<Vhds, "envoy.api.v2.Vhds"> = {
  $type: "envoy.api.v2.Vhds" as const,

  encode(message: Vhds, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config_source !== undefined) {
      ConfigSource.encode(message.config_source, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vhds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVhds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config_source = ConfigSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vhds {
    return {
      $type: Vhds.$type,
      config_source: isSet(object.config_source) ? ConfigSource.fromJSON(object.config_source) : undefined,
    };
  },

  toJSON(message: Vhds): unknown {
    const obj: any = {};
    if (message.config_source !== undefined) {
      obj.config_source = ConfigSource.toJSON(message.config_source);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vhds>, I>>(base?: I): Vhds {
    return Vhds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vhds>, I>>(object: I): Vhds {
    const message = createBaseVhds();
    message.config_source = (object.config_source !== undefined && object.config_source !== null)
      ? ConfigSource.fromPartial(object.config_source)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Vhds.$type, Vhds);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
