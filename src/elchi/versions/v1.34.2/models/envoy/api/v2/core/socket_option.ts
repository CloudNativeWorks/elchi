// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/core/socket_option.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.api.v2.core";

/**
 * Generic socket option message. This would be used to set socket options that
 * might not exist in upstream kernels or precompiled Envoy binaries.
 * [#next-free-field: 7]
 */
export interface SocketOption {
  $type: "envoy.api.v2.core.SocketOption";
  /**
   * An optional name to give this socket option for debugging, etc.
   * Uniqueness is not required and no special meaning is assumed.
   */
  description?:
    | string
    | undefined;
  /** Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP */
  level?:
    | number
    | undefined;
  /** The numeric name as passed to setsockopt */
  name?: number | undefined;
  value?:
    | //
    /** Because many sockopts take an int value. */
    { $case: "int_value"; int_value: number }
    | //
    /** Otherwise it's a byte buffer. */
    { $case: "buf_value"; buf_value: Uint8Array }
    | undefined;
  /**
   * The state in which the option will be applied. When used in BindConfig
   * STATE_PREBIND is currently the only valid value.
   */
  state?: SocketOption_SocketState | undefined;
}

export enum SocketOption_SocketState {
  /** STATE_PREBIND - Socket options are applied after socket creation but before binding the socket to a port */
  STATE_PREBIND = "STATE_PREBIND",
  /** STATE_BOUND - Socket options are applied after binding the socket to a port but before calling listen() */
  STATE_BOUND = "STATE_BOUND",
  /** STATE_LISTENING - Socket options are applied after calling listen() */
  STATE_LISTENING = "STATE_LISTENING",
}

export function socketOption_SocketStateFromJSON(object: any): SocketOption_SocketState {
  switch (object) {
    case 0:
    case "STATE_PREBIND":
      return SocketOption_SocketState.STATE_PREBIND;
    case 1:
    case "STATE_BOUND":
      return SocketOption_SocketState.STATE_BOUND;
    case 2:
    case "STATE_LISTENING":
      return SocketOption_SocketState.STATE_LISTENING;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SocketOption_SocketState");
  }
}

export function socketOption_SocketStateToJSON(object: SocketOption_SocketState): string {
  switch (object) {
    case SocketOption_SocketState.STATE_PREBIND:
      return "STATE_PREBIND";
    case SocketOption_SocketState.STATE_BOUND:
      return "STATE_BOUND";
    case SocketOption_SocketState.STATE_LISTENING:
      return "STATE_LISTENING";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SocketOption_SocketState");
  }
}

export function socketOption_SocketStateToNumber(object: SocketOption_SocketState): number {
  switch (object) {
    case SocketOption_SocketState.STATE_PREBIND:
      return 0;
    case SocketOption_SocketState.STATE_BOUND:
      return 1;
    case SocketOption_SocketState.STATE_LISTENING:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SocketOption_SocketState");
  }
}

function createBaseSocketOption(): SocketOption {
  return { $type: "envoy.api.v2.core.SocketOption", value: undefined };
}

export const SocketOption: MessageFns<SocketOption, "envoy.api.v2.core.SocketOption"> = {
  $type: "envoy.api.v2.core.SocketOption" as const,

  encode(message: SocketOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== undefined && message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.level !== undefined && message.level !== 0) {
      writer.uint32(16).int64(message.level);
    }
    if (message.name !== undefined && message.name !== 0) {
      writer.uint32(24).int64(message.name);
    }
    switch (message.value?.$case) {
      case "int_value":
        writer.uint32(32).int64(message.value.int_value);
        break;
      case "buf_value":
        writer.uint32(42).bytes(message.value.buf_value);
        break;
    }
    if (message.state !== undefined && message.state !== SocketOption_SocketState.STATE_PREBIND) {
      writer.uint32(48).int32(socketOption_SocketStateToNumber(message.state));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.level = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.name = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.value = { $case: "int_value", int_value: longToNumber(reader.int64()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.value = { $case: "buf_value", buf_value: reader.bytes() };
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.state = socketOption_SocketStateFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketOption {
    return {
      $type: SocketOption.$type,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      level: isSet(object.level) ? globalThis.Number(object.level) : undefined,
      name: isSet(object.name) ? globalThis.Number(object.name) : undefined,
      value: isSet(object.int_value)
        ? { $case: "int_value", int_value: globalThis.Number(object.int_value) }
        : isSet(object.buf_value)
        ? { $case: "buf_value", buf_value: bytesFromBase64(object.buf_value) }
        : undefined,
      state: isSet(object.state) ? socketOption_SocketStateFromJSON(object.state) : undefined,
    };
  },

  toJSON(message: SocketOption): unknown {
    const obj: any = {};
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.level !== undefined) {
      obj.level = Math.round(message.level);
    }
    if (message.name !== undefined) {
      obj.name = Math.round(message.name);
    }
    if (message.value?.$case === "int_value") {
      obj.int_value = Math.round(message.value.int_value);
    }
    if (message.value?.$case === "buf_value") {
      obj.buf_value = base64FromBytes(message.value.buf_value);
    }
    if (message.state !== undefined) {
      obj.state = socketOption_SocketStateToJSON(message.state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketOption>, I>>(base?: I): SocketOption {
    return SocketOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketOption>, I>>(object: I): SocketOption {
    const message = createBaseSocketOption();
    message.description = object.description ?? undefined;
    message.level = object.level ?? undefined;
    message.name = object.name ?? undefined;
    if (
      object.value?.$case === "int_value" && object.value?.int_value !== undefined && object.value?.int_value !== null
    ) {
      message.value = { $case: "int_value", int_value: object.value.int_value };
    }
    if (
      object.value?.$case === "buf_value" && object.value?.buf_value !== undefined && object.value?.buf_value !== null
    ) {
      message.value = { $case: "buf_value", buf_value: object.value.buf_value };
    }
    message.state = object.state ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketOption.$type, SocketOption);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
