// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/rds.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { messageTypeRegistry } from "../../../typeRegistry";
import { DeltaDiscoveryRequest, DeltaDiscoveryResponse, DiscoveryRequest, DiscoveryResponse } from "./discovery";

export const protobufPackage = "envoy.api.v2";

/**
 * [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
 * services: https://github.com/google/protobuf/issues/4221 and protoxform to upgrade the file.
 */
export interface RdsDummy {
  $type: "envoy.api.v2.RdsDummy";
}

function createBaseRdsDummy(): RdsDummy {
  return { $type: "envoy.api.v2.RdsDummy" };
}

export const RdsDummy: MessageFns<RdsDummy, "envoy.api.v2.RdsDummy"> = {
  $type: "envoy.api.v2.RdsDummy" as const,

  encode(_: RdsDummy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RdsDummy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRdsDummy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RdsDummy {
    return { $type: RdsDummy.$type };
  },

  toJSON(_: RdsDummy): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RdsDummy>, I>>(base?: I): RdsDummy {
    return RdsDummy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RdsDummy>, I>>(_: I): RdsDummy {
    const message = createBaseRdsDummy();
    return message;
  },
};

messageTypeRegistry.set(RdsDummy.$type, RdsDummy);

/**
 * The resource_names field in DiscoveryRequest specifies a route configuration.
 * This allows an Envoy configuration with multiple HTTP listeners (and
 * associated HTTP connection manager filters) to use different route
 * configurations. Each listener will bind its HTTP connection manager filter to
 * a route table via this identifier.
 */
export interface RouteDiscoveryService {
  StreamRoutes(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse>;
  DeltaRoutes(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse>;
  FetchRoutes(request: DiscoveryRequest): Promise<DiscoveryResponse>;
}

export const RouteDiscoveryServiceServiceName = "envoy.api.v2.RouteDiscoveryService";
export class RouteDiscoveryServiceClientImpl implements RouteDiscoveryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RouteDiscoveryServiceServiceName;
    this.rpc = rpc;
    this.StreamRoutes = this.StreamRoutes.bind(this);
    this.DeltaRoutes = this.DeltaRoutes.bind(this);
    this.FetchRoutes = this.FetchRoutes.bind(this);
  }
  StreamRoutes(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse> {
    const data = request.pipe(map((request) => DiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamRoutes", data);
    return result.pipe(map((data) => DiscoveryResponse.decode(new BinaryReader(data))));
  }

  DeltaRoutes(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse> {
    const data = request.pipe(map((request) => DeltaDiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "DeltaRoutes", data);
    return result.pipe(map((data) => DeltaDiscoveryResponse.decode(new BinaryReader(data))));
  }

  FetchRoutes(request: DiscoveryRequest): Promise<DiscoveryResponse> {
    const data = DiscoveryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FetchRoutes", data);
    return promise.then((data) => DiscoveryResponse.decode(new BinaryReader(data)));
  }
}

/**
 * Virtual Host Discovery Service (VHDS) is used to dynamically update the list of virtual hosts for
 * a given RouteConfiguration. If VHDS is configured a virtual host list update will be triggered
 * during the processing of an HTTP request if a route for the request cannot be resolved. The
 * :ref:`resource_names_subscribe <envoy_api_field_DeltaDiscoveryRequest.resource_names_subscribe>`
 * field contains a list of virtual host names or aliases to track. The contents of an alias would
 * be the contents of a *host* or *authority* header used to make an http request. An xDS server
 * will match an alias to a virtual host based on the content of :ref:`domains'
 * <envoy_api_field_route.VirtualHost.domains>` field. The *resource_names_unsubscribe* field
 * contains a list of virtual host names that have been :ref:`unsubscribed
 * <xds_protocol_unsubscribe>` from the routing table associated with the RouteConfiguration.
 */
export interface VirtualHostDiscoveryService {
  DeltaVirtualHosts(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse>;
}

export const VirtualHostDiscoveryServiceServiceName = "envoy.api.v2.VirtualHostDiscoveryService";
export class VirtualHostDiscoveryServiceClientImpl implements VirtualHostDiscoveryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || VirtualHostDiscoveryServiceServiceName;
    this.rpc = rpc;
    this.DeltaVirtualHosts = this.DeltaVirtualHosts.bind(this);
  }
  DeltaVirtualHosts(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse> {
    const data = request.pipe(map((request) => DeltaDiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "DeltaVirtualHosts", data);
    return result.pipe(map((data) => DeltaDiscoveryResponse.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
