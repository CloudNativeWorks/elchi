// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/core/grpc_method_list.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.api.v2.core";

/** A list of gRPC methods which can be used as an allowlist, for example. */
export interface GrpcMethodList {
  $type: "envoy.api.v2.core.GrpcMethodList";
  services?: GrpcMethodList_Service[] | undefined;
}

export interface GrpcMethodList_Service {
  $type: "envoy.api.v2.core.GrpcMethodList.Service";
  /** The name of the gRPC service. */
  name?:
    | string
    | undefined;
  /** The names of the gRPC methods in this service. */
  method_names?: string[] | undefined;
}

function createBaseGrpcMethodList(): GrpcMethodList {
  return { $type: "envoy.api.v2.core.GrpcMethodList" };
}

export const GrpcMethodList: MessageFns<GrpcMethodList, "envoy.api.v2.core.GrpcMethodList"> = {
  $type: "envoy.api.v2.core.GrpcMethodList" as const,

  encode(message: GrpcMethodList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.services !== undefined && message.services.length !== 0) {
      for (const v of message.services) {
        GrpcMethodList_Service.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcMethodList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcMethodList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.services === undefined) {
            message.services = [];
          }
          const el = GrpcMethodList_Service.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.services!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcMethodList {
    return {
      $type: GrpcMethodList.$type,
      services: globalThis.Array.isArray(object?.services)
        ? object.services.map((e: any) => GrpcMethodList_Service.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: GrpcMethodList): unknown {
    const obj: any = {};
    if (message.services?.length) {
      obj.services = message.services.map((e) => GrpcMethodList_Service.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcMethodList>, I>>(base?: I): GrpcMethodList {
    return GrpcMethodList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcMethodList>, I>>(object: I): GrpcMethodList {
    const message = createBaseGrpcMethodList();
    message.services = object.services?.map((e) => GrpcMethodList_Service.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(GrpcMethodList.$type, GrpcMethodList);

function createBaseGrpcMethodList_Service(): GrpcMethodList_Service {
  return { $type: "envoy.api.v2.core.GrpcMethodList.Service" };
}

export const GrpcMethodList_Service: MessageFns<GrpcMethodList_Service, "envoy.api.v2.core.GrpcMethodList.Service"> = {
  $type: "envoy.api.v2.core.GrpcMethodList.Service" as const,

  encode(message: GrpcMethodList_Service, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.method_names !== undefined && message.method_names.length !== 0) {
      for (const v of message.method_names) {
        writer.uint32(18).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcMethodList_Service {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcMethodList_Service();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.method_names === undefined) {
            message.method_names = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.method_names!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcMethodList_Service {
    return {
      $type: GrpcMethodList_Service.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      method_names: globalThis.Array.isArray(object?.method_names)
        ? object.method_names.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: GrpcMethodList_Service): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.method_names?.length) {
      obj.method_names = message.method_names;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcMethodList_Service>, I>>(base?: I): GrpcMethodList_Service {
    return GrpcMethodList_Service.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcMethodList_Service>, I>>(object: I): GrpcMethodList_Service {
    const message = createBaseGrpcMethodList_Service();
    message.name = object.name ?? undefined;
    message.method_names = object.method_names?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(GrpcMethodList_Service.$type, GrpcMethodList_Service);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
