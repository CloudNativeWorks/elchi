// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/v3/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { ValueMatcher } from "./value";

export const protobufPackage = "envoy.type.matcher.v3";

/** [#next-major-version: MetadataMatcher should use StructMatcher] */
export interface MetadataMatcher {
  $type: "envoy.type.matcher.v3.MetadataMatcher";
  /** The filter name to retrieve the Struct from the Metadata. */
  filter?:
    | string
    | undefined;
  /** The path to retrieve the Value from the Struct. */
  path?:
    | MetadataMatcher_PathSegment[]
    | undefined;
  /** The MetadataMatcher is matched if the value retrieved by path is matched to this value. */
  value?:
    | ValueMatcher
    | undefined;
  /** If true, the match result will be inverted. */
  invert?: boolean | undefined;
}

/**
 * Specifies the segment in a path to retrieve value from Metadata.
 * Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that
 * if the segment key refers to a list, it has to be the last segment in a path.
 */
export interface MetadataMatcher_PathSegment {
  $type: "envoy.type.matcher.v3.MetadataMatcher.PathSegment";
  segment?:
    | //
    /** If specified, use the key to retrieve the value in a Struct. */
    { $case: "key"; key: string }
    | undefined;
}

function createBaseMetadataMatcher(): MetadataMatcher {
  return { $type: "envoy.type.matcher.v3.MetadataMatcher" };
}

export const MetadataMatcher: MessageFns<MetadataMatcher, "envoy.type.matcher.v3.MetadataMatcher"> = {
  $type: "envoy.type.matcher.v3.MetadataMatcher" as const,

  encode(message: MetadataMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined && message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.path !== undefined && message.path.length !== 0) {
      for (const v of message.path) {
        MetadataMatcher_PathSegment.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.value !== undefined) {
      ValueMatcher.encode(message.value, writer.uint32(26).fork()).join();
    }
    if (message.invert !== undefined && message.invert !== false) {
      writer.uint32(32).bool(message.invert);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.path === undefined) {
            message.path = [];
          }
          const el = MetadataMatcher_PathSegment.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.path!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = ValueMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.invert = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataMatcher {
    return {
      $type: MetadataMatcher.$type,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : undefined,
      path: globalThis.Array.isArray(object?.path)
        ? object.path.map((e: any) => MetadataMatcher_PathSegment.fromJSON(e))
        : undefined,
      value: isSet(object.value) ? ValueMatcher.fromJSON(object.value) : undefined,
      invert: isSet(object.invert) ? globalThis.Boolean(object.invert) : undefined,
    };
  },

  toJSON(message: MetadataMatcher): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.path?.length) {
      obj.path = message.path.map((e) => MetadataMatcher_PathSegment.toJSON(e));
    }
    if (message.value !== undefined) {
      obj.value = ValueMatcher.toJSON(message.value);
    }
    if (message.invert !== undefined) {
      obj.invert = message.invert;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataMatcher>, I>>(base?: I): MetadataMatcher {
    return MetadataMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataMatcher>, I>>(object: I): MetadataMatcher {
    const message = createBaseMetadataMatcher();
    message.filter = object.filter ?? undefined;
    message.path = object.path?.map((e) => MetadataMatcher_PathSegment.fromPartial(e)) || undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? ValueMatcher.fromPartial(object.value)
      : undefined;
    message.invert = object.invert ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(MetadataMatcher.$type, MetadataMatcher);

function createBaseMetadataMatcher_PathSegment(): MetadataMatcher_PathSegment {
  return { $type: "envoy.type.matcher.v3.MetadataMatcher.PathSegment", segment: undefined };
}

export const MetadataMatcher_PathSegment: MessageFns<
  MetadataMatcher_PathSegment,
  "envoy.type.matcher.v3.MetadataMatcher.PathSegment"
> = {
  $type: "envoy.type.matcher.v3.MetadataMatcher.PathSegment" as const,

  encode(message: MetadataMatcher_PathSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.segment?.$case) {
      case "key":
        writer.uint32(10).string(message.segment.key);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataMatcher_PathSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataMatcher_PathSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.segment = { $case: "key", key: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataMatcher_PathSegment {
    return {
      $type: MetadataMatcher_PathSegment.$type,
      segment: isSet(object.key) ? { $case: "key", key: globalThis.String(object.key) } : undefined,
    };
  },

  toJSON(message: MetadataMatcher_PathSegment): unknown {
    const obj: any = {};
    if (message.segment?.$case === "key") {
      obj.key = message.segment.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataMatcher_PathSegment>, I>>(base?: I): MetadataMatcher_PathSegment {
    return MetadataMatcher_PathSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataMatcher_PathSegment>, I>>(object: I): MetadataMatcher_PathSegment {
    const message = createBaseMetadataMatcher_PathSegment();
    if (object.segment?.$case === "key" && object.segment?.key !== undefined && object.segment?.key !== null) {
      message.segment = { $case: "key", key: object.segment.key };
    }
    return message;
  },
};

messageTypeRegistry.set(MetadataMatcher_PathSegment.$type, MetadataMatcher_PathSegment);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
