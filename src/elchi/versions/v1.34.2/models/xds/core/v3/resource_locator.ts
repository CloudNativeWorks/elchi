// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: xds/core/v3/resource_locator.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";
import { ContextParams } from "./context_params";

export const protobufPackage = "xds.core.v3";

/**
 * xDS resource locators identify a xDS resource name and instruct the
 * data-plane load balancer on how the resource may be located.
 *
 * Resource locators have a canonical xdstp:// URI representation:
 *
 *   xdstp://{authority}/{type_url}/{id}?{context_params}{#directive,*}
 *
 * where context_params take the form of URI query parameters.
 *
 * Resource locators have a similar canonical http:// URI representation:
 *
 *   http://{authority}/{type_url}/{id}?{context_params}{#directive,*}
 *
 * Resource locators also have a simplified file:// URI representation:
 *
 *   file:///{id}{#directive,*}
 */
export interface ResourceLocator {
  $type: "xds.core.v3.ResourceLocator";
  /** URI scheme. */
  scheme?:
    | ResourceLocator_Scheme
    | undefined;
  /**
   * Opaque identifier for the resource. Any '/' will not be escaped during URI
   * encoding and will form part of the URI path. This may end
   * with ‘*’ for glob collection references.
   */
  id?:
    | string
    | undefined;
  /**
   * Logical authority for resource (not necessarily transport network address).
   * Authorities are opaque in the xDS API, data-plane load balancers will map
   * them to concrete network transports such as an xDS management server, e.g.
   * via envoy.config.core.v3.ConfigSource.
   */
  authority?:
    | string
    | undefined;
  /**
   * Fully qualified resource type (as in type URL without types.googleapis.com/
   * prefix).
   */
  resource_type?: string | undefined;
  context_param_specifier?:
    | //
    /**
     * Additional parameters that can be used to select resource variants.
     * Matches must be exact, i.e. all context parameters must match exactly and
     * there must be no additional context parameters set on the matched
     * resource.
     */
    { $case: "exact_context"; exact_context: ContextParams }
    | undefined;
  /**
   * A list of directives that appear in the xDS resource locator #fragment.
   *
   * When encoding to URI form, directives are percent encoded with comma
   * separation.
   */
  directives?: ResourceLocator_Directive[] | undefined;
}

export enum ResourceLocator_Scheme {
  XDSTP = "XDSTP",
  HTTP = "HTTP",
  FILE = "FILE",
}

export function resourceLocator_SchemeFromJSON(object: any): ResourceLocator_Scheme {
  switch (object) {
    case 0:
    case "XDSTP":
      return ResourceLocator_Scheme.XDSTP;
    case 1:
    case "HTTP":
      return ResourceLocator_Scheme.HTTP;
    case 2:
    case "FILE":
      return ResourceLocator_Scheme.FILE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ResourceLocator_Scheme");
  }
}

export function resourceLocator_SchemeToJSON(object: ResourceLocator_Scheme): string {
  switch (object) {
    case ResourceLocator_Scheme.XDSTP:
      return "XDSTP";
    case ResourceLocator_Scheme.HTTP:
      return "HTTP";
    case ResourceLocator_Scheme.FILE:
      return "FILE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ResourceLocator_Scheme");
  }
}

export function resourceLocator_SchemeToNumber(object: ResourceLocator_Scheme): number {
  switch (object) {
    case ResourceLocator_Scheme.XDSTP:
      return 0;
    case ResourceLocator_Scheme.HTTP:
      return 1;
    case ResourceLocator_Scheme.FILE:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ResourceLocator_Scheme");
  }
}

/**
 * Directives provide information to data-plane load balancers on how xDS
 * resource names are to be interpreted and potentially further resolved. For
 * example, they may provide alternative resource locators for when primary
 * resolution fails. Directives are not part of resource names and do not
 * appear in a xDS transport discovery request.
 *
 * When encoding to URIs, directives take the form:
 *
 * <directive name>=<string representation of directive value>
 *
 * For example, we can have alt=xdstp://foo/bar or entry=some%20thing. Each
 * directive value type may have its own string encoding, in the case of
 * ResourceLocator there is a recursive URI encoding.
 *
 * Percent encoding applies to the URI encoding of the directive value.
 * Multiple directives are comma-separated, so the reserved characters that
 * require percent encoding in a directive value are [',', '#', '[', ']',
 * '%']. These are the RFC3986 fragment reserved characters with the addition
 * of the xDS scheme specific ','. See
 * https://tools.ietf.org/html/rfc3986#page-49 for further details on URI ABNF
 * and reserved characters.
 */
export interface ResourceLocator_Directive {
  $type: "xds.core.v3.ResourceLocator.Directive";
  directive?:
    | //
    /**
     * An alternative resource locator for fallback if the resource is
     * unavailable. For example, take the resource locator:
     *
     *   xdstp://foo/some-type/some-route-table#alt=xdstp://bar/some-type/another-route-table
     *
     * If the data-plane load balancer is unable to reach `foo` to fetch the
     * resource, it will fallback to `bar`. Alternative resources do not need
     * to have equivalent content, but they should be functional substitutes.
     */
    { $case: "alt"; alt: ResourceLocator }
    | //
    /**
     * List collections support inlining of resources via the entry field in
     * Resource. These inlined Resource objects may have an optional name
     * field specified. When specified, the entry directive allows
     * ResourceLocator to directly reference these inlined resources, e.g.
     * xdstp://.../foo#entry=bar.
     */
    { $case: "entry"; entry: string }
    | undefined;
}

function createBaseResourceLocator(): ResourceLocator {
  return { $type: "xds.core.v3.ResourceLocator", context_param_specifier: undefined };
}

export const ResourceLocator: MessageFns<ResourceLocator, "xds.core.v3.ResourceLocator"> = {
  $type: "xds.core.v3.ResourceLocator" as const,

  encode(message: ResourceLocator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scheme !== undefined && message.scheme !== ResourceLocator_Scheme.XDSTP) {
      writer.uint32(8).int32(resourceLocator_SchemeToNumber(message.scheme));
    }
    if (message.id !== undefined && message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.authority !== undefined && message.authority !== "") {
      writer.uint32(26).string(message.authority);
    }
    if (message.resource_type !== undefined && message.resource_type !== "") {
      writer.uint32(34).string(message.resource_type);
    }
    switch (message.context_param_specifier?.$case) {
      case "exact_context":
        ContextParams.encode(message.context_param_specifier.exact_context, writer.uint32(42).fork()).join();
        break;
    }
    if (message.directives !== undefined && message.directives.length !== 0) {
      for (const v of message.directives) {
        ResourceLocator_Directive.encode(v!, writer.uint32(50).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceLocator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceLocator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.scheme = resourceLocator_SchemeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resource_type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.context_param_specifier = {
            $case: "exact_context",
            exact_context: ContextParams.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          if (message.directives === undefined) {
            message.directives = [];
          }
          const el = ResourceLocator_Directive.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.directives!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceLocator {
    return {
      $type: ResourceLocator.$type,
      scheme: isSet(object.scheme) ? resourceLocator_SchemeFromJSON(object.scheme) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      authority: isSet(object.authority) ? globalThis.String(object.authority) : undefined,
      resource_type: isSet(object.resource_type) ? globalThis.String(object.resource_type) : undefined,
      context_param_specifier: isSet(object.exact_context)
        ? { $case: "exact_context", exact_context: ContextParams.fromJSON(object.exact_context) }
        : undefined,
      directives: globalThis.Array.isArray(object?.directives)
        ? object.directives.map((e: any) => ResourceLocator_Directive.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: ResourceLocator): unknown {
    const obj: any = {};
    if (message.scheme !== undefined) {
      obj.scheme = resourceLocator_SchemeToJSON(message.scheme);
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.authority !== undefined) {
      obj.authority = message.authority;
    }
    if (message.resource_type !== undefined) {
      obj.resource_type = message.resource_type;
    }
    if (message.context_param_specifier?.$case === "exact_context") {
      obj.exact_context = ContextParams.toJSON(message.context_param_specifier.exact_context);
    }
    if (message.directives?.length) {
      obj.directives = message.directives.map((e) => ResourceLocator_Directive.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResourceLocator>, I>>(base?: I): ResourceLocator {
    return ResourceLocator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResourceLocator>, I>>(object: I): ResourceLocator {
    const message = createBaseResourceLocator();
    message.scheme = object.scheme ?? undefined;
    message.id = object.id ?? undefined;
    message.authority = object.authority ?? undefined;
    message.resource_type = object.resource_type ?? undefined;
    if (
      object.context_param_specifier?.$case === "exact_context" &&
      object.context_param_specifier?.exact_context !== undefined &&
      object.context_param_specifier?.exact_context !== null
    ) {
      message.context_param_specifier = {
        $case: "exact_context",
        exact_context: ContextParams.fromPartial(object.context_param_specifier.exact_context),
      };
    }
    message.directives = object.directives?.map((e) => ResourceLocator_Directive.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(ResourceLocator.$type, ResourceLocator);

function createBaseResourceLocator_Directive(): ResourceLocator_Directive {
  return { $type: "xds.core.v3.ResourceLocator.Directive", directive: undefined };
}

export const ResourceLocator_Directive: MessageFns<ResourceLocator_Directive, "xds.core.v3.ResourceLocator.Directive"> =
  {
    $type: "xds.core.v3.ResourceLocator.Directive" as const,

    encode(message: ResourceLocator_Directive, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      switch (message.directive?.$case) {
        case "alt":
          ResourceLocator.encode(message.directive.alt, writer.uint32(10).fork()).join();
          break;
        case "entry":
          writer.uint32(18).string(message.directive.entry);
          break;
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ResourceLocator_Directive {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseResourceLocator_Directive();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.directive = { $case: "alt", alt: ResourceLocator.decode(reader, reader.uint32()) };
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.directive = { $case: "entry", entry: reader.string() };
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ResourceLocator_Directive {
      return {
        $type: ResourceLocator_Directive.$type,
        directive: isSet(object.alt)
          ? { $case: "alt", alt: ResourceLocator.fromJSON(object.alt) }
          : isSet(object.entry)
          ? { $case: "entry", entry: globalThis.String(object.entry) }
          : undefined,
      };
    },

    toJSON(message: ResourceLocator_Directive): unknown {
      const obj: any = {};
      if (message.directive?.$case === "alt") {
        obj.alt = ResourceLocator.toJSON(message.directive.alt);
      }
      if (message.directive?.$case === "entry") {
        obj.entry = message.directive.entry;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<ResourceLocator_Directive>, I>>(base?: I): ResourceLocator_Directive {
      return ResourceLocator_Directive.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<ResourceLocator_Directive>, I>>(object: I): ResourceLocator_Directive {
      const message = createBaseResourceLocator_Directive();
      if (object.directive?.$case === "alt" && object.directive?.alt !== undefined && object.directive?.alt !== null) {
        message.directive = { $case: "alt", alt: ResourceLocator.fromPartial(object.directive.alt) };
      }
      if (
        object.directive?.$case === "entry" && object.directive?.entry !== undefined && object.directive?.entry !== null
      ) {
        message.directive = { $case: "entry", entry: object.directive.entry };
      }
      return message;
    },
  };

messageTypeRegistry.set(ResourceLocator_Directive.$type, ResourceLocator_Directive);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
