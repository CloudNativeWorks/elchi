import {OutType} from '@elchi/tags/tagsType';


export const ClientStatusRequest: OutType = { "ClientStatusRequest": [
  {
    "name": "node_matchers",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "NodeMatcher[]",
    "enums": null,
    "comment": "Management server can use these match criteria to identify clients. The match follows OR semantics.",
    "notImp": false
  },
  {
    "name": "node",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "Node",
    "enums": null,
    "comment": "The node making the csds request.",
    "notImp": false
  },
  {
    "name": "exclude_resource_contents",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "boolean",
    "enums": null,
    "comment": "If true, the server will not include the resource contents in the response (i.e., the generic_xds_configs.xds_config field will not be populated). [#not-implemented-hide:]",
    "notImp": true
  }
] };

export const ClientStatusRequest_SingleFields = [
  "exclude_resource_contents"
];

export const PerXdsConfig: OutType = { "PerXdsConfig": [
  {
    "name": "status",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "ConfigStatus",
    "enums": [
      "UNKNOWN",
      "SYNCED",
      "NOT_SENT",
      "STALE",
      "ERROR"
    ],
    "comment": "Config status generated by management servers. Will not be present if the CSDS server is an xDS client.",
    "notImp": false
  },
  {
    "name": "client_status",
    "isUnion": false,
    "isDeprecated": true,
    "fieldType": "ClientConfigStatus",
    "enums": [
      "CLIENT_UNKNOWN",
      "CLIENT_REQUESTED",
      "CLIENT_ACKED",
      "CLIENT_NACKED",
      "CLIENT_RECEIVED_ERROR"
    ],
    "comment": "Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config.\n\n:::attention\nThis field is deprecated. Use `ClientResourceStatus` for per-resource config status instead. \n:::",
    "notImp": false
  },
  {
    "name": "per_xds_config.listener_config",
    "isUnion": true,
    "isDeprecated": false,
    "fieldType": "ListenersConfigDump",
    "enums": null,
    "comment": "Detailed config (per xDS) with status. [#next-free-field: 8]",
    "notImp": false
  },
  {
    "name": "per_xds_config.cluster_config",
    "isUnion": true,
    "isDeprecated": false,
    "fieldType": "ClustersConfigDump",
    "enums": null,
    "comment": "Detailed config (per xDS) with status. [#next-free-field: 8]",
    "notImp": false
  },
  {
    "name": "per_xds_config.route_config",
    "isUnion": true,
    "isDeprecated": false,
    "fieldType": "RoutesConfigDump",
    "enums": null,
    "comment": "Detailed config (per xDS) with status. [#next-free-field: 8]",
    "notImp": false
  },
  {
    "name": "per_xds_config.scoped_route_config",
    "isUnion": true,
    "isDeprecated": false,
    "fieldType": "ScopedRoutesConfigDump",
    "enums": null,
    "comment": "Detailed config (per xDS) with status. [#next-free-field: 8]",
    "notImp": false
  },
  {
    "name": "per_xds_config.endpoint_config",
    "isUnion": true,
    "isDeprecated": false,
    "fieldType": "EndpointsConfigDump",
    "enums": null,
    "comment": "Detailed config (per xDS) with status. [#next-free-field: 8]",
    "notImp": false
  }
] };

export const PerXdsConfig_SingleFields = [
  "status"
];

export const ClientConfig: OutType = { "ClientConfig": [
  {
    "name": "node",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "Node",
    "enums": null,
    "comment": "Node for a particular client.",
    "notImp": false
  },
  {
    "name": "xds_config",
    "isUnion": false,
    "isDeprecated": true,
    "fieldType": "PerXdsConfig[]",
    "enums": null,
    "comment": "This field is deprecated in favor of generic_xds_configs which is much simpler and uniform in structure.",
    "notImp": false
  },
  {
    "name": "generic_xds_configs",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "ClientConfig_GenericXdsConfig[]",
    "enums": null,
    "comment": "Represents generic xDS config and the exact config structure depends on the type URL (like Cluster if it is CDS)",
    "notImp": false
  },
  {
    "name": "client_scope",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "string",
    "enums": null,
    "comment": "For xDS clients, the scope in which the data is used. For example, gRPC indicates the data plane target or that the data is associated with gRPC server(s).",
    "notImp": false
  }
] };

export const ClientConfig_SingleFields = [
  "client_scope"
];

export const ClientConfig_GenericXdsConfig: OutType = { "ClientConfig_GenericXdsConfig": [
  {
    "name": "type_url",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "string",
    "enums": null,
    "comment": "Type_url represents the fully qualified name of xDS resource type like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.",
    "notImp": false
  },
  {
    "name": "name",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "string",
    "enums": null,
    "comment": "Name of the xDS resource",
    "notImp": false
  },
  {
    "name": "version_info",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "string",
    "enums": null,
    "comment": "This is the `version_info` in the last processed xDS discovery response. If there are only static bootstrap listeners, this field will be \"\"",
    "notImp": false
  },
  {
    "name": "xds_config",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "Any",
    "enums": null,
    "comment": "The xDS resource config. Actual content depends on the type",
    "notImp": false
  },
  {
    "name": "last_updated",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "Date",
    "enums": null,
    "comment": "Timestamp when the xDS resource was last updated",
    "notImp": false
  },
  {
    "name": "config_status",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "ConfigStatus",
    "enums": [
      "UNKNOWN",
      "SYNCED",
      "NOT_SENT",
      "STALE",
      "ERROR"
    ],
    "comment": "Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.",
    "notImp": false
  },
  {
    "name": "client_status",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "ClientResourceStatus",
    "enums": [
      "UNKNOWN",
      "REQUESTED",
      "DOES_NOT_EXIST",
      "ACKED",
      "NACKED",
      "RECEIVED_ERROR",
      "TIMEOUT"
    ],
    "comment": "Per xDS resource status from the view of a xDS client",
    "notImp": false
  },
  {
    "name": "error_state",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "UpdateFailureState",
    "enums": null,
    "comment": "Set if the last update failed, cleared after the next successful update. The *error_state* field contains the rejected version of this particular resource along with the reason and timestamp. For successfully updated or acknowledged resource, this field should be empty. [#not-implemented-hide:]",
    "notImp": true
  },
  {
    "name": "is_static_resource",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "boolean",
    "enums": null,
    "comment": "Is static resource is true if it is specified in the config supplied through the file at the startup.",
    "notImp": false
  }
] };

export const ClientConfig_GenericXdsConfig_SingleFields = [
  "type_url",
  "name",
  "version_info",
  "config_status",
  "client_status",
  "is_static_resource"
];

export const ClientStatusResponse: OutType = { "ClientStatusResponse": [
  {
    "name": "config",
    "isUnion": false,
    "isDeprecated": false,
    "fieldType": "ClientConfig[]",
    "enums": null,
    "comment": "Client configs for the clients specified in the ClientStatusRequest.",
    "notImp": false
  }
] };