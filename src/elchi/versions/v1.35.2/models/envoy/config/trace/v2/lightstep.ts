// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v2/lightstep.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.config.trace.v2";

/**
 * Configuration for the LightStep tracer.
 * [#extension: envoy.tracers.lightstep]
 */
export interface LightstepConfig {
  $type: "envoy.config.trace.v2.LightstepConfig";
  /** The cluster manager cluster that hosts the LightStep collectors. */
  collector_cluster?:
    | string
    | undefined;
  /**
   * File containing the access token to the `LightStep
   * <https://lightstep.com/>`_ API.
   */
  access_token_file?:
    | string
    | undefined;
  /** Propagation modes to use by LightStep's tracer. */
  propagation_modes?: LightstepConfig_PropagationMode[] | undefined;
}

/** Available propagation modes */
export enum LightstepConfig_PropagationMode {
  /** ENVOY - Propagate trace context in the single header x-ot-span-context. */
  ENVOY = "ENVOY",
  /** LIGHTSTEP - Propagate trace context using LightStep's native format. */
  LIGHTSTEP = "LIGHTSTEP",
  /** B3 - Propagate trace context using the b3 format. */
  B3 = "B3",
  /** TRACE_CONTEXT - Propagation trace context using the w3 trace-context standard. */
  TRACE_CONTEXT = "TRACE_CONTEXT",
}

export function lightstepConfig_PropagationModeFromJSON(object: any): LightstepConfig_PropagationMode {
  switch (object) {
    case 0:
    case "ENVOY":
      return LightstepConfig_PropagationMode.ENVOY;
    case 1:
    case "LIGHTSTEP":
      return LightstepConfig_PropagationMode.LIGHTSTEP;
    case 2:
    case "B3":
      return LightstepConfig_PropagationMode.B3;
    case 3:
    case "TRACE_CONTEXT":
      return LightstepConfig_PropagationMode.TRACE_CONTEXT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LightstepConfig_PropagationMode");
  }
}

export function lightstepConfig_PropagationModeToJSON(object: LightstepConfig_PropagationMode): string {
  switch (object) {
    case LightstepConfig_PropagationMode.ENVOY:
      return "ENVOY";
    case LightstepConfig_PropagationMode.LIGHTSTEP:
      return "LIGHTSTEP";
    case LightstepConfig_PropagationMode.B3:
      return "B3";
    case LightstepConfig_PropagationMode.TRACE_CONTEXT:
      return "TRACE_CONTEXT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LightstepConfig_PropagationMode");
  }
}

export function lightstepConfig_PropagationModeToNumber(object: LightstepConfig_PropagationMode): number {
  switch (object) {
    case LightstepConfig_PropagationMode.ENVOY:
      return 0;
    case LightstepConfig_PropagationMode.LIGHTSTEP:
      return 1;
    case LightstepConfig_PropagationMode.B3:
      return 2;
    case LightstepConfig_PropagationMode.TRACE_CONTEXT:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LightstepConfig_PropagationMode");
  }
}

function createBaseLightstepConfig(): LightstepConfig {
  return { $type: "envoy.config.trace.v2.LightstepConfig" };
}

export const LightstepConfig: MessageFns<LightstepConfig, "envoy.config.trace.v2.LightstepConfig"> = {
  $type: "envoy.config.trace.v2.LightstepConfig" as const,

  encode(message: LightstepConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collector_cluster !== undefined && message.collector_cluster !== "") {
      writer.uint32(10).string(message.collector_cluster);
    }
    if (message.access_token_file !== undefined && message.access_token_file !== "") {
      writer.uint32(18).string(message.access_token_file);
    }
    if (message.propagation_modes !== undefined && message.propagation_modes.length !== 0) {
      writer.uint32(26).fork();
      for (const v of message.propagation_modes) {
        writer.int32(lightstepConfig_PropagationModeToNumber(v));
      }
      writer.join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LightstepConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLightstepConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collector_cluster = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_token_file = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            if (message.propagation_modes === undefined) {
              message.propagation_modes = [];
            }
            message.propagation_modes!.push(lightstepConfig_PropagationModeFromJSON(reader.int32()));

            continue;
          }

          if (tag === 26) {
            if (message.propagation_modes === undefined) {
              message.propagation_modes = [];
            }
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.propagation_modes!.push(lightstepConfig_PropagationModeFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LightstepConfig {
    return {
      $type: LightstepConfig.$type,
      collector_cluster: isSet(object.collector_cluster) ? globalThis.String(object.collector_cluster) : undefined,
      access_token_file: isSet(object.access_token_file) ? globalThis.String(object.access_token_file) : undefined,
      propagation_modes: globalThis.Array.isArray(object?.propagation_modes)
        ? object.propagation_modes.map((e: any) => lightstepConfig_PropagationModeFromJSON(e))
        : undefined,
    };
  },

  toJSON(message: LightstepConfig): unknown {
    const obj: any = {};
    if (message.collector_cluster !== undefined) {
      obj.collector_cluster = message.collector_cluster;
    }
    if (message.access_token_file !== undefined) {
      obj.access_token_file = message.access_token_file;
    }
    if (message.propagation_modes?.length) {
      obj.propagation_modes = message.propagation_modes.map((e) => lightstepConfig_PropagationModeToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LightstepConfig>, I>>(base?: I): LightstepConfig {
    return LightstepConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LightstepConfig>, I>>(object: I): LightstepConfig {
    const message = createBaseLightstepConfig();
    message.collector_cluster = object.collector_cluster ?? undefined;
    message.access_token_file = object.access_token_file ?? undefined;
    message.propagation_modes = object.propagation_modes?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(LightstepConfig.$type, LightstepConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
