// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/cluster/dynamic_forward_proxy/v2alpha/cluster.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { DnsCacheConfig } from "../../../common/dynamic_forward_proxy/v2alpha/dns_cache";

export const protobufPackage = "envoy.config.cluster.dynamic_forward_proxy.v2alpha";

/**
 * Configuration for the dynamic forward proxy cluster. See the :ref:`architecture overview
 * <arch_overview_http_dynamic_forward_proxy>` for more information.
 * [#extension: envoy.clusters.dynamic_forward_proxy]
 */
export interface ClusterConfig {
  $type: "envoy.config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig";
  /**
   * The DNS cache configuration that the cluster will attach to. Note this configuration must
   * match that of associated :ref:`dynamic forward proxy HTTP filter configuration
   * <envoy_api_field_config.filter.http.dynamic_forward_proxy.v2alpha.FilterConfig.dns_cache_config>`.
   */
  dns_cache_config?: DnsCacheConfig | undefined;
}

function createBaseClusterConfig(): ClusterConfig {
  return { $type: "envoy.config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig" };
}

export const ClusterConfig: MessageFns<
  ClusterConfig,
  "envoy.config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig"
> = {
  $type: "envoy.config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig" as const,

  encode(message: ClusterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dns_cache_config !== undefined) {
      DnsCacheConfig.encode(message.dns_cache_config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dns_cache_config = DnsCacheConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterConfig {
    return {
      $type: ClusterConfig.$type,
      dns_cache_config: isSet(object.dns_cache_config) ? DnsCacheConfig.fromJSON(object.dns_cache_config) : undefined,
    };
  },

  toJSON(message: ClusterConfig): unknown {
    const obj: any = {};
    if (message.dns_cache_config !== undefined) {
      obj.dns_cache_config = DnsCacheConfig.toJSON(message.dns_cache_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterConfig>, I>>(base?: I): ClusterConfig {
    return ClusterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterConfig>, I>>(object: I): ClusterConfig {
    const message = createBaseClusterConfig();
    message.dns_cache_config = (object.dns_cache_config !== undefined && object.dns_cache_config !== null)
      ? DnsCacheConfig.fromPartial(object.dns_cache_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ClusterConfig.$type, ClusterConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
