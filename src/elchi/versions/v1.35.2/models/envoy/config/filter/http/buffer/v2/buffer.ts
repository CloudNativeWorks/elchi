// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/http/buffer/v2/buffer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.config.filter.http.buffer.v2";

export interface Buffer {
  $type: "envoy.config.filter.http.buffer.v2.Buffer";
  /**
   * The maximum request size that the filter will buffer before the connection
   * manager will stop buffering and return a 413 response.
   */
  max_request_bytes?: number | undefined;
}

export interface BufferPerRoute {
  $type: "envoy.config.filter.http.buffer.v2.BufferPerRoute";
  override?:
    | //
    /** Disable the buffer filter for this particular vhost or route. */
    { $case: "disabled"; disabled: boolean }
    | //
    /** Override the global configuration of the filter with this new config. */
    { $case: "buffer"; buffer: Buffer }
    | undefined;
}

function createBaseBuffer(): Buffer {
  return { $type: "envoy.config.filter.http.buffer.v2.Buffer" };
}

export const Buffer: MessageFns<Buffer, "envoy.config.filter.http.buffer.v2.Buffer"> = {
  $type: "envoy.config.filter.http.buffer.v2.Buffer" as const,

  encode(message: Buffer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.max_request_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_request_bytes! },
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Buffer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuffer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.max_request_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Buffer {
    return {
      $type: Buffer.$type,
      max_request_bytes: isSet(object.max_request_bytes) ? Number(object.max_request_bytes) : undefined,
    };
  },

  toJSON(message: Buffer): unknown {
    const obj: any = {};
    if (message.max_request_bytes !== undefined) {
      obj.max_request_bytes = message.max_request_bytes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Buffer>, I>>(base?: I): Buffer {
    return Buffer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Buffer>, I>>(object: I): Buffer {
    const message = createBaseBuffer();
    message.max_request_bytes = object.max_request_bytes ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Buffer.$type, Buffer);

function createBaseBufferPerRoute(): BufferPerRoute {
  return { $type: "envoy.config.filter.http.buffer.v2.BufferPerRoute", override: undefined };
}

export const BufferPerRoute: MessageFns<BufferPerRoute, "envoy.config.filter.http.buffer.v2.BufferPerRoute"> = {
  $type: "envoy.config.filter.http.buffer.v2.BufferPerRoute" as const,

  encode(message: BufferPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.override?.$case) {
      case "disabled":
        writer.uint32(8).bool(message.override.disabled);
        break;
      case "buffer":
        Buffer.encode(message.override.buffer, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BufferPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBufferPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.override = { $case: "disabled", disabled: reader.bool() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.override = { $case: "buffer", buffer: Buffer.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BufferPerRoute {
    return {
      $type: BufferPerRoute.$type,
      override: isSet(object.disabled)
        ? { $case: "disabled", disabled: globalThis.Boolean(object.disabled) }
        : isSet(object.buffer)
        ? { $case: "buffer", buffer: Buffer.fromJSON(object.buffer) }
        : undefined,
    };
  },

  toJSON(message: BufferPerRoute): unknown {
    const obj: any = {};
    if (message.override?.$case === "disabled") {
      obj.disabled = message.override.disabled;
    }
    if (message.override?.$case === "buffer") {
      obj.buffer = Buffer.toJSON(message.override.buffer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BufferPerRoute>, I>>(base?: I): BufferPerRoute {
    return BufferPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BufferPerRoute>, I>>(object: I): BufferPerRoute {
    const message = createBaseBufferPerRoute();
    if (
      object.override?.$case === "disabled" &&
      object.override?.disabled !== undefined &&
      object.override?.disabled !== null
    ) {
      message.override = { $case: "disabled", disabled: object.override.disabled };
    }
    if (
      object.override?.$case === "buffer" && object.override?.buffer !== undefined && object.override?.buffer !== null
    ) {
      message.override = { $case: "buffer", buffer: Buffer.fromPartial(object.override.buffer) };
    }
    return message;
  },
};

messageTypeRegistry.set(BufferPerRoute.$type, BufferPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
