// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/admin/v3/memory.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.admin.v3";

/**
 * Proto representation of the internal memory consumption of an Envoy instance. These represent
 * values extracted from an internal TCMalloc instance. For more information, see the section of the
 * docs entitled ["Generic Tcmalloc Status"](https://gperftools.github.io/gperftools/tcmalloc.html).
 * [#next-free-field: 7]
 */
export interface Memory {
  $type: "envoy.admin.v3.Memory";
  /**
   * The number of bytes allocated by the heap for Envoy. This is an alias for
   * ``generic.current_allocated_bytes``.
   */
  allocated?:
    | number
    | undefined;
  /**
   * The number of bytes reserved by the heap but not necessarily allocated. This is an alias for
   * ``generic.heap_size``.
   */
  heap_size?:
    | number
    | undefined;
  /**
   * The number of bytes in free, unmapped pages in the page heap. These bytes always count towards
   * virtual memory usage, and depending on the OS, typically do not count towards physical memory
   * usage. This is an alias for ``tcmalloc.pageheap_unmapped_bytes``.
   */
  pageheap_unmapped?:
    | number
    | undefined;
  /**
   * The number of bytes in free, mapped pages in the page heap. These bytes always count towards
   * virtual memory usage, and unless the underlying memory is swapped out by the OS, they also
   * count towards physical memory usage. This is an alias for ``tcmalloc.pageheap_free_bytes``.
   */
  pageheap_free?:
    | number
    | undefined;
  /**
   * The amount of memory used by the TCMalloc thread caches (for small objects). This is an alias
   * for ``tcmalloc.current_total_thread_cache_bytes``.
   */
  total_thread_cache?:
    | number
    | undefined;
  /**
   * The number of bytes of the physical memory usage by the allocator. This is an alias for
   * ``generic.total_physical_bytes``.
   */
  total_physical_bytes?: number | undefined;
}

function createBaseMemory(): Memory {
  return { $type: "envoy.admin.v3.Memory" };
}

export const Memory: MessageFns<Memory, "envoy.admin.v3.Memory"> = {
  $type: "envoy.admin.v3.Memory" as const,

  encode(message: Memory, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allocated !== undefined && message.allocated !== 0) {
      writer.uint32(8).uint64(message.allocated);
    }
    if (message.heap_size !== undefined && message.heap_size !== 0) {
      writer.uint32(16).uint64(message.heap_size);
    }
    if (message.pageheap_unmapped !== undefined && message.pageheap_unmapped !== 0) {
      writer.uint32(24).uint64(message.pageheap_unmapped);
    }
    if (message.pageheap_free !== undefined && message.pageheap_free !== 0) {
      writer.uint32(32).uint64(message.pageheap_free);
    }
    if (message.total_thread_cache !== undefined && message.total_thread_cache !== 0) {
      writer.uint32(40).uint64(message.total_thread_cache);
    }
    if (message.total_physical_bytes !== undefined && message.total_physical_bytes !== 0) {
      writer.uint32(48).uint64(message.total_physical_bytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Memory {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemory();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.allocated = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.heap_size = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageheap_unmapped = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageheap_free = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.total_thread_cache = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.total_physical_bytes = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Memory {
    return {
      $type: Memory.$type,
      allocated: isSet(object.allocated) ? globalThis.Number(object.allocated) : undefined,
      heap_size: isSet(object.heap_size) ? globalThis.Number(object.heap_size) : undefined,
      pageheap_unmapped: isSet(object.pageheap_unmapped) ? globalThis.Number(object.pageheap_unmapped) : undefined,
      pageheap_free: isSet(object.pageheap_free) ? globalThis.Number(object.pageheap_free) : undefined,
      total_thread_cache: isSet(object.total_thread_cache) ? globalThis.Number(object.total_thread_cache) : undefined,
      total_physical_bytes: isSet(object.total_physical_bytes)
        ? globalThis.Number(object.total_physical_bytes)
        : undefined,
    };
  },

  toJSON(message: Memory): unknown {
    const obj: any = {};
    if (message.allocated !== undefined) {
      obj.allocated = Math.round(message.allocated);
    }
    if (message.heap_size !== undefined) {
      obj.heap_size = Math.round(message.heap_size);
    }
    if (message.pageheap_unmapped !== undefined) {
      obj.pageheap_unmapped = Math.round(message.pageheap_unmapped);
    }
    if (message.pageheap_free !== undefined) {
      obj.pageheap_free = Math.round(message.pageheap_free);
    }
    if (message.total_thread_cache !== undefined) {
      obj.total_thread_cache = Math.round(message.total_thread_cache);
    }
    if (message.total_physical_bytes !== undefined) {
      obj.total_physical_bytes = Math.round(message.total_physical_bytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Memory>, I>>(base?: I): Memory {
    return Memory.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Memory>, I>>(object: I): Memory {
    const message = createBaseMemory();
    message.allocated = object.allocated ?? undefined;
    message.heap_size = object.heap_size ?? undefined;
    message.pageheap_unmapped = object.pageheap_unmapped ?? undefined;
    message.pageheap_free = object.pageheap_free ?? undefined;
    message.total_thread_cache = object.total_thread_cache ?? undefined;
    message.total_physical_bytes = object.total_physical_bytes ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Memory.$type, Memory);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
