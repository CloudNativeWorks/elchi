// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/admin/v2alpha/listeners.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";
import { Address } from "../../api/v2/core/address";

export const protobufPackage = "envoy.admin.v2alpha";

/**
 * Admin endpoint uses this wrapper for `/listeners` to display listener status information.
 * See :ref:`/listeners <operations_admin_interface_listeners>` for more information.
 */
export interface Listeners {
  $type: "envoy.admin.v2alpha.Listeners";
  /** List of listener statuses. */
  listener_statuses?: ListenerStatus[] | undefined;
}

/** Details an individual listener's current status. */
export interface ListenerStatus {
  $type: "envoy.admin.v2alpha.ListenerStatus";
  /** Name of the listener */
  name?:
    | string
    | undefined;
  /**
   * The actual local address that the listener is listening on. If a listener was configured
   * to listen on port 0, then this address has the port that was allocated by the OS.
   */
  local_address?: Address | undefined;
}

function createBaseListeners(): Listeners {
  return { $type: "envoy.admin.v2alpha.Listeners" };
}

export const Listeners: MessageFns<Listeners, "envoy.admin.v2alpha.Listeners"> = {
  $type: "envoy.admin.v2alpha.Listeners" as const,

  encode(message: Listeners, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listener_statuses !== undefined && message.listener_statuses.length !== 0) {
      for (const v of message.listener_statuses) {
        ListenerStatus.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Listeners {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListeners();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.listener_statuses === undefined) {
            message.listener_statuses = [];
          }
          const el = ListenerStatus.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.listener_statuses!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Listeners {
    return {
      $type: Listeners.$type,
      listener_statuses: globalThis.Array.isArray(object?.listener_statuses)
        ? object.listener_statuses.map((e: any) => ListenerStatus.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Listeners): unknown {
    const obj: any = {};
    if (message.listener_statuses?.length) {
      obj.listener_statuses = message.listener_statuses.map((e) => ListenerStatus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Listeners>, I>>(base?: I): Listeners {
    return Listeners.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Listeners>, I>>(object: I): Listeners {
    const message = createBaseListeners();
    message.listener_statuses = object.listener_statuses?.map((e) => ListenerStatus.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Listeners.$type, Listeners);

function createBaseListenerStatus(): ListenerStatus {
  return { $type: "envoy.admin.v2alpha.ListenerStatus" };
}

export const ListenerStatus: MessageFns<ListenerStatus, "envoy.admin.v2alpha.ListenerStatus"> = {
  $type: "envoy.admin.v2alpha.ListenerStatus" as const,

  encode(message: ListenerStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.local_address !== undefined) {
      Address.encode(message.local_address, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListenerStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListenerStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.local_address = Address.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListenerStatus {
    return {
      $type: ListenerStatus.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      local_address: isSet(object.local_address) ? Address.fromJSON(object.local_address) : undefined,
    };
  },

  toJSON(message: ListenerStatus): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.local_address !== undefined) {
      obj.local_address = Address.toJSON(message.local_address);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListenerStatus>, I>>(base?: I): ListenerStatus {
    return ListenerStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListenerStatus>, I>>(object: I): ListenerStatus {
    const message = createBaseListenerStatus();
    message.name = object.name ?? undefined;
    message.local_address = (object.local_address !== undefined && object.local_address !== null)
      ? Address.fromPartial(object.local_address)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ListenerStatus.$type, ListenerStatus);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
