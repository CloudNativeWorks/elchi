// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/cluster/circuit_breaker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Percent } from "../../../type/percent";
import { RoutingPriority, routingPriorityFromJSON, routingPriorityToJSON, routingPriorityToNumber } from "../core/base";

export const protobufPackage = "envoy.api.v2.cluster";

/**
 * :ref:`Circuit breaking<arch_overview_circuit_break>` settings can be
 * specified individually for each defined priority.
 */
export interface CircuitBreakers {
  $type: "envoy.api.v2.cluster.CircuitBreakers";
  /**
   * If multiple :ref:`Thresholds<envoy_api_msg_cluster.CircuitBreakers.Thresholds>`
   * are defined with the same :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`,
   * the first one in the list is used. If no Thresholds is defined for a given
   * :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`, the default values
   * are used.
   */
  thresholds?: CircuitBreakers_Thresholds[] | undefined;
}

/**
 * A Thresholds defines CircuitBreaker settings for a
 * :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`.
 * [#next-free-field: 9]
 */
export interface CircuitBreakers_Thresholds {
  $type: "envoy.api.v2.cluster.CircuitBreakers.Thresholds";
  /**
   * The :ref:`RoutingPriority<envoy_api_enum_core.RoutingPriority>`
   * the specified CircuitBreaker settings apply to.
   */
  priority?:
    | RoutingPriority
    | undefined;
  /**
   * The maximum number of connections that Envoy will make to the upstream
   * cluster. If not specified, the default is 1024.
   */
  max_connections?:
    | number
    | undefined;
  /**
   * The maximum number of pending requests that Envoy will allow to the
   * upstream cluster. If not specified, the default is 1024.
   */
  max_pending_requests?:
    | number
    | undefined;
  /**
   * The maximum number of parallel requests that Envoy will make to the
   * upstream cluster. If not specified, the default is 1024.
   */
  max_requests?:
    | number
    | undefined;
  /**
   * The maximum number of parallel retries that Envoy will allow to the
   * upstream cluster. If not specified, the default is 3.
   */
  max_retries?:
    | number
    | undefined;
  /**
   * Specifies a limit on concurrent retries in relation to the number of active requests. This
   * parameter is optional.
   *
   * .. note::
   *
   *    If this field is set, the retry budget will override any configured retry circuit
   *    breaker.
   */
  retry_budget?:
    | CircuitBreakers_Thresholds_RetryBudget
    | undefined;
  /**
   * If track_remaining is true, then stats will be published that expose
   * the number of resources remaining until the circuit breakers open. If
   * not specified, the default is false.
   *
   * .. note::
   *
   *    If a retry budget is used in lieu of the max_retries circuit breaker,
   *    the remaining retry resources remaining will not be tracked.
   */
  track_remaining?:
    | boolean
    | undefined;
  /**
   * The maximum number of connection pools per cluster that Envoy will concurrently support at
   * once. If not specified, the default is unlimited. Set this for clusters which create a
   * large number of connection pools. See
   * :ref:`Circuit Breaking <arch_overview_circuit_break_cluster_maximum_connection_pools>` for
   * more details.
   */
  max_connection_pools?: number | undefined;
}

export interface CircuitBreakers_Thresholds_RetryBudget {
  $type: "envoy.api.v2.cluster.CircuitBreakers.Thresholds.RetryBudget";
  /**
   * Specifies the limit on concurrent retries as a percentage of the sum of active requests and
   * active pending requests. For example, if there are 100 active requests and the
   * budget_percent is set to 25, there may be 25 active retries.
   *
   * This parameter is optional. Defaults to 20%.
   */
  budget_percent?:
    | Percent
    | undefined;
  /**
   * Specifies the minimum retry concurrency allowed for the retry budget. The limit on the
   * number of active retries may never go below this number.
   *
   * This parameter is optional. Defaults to 3.
   */
  min_retry_concurrency?: number | undefined;
}

function createBaseCircuitBreakers(): CircuitBreakers {
  return { $type: "envoy.api.v2.cluster.CircuitBreakers" };
}

export const CircuitBreakers: MessageFns<CircuitBreakers, "envoy.api.v2.cluster.CircuitBreakers"> = {
  $type: "envoy.api.v2.cluster.CircuitBreakers" as const,

  encode(message: CircuitBreakers, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.thresholds !== undefined && message.thresholds.length !== 0) {
      for (const v of message.thresholds) {
        CircuitBreakers_Thresholds.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CircuitBreakers {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCircuitBreakers();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.thresholds === undefined) {
            message.thresholds = [];
          }
          const el = CircuitBreakers_Thresholds.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.thresholds!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CircuitBreakers {
    return {
      $type: CircuitBreakers.$type,
      thresholds: globalThis.Array.isArray(object?.thresholds)
        ? object.thresholds.map((e: any) => CircuitBreakers_Thresholds.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: CircuitBreakers): unknown {
    const obj: any = {};
    if (message.thresholds?.length) {
      obj.thresholds = message.thresholds.map((e) => CircuitBreakers_Thresholds.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CircuitBreakers>, I>>(base?: I): CircuitBreakers {
    return CircuitBreakers.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CircuitBreakers>, I>>(object: I): CircuitBreakers {
    const message = createBaseCircuitBreakers();
    message.thresholds = object.thresholds?.map((e) => CircuitBreakers_Thresholds.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(CircuitBreakers.$type, CircuitBreakers);

function createBaseCircuitBreakers_Thresholds(): CircuitBreakers_Thresholds {
  return { $type: "envoy.api.v2.cluster.CircuitBreakers.Thresholds" };
}

export const CircuitBreakers_Thresholds: MessageFns<
  CircuitBreakers_Thresholds,
  "envoy.api.v2.cluster.CircuitBreakers.Thresholds"
> = {
  $type: "envoy.api.v2.cluster.CircuitBreakers.Thresholds" as const,

  encode(message: CircuitBreakers_Thresholds, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.priority !== undefined && message.priority !== RoutingPriority.DEFAULT) {
      writer.uint32(8).int32(routingPriorityToNumber(message.priority));
    }
    if (message.max_connections !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_connections! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.max_pending_requests !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_pending_requests! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.max_requests !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_requests! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.max_retries !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_retries! },
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.retry_budget !== undefined) {
      CircuitBreakers_Thresholds_RetryBudget.encode(message.retry_budget, writer.uint32(66).fork()).join();
    }
    if (message.track_remaining !== undefined && message.track_remaining !== false) {
      writer.uint32(48).bool(message.track_remaining);
    }
    if (message.max_connection_pools !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_connection_pools! },
        writer.uint32(58).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CircuitBreakers_Thresholds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCircuitBreakers_Thresholds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.priority = routingPriorityFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.max_connections = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.max_pending_requests = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.max_requests = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.max_retries = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.retry_budget = CircuitBreakers_Thresholds_RetryBudget.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.track_remaining = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.max_connection_pools = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CircuitBreakers_Thresholds {
    return {
      $type: CircuitBreakers_Thresholds.$type,
      priority: isSet(object.priority) ? routingPriorityFromJSON(object.priority) : undefined,
      max_connections: isSet(object.max_connections) ? Number(object.max_connections) : undefined,
      max_pending_requests: isSet(object.max_pending_requests) ? Number(object.max_pending_requests) : undefined,
      max_requests: isSet(object.max_requests) ? Number(object.max_requests) : undefined,
      max_retries: isSet(object.max_retries) ? Number(object.max_retries) : undefined,
      retry_budget: isSet(object.retry_budget)
        ? CircuitBreakers_Thresholds_RetryBudget.fromJSON(object.retry_budget)
        : undefined,
      track_remaining: isSet(object.track_remaining) ? globalThis.Boolean(object.track_remaining) : undefined,
      max_connection_pools: isSet(object.max_connection_pools) ? Number(object.max_connection_pools) : undefined,
    };
  },

  toJSON(message: CircuitBreakers_Thresholds): unknown {
    const obj: any = {};
    if (message.priority !== undefined) {
      obj.priority = routingPriorityToJSON(message.priority);
    }
    if (message.max_connections !== undefined) {
      obj.max_connections = message.max_connections;
    }
    if (message.max_pending_requests !== undefined) {
      obj.max_pending_requests = message.max_pending_requests;
    }
    if (message.max_requests !== undefined) {
      obj.max_requests = message.max_requests;
    }
    if (message.max_retries !== undefined) {
      obj.max_retries = message.max_retries;
    }
    if (message.retry_budget !== undefined) {
      obj.retry_budget = CircuitBreakers_Thresholds_RetryBudget.toJSON(message.retry_budget);
    }
    if (message.track_remaining !== undefined) {
      obj.track_remaining = message.track_remaining;
    }
    if (message.max_connection_pools !== undefined) {
      obj.max_connection_pools = message.max_connection_pools;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CircuitBreakers_Thresholds>, I>>(base?: I): CircuitBreakers_Thresholds {
    return CircuitBreakers_Thresholds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CircuitBreakers_Thresholds>, I>>(object: I): CircuitBreakers_Thresholds {
    const message = createBaseCircuitBreakers_Thresholds();
    message.priority = object.priority ?? undefined;
    message.max_connections = object.max_connections ?? undefined;
    message.max_pending_requests = object.max_pending_requests ?? undefined;
    message.max_requests = object.max_requests ?? undefined;
    message.max_retries = object.max_retries ?? undefined;
    message.retry_budget = (object.retry_budget !== undefined && object.retry_budget !== null)
      ? CircuitBreakers_Thresholds_RetryBudget.fromPartial(object.retry_budget)
      : undefined;
    message.track_remaining = object.track_remaining ?? undefined;
    message.max_connection_pools = object.max_connection_pools ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CircuitBreakers_Thresholds.$type, CircuitBreakers_Thresholds);

function createBaseCircuitBreakers_Thresholds_RetryBudget(): CircuitBreakers_Thresholds_RetryBudget {
  return { $type: "envoy.api.v2.cluster.CircuitBreakers.Thresholds.RetryBudget" };
}

export const CircuitBreakers_Thresholds_RetryBudget: MessageFns<
  CircuitBreakers_Thresholds_RetryBudget,
  "envoy.api.v2.cluster.CircuitBreakers.Thresholds.RetryBudget"
> = {
  $type: "envoy.api.v2.cluster.CircuitBreakers.Thresholds.RetryBudget" as const,

  encode(message: CircuitBreakers_Thresholds_RetryBudget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.budget_percent !== undefined) {
      Percent.encode(message.budget_percent, writer.uint32(10).fork()).join();
    }
    if (message.min_retry_concurrency !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.min_retry_concurrency! },
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CircuitBreakers_Thresholds_RetryBudget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCircuitBreakers_Thresholds_RetryBudget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.budget_percent = Percent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.min_retry_concurrency = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CircuitBreakers_Thresholds_RetryBudget {
    return {
      $type: CircuitBreakers_Thresholds_RetryBudget.$type,
      budget_percent: isSet(object.budget_percent) ? Percent.fromJSON(object.budget_percent) : undefined,
      min_retry_concurrency: isSet(object.min_retry_concurrency) ? Number(object.min_retry_concurrency) : undefined,
    };
  },

  toJSON(message: CircuitBreakers_Thresholds_RetryBudget): unknown {
    const obj: any = {};
    if (message.budget_percent !== undefined) {
      obj.budget_percent = Percent.toJSON(message.budget_percent);
    }
    if (message.min_retry_concurrency !== undefined) {
      obj.min_retry_concurrency = message.min_retry_concurrency;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CircuitBreakers_Thresholds_RetryBudget>, I>>(
    base?: I,
  ): CircuitBreakers_Thresholds_RetryBudget {
    return CircuitBreakers_Thresholds_RetryBudget.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CircuitBreakers_Thresholds_RetryBudget>, I>>(
    object: I,
  ): CircuitBreakers_Thresholds_RetryBudget {
    const message = createBaseCircuitBreakers_Thresholds_RetryBudget();
    message.budget_percent = (object.budget_percent !== undefined && object.budget_percent !== null)
      ? Percent.fromPartial(object.budget_percent)
      : undefined;
    message.min_retry_concurrency = object.min_retry_concurrency ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CircuitBreakers_Thresholds_RetryBudget.$type, CircuitBreakers_Thresholds_RetryBudget);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
