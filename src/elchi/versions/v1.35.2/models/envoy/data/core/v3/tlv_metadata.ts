// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/core/v3/tlv_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.data.core.v3";

export interface TlvsMetadata {
  $type: "envoy.data.core.v3.TlvsMetadata";
  /**
   * Typed metadata for :ref:`Proxy protocol filter <envoy_v3_api_msg_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol>`, that represents a map of TLVs.
   * Each entry in the map consists of a key which corresponds to a configured
   * :ref:`rule key <envoy_v3_api_field_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair.key>` and a value (TLV value in bytes).
   * When runtime flag ``envoy.reloadable_features.use_typed_metadata_in_proxy_protocol_listener`` is enabled,
   * :ref:`Proxy protocol filter <envoy_v3_api_msg_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol>`
   * will populate typed metadata and regular metadata. By default filter will populate typed and untyped metadata.
   */
  typed_metadata?: Map<string, Uint8Array> | undefined;
}

export interface TlvsMetadata_TypedMetadataEntry {
  $type: "envoy.data.core.v3.TlvsMetadata.TypedMetadataEntry";
  key: string;
  value: Uint8Array;
}

function createBaseTlvsMetadata(): TlvsMetadata {
  return { $type: "envoy.data.core.v3.TlvsMetadata" };
}

export const TlvsMetadata: MessageFns<TlvsMetadata, "envoy.data.core.v3.TlvsMetadata"> = {
  $type: "envoy.data.core.v3.TlvsMetadata" as const,

  encode(message: TlvsMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.typed_metadata || new Map()).forEach((value, key) => {
      TlvsMetadata_TypedMetadataEntry.encode({
        $type: "envoy.data.core.v3.TlvsMetadata.TypedMetadataEntry",
        key: key as any,
        value,
      }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlvsMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlvsMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = TlvsMetadata_TypedMetadataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.typed_metadata === undefined) {
              message.typed_metadata = new Map();
            }
            message.typed_metadata!.set(entry1.key, entry1.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlvsMetadata {
    return {
      $type: TlvsMetadata.$type,
      typed_metadata: isObject(object.typed_metadata)
        ? Object.entries(object.typed_metadata).reduce<Map<string, Uint8Array>>((acc, [key, value]) => {
          acc.set(key, bytesFromBase64(value as string));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: TlvsMetadata): unknown {
    const obj: any = {};
    if (message.typed_metadata?.size) {
      obj.typed_metadata = {};
      message.typed_metadata.forEach((v, k) => {
        obj.typed_metadata[k] = base64FromBytes(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TlvsMetadata>, I>>(base?: I): TlvsMetadata {
    return TlvsMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TlvsMetadata>, I>>(object: I): TlvsMetadata {
    const message = createBaseTlvsMetadata();
    message.typed_metadata = (object.typed_metadata === undefined || object.typed_metadata === null)
      ? undefined
      : (() => {
        const m = new Map();
        (object.typed_metadata as Map<string, Uint8Array> ?? new Map()).forEach((value, key) => {
          if (value !== undefined) {
            m.set(key, value);
          }
        });
        return m;
      })();
    return message;
  },
};

messageTypeRegistry.set(TlvsMetadata.$type, TlvsMetadata);

function createBaseTlvsMetadata_TypedMetadataEntry(): TlvsMetadata_TypedMetadataEntry {
  return { $type: "envoy.data.core.v3.TlvsMetadata.TypedMetadataEntry", key: "", value: new Uint8Array(0) };
}

export const TlvsMetadata_TypedMetadataEntry: MessageFns<
  TlvsMetadata_TypedMetadataEntry,
  "envoy.data.core.v3.TlvsMetadata.TypedMetadataEntry"
> = {
  $type: "envoy.data.core.v3.TlvsMetadata.TypedMetadataEntry" as const,

  encode(message: TlvsMetadata_TypedMetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TlvsMetadata_TypedMetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTlvsMetadata_TypedMetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TlvsMetadata_TypedMetadataEntry {
    return {
      $type: TlvsMetadata_TypedMetadataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: TlvsMetadata_TypedMetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TlvsMetadata_TypedMetadataEntry>, I>>(base?: I): TlvsMetadata_TypedMetadataEntry {
    return TlvsMetadata_TypedMetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TlvsMetadata_TypedMetadataEntry>, I>>(
    object: I,
  ): TlvsMetadata_TypedMetadataEntry {
    const message = createBaseTlvsMetadata_TypedMetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

messageTypeRegistry.set(TlvsMetadata_TypedMetadataEntry.$type, TlvsMetadata_TypedMetadataEntry);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
