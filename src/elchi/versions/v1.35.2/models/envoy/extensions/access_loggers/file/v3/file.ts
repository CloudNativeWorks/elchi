// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/access_loggers/file/v3/file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { SubstitutionFormatString } from "../../../../config/core/v3/substitution_format_string";

export const protobufPackage = "envoy.extensions.access_loggers.file.v3";

/**
 * Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
 * that writes log entries directly to a file. Configures the built-in ``envoy.access_loggers.file``
 * AccessLog.
 * [#next-free-field: 6]
 */
export interface FileAccessLog {
  $type: "envoy.extensions.access_loggers.file.v3.FileAccessLog";
  /** A path to a local file to which to write the access log entries. */
  path?: string | undefined;
  access_log_format?:
    | //
    /**
     * Access log :ref:`format string<config_access_log_format_strings>`.
     * Envoy supports :ref:`custom access log formats <config_access_log_format>` as well as a
     * :ref:`default format <config_access_log_default_format>`.
     * This field is deprecated.
     * Please use :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format>`.
     */
    { $case: "format"; format: string }
    | //
    /**
     * Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. All values
     * are rendered as strings.
     * This field is deprecated.
     * Please use :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format>`.
     */
    { $case: "json_format"; json_format: { [key: string]: any } | undefined }
    | //
    /**
     * Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. Values are
     * rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may
     * be produced by some command operators (e.g.FILTER_STATE or DYNAMIC_METADATA). See the
     * documentation for a specific command operator for details.
     * This field is deprecated.
     * Please use :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format>`.
     */
    { $case: "typed_json_format"; typed_json_format: { [key: string]: any } | undefined }
    | //
    /**
     * Configuration to form access log data and format.
     * If not specified, use :ref:`default format <config_access_log_default_format>`.
     */
    { $case: "log_format"; log_format: SubstitutionFormatString }
    | undefined;
}

function createBaseFileAccessLog(): FileAccessLog {
  return { $type: "envoy.extensions.access_loggers.file.v3.FileAccessLog", access_log_format: undefined };
}

export const FileAccessLog: MessageFns<FileAccessLog, "envoy.extensions.access_loggers.file.v3.FileAccessLog"> = {
  $type: "envoy.extensions.access_loggers.file.v3.FileAccessLog" as const,

  encode(message: FileAccessLog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    switch (message.access_log_format?.$case) {
      case "format":
        writer.uint32(18).string(message.access_log_format.format);
        break;
      case "json_format":
        Struct.encode(Struct.wrap(message.access_log_format.json_format), writer.uint32(26).fork()).join();
        break;
      case "typed_json_format":
        Struct.encode(Struct.wrap(message.access_log_format.typed_json_format), writer.uint32(34).fork()).join();
        break;
      case "log_format":
        SubstitutionFormatString.encode(message.access_log_format.log_format, writer.uint32(42).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileAccessLog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileAccessLog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_log_format = { $case: "format", format: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.access_log_format = {
            $case: "json_format",
            json_format: Struct.unwrap(Struct.decode(reader, reader.uint32())),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.access_log_format = {
            $case: "typed_json_format",
            typed_json_format: Struct.unwrap(Struct.decode(reader, reader.uint32())),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.access_log_format = {
            $case: "log_format",
            log_format: SubstitutionFormatString.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileAccessLog {
    return {
      $type: FileAccessLog.$type,
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
      access_log_format: isSet(object.format)
        ? { $case: "format", format: globalThis.String(object.format) }
        : isSet(object.json_format)
        ? { $case: "json_format", json_format: object.json_format }
        : isSet(object.typed_json_format)
        ? { $case: "typed_json_format", typed_json_format: object.typed_json_format }
        : isSet(object.log_format)
        ? { $case: "log_format", log_format: SubstitutionFormatString.fromJSON(object.log_format) }
        : undefined,
    };
  },

  toJSON(message: FileAccessLog): unknown {
    const obj: any = {};
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.access_log_format?.$case === "format") {
      obj.format = message.access_log_format.format;
    }
    if (message.access_log_format?.$case === "json_format") {
      obj.json_format = message.access_log_format.json_format;
    }
    if (message.access_log_format?.$case === "typed_json_format") {
      obj.typed_json_format = message.access_log_format.typed_json_format;
    }
    if (message.access_log_format?.$case === "log_format") {
      obj.log_format = SubstitutionFormatString.toJSON(message.access_log_format.log_format);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileAccessLog>, I>>(base?: I): FileAccessLog {
    return FileAccessLog.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileAccessLog>, I>>(object: I): FileAccessLog {
    const message = createBaseFileAccessLog();
    message.path = object.path ?? undefined;
    if (
      object.access_log_format?.$case === "format" &&
      object.access_log_format?.format !== undefined &&
      object.access_log_format?.format !== null
    ) {
      message.access_log_format = { $case: "format", format: object.access_log_format.format };
    }
    if (
      object.access_log_format?.$case === "json_format" &&
      object.access_log_format?.json_format !== undefined &&
      object.access_log_format?.json_format !== null
    ) {
      message.access_log_format = { $case: "json_format", json_format: object.access_log_format.json_format };
    }
    if (
      object.access_log_format?.$case === "typed_json_format" &&
      object.access_log_format?.typed_json_format !== undefined &&
      object.access_log_format?.typed_json_format !== null
    ) {
      message.access_log_format = {
        $case: "typed_json_format",
        typed_json_format: object.access_log_format.typed_json_format,
      };
    }
    if (
      object.access_log_format?.$case === "log_format" &&
      object.access_log_format?.log_format !== undefined &&
      object.access_log_format?.log_format !== null
    ) {
      message.access_log_format = {
        $case: "log_format",
        log_format: SubstitutionFormatString.fromPartial(object.access_log_format.log_format),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(FileAccessLog.$type, FileAccessLog);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
