// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/access_loggers/open_telemetry/v3/logs_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AnyValue, KeyValueList } from "../../../../../opentelemetry/proto/common/v1/common";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { TypedExtensionConfig } from "../../../../config/core/v3/extension";
import { CommonGrpcAccessLogConfig } from "../../grpc/v3/als";

export const protobufPackage = "envoy.extensions.access_loggers.open_telemetry.v3";

/**
 * Configuration for the built-in ``envoy.access_loggers.open_telemetry``
 * :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This configuration will
 * populate `opentelemetry.proto.collector.v1.logs.ExportLogsServiceRequest.resource_logs <https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/collector/logs/v1/logs_service.proto>`_.
 * In addition, the request start time is set in the dedicated field.
 * [#extension: envoy.access_loggers.open_telemetry]
 * [#next-free-field: 8]
 */
export interface OpenTelemetryAccessLogConfig {
  $type: "envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig";
  /** [#comment:TODO(itamarkam): add 'filter_state_objects_to_log' to logs.] */
  common_config?:
    | CommonGrpcAccessLogConfig
    | undefined;
  /**
   * If specified, Envoy will not generate built-in resource labels
   * like ``log_name``, ``zone_name``, ``cluster_name``, ``node_name``.
   */
  disable_builtin_labels?:
    | boolean
    | undefined;
  /**
   * OpenTelemetry `Resource <https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/logs/v1/logs.proto#L51>`_
   * attributes are filled with Envoy node info.
   * Example: ``resource_attributes { values { key: "region" value { string_value: "cn-north-7" } } }``.
   */
  resource_attributes?:
    | KeyValueList
    | undefined;
  /**
   * OpenTelemetry `LogResource <https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/logs/v1/logs.proto>`_
   * fields, following `Envoy access logging formatting <https://www.envoyproxy.io/docs/envoy/latest/configuration/observability/access_log/usage>`_.
   *
   * See 'body' in the LogResource proto for more details.
   * Example: ``body { string_value: "%PROTOCOL%" }``.
   */
  body?:
    | AnyValue
    | undefined;
  /**
   * See 'attributes' in the LogResource proto for more details.
   * Example: ``attributes { values { key: "user_agent" value { string_value: "%REQ(USER-AGENT)%" } } }``.
   */
  attributes?:
    | KeyValueList
    | undefined;
  /**
   * Optional. Additional prefix to use on OpenTelemetry access logger stats. If empty, the stats will be rooted at
   * ``access_logs.open_telemetry_access_log.``. If non-empty, stats will be rooted at
   * ``access_logs.open_telemetry_access_log.<stat_prefix>.``.
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * Specifies a collection of Formatter plugins that can be called from the access log configuration.
   * See the formatters extensions documentation for details.
   * [#extension-category: envoy.formatter]
   */
  formatters?: TypedExtensionConfig[] | undefined;
}

function createBaseOpenTelemetryAccessLogConfig(): OpenTelemetryAccessLogConfig {
  return { $type: "envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig" };
}

export const OpenTelemetryAccessLogConfig: MessageFns<
  OpenTelemetryAccessLogConfig,
  "envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig"
> = {
  $type: "envoy.extensions.access_loggers.open_telemetry.v3.OpenTelemetryAccessLogConfig" as const,

  encode(message: OpenTelemetryAccessLogConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_config !== undefined) {
      CommonGrpcAccessLogConfig.encode(message.common_config, writer.uint32(10).fork()).join();
    }
    if (message.disable_builtin_labels !== undefined && message.disable_builtin_labels !== false) {
      writer.uint32(40).bool(message.disable_builtin_labels);
    }
    if (message.resource_attributes !== undefined) {
      KeyValueList.encode(message.resource_attributes, writer.uint32(34).fork()).join();
    }
    if (message.body !== undefined) {
      AnyValue.encode(message.body, writer.uint32(18).fork()).join();
    }
    if (message.attributes !== undefined) {
      KeyValueList.encode(message.attributes, writer.uint32(26).fork()).join();
    }
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(50).string(message.stat_prefix);
    }
    if (message.formatters !== undefined && message.formatters.length !== 0) {
      for (const v of message.formatters) {
        TypedExtensionConfig.encode(v!, writer.uint32(58).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenTelemetryAccessLogConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenTelemetryAccessLogConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_config = CommonGrpcAccessLogConfig.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.disable_builtin_labels = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resource_attributes = KeyValueList.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = AnyValue.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributes = KeyValueList.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          if (message.formatters === undefined) {
            message.formatters = [];
          }
          const el = TypedExtensionConfig.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.formatters!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenTelemetryAccessLogConfig {
    return {
      $type: OpenTelemetryAccessLogConfig.$type,
      common_config: isSet(object.common_config) ? CommonGrpcAccessLogConfig.fromJSON(object.common_config) : undefined,
      disable_builtin_labels: isSet(object.disable_builtin_labels)
        ? globalThis.Boolean(object.disable_builtin_labels)
        : undefined,
      resource_attributes: isSet(object.resource_attributes)
        ? KeyValueList.fromJSON(object.resource_attributes)
        : undefined,
      body: isSet(object.body) ? AnyValue.fromJSON(object.body) : undefined,
      attributes: isSet(object.attributes) ? KeyValueList.fromJSON(object.attributes) : undefined,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      formatters: globalThis.Array.isArray(object?.formatters)
        ? object.formatters.map((e: any) => TypedExtensionConfig.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: OpenTelemetryAccessLogConfig): unknown {
    const obj: any = {};
    if (message.common_config !== undefined) {
      obj.common_config = CommonGrpcAccessLogConfig.toJSON(message.common_config);
    }
    if (message.disable_builtin_labels !== undefined) {
      obj.disable_builtin_labels = message.disable_builtin_labels;
    }
    if (message.resource_attributes !== undefined) {
      obj.resource_attributes = KeyValueList.toJSON(message.resource_attributes);
    }
    if (message.body !== undefined) {
      obj.body = AnyValue.toJSON(message.body);
    }
    if (message.attributes !== undefined) {
      obj.attributes = KeyValueList.toJSON(message.attributes);
    }
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.formatters?.length) {
      obj.formatters = message.formatters.map((e) => TypedExtensionConfig.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenTelemetryAccessLogConfig>, I>>(base?: I): OpenTelemetryAccessLogConfig {
    return OpenTelemetryAccessLogConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenTelemetryAccessLogConfig>, I>>(object: I): OpenTelemetryAccessLogConfig {
    const message = createBaseOpenTelemetryAccessLogConfig();
    message.common_config = (object.common_config !== undefined && object.common_config !== null)
      ? CommonGrpcAccessLogConfig.fromPartial(object.common_config)
      : undefined;
    message.disable_builtin_labels = object.disable_builtin_labels ?? undefined;
    message.resource_attributes = (object.resource_attributes !== undefined && object.resource_attributes !== null)
      ? KeyValueList.fromPartial(object.resource_attributes)
      : undefined;
    message.body = (object.body !== undefined && object.body !== null) ? AnyValue.fromPartial(object.body) : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? KeyValueList.fromPartial(object.attributes)
      : undefined;
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.formatters = object.formatters?.map((e) => TypedExtensionConfig.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(OpenTelemetryAccessLogConfig.$type, OpenTelemetryAccessLogConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
