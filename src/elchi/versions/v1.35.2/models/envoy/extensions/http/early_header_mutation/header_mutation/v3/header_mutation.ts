// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/early_header_mutation/header_mutation/v3/header_mutation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { HeaderMutation as HeaderMutation1 } from "../../../../../config/common/mutation_rules/v3/mutation_rules";

export const protobufPackage = "envoy.extensions.http.early_header_mutation.header_mutation.v3";

/** This extension allows for early header mutation by the substitution formatter. */
export interface HeaderMutation {
  $type: "envoy.extensions.http.early_header_mutation.header_mutation.v3.HeaderMutation";
  mutations?: HeaderMutation1[] | undefined;
}

function createBaseHeaderMutation(): HeaderMutation {
  return { $type: "envoy.extensions.http.early_header_mutation.header_mutation.v3.HeaderMutation" };
}

export const HeaderMutation: MessageFns<
  HeaderMutation,
  "envoy.extensions.http.early_header_mutation.header_mutation.v3.HeaderMutation"
> = {
  $type: "envoy.extensions.http.early_header_mutation.header_mutation.v3.HeaderMutation" as const,

  encode(message: HeaderMutation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mutations !== undefined && message.mutations.length !== 0) {
      for (const v of message.mutations) {
        HeaderMutation1.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderMutation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderMutation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.mutations === undefined) {
            message.mutations = [];
          }
          const el = HeaderMutation1.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.mutations!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderMutation {
    return {
      $type: HeaderMutation.$type,
      mutations: globalThis.Array.isArray(object?.mutations)
        ? object.mutations.map((e: any) => HeaderMutation1.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: HeaderMutation): unknown {
    const obj: any = {};
    if (message.mutations?.length) {
      obj.mutations = message.mutations.map((e) => HeaderMutation1.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderMutation>, I>>(base?: I): HeaderMutation {
    return HeaderMutation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderMutation>, I>>(object: I): HeaderMutation {
    const message = createBaseHeaderMutation();
    message.mutations = object.mutations?.map((e) => HeaderMutation1.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(HeaderMutation.$type, HeaderMutation);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
