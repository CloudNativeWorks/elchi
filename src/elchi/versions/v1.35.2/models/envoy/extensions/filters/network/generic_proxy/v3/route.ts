// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/generic_proxy/v3/route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Matcher } from "../../../../../../xds/type/matcher/v3/matcher";

export const protobufPackage = "envoy.extensions.filters.network.generic_proxy.v3";

export interface VirtualHost {
  $type: "envoy.extensions.filters.network.generic_proxy.v3.VirtualHost";
  /** The name of the virtual host. */
  name?:
    | string
    | undefined;
  /**
   * A list of hosts that will be matched to this virtual host. Wildcard hosts are supported in
   * the suffix or prefix form.
   *
   * Host search order:
   *  1. Exact names: ``www.foo.com``.
   *  2. Suffix wildcards: ``*.foo.com`` or ``*-bar.foo.com``.
   *  3. Prefix wildcards: ``foo.*`` or ``foo-*``.
   *  4. Special wildcard ``*`` matching any host and will be the default virtual host.
   *
   * .. note::
   *
   *   The wildcard will not match the empty string.
   *   e.g. ``*-bar.foo.com`` will match ``baz-bar.foo.com`` but not ``-bar.foo.com``.
   *   The longest wildcards match first.
   *   Only a single virtual host in the entire route configuration can match on ``*``. A domain
   *   must be unique across all virtual hosts or the config will fail to load.
   */
  hosts?:
    | string[]
    | undefined;
  /** The match tree to use when resolving route actions for incoming requests. */
  routes?: Matcher | undefined;
}

/**
 * The generic proxy makes use of the xDS matching API for routing configurations.
 *
 * In the below example, we combine a top level tree matcher with a linear matcher to match
 * the incoming requests, and send the matching requests to v1 of the upstream service.
 *
 * .. code-block:: yaml
 *
 *   name: example
 *   routes:
 *     matcher_tree:
 *       input:
 *         name: request-service
 *         typed_config:
 *           "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.ServiceMatchInput
 *       exact_match_map:
 *         map:
 *           service_name_0:
 *             matcher:
 *               matcher_list:
 *                 matchers:
 *                 - predicate:
 *                     and_matcher:
 *                       predicate:
 *                       - single_predicate:
 *                           input:
 *                             name: request-properties
 *                             typed_config:
 *                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
 *                               property_name: version
 *                           value_match:
 *                             exact: v1
 *                       - single_predicate:
 *                           input:
 *                             name: request-properties
 *                             typed_config:
 *                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
 *                               property_name: user
 *                           value_match:
 *                             exact: john
 *                   on_match:
 *                     action:
 *                       name: route
 *                       typed_config:
 *                         "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.action.v3.routeAction
 *                         cluster: cluster_0
 */
export interface RouteConfiguration {
  $type: "envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration";
  /**
   * The name of the route configuration. For example, it might match route_config_name in
   * envoy.extensions.filters.network.generic_proxy.v3.Rds.
   */
  name?:
    | string
    | undefined;
  /**
   * The match tree to use when resolving route actions for incoming requests.
   * If no any virtual host is configured in the ``virtual_hosts`` field or no special wildcard
   * virtual host is configured, the ``routes`` field will be used as the default route table.
   * If both the wildcard virtual host and ``routes`` are configured, the configuration will fail
   * to load.
   */
  routes?:
    | Matcher
    | undefined;
  /** An array of virtual hosts that make up the route table. */
  virtual_hosts?: VirtualHost[] | undefined;
}

function createBaseVirtualHost(): VirtualHost {
  return { $type: "envoy.extensions.filters.network.generic_proxy.v3.VirtualHost" };
}

export const VirtualHost: MessageFns<VirtualHost, "envoy.extensions.filters.network.generic_proxy.v3.VirtualHost"> = {
  $type: "envoy.extensions.filters.network.generic_proxy.v3.VirtualHost" as const,

  encode(message: VirtualHost, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.hosts !== undefined && message.hosts.length !== 0) {
      for (const v of message.hosts) {
        writer.uint32(18).string(v!);
      }
    }
    if (message.routes !== undefined) {
      Matcher.encode(message.routes, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualHost {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualHost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.hosts === undefined) {
            message.hosts = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.hosts!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.routes = Matcher.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualHost {
    return {
      $type: VirtualHost.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      hosts: globalThis.Array.isArray(object?.hosts) ? object.hosts.map((e: any) => globalThis.String(e)) : undefined,
      routes: isSet(object.routes) ? Matcher.fromJSON(object.routes) : undefined,
    };
  },

  toJSON(message: VirtualHost): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.hosts?.length) {
      obj.hosts = message.hosts;
    }
    if (message.routes !== undefined) {
      obj.routes = Matcher.toJSON(message.routes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VirtualHost>, I>>(base?: I): VirtualHost {
    return VirtualHost.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VirtualHost>, I>>(object: I): VirtualHost {
    const message = createBaseVirtualHost();
    message.name = object.name ?? undefined;
    message.hosts = object.hosts?.map((e) => e) || undefined;
    message.routes = (object.routes !== undefined && object.routes !== null)
      ? Matcher.fromPartial(object.routes)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(VirtualHost.$type, VirtualHost);

function createBaseRouteConfiguration(): RouteConfiguration {
  return { $type: "envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration" };
}

export const RouteConfiguration: MessageFns<
  RouteConfiguration,
  "envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration"
> = {
  $type: "envoy.extensions.filters.network.generic_proxy.v3.RouteConfiguration" as const,

  encode(message: RouteConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.routes !== undefined) {
      Matcher.encode(message.routes, writer.uint32(18).fork()).join();
    }
    if (message.virtual_hosts !== undefined && message.virtual_hosts.length !== 0) {
      for (const v of message.virtual_hosts) {
        VirtualHost.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.routes = Matcher.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.virtual_hosts === undefined) {
            message.virtual_hosts = [];
          }
          const el = VirtualHost.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.virtual_hosts!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteConfiguration {
    return {
      $type: RouteConfiguration.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      routes: isSet(object.routes) ? Matcher.fromJSON(object.routes) : undefined,
      virtual_hosts: globalThis.Array.isArray(object?.virtual_hosts)
        ? object.virtual_hosts.map((e: any) => VirtualHost.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: RouteConfiguration): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.routes !== undefined) {
      obj.routes = Matcher.toJSON(message.routes);
    }
    if (message.virtual_hosts?.length) {
      obj.virtual_hosts = message.virtual_hosts.map((e) => VirtualHost.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteConfiguration>, I>>(base?: I): RouteConfiguration {
    return RouteConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteConfiguration>, I>>(object: I): RouteConfiguration {
    const message = createBaseRouteConfiguration();
    message.name = object.name ?? undefined;
    message.routes = (object.routes !== undefined && object.routes !== null)
      ? Matcher.fromPartial(object.routes)
      : undefined;
    message.virtual_hosts = object.virtual_hosts?.map((e) => VirtualHost.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteConfiguration.$type, RouteConfiguration);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
