// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/proto_message_extraction/v3/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DataSource } from "../../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.filters.http.proto_message_extraction.v3";

export interface ProtoMessageExtractionConfig {
  $type: "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig";
  /** The proto descriptor set binary for the gRPC services. */
  descriptor_set?:
    | //
    /**
     * It could be passed by a local file through ``Datasource.filename`` or
     * embedded in the ``Datasource.inline_bytes``.
     */
    { $case: "data_source"; data_source: DataSource }
    | //
    /**
     * Unimplemented, the key of proto descriptor TypedMetadata.
     * Among filters depending on the proto descriptor, we can have a
     * TypedMetadata for proto descriptors, so that these filters can share one
     * copy of proto descriptor in memory.
     */
    { $case: "proto_descriptor_typed_metadata"; proto_descriptor_typed_metadata: string }
    | undefined;
  mode?:
    | ProtoMessageExtractionConfig_ExtractMode
    | undefined;
  /**
   * Specify the message extraction info.
   * The key is the fully qualified gRPC method name.
   * ``${package}.${Service}.${Method}``, like
   * ``endpoints.examples.bookstore.BookStore.GetShelf``
   *
   * The value is the message extraction information for individual gRPC
   * methods.
   */
  extraction_by_method?: Map<string, MethodExtraction> | undefined;
}

export enum ProtoMessageExtractionConfig_ExtractMode {
  ExtractMode_UNSPECIFIED = "ExtractMode_UNSPECIFIED",
  /**
   * FIRST_AND_LAST - The filter will extract the first and the last message for
   * for streaming cases, containing
   * client-side streaming, server-side streaming or bi-directional streaming.
   */
  FIRST_AND_LAST = "FIRST_AND_LAST",
}

export function protoMessageExtractionConfig_ExtractModeFromJSON(
  object: any,
): ProtoMessageExtractionConfig_ExtractMode {
  switch (object) {
    case 0:
    case "ExtractMode_UNSPECIFIED":
      return ProtoMessageExtractionConfig_ExtractMode.ExtractMode_UNSPECIFIED;
    case 1:
    case "FIRST_AND_LAST":
      return ProtoMessageExtractionConfig_ExtractMode.FIRST_AND_LAST;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ProtoMessageExtractionConfig_ExtractMode",
      );
  }
}

export function protoMessageExtractionConfig_ExtractModeToJSON(
  object: ProtoMessageExtractionConfig_ExtractMode,
): string {
  switch (object) {
    case ProtoMessageExtractionConfig_ExtractMode.ExtractMode_UNSPECIFIED:
      return "ExtractMode_UNSPECIFIED";
    case ProtoMessageExtractionConfig_ExtractMode.FIRST_AND_LAST:
      return "FIRST_AND_LAST";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ProtoMessageExtractionConfig_ExtractMode",
      );
  }
}

export function protoMessageExtractionConfig_ExtractModeToNumber(
  object: ProtoMessageExtractionConfig_ExtractMode,
): number {
  switch (object) {
    case ProtoMessageExtractionConfig_ExtractMode.ExtractMode_UNSPECIFIED:
      return 0;
    case ProtoMessageExtractionConfig_ExtractMode.FIRST_AND_LAST:
      return 1;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum ProtoMessageExtractionConfig_ExtractMode",
      );
  }
}

export interface ProtoMessageExtractionConfig_ExtractionByMethodEntry {
  $type:
    "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig.ExtractionByMethodEntry";
  key: string;
  value?: MethodExtraction | undefined;
}

/**
 * This message can be used to support per route config approach later even
 * though the Istio doesn't support that so far.
 */
export interface MethodExtraction {
  $type: "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction";
  /** The mapping of field path to its ExtractDirective for request messages */
  request_extraction_by_field?:
    | Map<string, MethodExtraction_ExtractDirective>
    | undefined;
  /** The mapping of field path to its ExtractDirective for response messages */
  response_extraction_by_field?: Map<string, MethodExtraction_ExtractDirective> | undefined;
}

export enum MethodExtraction_ExtractDirective {
  ExtractDirective_UNSPECIFIED = "ExtractDirective_UNSPECIFIED",
  /** EXTRACT - The value of this field will be extracted. */
  EXTRACT = "EXTRACT",
  /**
   * EXTRACT_REDACT - It should be only annotated on Message type fields so if the field isn't
   * empty, an empty Struct will be extracted.
   */
  EXTRACT_REDACT = "EXTRACT_REDACT",
}

export function methodExtraction_ExtractDirectiveFromJSON(object: any): MethodExtraction_ExtractDirective {
  switch (object) {
    case 0:
    case "ExtractDirective_UNSPECIFIED":
      return MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED;
    case 1:
    case "EXTRACT":
      return MethodExtraction_ExtractDirective.EXTRACT;
    case 2:
    case "EXTRACT_REDACT":
      return MethodExtraction_ExtractDirective.EXTRACT_REDACT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum MethodExtraction_ExtractDirective");
  }
}

export function methodExtraction_ExtractDirectiveToJSON(object: MethodExtraction_ExtractDirective): string {
  switch (object) {
    case MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED:
      return "ExtractDirective_UNSPECIFIED";
    case MethodExtraction_ExtractDirective.EXTRACT:
      return "EXTRACT";
    case MethodExtraction_ExtractDirective.EXTRACT_REDACT:
      return "EXTRACT_REDACT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum MethodExtraction_ExtractDirective");
  }
}

export function methodExtraction_ExtractDirectiveToNumber(object: MethodExtraction_ExtractDirective): number {
  switch (object) {
    case MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED:
      return 0;
    case MethodExtraction_ExtractDirective.EXTRACT:
      return 1;
    case MethodExtraction_ExtractDirective.EXTRACT_REDACT:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum MethodExtraction_ExtractDirective");
  }
}

export interface MethodExtraction_RequestExtractionByFieldEntry {
  $type: "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.RequestExtractionByFieldEntry";
  key: string;
  value: MethodExtraction_ExtractDirective;
}

export interface MethodExtraction_ResponseExtractionByFieldEntry {
  $type: "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.ResponseExtractionByFieldEntry";
  key: string;
  value: MethodExtraction_ExtractDirective;
}

function createBaseProtoMessageExtractionConfig(): ProtoMessageExtractionConfig {
  return {
    $type: "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig",
    descriptor_set: undefined,
  };
}

export const ProtoMessageExtractionConfig: MessageFns<
  ProtoMessageExtractionConfig,
  "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig"
> = {
  $type: "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig" as const,

  encode(message: ProtoMessageExtractionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.descriptor_set?.$case) {
      case "data_source":
        DataSource.encode(message.descriptor_set.data_source, writer.uint32(10).fork()).join();
        break;
      case "proto_descriptor_typed_metadata":
        writer.uint32(18).string(message.descriptor_set.proto_descriptor_typed_metadata);
        break;
    }
    if (
      message.mode !== undefined && message.mode !== ProtoMessageExtractionConfig_ExtractMode.ExtractMode_UNSPECIFIED
    ) {
      writer.uint32(24).int32(protoMessageExtractionConfig_ExtractModeToNumber(message.mode));
    }
    (message.extraction_by_method || new Map()).forEach((value, key) => {
      ProtoMessageExtractionConfig_ExtractionByMethodEntry.encode({
        $type:
          "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig.ExtractionByMethodEntry",
        key: key as any,
        value,
      }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoMessageExtractionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoMessageExtractionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.descriptor_set = { $case: "data_source", data_source: DataSource.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.descriptor_set = {
            $case: "proto_descriptor_typed_metadata",
            proto_descriptor_typed_metadata: reader.string(),
          };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.mode = protoMessageExtractionConfig_ExtractModeFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = ProtoMessageExtractionConfig_ExtractionByMethodEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            if (message.extraction_by_method === undefined) {
              message.extraction_by_method = new Map();
            }
            message.extraction_by_method!.set(entry4.key, entry4.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoMessageExtractionConfig {
    return {
      $type: ProtoMessageExtractionConfig.$type,
      descriptor_set: isSet(object.data_source)
        ? { $case: "data_source", data_source: DataSource.fromJSON(object.data_source) }
        : isSet(object.proto_descriptor_typed_metadata)
        ? {
          $case: "proto_descriptor_typed_metadata",
          proto_descriptor_typed_metadata: globalThis.String(object.proto_descriptor_typed_metadata),
        }
        : undefined,
      mode: isSet(object.mode) ? protoMessageExtractionConfig_ExtractModeFromJSON(object.mode) : undefined,
      extraction_by_method: isObject(object.extraction_by_method)
        ? Object.entries(object.extraction_by_method).reduce<Map<string, MethodExtraction>>((acc, [key, value]) => {
          acc.set(key, MethodExtraction.fromJSON(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: ProtoMessageExtractionConfig): unknown {
    const obj: any = {};
    if (message.descriptor_set?.$case === "data_source") {
      obj.data_source = DataSource.toJSON(message.descriptor_set.data_source);
    }
    if (message.descriptor_set?.$case === "proto_descriptor_typed_metadata") {
      obj.proto_descriptor_typed_metadata = message.descriptor_set.proto_descriptor_typed_metadata;
    }
    if (message.mode !== undefined) {
      obj.mode = protoMessageExtractionConfig_ExtractModeToJSON(message.mode);
    }
    if (message.extraction_by_method?.size) {
      obj.extraction_by_method = {};
      message.extraction_by_method.forEach((v, k) => {
        obj.extraction_by_method[k] = MethodExtraction.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoMessageExtractionConfig>, I>>(base?: I): ProtoMessageExtractionConfig {
    return ProtoMessageExtractionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoMessageExtractionConfig>, I>>(object: I): ProtoMessageExtractionConfig {
    const message = createBaseProtoMessageExtractionConfig();
    if (
      object.descriptor_set?.$case === "data_source" &&
      object.descriptor_set?.data_source !== undefined &&
      object.descriptor_set?.data_source !== null
    ) {
      message.descriptor_set = {
        $case: "data_source",
        data_source: DataSource.fromPartial(object.descriptor_set.data_source),
      };
    }
    if (
      object.descriptor_set?.$case === "proto_descriptor_typed_metadata" &&
      object.descriptor_set?.proto_descriptor_typed_metadata !== undefined &&
      object.descriptor_set?.proto_descriptor_typed_metadata !== null
    ) {
      message.descriptor_set = {
        $case: "proto_descriptor_typed_metadata",
        proto_descriptor_typed_metadata: object.descriptor_set.proto_descriptor_typed_metadata,
      };
    }
    message.mode = object.mode ?? undefined;
    message.extraction_by_method = (object.extraction_by_method === undefined || object.extraction_by_method === null)
      ? undefined
      : (() => {
        const m = new Map();
        (object.extraction_by_method as Map<string, MethodExtraction> ?? new Map()).forEach((value, key) => {
          if (value !== undefined) {
            m.set(key, MethodExtraction.fromPartial(value));
          }
        });
        return m;
      })();
    return message;
  },
};

messageTypeRegistry.set(ProtoMessageExtractionConfig.$type, ProtoMessageExtractionConfig);

function createBaseProtoMessageExtractionConfig_ExtractionByMethodEntry(): ProtoMessageExtractionConfig_ExtractionByMethodEntry {
  return {
    $type:
      "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig.ExtractionByMethodEntry",
    key: "",
  };
}

export const ProtoMessageExtractionConfig_ExtractionByMethodEntry: MessageFns<
  ProtoMessageExtractionConfig_ExtractionByMethodEntry,
  "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig.ExtractionByMethodEntry"
> = {
  $type:
    "envoy.extensions.filters.http.proto_message_extraction.v3.ProtoMessageExtractionConfig.ExtractionByMethodEntry" as const,

  encode(
    message: ProtoMessageExtractionConfig_ExtractionByMethodEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      MethodExtraction.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProtoMessageExtractionConfig_ExtractionByMethodEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProtoMessageExtractionConfig_ExtractionByMethodEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = MethodExtraction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProtoMessageExtractionConfig_ExtractionByMethodEntry {
    return {
      $type: ProtoMessageExtractionConfig_ExtractionByMethodEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? MethodExtraction.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ProtoMessageExtractionConfig_ExtractionByMethodEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = MethodExtraction.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProtoMessageExtractionConfig_ExtractionByMethodEntry>, I>>(
    base?: I,
  ): ProtoMessageExtractionConfig_ExtractionByMethodEntry {
    return ProtoMessageExtractionConfig_ExtractionByMethodEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProtoMessageExtractionConfig_ExtractionByMethodEntry>, I>>(
    object: I,
  ): ProtoMessageExtractionConfig_ExtractionByMethodEntry {
    const message = createBaseProtoMessageExtractionConfig_ExtractionByMethodEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? MethodExtraction.fromPartial(object.value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(
  ProtoMessageExtractionConfig_ExtractionByMethodEntry.$type,
  ProtoMessageExtractionConfig_ExtractionByMethodEntry,
);

function createBaseMethodExtraction(): MethodExtraction {
  return { $type: "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction" };
}

export const MethodExtraction: MessageFns<
  MethodExtraction,
  "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction"
> = {
  $type: "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction" as const,

  encode(message: MethodExtraction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.request_extraction_by_field || new Map()).forEach((value, key) => {
      MethodExtraction_RequestExtractionByFieldEntry.encode({
        $type:
          "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.RequestExtractionByFieldEntry",
        key: key as any,
        value,
      }, writer.uint32(18).fork()).join();
    });
    (message.response_extraction_by_field || new Map()).forEach((value, key) => {
      MethodExtraction_ResponseExtractionByFieldEntry.encode({
        $type:
          "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.ResponseExtractionByFieldEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodExtraction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodExtraction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = MethodExtraction_RequestExtractionByFieldEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            if (message.request_extraction_by_field === undefined) {
              message.request_extraction_by_field = new Map();
            }
            message.request_extraction_by_field!.set(entry2.key, entry2.value);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = MethodExtraction_ResponseExtractionByFieldEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            if (message.response_extraction_by_field === undefined) {
              message.response_extraction_by_field = new Map();
            }
            message.response_extraction_by_field!.set(entry3.key, entry3.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodExtraction {
    return {
      $type: MethodExtraction.$type,
      request_extraction_by_field: isObject(object.request_extraction_by_field)
        ? Object.entries(object.request_extraction_by_field).reduce<Map<string, MethodExtraction_ExtractDirective>>(
          (acc, [key, value]) => {
            acc.set(key, methodExtraction_ExtractDirectiveFromJSON(value));
            return acc;
          },
          new Map(),
        )
        : undefined,
      response_extraction_by_field: isObject(object.response_extraction_by_field)
        ? Object.entries(object.response_extraction_by_field).reduce<Map<string, MethodExtraction_ExtractDirective>>(
          (acc, [key, value]) => {
            acc.set(key, methodExtraction_ExtractDirectiveFromJSON(value));
            return acc;
          },
          new Map(),
        )
        : undefined,
    };
  },

  toJSON(message: MethodExtraction): unknown {
    const obj: any = {};
    if (message.request_extraction_by_field?.size) {
      obj.request_extraction_by_field = {};
      message.request_extraction_by_field.forEach((v, k) => {
        obj.request_extraction_by_field[k] = methodExtraction_ExtractDirectiveToJSON(v);
      });
    }
    if (message.response_extraction_by_field?.size) {
      obj.response_extraction_by_field = {};
      message.response_extraction_by_field.forEach((v, k) => {
        obj.response_extraction_by_field[k] = methodExtraction_ExtractDirectiveToJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MethodExtraction>, I>>(base?: I): MethodExtraction {
    return MethodExtraction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MethodExtraction>, I>>(object: I): MethodExtraction {
    const message = createBaseMethodExtraction();
    message.request_extraction_by_field =
      (object.request_extraction_by_field === undefined || object.request_extraction_by_field === null)
        ? undefined
        : (() => {
          const m = new Map();
          (object.request_extraction_by_field as Map<string, MethodExtraction_ExtractDirective> ?? new Map()).forEach(
            (value, key) => {
              if (value !== undefined) {
                m.set(key, value as MethodExtraction_ExtractDirective);
              }
            },
          );
          return m;
        })();
    message.response_extraction_by_field =
      (object.response_extraction_by_field === undefined || object.response_extraction_by_field === null)
        ? undefined
        : (() => {
          const m = new Map();
          (object.response_extraction_by_field as Map<string, MethodExtraction_ExtractDirective> ?? new Map()).forEach(
            (value, key) => {
              if (value !== undefined) {
                m.set(key, value as MethodExtraction_ExtractDirective);
              }
            },
          );
          return m;
        })();
    return message;
  },
};

messageTypeRegistry.set(MethodExtraction.$type, MethodExtraction);

function createBaseMethodExtraction_RequestExtractionByFieldEntry(): MethodExtraction_RequestExtractionByFieldEntry {
  return {
    $type: "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.RequestExtractionByFieldEntry",
    key: "",
    value: MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED,
  };
}

export const MethodExtraction_RequestExtractionByFieldEntry: MessageFns<
  MethodExtraction_RequestExtractionByFieldEntry,
  "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.RequestExtractionByFieldEntry"
> = {
  $type:
    "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.RequestExtractionByFieldEntry" as const,

  encode(
    message: MethodExtraction_RequestExtractionByFieldEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED) {
      writer.uint32(16).int32(methodExtraction_ExtractDirectiveToNumber(message.value));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodExtraction_RequestExtractionByFieldEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodExtraction_RequestExtractionByFieldEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = methodExtraction_ExtractDirectiveFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodExtraction_RequestExtractionByFieldEntry {
    return {
      $type: MethodExtraction_RequestExtractionByFieldEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value)
        ? methodExtraction_ExtractDirectiveFromJSON(object.value)
        : MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED,
    };
  },

  toJSON(message: MethodExtraction_RequestExtractionByFieldEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = methodExtraction_ExtractDirectiveToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MethodExtraction_RequestExtractionByFieldEntry>, I>>(
    base?: I,
  ): MethodExtraction_RequestExtractionByFieldEntry {
    return MethodExtraction_RequestExtractionByFieldEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MethodExtraction_RequestExtractionByFieldEntry>, I>>(
    object: I,
  ): MethodExtraction_RequestExtractionByFieldEntry {
    const message = createBaseMethodExtraction_RequestExtractionByFieldEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED;
    return message;
  },
};

messageTypeRegistry.set(
  MethodExtraction_RequestExtractionByFieldEntry.$type,
  MethodExtraction_RequestExtractionByFieldEntry,
);

function createBaseMethodExtraction_ResponseExtractionByFieldEntry(): MethodExtraction_ResponseExtractionByFieldEntry {
  return {
    $type: "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.ResponseExtractionByFieldEntry",
    key: "",
    value: MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED,
  };
}

export const MethodExtraction_ResponseExtractionByFieldEntry: MessageFns<
  MethodExtraction_ResponseExtractionByFieldEntry,
  "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.ResponseExtractionByFieldEntry"
> = {
  $type:
    "envoy.extensions.filters.http.proto_message_extraction.v3.MethodExtraction.ResponseExtractionByFieldEntry" as const,

  encode(
    message: MethodExtraction_ResponseExtractionByFieldEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED) {
      writer.uint32(16).int32(methodExtraction_ExtractDirectiveToNumber(message.value));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodExtraction_ResponseExtractionByFieldEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodExtraction_ResponseExtractionByFieldEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = methodExtraction_ExtractDirectiveFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodExtraction_ResponseExtractionByFieldEntry {
    return {
      $type: MethodExtraction_ResponseExtractionByFieldEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value)
        ? methodExtraction_ExtractDirectiveFromJSON(object.value)
        : MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED,
    };
  },

  toJSON(message: MethodExtraction_ResponseExtractionByFieldEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = methodExtraction_ExtractDirectiveToJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MethodExtraction_ResponseExtractionByFieldEntry>, I>>(
    base?: I,
  ): MethodExtraction_ResponseExtractionByFieldEntry {
    return MethodExtraction_ResponseExtractionByFieldEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MethodExtraction_ResponseExtractionByFieldEntry>, I>>(
    object: I,
  ): MethodExtraction_ResponseExtractionByFieldEntry {
    const message = createBaseMethodExtraction_ResponseExtractionByFieldEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? MethodExtraction_ExtractDirective.ExtractDirective_UNSPECIFIED;
    return message;
  },
};

messageTypeRegistry.set(
  MethodExtraction_ResponseExtractionByFieldEntry.$type,
  MethodExtraction_ResponseExtractionByFieldEntry,
);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
