// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/cdn_loop/v3/cdn_loop.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.cdn_loop.v3";

/**
 * CDN-Loop Header filter config. See the :ref:`configuration overview
 * <config_http_filters_cdn_loop>` for more information.
 */
export interface CdnLoopConfig {
  $type: "envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig";
  /**
   * The CDN identifier to use for loop checks and to append to the
   * CDN-Loop header.
   *
   * RFC 8586 calls this the cdn-id. The cdn-id can either be a
   * pseudonym or hostname the CDN is in control of.
   *
   * cdn_id must not be empty.
   */
  cdn_id?:
    | string
    | undefined;
  /**
   * The maximum allowed count of cdn_id in the downstream CDN-Loop
   * request header.
   *
   * The default of 0 means a request can transit the CdnLoopFilter
   * once. A value of 1 means that a request can transit the
   * CdnLoopFilter twice and so on.
   */
  max_allowed_occurrences?: number | undefined;
}

function createBaseCdnLoopConfig(): CdnLoopConfig {
  return { $type: "envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig" };
}

export const CdnLoopConfig: MessageFns<CdnLoopConfig, "envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig"> = {
  $type: "envoy.extensions.filters.http.cdn_loop.v3.CdnLoopConfig" as const,

  encode(message: CdnLoopConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cdn_id !== undefined && message.cdn_id !== "") {
      writer.uint32(10).string(message.cdn_id);
    }
    if (message.max_allowed_occurrences !== undefined && message.max_allowed_occurrences !== 0) {
      writer.uint32(16).uint32(message.max_allowed_occurrences);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CdnLoopConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCdnLoopConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cdn_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.max_allowed_occurrences = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CdnLoopConfig {
    return {
      $type: CdnLoopConfig.$type,
      cdn_id: isSet(object.cdn_id) ? globalThis.String(object.cdn_id) : undefined,
      max_allowed_occurrences: isSet(object.max_allowed_occurrences)
        ? globalThis.Number(object.max_allowed_occurrences)
        : undefined,
    };
  },

  toJSON(message: CdnLoopConfig): unknown {
    const obj: any = {};
    if (message.cdn_id !== undefined) {
      obj.cdn_id = message.cdn_id;
    }
    if (message.max_allowed_occurrences !== undefined) {
      obj.max_allowed_occurrences = Math.round(message.max_allowed_occurrences);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CdnLoopConfig>, I>>(base?: I): CdnLoopConfig {
    return CdnLoopConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CdnLoopConfig>, I>>(object: I): CdnLoopConfig {
    const message = createBaseCdnLoopConfig();
    message.cdn_id = object.cdn_id ?? undefined;
    message.max_allowed_occurrences = object.max_allowed_occurrences ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CdnLoopConfig.$type, CdnLoopConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
