// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/compression/gzip/compressor/v3/gzip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.compression.gzip.compressor.v3";

/** [#next-free-field: 6] */
export interface Gzip {
  $type: "envoy.extensions.compression.gzip.compressor.v3.Gzip";
  /**
   * Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
   * use more memory, but are faster and produce better compression results. The default value is 5.
   */
  memory_level?:
    | number
    | undefined;
  /**
   * A value used for selecting the zlib compression level. This setting will affect speed and
   * amount of compression applied to the content. "BEST_COMPRESSION" provides higher compression
   * at the cost of higher latency and is equal to "COMPRESSION_LEVEL_9". "BEST_SPEED" provides
   * lower compression with minimum impact on response time, the same as "COMPRESSION_LEVEL_1".
   * "DEFAULT_COMPRESSION" provides an optimal result between speed and compression. According
   * to zlib's manual this level gives the same result as "COMPRESSION_LEVEL_6".
   * This field will be set to "DEFAULT_COMPRESSION" if not specified.
   */
  compression_level?:
    | Gzip_CompressionLevel
    | undefined;
  /**
   * A value used for selecting the zlib compression strategy which is directly related to the
   * characteristics of the content. Most of the time "DEFAULT_STRATEGY" will be the best choice,
   * which is also the default value for the parameter, though there are situations when
   * changing this parameter might produce better results. For example, run-length encoding (RLE)
   * is typically used when the content is known for having sequences which same data occurs many
   * consecutive times. For more information about each strategy, please refer to zlib manual.
   */
  compression_strategy?:
    | Gzip_CompressionStrategy
    | undefined;
  /**
   * Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
   * Larger window results in better compression at the expense of memory usage. The default is 12
   * which will produce a 4096 bytes window. For more details about this parameter, please refer to
   * zlib manual > deflateInit2.
   */
  window_bits?:
    | number
    | undefined;
  /**
   * Value for Zlib's next output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details. Also see
   * https://github.com/envoyproxy/envoy/issues/8448 for context on this filter's performance.
   */
  chunk_size?: number | undefined;
}

/**
 * All the values of this enumeration translate directly to zlib's compression strategies.
 * For more information about each strategy, please refer to zlib manual.
 */
export enum Gzip_CompressionStrategy {
  DEFAULT_STRATEGY = "DEFAULT_STRATEGY",
  FILTERED = "FILTERED",
  HUFFMAN_ONLY = "HUFFMAN_ONLY",
  RLE = "RLE",
  FIXED = "FIXED",
}

export function gzip_CompressionStrategyFromJSON(object: any): Gzip_CompressionStrategy {
  switch (object) {
    case 0:
    case "DEFAULT_STRATEGY":
      return Gzip_CompressionStrategy.DEFAULT_STRATEGY;
    case 1:
    case "FILTERED":
      return Gzip_CompressionStrategy.FILTERED;
    case 2:
    case "HUFFMAN_ONLY":
      return Gzip_CompressionStrategy.HUFFMAN_ONLY;
    case 3:
    case "RLE":
      return Gzip_CompressionStrategy.RLE;
    case 4:
    case "FIXED":
      return Gzip_CompressionStrategy.FIXED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionStrategy");
  }
}

export function gzip_CompressionStrategyToJSON(object: Gzip_CompressionStrategy): string {
  switch (object) {
    case Gzip_CompressionStrategy.DEFAULT_STRATEGY:
      return "DEFAULT_STRATEGY";
    case Gzip_CompressionStrategy.FILTERED:
      return "FILTERED";
    case Gzip_CompressionStrategy.HUFFMAN_ONLY:
      return "HUFFMAN_ONLY";
    case Gzip_CompressionStrategy.RLE:
      return "RLE";
    case Gzip_CompressionStrategy.FIXED:
      return "FIXED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionStrategy");
  }
}

export function gzip_CompressionStrategyToNumber(object: Gzip_CompressionStrategy): number {
  switch (object) {
    case Gzip_CompressionStrategy.DEFAULT_STRATEGY:
      return 0;
    case Gzip_CompressionStrategy.FILTERED:
      return 1;
    case Gzip_CompressionStrategy.HUFFMAN_ONLY:
      return 2;
    case Gzip_CompressionStrategy.RLE:
      return 3;
    case Gzip_CompressionStrategy.FIXED:
      return 4;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionStrategy");
  }
}

export enum Gzip_CompressionLevel {
  DEFAULT_COMPRESSION = "DEFAULT_COMPRESSION",
  BEST_SPEED = "BEST_SPEED",
  COMPRESSION_LEVEL_1 = "COMPRESSION_LEVEL_1",
  COMPRESSION_LEVEL_2 = "COMPRESSION_LEVEL_2",
  COMPRESSION_LEVEL_3 = "COMPRESSION_LEVEL_3",
  COMPRESSION_LEVEL_4 = "COMPRESSION_LEVEL_4",
  COMPRESSION_LEVEL_5 = "COMPRESSION_LEVEL_5",
  COMPRESSION_LEVEL_6 = "COMPRESSION_LEVEL_6",
  COMPRESSION_LEVEL_7 = "COMPRESSION_LEVEL_7",
  COMPRESSION_LEVEL_8 = "COMPRESSION_LEVEL_8",
  COMPRESSION_LEVEL_9 = "COMPRESSION_LEVEL_9",
  BEST_COMPRESSION = "BEST_COMPRESSION",
}

export function gzip_CompressionLevelFromJSON(object: any): Gzip_CompressionLevel {
  switch (object) {
    case 0:
    case "DEFAULT_COMPRESSION":
      return Gzip_CompressionLevel.DEFAULT_COMPRESSION;
    case 1:
    case "BEST_SPEED":
      return Gzip_CompressionLevel.BEST_SPEED;
    case 1:
    case "COMPRESSION_LEVEL_1":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_1;
    case 2:
    case "COMPRESSION_LEVEL_2":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_2;
    case 3:
    case "COMPRESSION_LEVEL_3":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_3;
    case 4:
    case "COMPRESSION_LEVEL_4":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_4;
    case 5:
    case "COMPRESSION_LEVEL_5":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_5;
    case 6:
    case "COMPRESSION_LEVEL_6":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_6;
    case 7:
    case "COMPRESSION_LEVEL_7":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_7;
    case 8:
    case "COMPRESSION_LEVEL_8":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_8;
    case 9:
    case "COMPRESSION_LEVEL_9":
      return Gzip_CompressionLevel.COMPRESSION_LEVEL_9;
    case 9:
    case "BEST_COMPRESSION":
      return Gzip_CompressionLevel.BEST_COMPRESSION;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionLevel");
  }
}

export function gzip_CompressionLevelToJSON(object: Gzip_CompressionLevel): string {
  switch (object) {
    case Gzip_CompressionLevel.DEFAULT_COMPRESSION:
      return "DEFAULT_COMPRESSION";
    case Gzip_CompressionLevel.BEST_SPEED:
      return "BEST_SPEED";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_1:
      return "COMPRESSION_LEVEL_1";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_2:
      return "COMPRESSION_LEVEL_2";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_3:
      return "COMPRESSION_LEVEL_3";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_4:
      return "COMPRESSION_LEVEL_4";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_5:
      return "COMPRESSION_LEVEL_5";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_6:
      return "COMPRESSION_LEVEL_6";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_7:
      return "COMPRESSION_LEVEL_7";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_8:
      return "COMPRESSION_LEVEL_8";
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_9:
      return "COMPRESSION_LEVEL_9";
    case Gzip_CompressionLevel.BEST_COMPRESSION:
      return "BEST_COMPRESSION";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionLevel");
  }
}

export function gzip_CompressionLevelToNumber(object: Gzip_CompressionLevel): number {
  switch (object) {
    case Gzip_CompressionLevel.DEFAULT_COMPRESSION:
      return 0;
    case Gzip_CompressionLevel.BEST_SPEED:
      return 1;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_1:
      return 1;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_2:
      return 2;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_3:
      return 3;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_4:
      return 4;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_5:
      return 5;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_6:
      return 6;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_7:
      return 7;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_8:
      return 8;
    case Gzip_CompressionLevel.COMPRESSION_LEVEL_9:
      return 9;
    case Gzip_CompressionLevel.BEST_COMPRESSION:
      return 9;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Gzip_CompressionLevel");
  }
}

function createBaseGzip(): Gzip {
  return { $type: "envoy.extensions.compression.gzip.compressor.v3.Gzip" };
}

export const Gzip: MessageFns<Gzip, "envoy.extensions.compression.gzip.compressor.v3.Gzip"> = {
  $type: "envoy.extensions.compression.gzip.compressor.v3.Gzip" as const,

  encode(message: Gzip, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.memory_level !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.memory_level! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (
      message.compression_level !== undefined && message.compression_level !== Gzip_CompressionLevel.DEFAULT_COMPRESSION
    ) {
      writer.uint32(16).int32(gzip_CompressionLevelToNumber(message.compression_level));
    }
    if (
      message.compression_strategy !== undefined &&
      message.compression_strategy !== Gzip_CompressionStrategy.DEFAULT_STRATEGY
    ) {
      writer.uint32(24).int32(gzip_CompressionStrategyToNumber(message.compression_strategy));
    }
    if (message.window_bits !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.window_bits! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.chunk_size !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.chunk_size! }, writer.uint32(42).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gzip {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGzip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.memory_level = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.compression_level = gzip_CompressionLevelFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.compression_strategy = gzip_CompressionStrategyFromJSON(reader.int32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.window_bits = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chunk_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gzip {
    return {
      $type: Gzip.$type,
      memory_level: isSet(object.memory_level) ? Number(object.memory_level) : undefined,
      compression_level: isSet(object.compression_level)
        ? gzip_CompressionLevelFromJSON(object.compression_level)
        : undefined,
      compression_strategy: isSet(object.compression_strategy)
        ? gzip_CompressionStrategyFromJSON(object.compression_strategy)
        : undefined,
      window_bits: isSet(object.window_bits) ? Number(object.window_bits) : undefined,
      chunk_size: isSet(object.chunk_size) ? Number(object.chunk_size) : undefined,
    };
  },

  toJSON(message: Gzip): unknown {
    const obj: any = {};
    if (message.memory_level !== undefined) {
      obj.memory_level = message.memory_level;
    }
    if (message.compression_level !== undefined) {
      obj.compression_level = gzip_CompressionLevelToJSON(message.compression_level);
    }
    if (message.compression_strategy !== undefined) {
      obj.compression_strategy = gzip_CompressionStrategyToJSON(message.compression_strategy);
    }
    if (message.window_bits !== undefined) {
      obj.window_bits = message.window_bits;
    }
    if (message.chunk_size !== undefined) {
      obj.chunk_size = message.chunk_size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gzip>, I>>(base?: I): Gzip {
    return Gzip.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gzip>, I>>(object: I): Gzip {
    const message = createBaseGzip();
    message.memory_level = object.memory_level ?? undefined;
    message.compression_level = object.compression_level ?? undefined;
    message.compression_strategy = object.compression_strategy ?? undefined;
    message.window_bits = object.window_bits ?? undefined;
    message.chunk_size = object.chunk_size ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Gzip.$type, Gzip);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
