// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/matching/common_inputs/network/v3/network_inputs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.matching.common_inputs.network.v3";

/**
 * Specifies that matching should be performed by the destination IP address.
 * [#extension: envoy.matching.inputs.destination_ip]
 */
export interface DestinationIPInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput";
}

/**
 * Specifies that matching should be performed by the destination port.
 * [#extension: envoy.matching.inputs.destination_port]
 */
export interface DestinationPortInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput";
}

/**
 * Specifies that matching should be performed by the source IP address.
 * [#extension: envoy.matching.inputs.source_ip]
 */
export interface SourceIPInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.SourceIPInput";
}

/**
 * Specifies that matching should be performed by the source port.
 * [#extension: envoy.matching.inputs.source_port]
 */
export interface SourcePortInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.SourcePortInput";
}

/**
 * Input that matches by the directly connected source IP address (this
 * will only be different from the source IP address when using a listener
 * filter that overrides the source address, such as the :ref:`Proxy Protocol
 * listener filter <config_listener_filters_proxy_protocol>`).
 * [#extension: envoy.matching.inputs.direct_source_ip]
 */
export interface DirectSourceIPInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DirectSourceIPInput";
}

/**
 * Input that matches by the source IP type.
 * Specifies the source IP match type. The values include:
 *
 * * ``local`` - matches a connection originating from the same host,
 * [#extension: envoy.matching.inputs.source_type]
 */
export interface SourceTypeInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.SourceTypeInput";
}

/**
 * Input that matches by the requested server name (e.g. SNI in TLS).
 *
 * :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides the requested server name based on SNI,
 * when TLS protocol is detected.
 * [#extension: envoy.matching.inputs.server_name]
 */
export interface ServerNameInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.ServerNameInput";
}

/**
 * Input that matches by the transport protocol.
 *
 * Suggested values include:
 *
 * * ``raw_buffer`` - default, used when no transport protocol is detected,
 * * ``tls`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`
 *   when TLS protocol is detected.
 * [#extension: envoy.matching.inputs.transport_protocol]
 */
export interface TransportProtocolInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.TransportProtocolInput";
}

/**
 * List of quoted and comma-separated requested application protocols. The list consists of a
 * single negotiated application protocol once the network stream is established.
 *
 * Examples:
 *
 * * ``'h2','http/1.1'``
 * * ``'h2c'``
 *
 * Suggested values in the list include:
 *
 * * ``http/1.1`` - set by :ref:`envoy.filters.listener.tls_inspector
 *   <config_listener_filters_tls_inspector>` and :ref:`envoy.filters.listener.http_inspector
 *   <config_listener_filters_http_inspector>`,
 * * ``h2`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`
 * * ``h2c`` - set by :ref:`envoy.filters.listener.http_inspector <config_listener_filters_http_inspector>`
 *
 * .. attention::
 *
 *   Currently, :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides
 *   application protocol detection based on the requested
 *   `ALPN <https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_ values.
 *
 *   However, the use of ALPN is pretty much limited to the HTTP/2 traffic on the Internet,
 *   and matching on values other than ``h2`` is going to lead to a lot of false negatives,
 *   unless all connecting clients are known to use ALPN.
 * [#extension: envoy.matching.inputs.application_protocol]
 */
export interface ApplicationProtocolInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.ApplicationProtocolInput";
}

/**
 * Input that matches by a specific filter state key.
 * The value of the provided filter state key will be the raw string representation of the filter state object
 * [#extension: envoy.matching.inputs.filter_state]
 */
export interface FilterStateInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.FilterStateInput";
  key?: string | undefined;
}

/**
 * Input that matches dynamic metadata by key.
 * DynamicMetadataInput provides a general interface using ``filter`` and ``path`` to retrieve value from
 * :ref:`Metadata <envoy_v3_api_msg_config.core.v3.Metadata>`.
 *
 * For example, for the following Metadata:
 *
 * .. code-block:: yaml
 *
 *    filter_metadata:
 *      envoy.xxx:
 *        prop:
 *          foo: bar
 *          xyz:
 *            hello: envoy
 *
 * The following DynamicMetadataInput will retrieve a string value "bar" from the Metadata.
 *
 * .. code-block:: yaml
 *
 *    filter: envoy.xxx
 *    path:
 *    - key: prop
 *    - key: foo
 *
 * [#extension: envoy.matching.inputs.dynamic_metadata]
 */
export interface DynamicMetadataInput {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput";
  /** The filter name to retrieve the Struct from the Metadata. */
  filter?:
    | string
    | undefined;
  /** The path to retrieve the Value from the Struct. */
  path?: DynamicMetadataInput_PathSegment[] | undefined;
}

/**
 * Specifies the segment in a path to retrieve value from Metadata.
 * Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that
 * if the segment key refers to a list, it has to be the last segment in a path.
 */
export interface DynamicMetadataInput_PathSegment {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput.PathSegment";
  segment?:
    | //
    /** If specified, use the key to retrieve the value in a Struct. */
    { $case: "key"; key: string }
    | undefined;
}

function createBaseDestinationIPInput(): DestinationIPInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput" };
}

export const DestinationIPInput: MessageFns<
  DestinationIPInput,
  "envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DestinationIPInput" as const,

  encode(_: DestinationIPInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationIPInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationIPInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DestinationIPInput {
    return { $type: DestinationIPInput.$type };
  },

  toJSON(_: DestinationIPInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DestinationIPInput>, I>>(base?: I): DestinationIPInput {
    return DestinationIPInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DestinationIPInput>, I>>(_: I): DestinationIPInput {
    const message = createBaseDestinationIPInput();
    return message;
  },
};

messageTypeRegistry.set(DestinationIPInput.$type, DestinationIPInput);

function createBaseDestinationPortInput(): DestinationPortInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput" };
}

export const DestinationPortInput: MessageFns<
  DestinationPortInput,
  "envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DestinationPortInput" as const,

  encode(_: DestinationPortInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DestinationPortInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDestinationPortInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DestinationPortInput {
    return { $type: DestinationPortInput.$type };
  },

  toJSON(_: DestinationPortInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DestinationPortInput>, I>>(base?: I): DestinationPortInput {
    return DestinationPortInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DestinationPortInput>, I>>(_: I): DestinationPortInput {
    const message = createBaseDestinationPortInput();
    return message;
  },
};

messageTypeRegistry.set(DestinationPortInput.$type, DestinationPortInput);

function createBaseSourceIPInput(): SourceIPInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.SourceIPInput" };
}

export const SourceIPInput: MessageFns<
  SourceIPInput,
  "envoy.extensions.matching.common_inputs.network.v3.SourceIPInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.SourceIPInput" as const,

  encode(_: SourceIPInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceIPInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceIPInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SourceIPInput {
    return { $type: SourceIPInput.$type };
  },

  toJSON(_: SourceIPInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceIPInput>, I>>(base?: I): SourceIPInput {
    return SourceIPInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceIPInput>, I>>(_: I): SourceIPInput {
    const message = createBaseSourceIPInput();
    return message;
  },
};

messageTypeRegistry.set(SourceIPInput.$type, SourceIPInput);

function createBaseSourcePortInput(): SourcePortInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.SourcePortInput" };
}

export const SourcePortInput: MessageFns<
  SourcePortInput,
  "envoy.extensions.matching.common_inputs.network.v3.SourcePortInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.SourcePortInput" as const,

  encode(_: SourcePortInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourcePortInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourcePortInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SourcePortInput {
    return { $type: SourcePortInput.$type };
  },

  toJSON(_: SourcePortInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SourcePortInput>, I>>(base?: I): SourcePortInput {
    return SourcePortInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourcePortInput>, I>>(_: I): SourcePortInput {
    const message = createBaseSourcePortInput();
    return message;
  },
};

messageTypeRegistry.set(SourcePortInput.$type, SourcePortInput);

function createBaseDirectSourceIPInput(): DirectSourceIPInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.DirectSourceIPInput" };
}

export const DirectSourceIPInput: MessageFns<
  DirectSourceIPInput,
  "envoy.extensions.matching.common_inputs.network.v3.DirectSourceIPInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DirectSourceIPInput" as const,

  encode(_: DirectSourceIPInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectSourceIPInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectSourceIPInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DirectSourceIPInput {
    return { $type: DirectSourceIPInput.$type };
  },

  toJSON(_: DirectSourceIPInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DirectSourceIPInput>, I>>(base?: I): DirectSourceIPInput {
    return DirectSourceIPInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DirectSourceIPInput>, I>>(_: I): DirectSourceIPInput {
    const message = createBaseDirectSourceIPInput();
    return message;
  },
};

messageTypeRegistry.set(DirectSourceIPInput.$type, DirectSourceIPInput);

function createBaseSourceTypeInput(): SourceTypeInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.SourceTypeInput" };
}

export const SourceTypeInput: MessageFns<
  SourceTypeInput,
  "envoy.extensions.matching.common_inputs.network.v3.SourceTypeInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.SourceTypeInput" as const,

  encode(_: SourceTypeInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SourceTypeInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSourceTypeInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SourceTypeInput {
    return { $type: SourceTypeInput.$type };
  },

  toJSON(_: SourceTypeInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SourceTypeInput>, I>>(base?: I): SourceTypeInput {
    return SourceTypeInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SourceTypeInput>, I>>(_: I): SourceTypeInput {
    const message = createBaseSourceTypeInput();
    return message;
  },
};

messageTypeRegistry.set(SourceTypeInput.$type, SourceTypeInput);

function createBaseServerNameInput(): ServerNameInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.ServerNameInput" };
}

export const ServerNameInput: MessageFns<
  ServerNameInput,
  "envoy.extensions.matching.common_inputs.network.v3.ServerNameInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.ServerNameInput" as const,

  encode(_: ServerNameInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerNameInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerNameInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ServerNameInput {
    return { $type: ServerNameInput.$type };
  },

  toJSON(_: ServerNameInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerNameInput>, I>>(base?: I): ServerNameInput {
    return ServerNameInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerNameInput>, I>>(_: I): ServerNameInput {
    const message = createBaseServerNameInput();
    return message;
  },
};

messageTypeRegistry.set(ServerNameInput.$type, ServerNameInput);

function createBaseTransportProtocolInput(): TransportProtocolInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.TransportProtocolInput" };
}

export const TransportProtocolInput: MessageFns<
  TransportProtocolInput,
  "envoy.extensions.matching.common_inputs.network.v3.TransportProtocolInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.TransportProtocolInput" as const,

  encode(_: TransportProtocolInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransportProtocolInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransportProtocolInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TransportProtocolInput {
    return { $type: TransportProtocolInput.$type };
  },

  toJSON(_: TransportProtocolInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<TransportProtocolInput>, I>>(base?: I): TransportProtocolInput {
    return TransportProtocolInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransportProtocolInput>, I>>(_: I): TransportProtocolInput {
    const message = createBaseTransportProtocolInput();
    return message;
  },
};

messageTypeRegistry.set(TransportProtocolInput.$type, TransportProtocolInput);

function createBaseApplicationProtocolInput(): ApplicationProtocolInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.ApplicationProtocolInput" };
}

export const ApplicationProtocolInput: MessageFns<
  ApplicationProtocolInput,
  "envoy.extensions.matching.common_inputs.network.v3.ApplicationProtocolInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.ApplicationProtocolInput" as const,

  encode(_: ApplicationProtocolInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApplicationProtocolInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApplicationProtocolInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ApplicationProtocolInput {
    return { $type: ApplicationProtocolInput.$type };
  },

  toJSON(_: ApplicationProtocolInput): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ApplicationProtocolInput>, I>>(base?: I): ApplicationProtocolInput {
    return ApplicationProtocolInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApplicationProtocolInput>, I>>(_: I): ApplicationProtocolInput {
    const message = createBaseApplicationProtocolInput();
    return message;
  },
};

messageTypeRegistry.set(ApplicationProtocolInput.$type, ApplicationProtocolInput);

function createBaseFilterStateInput(): FilterStateInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.FilterStateInput" };
}

export const FilterStateInput: MessageFns<
  FilterStateInput,
  "envoy.extensions.matching.common_inputs.network.v3.FilterStateInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.FilterStateInput" as const,

  encode(message: FilterStateInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterStateInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterStateInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterStateInput {
    return { $type: FilterStateInput.$type, key: isSet(object.key) ? globalThis.String(object.key) : undefined };
  },

  toJSON(message: FilterStateInput): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterStateInput>, I>>(base?: I): FilterStateInput {
    return FilterStateInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterStateInput>, I>>(object: I): FilterStateInput {
    const message = createBaseFilterStateInput();
    message.key = object.key ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterStateInput.$type, FilterStateInput);

function createBaseDynamicMetadataInput(): DynamicMetadataInput {
  return { $type: "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput" };
}

export const DynamicMetadataInput: MessageFns<
  DynamicMetadataInput,
  "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput" as const,

  encode(message: DynamicMetadataInput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filter !== undefined && message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.path !== undefined && message.path.length !== 0) {
      for (const v of message.path) {
        DynamicMetadataInput_PathSegment.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicMetadataInput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicMetadataInput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.path === undefined) {
            message.path = [];
          }
          const el = DynamicMetadataInput_PathSegment.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.path!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicMetadataInput {
    return {
      $type: DynamicMetadataInput.$type,
      filter: isSet(object.filter) ? globalThis.String(object.filter) : undefined,
      path: globalThis.Array.isArray(object?.path)
        ? object.path.map((e: any) => DynamicMetadataInput_PathSegment.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: DynamicMetadataInput): unknown {
    const obj: any = {};
    if (message.filter !== undefined) {
      obj.filter = message.filter;
    }
    if (message.path?.length) {
      obj.path = message.path.map((e) => DynamicMetadataInput_PathSegment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicMetadataInput>, I>>(base?: I): DynamicMetadataInput {
    return DynamicMetadataInput.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicMetadataInput>, I>>(object: I): DynamicMetadataInput {
    const message = createBaseDynamicMetadataInput();
    message.filter = object.filter ?? undefined;
    message.path = object.path?.map((e) => DynamicMetadataInput_PathSegment.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(DynamicMetadataInput.$type, DynamicMetadataInput);

function createBaseDynamicMetadataInput_PathSegment(): DynamicMetadataInput_PathSegment {
  return {
    $type: "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput.PathSegment",
    segment: undefined,
  };
}

export const DynamicMetadataInput_PathSegment: MessageFns<
  DynamicMetadataInput_PathSegment,
  "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput.PathSegment"
> = {
  $type: "envoy.extensions.matching.common_inputs.network.v3.DynamicMetadataInput.PathSegment" as const,

  encode(message: DynamicMetadataInput_PathSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.segment?.$case) {
      case "key":
        writer.uint32(10).string(message.segment.key);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicMetadataInput_PathSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicMetadataInput_PathSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.segment = { $case: "key", key: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicMetadataInput_PathSegment {
    return {
      $type: DynamicMetadataInput_PathSegment.$type,
      segment: isSet(object.key) ? { $case: "key", key: globalThis.String(object.key) } : undefined,
    };
  },

  toJSON(message: DynamicMetadataInput_PathSegment): unknown {
    const obj: any = {};
    if (message.segment?.$case === "key") {
      obj.key = message.segment.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicMetadataInput_PathSegment>, I>>(
    base?: I,
  ): DynamicMetadataInput_PathSegment {
    return DynamicMetadataInput_PathSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicMetadataInput_PathSegment>, I>>(
    object: I,
  ): DynamicMetadataInput_PathSegment {
    const message = createBaseDynamicMetadataInput_PathSegment();
    if (object.segment?.$case === "key" && object.segment?.key !== undefined && object.segment?.key !== null) {
      message.segment = { $case: "key", key: object.segment.key };
    }
    return message;
  },
};

messageTypeRegistry.set(DynamicMetadataInput_PathSegment.$type, DynamicMetadataInput_PathSegment);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
