// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/runtime/v3/rtds.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Struct } from "../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../typeRegistry";
import {
  DeltaDiscoveryRequest,
  DeltaDiscoveryResponse,
  DiscoveryRequest,
  DiscoveryResponse,
} from "../../discovery/v3/discovery";

export const protobufPackage = "envoy.service.runtime.v3";

/**
 * [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
 * services: https://github.com/google/protobuf/issues/4221
 */
export interface RtdsDummy {
  $type: "envoy.service.runtime.v3.RtdsDummy";
}

/** RTDS resource type. This describes a layer in the runtime virtual filesystem. */
export interface Runtime {
  $type: "envoy.service.runtime.v3.Runtime";
  /**
   * Runtime resource name. This makes the Runtime a self-describing xDS
   * resource.
   */
  name?: string | undefined;
  layer?: { [key: string]: any } | undefined;
}

function createBaseRtdsDummy(): RtdsDummy {
  return { $type: "envoy.service.runtime.v3.RtdsDummy" };
}

export const RtdsDummy: MessageFns<RtdsDummy, "envoy.service.runtime.v3.RtdsDummy"> = {
  $type: "envoy.service.runtime.v3.RtdsDummy" as const,

  encode(_: RtdsDummy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RtdsDummy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRtdsDummy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RtdsDummy {
    return { $type: RtdsDummy.$type };
  },

  toJSON(_: RtdsDummy): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RtdsDummy>, I>>(base?: I): RtdsDummy {
    return RtdsDummy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RtdsDummy>, I>>(_: I): RtdsDummy {
    const message = createBaseRtdsDummy();
    return message;
  },
};

messageTypeRegistry.set(RtdsDummy.$type, RtdsDummy);

function createBaseRuntime(): Runtime {
  return { $type: "envoy.service.runtime.v3.Runtime" };
}

export const Runtime: MessageFns<Runtime, "envoy.service.runtime.v3.Runtime"> = {
  $type: "envoy.service.runtime.v3.Runtime" as const,

  encode(message: Runtime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.layer !== undefined) {
      Struct.encode(Struct.wrap(message.layer), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Runtime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.layer = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Runtime {
    return {
      $type: Runtime.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      layer: isObject(object.layer) ? object.layer : undefined,
    };
  },

  toJSON(message: Runtime): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.layer !== undefined) {
      obj.layer = message.layer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Runtime>, I>>(base?: I): Runtime {
    return Runtime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Runtime>, I>>(object: I): Runtime {
    const message = createBaseRuntime();
    message.name = object.name ?? undefined;
    message.layer = object.layer ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Runtime.$type, Runtime);

/** Discovery service for Runtime resources. */
export interface RuntimeDiscoveryService {
  StreamRuntime(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse>;
  DeltaRuntime(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse>;
  FetchRuntime(request: DiscoveryRequest): Promise<DiscoveryResponse>;
}

export const RuntimeDiscoveryServiceServiceName = "envoy.service.runtime.v3.RuntimeDiscoveryService";
export class RuntimeDiscoveryServiceClientImpl implements RuntimeDiscoveryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RuntimeDiscoveryServiceServiceName;
    this.rpc = rpc;
    this.StreamRuntime = this.StreamRuntime.bind(this);
    this.DeltaRuntime = this.DeltaRuntime.bind(this);
    this.FetchRuntime = this.FetchRuntime.bind(this);
  }
  StreamRuntime(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse> {
    const data = request.pipe(map((request) => DiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamRuntime", data);
    return result.pipe(map((data) => DiscoveryResponse.decode(new BinaryReader(data))));
  }

  DeltaRuntime(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse> {
    const data = request.pipe(map((request) => DeltaDiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "DeltaRuntime", data);
    return result.pipe(map((data) => DeltaDiscoveryResponse.decode(new BinaryReader(data))));
  }

  FetchRuntime(request: DiscoveryRequest): Promise<DiscoveryResponse> {
    const data = DiscoveryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FetchRuntime", data);
    return promise.then((data) => DiscoveryResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
