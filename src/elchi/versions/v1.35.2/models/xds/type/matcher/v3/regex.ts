// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: xds/type/matcher/v3/regex.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "xds.type.matcher.v3";

/** A regex matcher designed for safety when used with untrusted input. */
export interface RegexMatcher {
  $type: "xds.type.matcher.v3.RegexMatcher";
  engine_type?:
    | //
    /** Google's RE2 regex engine. */
    { $case: "google_re2"; google_re2: RegexMatcher_GoogleRE2 }
    | undefined;
  /**
   * The regex match string. The string must be supported by the configured
   * engine.
   */
  regex?: string | undefined;
}

/**
 * Google's `RE2 <https://github.com/google/re2>`_ regex engine. The regex
 * string must adhere to the documented `syntax
 * <https://github.com/google/re2/wiki/Syntax>`_. The engine is designed to
 * complete execution in linear time as well as limit the amount of memory
 * used.
 *
 * Envoy supports program size checking via runtime. The runtime keys
 * `re2.max_program_size.error_level` and `re2.max_program_size.warn_level`
 * can be set to integers as the maximum program size or complexity that a
 * compiled regex can have before an exception is thrown or a warning is
 * logged, respectively. `re2.max_program_size.error_level` defaults to 100,
 * and `re2.max_program_size.warn_level` has no default if unset (will not
 * check/log a warning).
 *
 * Envoy emits two stats for tracking the program size of regexes: the
 * histogram `re2.program_size`, which records the program size, and the
 * counter `re2.exceeded_warn_level`, which is incremented each time the
 * program size exceeds the warn level threshold.
 */
export interface RegexMatcher_GoogleRE2 {
  $type: "xds.type.matcher.v3.RegexMatcher.GoogleRE2";
}

function createBaseRegexMatcher(): RegexMatcher {
  return { $type: "xds.type.matcher.v3.RegexMatcher", engine_type: undefined };
}

export const RegexMatcher: MessageFns<RegexMatcher, "xds.type.matcher.v3.RegexMatcher"> = {
  $type: "xds.type.matcher.v3.RegexMatcher" as const,

  encode(message: RegexMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.engine_type?.$case) {
      case "google_re2":
        RegexMatcher_GoogleRE2.encode(message.engine_type.google_re2, writer.uint32(10).fork()).join();
        break;
    }
    if (message.regex !== undefined && message.regex !== "") {
      writer.uint32(18).string(message.regex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegexMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegexMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.engine_type = {
            $case: "google_re2",
            google_re2: RegexMatcher_GoogleRE2.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.regex = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegexMatcher {
    return {
      $type: RegexMatcher.$type,
      engine_type: isSet(object.google_re2)
        ? { $case: "google_re2", google_re2: RegexMatcher_GoogleRE2.fromJSON(object.google_re2) }
        : undefined,
      regex: isSet(object.regex) ? globalThis.String(object.regex) : undefined,
    };
  },

  toJSON(message: RegexMatcher): unknown {
    const obj: any = {};
    if (message.engine_type?.$case === "google_re2") {
      obj.google_re2 = RegexMatcher_GoogleRE2.toJSON(message.engine_type.google_re2);
    }
    if (message.regex !== undefined) {
      obj.regex = message.regex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegexMatcher>, I>>(base?: I): RegexMatcher {
    return RegexMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegexMatcher>, I>>(object: I): RegexMatcher {
    const message = createBaseRegexMatcher();
    if (
      object.engine_type?.$case === "google_re2" &&
      object.engine_type?.google_re2 !== undefined &&
      object.engine_type?.google_re2 !== null
    ) {
      message.engine_type = {
        $case: "google_re2",
        google_re2: RegexMatcher_GoogleRE2.fromPartial(object.engine_type.google_re2),
      };
    }
    message.regex = object.regex ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RegexMatcher.$type, RegexMatcher);

function createBaseRegexMatcher_GoogleRE2(): RegexMatcher_GoogleRE2 {
  return { $type: "xds.type.matcher.v3.RegexMatcher.GoogleRE2" };
}

export const RegexMatcher_GoogleRE2: MessageFns<RegexMatcher_GoogleRE2, "xds.type.matcher.v3.RegexMatcher.GoogleRE2"> =
  {
    $type: "xds.type.matcher.v3.RegexMatcher.GoogleRE2" as const,

    encode(_: RegexMatcher_GoogleRE2, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RegexMatcher_GoogleRE2 {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseRegexMatcher_GoogleRE2();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): RegexMatcher_GoogleRE2 {
      return { $type: RegexMatcher_GoogleRE2.$type };
    },

    toJSON(_: RegexMatcher_GoogleRE2): unknown {
      const obj: any = {};
      return obj;
    },

    create<I extends Exact<DeepPartial<RegexMatcher_GoogleRE2>, I>>(base?: I): RegexMatcher_GoogleRE2 {
      return RegexMatcher_GoogleRE2.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<RegexMatcher_GoogleRE2>, I>>(_: I): RegexMatcher_GoogleRE2 {
      const message = createBaseRegexMatcher_GoogleRE2();
      return message;
    },
  };

messageTypeRegistry.set(RegexMatcher_GoogleRE2.$type, RegexMatcher_GoogleRE2);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
