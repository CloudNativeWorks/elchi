// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/compression/qatzip/compressor/v3alpha/qatzip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.compression.qatzip.compressor.v3alpha";

/** [#next-free-field: 6] */
export interface Qatzip {
  $type: "envoy.extensions.compression.qatzip.compressor.v3alpha.Qatzip";
  /**
   * Value from 1 to 9 that controls the main compression speed-density lever.
   * The higher quality, the slower compression. The default value is 1.
   */
  compression_level?:
    | number
    | undefined;
  /** A size of qat hardware buffer. This field will be set to "DEFAULT" if not specified. */
  hardware_buffer_size?:
    | Qatzip_HardwareBufferSize
    | undefined;
  /**
   * Threshold of compression serviceâ€™s input size for software failover.
   * If the size of input request less than the threshold, qatzip will route the request to software
   * compressor. The default value is 1024. The maximum value is 512*1024.
   */
  input_size_threshold?:
    | number
    | undefined;
  /**
   * A size of stream buffer. The default value is 128 * 1024. The maximum value is 2*1024*1024 -
   * 5*1024
   */
  stream_buffer_size?:
    | number
    | undefined;
  /** Value for compressor's next output buffer. If not set, defaults to 4096. */
  chunk_size?: number | undefined;
}

export enum Qatzip_HardwareBufferSize {
  DEFAULT = "DEFAULT",
  SZ_4K = "SZ_4K",
  SZ_8K = "SZ_8K",
  SZ_32K = "SZ_32K",
  SZ_64K = "SZ_64K",
  SZ_128K = "SZ_128K",
  SZ_512K = "SZ_512K",
}

export function qatzip_HardwareBufferSizeFromJSON(object: any): Qatzip_HardwareBufferSize {
  switch (object) {
    case 0:
    case "DEFAULT":
      return Qatzip_HardwareBufferSize.DEFAULT;
    case 1:
    case "SZ_4K":
      return Qatzip_HardwareBufferSize.SZ_4K;
    case 2:
    case "SZ_8K":
      return Qatzip_HardwareBufferSize.SZ_8K;
    case 3:
    case "SZ_32K":
      return Qatzip_HardwareBufferSize.SZ_32K;
    case 4:
    case "SZ_64K":
      return Qatzip_HardwareBufferSize.SZ_64K;
    case 5:
    case "SZ_128K":
      return Qatzip_HardwareBufferSize.SZ_128K;
    case 6:
    case "SZ_512K":
      return Qatzip_HardwareBufferSize.SZ_512K;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Qatzip_HardwareBufferSize");
  }
}

export function qatzip_HardwareBufferSizeToJSON(object: Qatzip_HardwareBufferSize): string {
  switch (object) {
    case Qatzip_HardwareBufferSize.DEFAULT:
      return "DEFAULT";
    case Qatzip_HardwareBufferSize.SZ_4K:
      return "SZ_4K";
    case Qatzip_HardwareBufferSize.SZ_8K:
      return "SZ_8K";
    case Qatzip_HardwareBufferSize.SZ_32K:
      return "SZ_32K";
    case Qatzip_HardwareBufferSize.SZ_64K:
      return "SZ_64K";
    case Qatzip_HardwareBufferSize.SZ_128K:
      return "SZ_128K";
    case Qatzip_HardwareBufferSize.SZ_512K:
      return "SZ_512K";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Qatzip_HardwareBufferSize");
  }
}

export function qatzip_HardwareBufferSizeToNumber(object: Qatzip_HardwareBufferSize): number {
  switch (object) {
    case Qatzip_HardwareBufferSize.DEFAULT:
      return 0;
    case Qatzip_HardwareBufferSize.SZ_4K:
      return 1;
    case Qatzip_HardwareBufferSize.SZ_8K:
      return 2;
    case Qatzip_HardwareBufferSize.SZ_32K:
      return 3;
    case Qatzip_HardwareBufferSize.SZ_64K:
      return 4;
    case Qatzip_HardwareBufferSize.SZ_128K:
      return 5;
    case Qatzip_HardwareBufferSize.SZ_512K:
      return 6;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Qatzip_HardwareBufferSize");
  }
}

function createBaseQatzip(): Qatzip {
  return { $type: "envoy.extensions.compression.qatzip.compressor.v3alpha.Qatzip" };
}

export const Qatzip: MessageFns<Qatzip, "envoy.extensions.compression.qatzip.compressor.v3alpha.Qatzip"> = {
  $type: "envoy.extensions.compression.qatzip.compressor.v3alpha.Qatzip" as const,

  encode(message: Qatzip, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.compression_level !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.compression_level! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (
      message.hardware_buffer_size !== undefined && message.hardware_buffer_size !== Qatzip_HardwareBufferSize.DEFAULT
    ) {
      writer.uint32(16).int32(qatzip_HardwareBufferSizeToNumber(message.hardware_buffer_size));
    }
    if (message.input_size_threshold !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.input_size_threshold! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.stream_buffer_size !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.stream_buffer_size! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.chunk_size !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.chunk_size! }, writer.uint32(42).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Qatzip {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQatzip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.compression_level = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hardware_buffer_size = qatzip_HardwareBufferSizeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.input_size_threshold = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stream_buffer_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chunk_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Qatzip {
    return {
      $type: Qatzip.$type,
      compression_level: isSet(object.compression_level) ? Number(object.compression_level) : undefined,
      hardware_buffer_size: isSet(object.hardware_buffer_size)
        ? qatzip_HardwareBufferSizeFromJSON(object.hardware_buffer_size)
        : undefined,
      input_size_threshold: isSet(object.input_size_threshold) ? Number(object.input_size_threshold) : undefined,
      stream_buffer_size: isSet(object.stream_buffer_size) ? Number(object.stream_buffer_size) : undefined,
      chunk_size: isSet(object.chunk_size) ? Number(object.chunk_size) : undefined,
    };
  },

  toJSON(message: Qatzip): unknown {
    const obj: any = {};
    if (message.compression_level !== undefined) {
      obj.compression_level = message.compression_level;
    }
    if (message.hardware_buffer_size !== undefined) {
      obj.hardware_buffer_size = qatzip_HardwareBufferSizeToJSON(message.hardware_buffer_size);
    }
    if (message.input_size_threshold !== undefined) {
      obj.input_size_threshold = message.input_size_threshold;
    }
    if (message.stream_buffer_size !== undefined) {
      obj.stream_buffer_size = message.stream_buffer_size;
    }
    if (message.chunk_size !== undefined) {
      obj.chunk_size = message.chunk_size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Qatzip>, I>>(base?: I): Qatzip {
    return Qatzip.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Qatzip>, I>>(object: I): Qatzip {
    const message = createBaseQatzip();
    message.compression_level = object.compression_level ?? undefined;
    message.hardware_buffer_size = object.hardware_buffer_size ?? undefined;
    message.input_size_threshold = object.input_size_threshold ?? undefined;
    message.stream_buffer_size = object.stream_buffer_size ?? undefined;
    message.chunk_size = object.chunk_size ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Qatzip.$type, Qatzip);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
