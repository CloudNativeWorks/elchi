// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/listener/udp_listener_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../google/protobuf/any";
import { Struct } from "../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.api.v2.listener";

export interface UdpListenerConfig {
  $type: "envoy.api.v2.listener.UdpListenerConfig";
  /**
   * Used to look up UDP listener factory, matches "raw_udp_listener" or
   * "quic_listener" to create a specific udp listener.
   * If not specified, treat as "raw_udp_listener".
   */
  udp_listener_name?:
    | string
    | undefined;
  /**
   * Used to create a specific listener factory. To some factory, e.g.
   * "raw_udp_listener", config is not needed.
   */
  config_type?:
    | //
    { $case: "config"; config: { [key: string]: any } | undefined }
    | //
    { $case: "typed_config"; typed_config: Any }
    | undefined;
}

export interface ActiveRawUdpListenerConfig {
  $type: "envoy.api.v2.listener.ActiveRawUdpListenerConfig";
}

function createBaseUdpListenerConfig(): UdpListenerConfig {
  return { $type: "envoy.api.v2.listener.UdpListenerConfig", config_type: undefined };
}

export const UdpListenerConfig: MessageFns<UdpListenerConfig, "envoy.api.v2.listener.UdpListenerConfig"> = {
  $type: "envoy.api.v2.listener.UdpListenerConfig" as const,

  encode(message: UdpListenerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.udp_listener_name !== undefined && message.udp_listener_name !== "") {
      writer.uint32(10).string(message.udp_listener_name);
    }
    switch (message.config_type?.$case) {
      case "config":
        Struct.encode(Struct.wrap(message.config_type.config), writer.uint32(18).fork()).join();
        break;
      case "typed_config":
        Any.encode(message.config_type.typed_config, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UdpListenerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUdpListenerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.udp_listener_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config_type = { $case: "config", config: Struct.unwrap(Struct.decode(reader, reader.uint32())) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.config_type = { $case: "typed_config", typed_config: Any.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UdpListenerConfig {
    return {
      $type: UdpListenerConfig.$type,
      udp_listener_name: isSet(object.udp_listener_name) ? globalThis.String(object.udp_listener_name) : undefined,
      config_type: isSet(object.config)
        ? { $case: "config", config: object.config }
        : isSet(object.typed_config)
        ? { $case: "typed_config", typed_config: Any.fromJSON(object.typed_config) }
        : undefined,
    };
  },

  toJSON(message: UdpListenerConfig): unknown {
    const obj: any = {};
    if (message.udp_listener_name !== undefined) {
      obj.udp_listener_name = message.udp_listener_name;
    }
    if (message.config_type?.$case === "config") {
      obj.config = message.config_type.config;
    }
    if (message.config_type?.$case === "typed_config") {
      obj.typed_config = Any.toJSON(message.config_type.typed_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UdpListenerConfig>, I>>(base?: I): UdpListenerConfig {
    return UdpListenerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UdpListenerConfig>, I>>(object: I): UdpListenerConfig {
    const message = createBaseUdpListenerConfig();
    message.udp_listener_name = object.udp_listener_name ?? undefined;
    if (
      object.config_type?.$case === "config" &&
      object.config_type?.config !== undefined &&
      object.config_type?.config !== null
    ) {
      message.config_type = { $case: "config", config: object.config_type.config };
    }
    if (
      object.config_type?.$case === "typed_config" &&
      object.config_type?.typed_config !== undefined &&
      object.config_type?.typed_config !== null
    ) {
      message.config_type = { $case: "typed_config", typed_config: Any.fromPartial(object.config_type.typed_config) };
    }
    return message;
  },
};

messageTypeRegistry.set(UdpListenerConfig.$type, UdpListenerConfig);

function createBaseActiveRawUdpListenerConfig(): ActiveRawUdpListenerConfig {
  return { $type: "envoy.api.v2.listener.ActiveRawUdpListenerConfig" };
}

export const ActiveRawUdpListenerConfig: MessageFns<
  ActiveRawUdpListenerConfig,
  "envoy.api.v2.listener.ActiveRawUdpListenerConfig"
> = {
  $type: "envoy.api.v2.listener.ActiveRawUdpListenerConfig" as const,

  encode(_: ActiveRawUdpListenerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveRawUdpListenerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveRawUdpListenerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ActiveRawUdpListenerConfig {
    return { $type: ActiveRawUdpListenerConfig.$type };
  },

  toJSON(_: ActiveRawUdpListenerConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveRawUdpListenerConfig>, I>>(base?: I): ActiveRawUdpListenerConfig {
    return ActiveRawUdpListenerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveRawUdpListenerConfig>, I>>(_: I): ActiveRawUdpListenerConfig {
    const message = createBaseActiveRawUdpListenerConfig();
    return message;
  },
};

messageTypeRegistry.set(ActiveRawUdpListenerConfig.$type, ActiveRawUdpListenerConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
