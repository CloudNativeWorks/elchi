// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v3/opentelemetry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { TypedExtensionConfig } from "../../core/v3/extension";
import { GrpcService } from "../../core/v3/grpc_service";
import { HttpService } from "../../core/v3/http_service";

export const protobufPackage = "envoy.config.trace.v3";

/**
 * Configuration for the OpenTelemetry tracer.
 *  [#extension: envoy.tracers.opentelemetry]
 * [#next-free-field: 6]
 */
export interface OpenTelemetryConfig {
  $type: "envoy.config.trace.v3.OpenTelemetryConfig";
  /**
   * The upstream gRPC cluster that will receive OTLP traces.
   * Note that the tracer drops traces if the server does not read data fast enough.
   * This field can be left empty to disable reporting traces to the gRPC service.
   * Only one of ``grpc_service``, ``http_service`` may be used.
   */
  grpc_service?:
    | GrpcService
    | undefined;
  /**
   * The upstream HTTP cluster that will receive OTLP traces.
   * This field can be left empty to disable reporting traces to the HTTP service.
   * Only one of ``grpc_service``, ``http_service`` may be used.
   *
   * .. note::
   *
   *   Note: The ``request_headers_to_add`` property in the OTLP HTTP exporter service
   *   does not support the :ref:`format specifier <config_access_log_format>` as used for
   *   :ref:`HTTP access logging <config_access_log>`.
   *   The values configured are added as HTTP headers on the OTLP export request
   *   without any formatting applied.
   */
  http_service?:
    | HttpService
    | undefined;
  /**
   * The name for the service. This will be populated in the ResourceSpan Resource attributes.
   * If it is not provided, it will default to "unknown_service:envoy".
   */
  service_name?:
    | string
    | undefined;
  /**
   * An ordered list of resource detectors
   * [#extension-category: envoy.tracers.opentelemetry.resource_detectors]
   */
  resource_detectors?:
    | TypedExtensionConfig[]
    | undefined;
  /**
   * Specifies the sampler to be used by the OpenTelemetry tracer.
   * The configured sampler implements the Sampler interface defined by the OpenTelemetry specification.
   * This field can be left empty. In this case, the default Envoy sampling decision is used.
   *
   * See: `OpenTelemetry sampler specification <https://opentelemetry.io/docs/specs/otel/trace/sdk/#sampler>`_
   * [#extension-category: envoy.tracers.opentelemetry.samplers]
   */
  sampler?: TypedExtensionConfig | undefined;
}

function createBaseOpenTelemetryConfig(): OpenTelemetryConfig {
  return { $type: "envoy.config.trace.v3.OpenTelemetryConfig" };
}

export const OpenTelemetryConfig: MessageFns<OpenTelemetryConfig, "envoy.config.trace.v3.OpenTelemetryConfig"> = {
  $type: "envoy.config.trace.v3.OpenTelemetryConfig" as const,

  encode(message: OpenTelemetryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(10).fork()).join();
    }
    if (message.http_service !== undefined) {
      HttpService.encode(message.http_service, writer.uint32(26).fork()).join();
    }
    if (message.service_name !== undefined && message.service_name !== "") {
      writer.uint32(18).string(message.service_name);
    }
    if (message.resource_detectors !== undefined && message.resource_detectors.length !== 0) {
      for (const v of message.resource_detectors) {
        TypedExtensionConfig.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    if (message.sampler !== undefined) {
      TypedExtensionConfig.encode(message.sampler, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenTelemetryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenTelemetryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.http_service = HttpService.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.service_name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.resource_detectors === undefined) {
            message.resource_detectors = [];
          }
          const el = TypedExtensionConfig.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.resource_detectors!.push(el);
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sampler = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenTelemetryConfig {
    return {
      $type: OpenTelemetryConfig.$type,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
      http_service: isSet(object.http_service) ? HttpService.fromJSON(object.http_service) : undefined,
      service_name: isSet(object.service_name) ? globalThis.String(object.service_name) : undefined,
      resource_detectors: globalThis.Array.isArray(object?.resource_detectors)
        ? object.resource_detectors.map((e: any) => TypedExtensionConfig.fromJSON(e))
        : undefined,
      sampler: isSet(object.sampler) ? TypedExtensionConfig.fromJSON(object.sampler) : undefined,
    };
  },

  toJSON(message: OpenTelemetryConfig): unknown {
    const obj: any = {};
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    if (message.http_service !== undefined) {
      obj.http_service = HttpService.toJSON(message.http_service);
    }
    if (message.service_name !== undefined) {
      obj.service_name = message.service_name;
    }
    if (message.resource_detectors?.length) {
      obj.resource_detectors = message.resource_detectors.map((e) => TypedExtensionConfig.toJSON(e));
    }
    if (message.sampler !== undefined) {
      obj.sampler = TypedExtensionConfig.toJSON(message.sampler);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OpenTelemetryConfig>, I>>(base?: I): OpenTelemetryConfig {
    return OpenTelemetryConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OpenTelemetryConfig>, I>>(object: I): OpenTelemetryConfig {
    const message = createBaseOpenTelemetryConfig();
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    message.http_service = (object.http_service !== undefined && object.http_service !== null)
      ? HttpService.fromPartial(object.http_service)
      : undefined;
    message.service_name = object.service_name ?? undefined;
    message.resource_detectors = object.resource_detectors?.map((e) => TypedExtensionConfig.fromPartial(e)) ||
      undefined;
    message.sampler = (object.sampler !== undefined && object.sampler !== null)
      ? TypedExtensionConfig.fromPartial(object.sampler)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(OpenTelemetryConfig.$type, OpenTelemetryConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
