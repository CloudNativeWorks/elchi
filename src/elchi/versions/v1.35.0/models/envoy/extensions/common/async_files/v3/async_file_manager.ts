// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/common/async_files/v3/async_file_manager.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.common.async_files.v3";

/** Configuration to instantiate or select a singleton ``AsyncFileManager``. */
export interface AsyncFileManagerConfig {
  $type: "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig";
  /**
   * An optional identifier for the manager. An empty string is a valid identifier
   * for a common, default ``AsyncFileManager``.
   *
   * Reusing the same id with different configurations in the same envoy instance
   * is an error.
   */
  id?: string | undefined;
  manager_type?:
    | //
    /** Configuration for a thread-pool based async file manager. */
    { $case: "thread_pool"; thread_pool: AsyncFileManagerConfig_ThreadPool }
    | undefined;
}

export interface AsyncFileManagerConfig_ThreadPool {
  $type: "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool";
  /**
   * The number of threads to use. If unset or zero, will default to the number
   * of concurrent threads the hardware supports. This default is subject to
   * change if performance analysis suggests it.
   */
  thread_count?: number | undefined;
}

function createBaseAsyncFileManagerConfig(): AsyncFileManagerConfig {
  return { $type: "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig", manager_type: undefined };
}

export const AsyncFileManagerConfig: MessageFns<
  AsyncFileManagerConfig,
  "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig"
> = {
  $type: "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig" as const,

  encode(message: AsyncFileManagerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    switch (message.manager_type?.$case) {
      case "thread_pool":
        AsyncFileManagerConfig_ThreadPool.encode(message.manager_type.thread_pool, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AsyncFileManagerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsyncFileManagerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.manager_type = {
            $case: "thread_pool",
            thread_pool: AsyncFileManagerConfig_ThreadPool.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AsyncFileManagerConfig {
    return {
      $type: AsyncFileManagerConfig.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      manager_type: isSet(object.thread_pool)
        ? { $case: "thread_pool", thread_pool: AsyncFileManagerConfig_ThreadPool.fromJSON(object.thread_pool) }
        : undefined,
    };
  },

  toJSON(message: AsyncFileManagerConfig): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.manager_type?.$case === "thread_pool") {
      obj.thread_pool = AsyncFileManagerConfig_ThreadPool.toJSON(message.manager_type.thread_pool);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AsyncFileManagerConfig>, I>>(base?: I): AsyncFileManagerConfig {
    return AsyncFileManagerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AsyncFileManagerConfig>, I>>(object: I): AsyncFileManagerConfig {
    const message = createBaseAsyncFileManagerConfig();
    message.id = object.id ?? undefined;
    if (
      object.manager_type?.$case === "thread_pool" &&
      object.manager_type?.thread_pool !== undefined &&
      object.manager_type?.thread_pool !== null
    ) {
      message.manager_type = {
        $case: "thread_pool",
        thread_pool: AsyncFileManagerConfig_ThreadPool.fromPartial(object.manager_type.thread_pool),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(AsyncFileManagerConfig.$type, AsyncFileManagerConfig);

function createBaseAsyncFileManagerConfig_ThreadPool(): AsyncFileManagerConfig_ThreadPool {
  return { $type: "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool" };
}

export const AsyncFileManagerConfig_ThreadPool: MessageFns<
  AsyncFileManagerConfig_ThreadPool,
  "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool"
> = {
  $type: "envoy.extensions.common.async_files.v3.AsyncFileManagerConfig.ThreadPool" as const,

  encode(message: AsyncFileManagerConfig_ThreadPool, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.thread_count !== undefined && message.thread_count !== 0) {
      writer.uint32(8).uint32(message.thread_count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AsyncFileManagerConfig_ThreadPool {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsyncFileManagerConfig_ThreadPool();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.thread_count = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AsyncFileManagerConfig_ThreadPool {
    return {
      $type: AsyncFileManagerConfig_ThreadPool.$type,
      thread_count: isSet(object.thread_count) ? globalThis.Number(object.thread_count) : undefined,
    };
  },

  toJSON(message: AsyncFileManagerConfig_ThreadPool): unknown {
    const obj: any = {};
    if (message.thread_count !== undefined) {
      obj.thread_count = Math.round(message.thread_count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AsyncFileManagerConfig_ThreadPool>, I>>(
    base?: I,
  ): AsyncFileManagerConfig_ThreadPool {
    return AsyncFileManagerConfig_ThreadPool.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AsyncFileManagerConfig_ThreadPool>, I>>(
    object: I,
  ): AsyncFileManagerConfig_ThreadPool {
    const message = createBaseAsyncFileManagerConfig_ThreadPool();
    message.thread_count = object.thread_count ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(AsyncFileManagerConfig_ThreadPool.$type, AsyncFileManagerConfig_ThreadPool);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
