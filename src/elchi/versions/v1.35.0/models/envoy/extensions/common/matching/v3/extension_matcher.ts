// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/common/matching/v3/extension_matcher.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { Matcher as Matcher1 } from "../../../../../xds/type/matcher/v3/matcher";
import { Matcher } from "../../../../config/common/matcher/v3/matcher";
import { TypedExtensionConfig } from "../../../../config/core/v3/extension";

export const protobufPackage = "envoy.extensions.common.matching.v3";

/**
 * Wrapper around an existing extension that provides an associated matcher. This allows
 * decorating an existing extension with a matcher, which can be used to match against
 * relevant protocol data.
 */
export interface ExtensionWithMatcher {
  $type: "envoy.extensions.common.matching.v3.ExtensionWithMatcher";
  /**
   * The associated matcher. This is deprecated in favor of xds_matcher.
   *
   * @deprecated
   */
  matcher?:
    | Matcher
    | undefined;
  /** The associated matcher. */
  xds_matcher?:
    | Matcher1
    | undefined;
  /** The underlying extension config. */
  extension_config?: TypedExtensionConfig | undefined;
}

/** Extra settings on a per virtualhost/route/weighted-cluster level. */
export interface ExtensionWithMatcherPerRoute {
  $type: "envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute";
  /** Matcher override. */
  xds_matcher?: Matcher1 | undefined;
}

function createBaseExtensionWithMatcher(): ExtensionWithMatcher {
  return { $type: "envoy.extensions.common.matching.v3.ExtensionWithMatcher" };
}

export const ExtensionWithMatcher: MessageFns<
  ExtensionWithMatcher,
  "envoy.extensions.common.matching.v3.ExtensionWithMatcher"
> = {
  $type: "envoy.extensions.common.matching.v3.ExtensionWithMatcher" as const,

  encode(message: ExtensionWithMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.matcher !== undefined) {
      Matcher.encode(message.matcher, writer.uint32(10).fork()).join();
    }
    if (message.xds_matcher !== undefined) {
      Matcher1.encode(message.xds_matcher, writer.uint32(26).fork()).join();
    }
    if (message.extension_config !== undefined) {
      TypedExtensionConfig.encode(message.extension_config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionWithMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionWithMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.matcher = Matcher.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.xds_matcher = Matcher1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extension_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionWithMatcher {
    return {
      $type: ExtensionWithMatcher.$type,
      matcher: isSet(object.matcher) ? Matcher.fromJSON(object.matcher) : undefined,
      xds_matcher: isSet(object.xds_matcher) ? Matcher1.fromJSON(object.xds_matcher) : undefined,
      extension_config: isSet(object.extension_config)
        ? TypedExtensionConfig.fromJSON(object.extension_config)
        : undefined,
    };
  },

  toJSON(message: ExtensionWithMatcher): unknown {
    const obj: any = {};
    if (message.matcher !== undefined) {
      obj.matcher = Matcher.toJSON(message.matcher);
    }
    if (message.xds_matcher !== undefined) {
      obj.xds_matcher = Matcher1.toJSON(message.xds_matcher);
    }
    if (message.extension_config !== undefined) {
      obj.extension_config = TypedExtensionConfig.toJSON(message.extension_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionWithMatcher>, I>>(base?: I): ExtensionWithMatcher {
    return ExtensionWithMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionWithMatcher>, I>>(object: I): ExtensionWithMatcher {
    const message = createBaseExtensionWithMatcher();
    message.matcher = (object.matcher !== undefined && object.matcher !== null)
      ? Matcher.fromPartial(object.matcher)
      : undefined;
    message.xds_matcher = (object.xds_matcher !== undefined && object.xds_matcher !== null)
      ? Matcher1.fromPartial(object.xds_matcher)
      : undefined;
    message.extension_config = (object.extension_config !== undefined && object.extension_config !== null)
      ? TypedExtensionConfig.fromPartial(object.extension_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ExtensionWithMatcher.$type, ExtensionWithMatcher);

function createBaseExtensionWithMatcherPerRoute(): ExtensionWithMatcherPerRoute {
  return { $type: "envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute" };
}

export const ExtensionWithMatcherPerRoute: MessageFns<
  ExtensionWithMatcherPerRoute,
  "envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute"
> = {
  $type: "envoy.extensions.common.matching.v3.ExtensionWithMatcherPerRoute" as const,

  encode(message: ExtensionWithMatcherPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xds_matcher !== undefined) {
      Matcher1.encode(message.xds_matcher, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionWithMatcherPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionWithMatcherPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.xds_matcher = Matcher1.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionWithMatcherPerRoute {
    return {
      $type: ExtensionWithMatcherPerRoute.$type,
      xds_matcher: isSet(object.xds_matcher) ? Matcher1.fromJSON(object.xds_matcher) : undefined,
    };
  },

  toJSON(message: ExtensionWithMatcherPerRoute): unknown {
    const obj: any = {};
    if (message.xds_matcher !== undefined) {
      obj.xds_matcher = Matcher1.toJSON(message.xds_matcher);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtensionWithMatcherPerRoute>, I>>(base?: I): ExtensionWithMatcherPerRoute {
    return ExtensionWithMatcherPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtensionWithMatcherPerRoute>, I>>(object: I): ExtensionWithMatcherPerRoute {
    const message = createBaseExtensionWithMatcherPerRoute();
    message.xds_matcher = (object.xds_matcher !== undefined && object.xds_matcher !== null)
      ? Matcher1.fromPartial(object.xds_matcher)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ExtensionWithMatcherPerRoute.$type, ExtensionWithMatcherPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
