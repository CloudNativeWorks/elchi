// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/dynamic_modules/v3/dynamic_modules.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.dynamic_modules.v3";

/**
 * Configuration of a dynamic module. A dynamic module is a shared object file that can be loaded via dlopen
 * by various Envoy extension points. Currently, only HTTP filter (envoy.filters.http.dynamic_modules) is supported.
 *
 * How a module is loaded is determined by the extension point that uses it. For example, the HTTP filter
 * loads the module with dlopen when Envoy receives a configuration that references the module at load time.
 * If loading the module fails, the configuration will be rejected.
 *
 * Whether or not the shared object is the same is determined by the file path as well as the file's inode depending
 * on the platform. Notably, if the file path and the content of the file are the same, the shared object will be reused.
 *
 * A module must be compatible with the ABI specified in :repo:`abi.h <source/extensions/dynamic_modules/abi.h>`.
 * Currently, compatibility is only guaranteed by an exact version match between the Envoy
 * codebase and the dynamic module SDKs. In the future, after the ABI is stabilized, we will revisit
 * this restriction and hopefully provide a wider compatibility guarantee. Until then, Envoy
 * checks the hash of the ABI header files to ensure that the dynamic modules are built against the
 * same version of the ABI.
 */
export interface DynamicModuleConfig {
  $type: "envoy.extensions.dynamic_modules.v3.DynamicModuleConfig";
  /**
   * The name of the dynamic module. The client is expected to have some configuration indicating where to search for the module.
   * In Envoy, the search path can only be configured via the environment variable ``ENVOY_DYNAMIC_MODULES_SEARCH_PATH``.
   * The actual search path is ``${ENVOY_DYNAMIC_MODULES_SEARCH_PATH}/lib${name}.so``. TODO: make the search path configurable via
   * command line options.
   */
  name?:
    | string
    | undefined;
  /**
   * Set true to prevent the module from being unloaded with dlclose.
   * This is useful for modules that have global state that should not be unloaded.
   * A module is closed when no more references to it exist in the process. For example,
   * no HTTP filters are using the module (e.g. after configuration update).
   */
  do_not_close?: boolean | undefined;
}

function createBaseDynamicModuleConfig(): DynamicModuleConfig {
  return { $type: "envoy.extensions.dynamic_modules.v3.DynamicModuleConfig" };
}

export const DynamicModuleConfig: MessageFns<
  DynamicModuleConfig,
  "envoy.extensions.dynamic_modules.v3.DynamicModuleConfig"
> = {
  $type: "envoy.extensions.dynamic_modules.v3.DynamicModuleConfig" as const,

  encode(message: DynamicModuleConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.do_not_close !== undefined && message.do_not_close !== false) {
      writer.uint32(24).bool(message.do_not_close);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicModuleConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicModuleConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.do_not_close = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicModuleConfig {
    return {
      $type: DynamicModuleConfig.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      do_not_close: isSet(object.do_not_close) ? globalThis.Boolean(object.do_not_close) : undefined,
    };
  },

  toJSON(message: DynamicModuleConfig): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.do_not_close !== undefined) {
      obj.do_not_close = message.do_not_close;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicModuleConfig>, I>>(base?: I): DynamicModuleConfig {
    return DynamicModuleConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicModuleConfig>, I>>(object: I): DynamicModuleConfig {
    const message = createBaseDynamicModuleConfig();
    message.name = object.name ?? undefined;
    message.do_not_close = object.do_not_close ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DynamicModuleConfig.$type, DynamicModuleConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
