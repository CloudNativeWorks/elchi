// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/path/match/uri_template/v3/uri_template_match.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.path.match.uri_template.v3";

/**
 * If specified, the route is a template match rule meaning that the
 * ``:path`` header (without the query string) must match the given
 * ``path_template`` pattern.
 *
 * Path template matching types:
 *
 * * ``*`` : Matches a single path component, up to the next path separator: /
 *
 * * ``**`` : Matches zero or more path segments. If present, must be the last operator.
 *
 * * ``{name} or {name=*}`` :  A named variable matching one path segment up to the next path separator: /.
 *
 * * ``{name=videos/*}`` : A named variable matching more than one path segment.
 *      The path component matching videos/* is captured as the named variable.
 *
 * * ``{name=**}`` : A named variable matching zero or more path segments.
 *
 * For example:
 *
 * * ``/videos/* /* /*.m4s`` would match ``videos/123414/hls/1080p5000_00001.m4s``
 *
 * * ``/videos/{file}`` would match ``/videos/1080p5000_00001.m4s``
 *
 * * ``/**.mpd`` would match ``/content/123/india/dash/55/manifest.mpd``
 */
export interface UriTemplateMatchConfig {
  $type: "envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig";
  path_template?: string | undefined;
}

function createBaseUriTemplateMatchConfig(): UriTemplateMatchConfig {
  return { $type: "envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig" };
}

export const UriTemplateMatchConfig: MessageFns<
  UriTemplateMatchConfig,
  "envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig"
> = {
  $type: "envoy.extensions.path.match.uri_template.v3.UriTemplateMatchConfig" as const,

  encode(message: UriTemplateMatchConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path_template !== undefined && message.path_template !== "") {
      writer.uint32(10).string(message.path_template);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UriTemplateMatchConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUriTemplateMatchConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path_template = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UriTemplateMatchConfig {
    return {
      $type: UriTemplateMatchConfig.$type,
      path_template: isSet(object.path_template) ? globalThis.String(object.path_template) : undefined,
    };
  },

  toJSON(message: UriTemplateMatchConfig): unknown {
    const obj: any = {};
    if (message.path_template !== undefined) {
      obj.path_template = message.path_template;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UriTemplateMatchConfig>, I>>(base?: I): UriTemplateMatchConfig {
    return UriTemplateMatchConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UriTemplateMatchConfig>, I>>(object: I): UriTemplateMatchConfig {
    const message = createBaseUriTemplateMatchConfig();
    message.path_template = object.path_template ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(UriTemplateMatchConfig.$type, UriTemplateMatchConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
