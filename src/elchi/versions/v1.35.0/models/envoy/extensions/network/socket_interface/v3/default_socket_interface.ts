// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/network/socket_interface/v3/default_socket_interface.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.network.socket_interface.v3";

/**
 * Configuration for default socket interface that relies on OS dependent syscall to create
 * sockets.
 */
export interface DefaultSocketInterface {
  $type: "envoy.extensions.network.socket_interface.v3.DefaultSocketInterface";
  /**
   * io_uring options. io_uring is only valid in Linux with at least kernel version 5.11. Otherwise,
   * Envoy will fall back to use the default socket API. If not set then io_uring will not be
   * enabled.
   */
  io_uring_options?: IoUringOptions | undefined;
}

export interface IoUringOptions {
  $type: "envoy.extensions.network.socket_interface.v3.IoUringOptions";
  /**
   * The size for io_uring submission queues (SQ). io_uring is built with a fixed size in each
   * thread during configuration, and each io_uring operation creates a submission queue
   * entry (SQE). The default is 1000.
   */
  io_uring_size?:
    | number
    | undefined;
  /**
   * Enable io_uring submission queue polling (SQPOLL). io_uring SQPOLL mode polls all SQEs in the
   * SQ in the kernel thread. io_uring SQPOLL mode may reduce latency and increase CPU usage as a
   * cost. The default is false.
   */
  enable_submission_queue_polling?:
    | boolean
    | undefined;
  /**
   * The size of an io_uring socket's read buffer. Each io_uring read operation will allocate a
   * buffer of the given size. If the given buffer is too small, the socket will have read multiple
   * times for all the data. The default is 8192.
   */
  read_buffer_size?:
    | number
    | undefined;
  /**
   * The write timeout of an io_uring socket on closing in ms. io_uring writes and closes
   * asynchronously. If the remote stops reading, the io_uring write operation may never complete.
   * The operation is canceled and the socket is closed after the timeout. The default is 1000.
   */
  write_timeout_ms?: number | undefined;
}

function createBaseDefaultSocketInterface(): DefaultSocketInterface {
  return { $type: "envoy.extensions.network.socket_interface.v3.DefaultSocketInterface" };
}

export const DefaultSocketInterface: MessageFns<
  DefaultSocketInterface,
  "envoy.extensions.network.socket_interface.v3.DefaultSocketInterface"
> = {
  $type: "envoy.extensions.network.socket_interface.v3.DefaultSocketInterface" as const,

  encode(message: DefaultSocketInterface, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.io_uring_options !== undefined) {
      IoUringOptions.encode(message.io_uring_options, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultSocketInterface {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultSocketInterface();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.io_uring_options = IoUringOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultSocketInterface {
    return {
      $type: DefaultSocketInterface.$type,
      io_uring_options: isSet(object.io_uring_options) ? IoUringOptions.fromJSON(object.io_uring_options) : undefined,
    };
  },

  toJSON(message: DefaultSocketInterface): unknown {
    const obj: any = {};
    if (message.io_uring_options !== undefined) {
      obj.io_uring_options = IoUringOptions.toJSON(message.io_uring_options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DefaultSocketInterface>, I>>(base?: I): DefaultSocketInterface {
    return DefaultSocketInterface.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DefaultSocketInterface>, I>>(object: I): DefaultSocketInterface {
    const message = createBaseDefaultSocketInterface();
    message.io_uring_options = (object.io_uring_options !== undefined && object.io_uring_options !== null)
      ? IoUringOptions.fromPartial(object.io_uring_options)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DefaultSocketInterface.$type, DefaultSocketInterface);

function createBaseIoUringOptions(): IoUringOptions {
  return { $type: "envoy.extensions.network.socket_interface.v3.IoUringOptions" };
}

export const IoUringOptions: MessageFns<IoUringOptions, "envoy.extensions.network.socket_interface.v3.IoUringOptions"> =
  {
    $type: "envoy.extensions.network.socket_interface.v3.IoUringOptions" as const,

    encode(message: IoUringOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.io_uring_size !== undefined) {
        UInt32Value.encode(
          { $type: "google.protobuf.UInt32Value", value: message.io_uring_size! },
          writer.uint32(10).fork(),
        ).join();
      }
      if (message.enable_submission_queue_polling !== undefined && message.enable_submission_queue_polling !== false) {
        writer.uint32(16).bool(message.enable_submission_queue_polling);
      }
      if (message.read_buffer_size !== undefined) {
        UInt32Value.encode(
          { $type: "google.protobuf.UInt32Value", value: message.read_buffer_size! },
          writer.uint32(26).fork(),
        ).join();
      }
      if (message.write_timeout_ms !== undefined) {
        UInt32Value.encode(
          { $type: "google.protobuf.UInt32Value", value: message.write_timeout_ms! },
          writer.uint32(34).fork(),
        ).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): IoUringOptions {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseIoUringOptions();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.io_uring_size = UInt32Value.decode(reader, reader.uint32()).value;
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.enable_submission_queue_polling = reader.bool();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.read_buffer_size = UInt32Value.decode(reader, reader.uint32()).value;
            continue;
          }
          case 4: {
            if (tag !== 34) {
              break;
            }

            message.write_timeout_ms = UInt32Value.decode(reader, reader.uint32()).value;
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): IoUringOptions {
      return {
        $type: IoUringOptions.$type,
        io_uring_size: isSet(object.io_uring_size) ? Number(object.io_uring_size) : undefined,
        enable_submission_queue_polling: isSet(object.enable_submission_queue_polling)
          ? globalThis.Boolean(object.enable_submission_queue_polling)
          : undefined,
        read_buffer_size: isSet(object.read_buffer_size) ? Number(object.read_buffer_size) : undefined,
        write_timeout_ms: isSet(object.write_timeout_ms) ? Number(object.write_timeout_ms) : undefined,
      };
    },

    toJSON(message: IoUringOptions): unknown {
      const obj: any = {};
      if (message.io_uring_size !== undefined) {
        obj.io_uring_size = message.io_uring_size;
      }
      if (message.enable_submission_queue_polling !== undefined) {
        obj.enable_submission_queue_polling = message.enable_submission_queue_polling;
      }
      if (message.read_buffer_size !== undefined) {
        obj.read_buffer_size = message.read_buffer_size;
      }
      if (message.write_timeout_ms !== undefined) {
        obj.write_timeout_ms = message.write_timeout_ms;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<IoUringOptions>, I>>(base?: I): IoUringOptions {
      return IoUringOptions.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<IoUringOptions>, I>>(object: I): IoUringOptions {
      const message = createBaseIoUringOptions();
      message.io_uring_size = object.io_uring_size ?? undefined;
      message.enable_submission_queue_polling = object.enable_submission_queue_polling ?? undefined;
      message.read_buffer_size = object.read_buffer_size ?? undefined;
      message.write_timeout_ms = object.write_timeout_ms ?? undefined;
      return message;
    },
  };

messageTypeRegistry.set(IoUringOptions.$type, IoUringOptions);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
