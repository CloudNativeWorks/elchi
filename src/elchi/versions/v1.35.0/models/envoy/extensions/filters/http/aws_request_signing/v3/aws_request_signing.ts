// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/aws_request_signing/v3/aws_request_signing.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { StringMatcher } from "../../../../../type/matcher/v3/string";
import { AwsCredentialProvider } from "../../../../common/aws/v3/credential_provider";

export const protobufPackage = "envoy.extensions.filters.http.aws_request_signing.v3";

/**
 * Top level configuration for the AWS request signing filter.
 * [#next-free-field: 9]
 */
export interface AwsRequestSigning {
  $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning";
  /**
   * The `service namespace
   * <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces>`_
   * of the HTTP endpoint.
   *
   * Example: s3
   */
  service_name?:
    | string
    | undefined;
  /**
   * Optional region string. If region is not provided, the region will be retrieved from the environment
   * or AWS configuration files. See :ref:`config_http_filters_aws_request_signing_region` for more details.
   *
   * When signing_algorithm is set to ``AWS_SIGV4`` the region is a standard AWS `region <https://docs.aws.amazon.com/general/latest/gr/rande.html>`_ string for the service
   * hosting the HTTP endpoint.
   *
   * Example: us-west-2
   *
   * When signing_algorithm is set to ``AWS_SIGV4A`` the region is used as a region set.
   *
   * A region set is a comma separated list of AWS regions, such as ``us-east-1,us-east-2`` or wildcard ``*``
   * or even region strings containing wildcards such as ``us-east-*``
   *
   * Example: '*'
   *
   * By configuring a region set, a SigV4A signed request can be sent to multiple regions, rather than being
   * valid for only a single region destination.
   */
  region?:
    | string
    | undefined;
  /**
   * Indicates that before signing headers, the host header will be swapped with
   * this value. If not set or empty, the original host header value
   * will be used and no rewrite will happen.
   *
   * Note: this rewrite affects both signing and host header forwarding. However, this
   * option shouldn't be used with
   * :ref:`HCM host rewrite <envoy_v3_api_field_config.route.v3.RouteAction.host_rewrite_literal>` given that the
   * value set here would be used for signing whereas the value set in the HCM would be used
   * for host header forwarding which is not the desired outcome.
   */
  host_rewrite?:
    | string
    | undefined;
  /**
   * Instead of buffering the request to calculate the payload hash, use the literal string ``UNSIGNED-PAYLOAD``
   * to calculate the payload hash. Not all services support this option. See the `S3
   * <https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html>`_ policy for details.
   */
  use_unsigned_payload?:
    | boolean
    | undefined;
  /**
   * A list of request header string matchers that will be excluded from signing. The excluded header can be matched by
   * any patterns defined in the StringMatcher proto (e.g. exact string, prefix, regex, etc).
   *
   * Example:
   * match_excluded_headers:
   * - prefix: x-envoy
   * - exact: foo
   * - exact: bar
   * When applied, all headers that start with "x-envoy" and headers "foo" and "bar" will not be signed.
   */
  match_excluded_headers?:
    | StringMatcher[]
    | undefined;
  /** Optional Signing algorithm specifier, either ``AWS_SIGV4`` or ``AWS_SIGV4A``, defaulting to ``AWS_SIGV4``. */
  signing_algorithm?:
    | AwsRequestSigning_SigningAlgorithm
    | undefined;
  /**
   * If set, use the query string to store output of SigV4 or SigV4A calculation, rather than HTTP headers. The ``Authorization`` header will not be modified if ``query_string``
   * is configured.
   *
   * Example:
   * query_string: {}
   */
  query_string?:
    | AwsRequestSigning_QueryString
    | undefined;
  /**
   * The credential provider for signing the request. This is optional and if not set,
   * it will be retrieved using the procedure described in :ref:`config_http_filters_aws_request_signing`.
   */
  credential_provider?: AwsCredentialProvider | undefined;
}

export enum AwsRequestSigning_SigningAlgorithm {
  /** AWS_SIGV4 - Use SigV4 for signing */
  AWS_SIGV4 = "AWS_SIGV4",
  /** AWS_SIGV4A - Use SigV4A for signing */
  AWS_SIGV4A = "AWS_SIGV4A",
}

export function awsRequestSigning_SigningAlgorithmFromJSON(object: any): AwsRequestSigning_SigningAlgorithm {
  switch (object) {
    case 0:
    case "AWS_SIGV4":
      return AwsRequestSigning_SigningAlgorithm.AWS_SIGV4;
    case 1:
    case "AWS_SIGV4A":
      return AwsRequestSigning_SigningAlgorithm.AWS_SIGV4A;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AwsRequestSigning_SigningAlgorithm");
  }
}

export function awsRequestSigning_SigningAlgorithmToJSON(object: AwsRequestSigning_SigningAlgorithm): string {
  switch (object) {
    case AwsRequestSigning_SigningAlgorithm.AWS_SIGV4:
      return "AWS_SIGV4";
    case AwsRequestSigning_SigningAlgorithm.AWS_SIGV4A:
      return "AWS_SIGV4A";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AwsRequestSigning_SigningAlgorithm");
  }
}

export function awsRequestSigning_SigningAlgorithmToNumber(object: AwsRequestSigning_SigningAlgorithm): number {
  switch (object) {
    case AwsRequestSigning_SigningAlgorithm.AWS_SIGV4:
      return 0;
    case AwsRequestSigning_SigningAlgorithm.AWS_SIGV4A:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AwsRequestSigning_SigningAlgorithm");
  }
}

export interface AwsRequestSigning_QueryString {
  $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning.QueryString";
  /**
   * Optional expiration time for the query string parameters. As query string parameter based requests are replayable, in effect representing
   * an API call that has already been authenticated, it is recommended to keep this expiration time as short as feasible.
   * This value will default to 5 seconds and has a maximum value of 3600 seconds (1 hour).
   */
  expiration_time?: Duration | undefined;
}

export interface AwsRequestSigningPerRoute {
  $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute";
  /**
   * Override the global configuration of the filter with this new config.
   * This overrides the entire message of AwsRequestSigning and not at field level.
   */
  aws_request_signing?:
    | AwsRequestSigning
    | undefined;
  /** The human readable prefix to use when emitting stats. */
  stat_prefix?: string | undefined;
}

function createBaseAwsRequestSigning(): AwsRequestSigning {
  return { $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning" };
}

export const AwsRequestSigning: MessageFns<
  AwsRequestSigning,
  "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning"
> = {
  $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning" as const,

  encode(message: AwsRequestSigning, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service_name !== undefined && message.service_name !== "") {
      writer.uint32(10).string(message.service_name);
    }
    if (message.region !== undefined && message.region !== "") {
      writer.uint32(18).string(message.region);
    }
    if (message.host_rewrite !== undefined && message.host_rewrite !== "") {
      writer.uint32(26).string(message.host_rewrite);
    }
    if (message.use_unsigned_payload !== undefined && message.use_unsigned_payload !== false) {
      writer.uint32(32).bool(message.use_unsigned_payload);
    }
    if (message.match_excluded_headers !== undefined && message.match_excluded_headers.length !== 0) {
      for (const v of message.match_excluded_headers) {
        StringMatcher.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    if (
      message.signing_algorithm !== undefined &&
      message.signing_algorithm !== AwsRequestSigning_SigningAlgorithm.AWS_SIGV4
    ) {
      writer.uint32(48).int32(awsRequestSigning_SigningAlgorithmToNumber(message.signing_algorithm));
    }
    if (message.query_string !== undefined) {
      AwsRequestSigning_QueryString.encode(message.query_string, writer.uint32(58).fork()).join();
    }
    if (message.credential_provider !== undefined) {
      AwsCredentialProvider.encode(message.credential_provider, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsRequestSigning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsRequestSigning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.host_rewrite = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.use_unsigned_payload = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.match_excluded_headers === undefined) {
            message.match_excluded_headers = [];
          }
          const el = StringMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.match_excluded_headers!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.signing_algorithm = awsRequestSigning_SigningAlgorithmFromJSON(reader.int32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.query_string = AwsRequestSigning_QueryString.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.credential_provider = AwsCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsRequestSigning {
    return {
      $type: AwsRequestSigning.$type,
      service_name: isSet(object.service_name) ? globalThis.String(object.service_name) : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : undefined,
      host_rewrite: isSet(object.host_rewrite) ? globalThis.String(object.host_rewrite) : undefined,
      use_unsigned_payload: isSet(object.use_unsigned_payload)
        ? globalThis.Boolean(object.use_unsigned_payload)
        : undefined,
      match_excluded_headers: globalThis.Array.isArray(object?.match_excluded_headers)
        ? object.match_excluded_headers.map((e: any) => StringMatcher.fromJSON(e))
        : undefined,
      signing_algorithm: isSet(object.signing_algorithm)
        ? awsRequestSigning_SigningAlgorithmFromJSON(object.signing_algorithm)
        : undefined,
      query_string: isSet(object.query_string)
        ? AwsRequestSigning_QueryString.fromJSON(object.query_string)
        : undefined,
      credential_provider: isSet(object.credential_provider)
        ? AwsCredentialProvider.fromJSON(object.credential_provider)
        : undefined,
    };
  },

  toJSON(message: AwsRequestSigning): unknown {
    const obj: any = {};
    if (message.service_name !== undefined) {
      obj.service_name = message.service_name;
    }
    if (message.region !== undefined) {
      obj.region = message.region;
    }
    if (message.host_rewrite !== undefined) {
      obj.host_rewrite = message.host_rewrite;
    }
    if (message.use_unsigned_payload !== undefined) {
      obj.use_unsigned_payload = message.use_unsigned_payload;
    }
    if (message.match_excluded_headers?.length) {
      obj.match_excluded_headers = message.match_excluded_headers.map((e) => StringMatcher.toJSON(e));
    }
    if (message.signing_algorithm !== undefined) {
      obj.signing_algorithm = awsRequestSigning_SigningAlgorithmToJSON(message.signing_algorithm);
    }
    if (message.query_string !== undefined) {
      obj.query_string = AwsRequestSigning_QueryString.toJSON(message.query_string);
    }
    if (message.credential_provider !== undefined) {
      obj.credential_provider = AwsCredentialProvider.toJSON(message.credential_provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AwsRequestSigning>, I>>(base?: I): AwsRequestSigning {
    return AwsRequestSigning.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AwsRequestSigning>, I>>(object: I): AwsRequestSigning {
    const message = createBaseAwsRequestSigning();
    message.service_name = object.service_name ?? undefined;
    message.region = object.region ?? undefined;
    message.host_rewrite = object.host_rewrite ?? undefined;
    message.use_unsigned_payload = object.use_unsigned_payload ?? undefined;
    message.match_excluded_headers = object.match_excluded_headers?.map((e) => StringMatcher.fromPartial(e)) ||
      undefined;
    message.signing_algorithm = object.signing_algorithm ?? undefined;
    message.query_string = (object.query_string !== undefined && object.query_string !== null)
      ? AwsRequestSigning_QueryString.fromPartial(object.query_string)
      : undefined;
    message.credential_provider = (object.credential_provider !== undefined && object.credential_provider !== null)
      ? AwsCredentialProvider.fromPartial(object.credential_provider)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(AwsRequestSigning.$type, AwsRequestSigning);

function createBaseAwsRequestSigning_QueryString(): AwsRequestSigning_QueryString {
  return { $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning.QueryString" };
}

export const AwsRequestSigning_QueryString: MessageFns<
  AwsRequestSigning_QueryString,
  "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning.QueryString"
> = {
  $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigning.QueryString" as const,

  encode(message: AwsRequestSigning_QueryString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expiration_time !== undefined) {
      Duration.encode(message.expiration_time, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsRequestSigning_QueryString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsRequestSigning_QueryString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.expiration_time = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsRequestSigning_QueryString {
    return {
      $type: AwsRequestSigning_QueryString.$type,
      expiration_time: isSet(object.expiration_time) ? Duration.fromJSON(object.expiration_time) : undefined,
    };
  },

  toJSON(message: AwsRequestSigning_QueryString): unknown {
    const obj: any = {};
    if (message.expiration_time !== undefined) {
      obj.expiration_time = Duration.toJSON(message.expiration_time);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AwsRequestSigning_QueryString>, I>>(base?: I): AwsRequestSigning_QueryString {
    return AwsRequestSigning_QueryString.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AwsRequestSigning_QueryString>, I>>(
    object: I,
  ): AwsRequestSigning_QueryString {
    const message = createBaseAwsRequestSigning_QueryString();
    message.expiration_time = (object.expiration_time !== undefined && object.expiration_time !== null)
      ? Duration.fromPartial(object.expiration_time)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(AwsRequestSigning_QueryString.$type, AwsRequestSigning_QueryString);

function createBaseAwsRequestSigningPerRoute(): AwsRequestSigningPerRoute {
  return { $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute" };
}

export const AwsRequestSigningPerRoute: MessageFns<
  AwsRequestSigningPerRoute,
  "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute"
> = {
  $type: "envoy.extensions.filters.http.aws_request_signing.v3.AwsRequestSigningPerRoute" as const,

  encode(message: AwsRequestSigningPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aws_request_signing !== undefined) {
      AwsRequestSigning.encode(message.aws_request_signing, writer.uint32(10).fork()).join();
    }
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(18).string(message.stat_prefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsRequestSigningPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsRequestSigningPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aws_request_signing = AwsRequestSigning.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsRequestSigningPerRoute {
    return {
      $type: AwsRequestSigningPerRoute.$type,
      aws_request_signing: isSet(object.aws_request_signing)
        ? AwsRequestSigning.fromJSON(object.aws_request_signing)
        : undefined,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
    };
  },

  toJSON(message: AwsRequestSigningPerRoute): unknown {
    const obj: any = {};
    if (message.aws_request_signing !== undefined) {
      obj.aws_request_signing = AwsRequestSigning.toJSON(message.aws_request_signing);
    }
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AwsRequestSigningPerRoute>, I>>(base?: I): AwsRequestSigningPerRoute {
    return AwsRequestSigningPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AwsRequestSigningPerRoute>, I>>(object: I): AwsRequestSigningPerRoute {
    const message = createBaseAwsRequestSigningPerRoute();
    message.aws_request_signing = (object.aws_request_signing !== undefined && object.aws_request_signing !== null)
      ? AwsRequestSigning.fromPartial(object.aws_request_signing)
      : undefined;
    message.stat_prefix = object.stat_prefix ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(AwsRequestSigningPerRoute.$type, AwsRequestSigningPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
