// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/geoip/v3/geoip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";

export const protobufPackage = "envoy.extensions.filters.http.geoip.v3";

export interface Geoip {
  $type: "envoy.extensions.filters.http.geoip.v3.Geoip";
  /**
   * If set, the :ref:`xff_num_trusted_hops <envoy_v3_api_field_extensions.filters.http.geoip.v3.Geoip.XffConfig.xff_num_trusted_hops>` field will be used to determine
   * trusted client address from ``x-forwarded-for`` header.
   * Otherwise, the immediate downstream connection source address will be used.
   * [#next-free-field: 2]
   */
  xff_config?:
    | Geoip_XffConfig
    | undefined;
  /**
   * Geoip driver specific configuration which depends on the driver being instantiated.
   * See the geoip drivers for examples:
   *
   * - :ref:`MaxMindConfig <envoy_v3_api_msg_extensions.geoip_providers.maxmind.v3.MaxMindConfig>`
   * [#extension-category: envoy.geoip_providers]
   */
  provider?: TypedExtensionConfig | undefined;
}

export interface Geoip_XffConfig {
  $type: "envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig";
  /**
   * The number of additional ingress proxy hops from the right side of the
   * :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
   * determining the origin client's IP address. The default is zero if this option
   * is not specified. See the documentation for
   * :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
   */
  xff_num_trusted_hops?: number | undefined;
}

function createBaseGeoip(): Geoip {
  return { $type: "envoy.extensions.filters.http.geoip.v3.Geoip" };
}

export const Geoip: MessageFns<Geoip, "envoy.extensions.filters.http.geoip.v3.Geoip"> = {
  $type: "envoy.extensions.filters.http.geoip.v3.Geoip" as const,

  encode(message: Geoip, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xff_config !== undefined) {
      Geoip_XffConfig.encode(message.xff_config, writer.uint32(10).fork()).join();
    }
    if (message.provider !== undefined) {
      TypedExtensionConfig.encode(message.provider, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Geoip {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeoip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.xff_config = Geoip_XffConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.provider = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Geoip {
    return {
      $type: Geoip.$type,
      xff_config: isSet(object.xff_config) ? Geoip_XffConfig.fromJSON(object.xff_config) : undefined,
      provider: isSet(object.provider) ? TypedExtensionConfig.fromJSON(object.provider) : undefined,
    };
  },

  toJSON(message: Geoip): unknown {
    const obj: any = {};
    if (message.xff_config !== undefined) {
      obj.xff_config = Geoip_XffConfig.toJSON(message.xff_config);
    }
    if (message.provider !== undefined) {
      obj.provider = TypedExtensionConfig.toJSON(message.provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Geoip>, I>>(base?: I): Geoip {
    return Geoip.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Geoip>, I>>(object: I): Geoip {
    const message = createBaseGeoip();
    message.xff_config = (object.xff_config !== undefined && object.xff_config !== null)
      ? Geoip_XffConfig.fromPartial(object.xff_config)
      : undefined;
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? TypedExtensionConfig.fromPartial(object.provider)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Geoip.$type, Geoip);

function createBaseGeoip_XffConfig(): Geoip_XffConfig {
  return { $type: "envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig" };
}

export const Geoip_XffConfig: MessageFns<Geoip_XffConfig, "envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig"> = {
  $type: "envoy.extensions.filters.http.geoip.v3.Geoip.XffConfig" as const,

  encode(message: Geoip_XffConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xff_num_trusted_hops !== undefined && message.xff_num_trusted_hops !== 0) {
      writer.uint32(8).uint32(message.xff_num_trusted_hops);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Geoip_XffConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeoip_XffConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.xff_num_trusted_hops = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Geoip_XffConfig {
    return {
      $type: Geoip_XffConfig.$type,
      xff_num_trusted_hops: isSet(object.xff_num_trusted_hops)
        ? globalThis.Number(object.xff_num_trusted_hops)
        : undefined,
    };
  },

  toJSON(message: Geoip_XffConfig): unknown {
    const obj: any = {};
    if (message.xff_num_trusted_hops !== undefined) {
      obj.xff_num_trusted_hops = Math.round(message.xff_num_trusted_hops);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Geoip_XffConfig>, I>>(base?: I): Geoip_XffConfig {
    return Geoip_XffConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Geoip_XffConfig>, I>>(object: I): Geoip_XffConfig {
    const message = createBaseGeoip_XffConfig();
    message.xff_num_trusted_hops = object.xff_num_trusted_hops ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Geoip_XffConfig.$type, Geoip_XffConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
