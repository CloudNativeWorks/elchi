// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/sni_dynamic_forward_proxy/v3/sni_dynamic_forward_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DnsCacheConfig } from "../../../../common/dynamic_forward_proxy/v3/dns_cache";

export const protobufPackage = "envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3";

/**
 * Configuration for the SNI-based dynamic forward proxy filter. See the
 * :ref:`architecture overview <arch_overview_http_dynamic_forward_proxy>` for
 * more information. Note this filter must be configured along with
 * :ref:`TLS inspector listener filter <config_listener_filters_tls_inspector>`
 * to work.
 * [#extension: envoy.filters.network.sni_dynamic_forward_proxy]
 */
export interface FilterConfig {
  $type: "envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig";
  /**
   * The DNS cache configuration that the filter will attach to. Note this
   * configuration must match that of associated :ref:`dynamic forward proxy
   * cluster configuration
   * <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
   */
  dns_cache_config?: DnsCacheConfig | undefined;
  port_specifier?:
    | //
    /** The port number to connect to the upstream. */
    { $case: "port_value"; port_value: number }
    | undefined;
  /**
   * When this flag is set, the filter will add the resolved upstream address in the filter
   * state. The state should be saved with key
   * ``envoy.stream.upstream_address`` (See
   * :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
   */
  save_upstream_address?: boolean | undefined;
}

function createBaseFilterConfig(): FilterConfig {
  return {
    $type: "envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig",
    port_specifier: undefined,
  };
}

export const FilterConfig: MessageFns<
  FilterConfig,
  "envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig"
> = {
  $type: "envoy.extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig" as const,

  encode(message: FilterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dns_cache_config !== undefined) {
      DnsCacheConfig.encode(message.dns_cache_config, writer.uint32(10).fork()).join();
    }
    switch (message.port_specifier?.$case) {
      case "port_value":
        writer.uint32(16).uint32(message.port_specifier.port_value);
        break;
    }
    if (message.save_upstream_address !== undefined && message.save_upstream_address !== false) {
      writer.uint32(24).bool(message.save_upstream_address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dns_cache_config = DnsCacheConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.port_specifier = { $case: "port_value", port_value: reader.uint32() };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.save_upstream_address = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterConfig {
    return {
      $type: FilterConfig.$type,
      dns_cache_config: isSet(object.dns_cache_config) ? DnsCacheConfig.fromJSON(object.dns_cache_config) : undefined,
      port_specifier: isSet(object.port_value)
        ? { $case: "port_value", port_value: globalThis.Number(object.port_value) }
        : undefined,
      save_upstream_address: isSet(object.save_upstream_address)
        ? globalThis.Boolean(object.save_upstream_address)
        : undefined,
    };
  },

  toJSON(message: FilterConfig): unknown {
    const obj: any = {};
    if (message.dns_cache_config !== undefined) {
      obj.dns_cache_config = DnsCacheConfig.toJSON(message.dns_cache_config);
    }
    if (message.port_specifier?.$case === "port_value") {
      obj.port_value = Math.round(message.port_specifier.port_value);
    }
    if (message.save_upstream_address !== undefined) {
      obj.save_upstream_address = message.save_upstream_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterConfig>, I>>(base?: I): FilterConfig {
    return FilterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterConfig>, I>>(object: I): FilterConfig {
    const message = createBaseFilterConfig();
    message.dns_cache_config = (object.dns_cache_config !== undefined && object.dns_cache_config !== null)
      ? DnsCacheConfig.fromPartial(object.dns_cache_config)
      : undefined;
    if (
      object.port_specifier?.$case === "port_value" &&
      object.port_specifier?.port_value !== undefined &&
      object.port_specifier?.port_value !== null
    ) {
      message.port_specifier = { $case: "port_value", port_value: object.port_specifier.port_value };
    }
    message.save_upstream_address = object.save_upstream_address ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterConfig.$type, FilterConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
