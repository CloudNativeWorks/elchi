// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/tracers/opentelemetry/samplers/v3/parent_based_sampler.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";

export const protobufPackage = "envoy.extensions.tracers.opentelemetry.samplers.v3";

export interface ParentBasedSamplerConfig {
  $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.ParentBasedSamplerConfig";
  /**
   * Specifies the sampler to be used by this sampler.
   * The configured sampler will be used if the parent trace ID is not passed to Envoy
   *
   * required
   * [#extension-category: envoy.tracers.opentelemetry.samplers]
   */
  wrapped_sampler?: TypedExtensionConfig | undefined;
}

function createBaseParentBasedSamplerConfig(): ParentBasedSamplerConfig {
  return { $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.ParentBasedSamplerConfig" };
}

export const ParentBasedSamplerConfig: MessageFns<
  ParentBasedSamplerConfig,
  "envoy.extensions.tracers.opentelemetry.samplers.v3.ParentBasedSamplerConfig"
> = {
  $type: "envoy.extensions.tracers.opentelemetry.samplers.v3.ParentBasedSamplerConfig" as const,

  encode(message: ParentBasedSamplerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.wrapped_sampler !== undefined) {
      TypedExtensionConfig.encode(message.wrapped_sampler, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParentBasedSamplerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParentBasedSamplerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.wrapped_sampler = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParentBasedSamplerConfig {
    return {
      $type: ParentBasedSamplerConfig.$type,
      wrapped_sampler: isSet(object.wrapped_sampler)
        ? TypedExtensionConfig.fromJSON(object.wrapped_sampler)
        : undefined,
    };
  },

  toJSON(message: ParentBasedSamplerConfig): unknown {
    const obj: any = {};
    if (message.wrapped_sampler !== undefined) {
      obj.wrapped_sampler = TypedExtensionConfig.toJSON(message.wrapped_sampler);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParentBasedSamplerConfig>, I>>(base?: I): ParentBasedSamplerConfig {
    return ParentBasedSamplerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParentBasedSamplerConfig>, I>>(object: I): ParentBasedSamplerConfig {
    const message = createBaseParentBasedSamplerConfig();
    message.wrapped_sampler = (object.wrapped_sampler !== undefined && object.wrapped_sampler !== null)
      ? TypedExtensionConfig.fromPartial(object.wrapped_sampler)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ParentBasedSamplerConfig.$type, ParentBasedSamplerConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
