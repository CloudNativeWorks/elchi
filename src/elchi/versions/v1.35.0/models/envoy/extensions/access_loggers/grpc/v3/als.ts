// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/access_loggers/grpc/v3/als.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { RetryPolicy } from "../../../../config/core/v3/base";
import {
  ApiVersion,
  apiVersionFromJSON,
  apiVersionToJSON,
  apiVersionToNumber,
} from "../../../../config/core/v3/config_source";
import { GrpcService } from "../../../../config/core/v3/grpc_service";
import { CustomTag } from "../../../../type/tracing/v3/custom_tag";

export const protobufPackage = "envoy.extensions.access_loggers.grpc.v3";

/**
 * Configuration for the built-in ``envoy.access_loggers.http_grpc``
 * :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This configuration will
 * populate :ref:`StreamAccessLogsMessage.http_logs
 * <envoy_v3_api_field_service.accesslog.v3.StreamAccessLogsMessage.http_logs>`.
 * [#extension: envoy.access_loggers.http_grpc]
 */
export interface HttpGrpcAccessLogConfig {
  $type: "envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig";
  common_config?:
    | CommonGrpcAccessLogConfig
    | undefined;
  /**
   * Additional request headers to log in :ref:`HTTPRequestProperties.request_headers
   * <envoy_v3_api_field_data.accesslog.v3.HTTPRequestProperties.request_headers>`.
   */
  additional_request_headers_to_log?:
    | string[]
    | undefined;
  /**
   * Additional response headers to log in :ref:`HTTPResponseProperties.response_headers
   * <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_headers>`.
   */
  additional_response_headers_to_log?:
    | string[]
    | undefined;
  /**
   * Additional response trailers to log in :ref:`HTTPResponseProperties.response_trailers
   * <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_trailers>`.
   */
  additional_response_trailers_to_log?: string[] | undefined;
}

/**
 * Configuration for the built-in ``envoy.access_loggers.tcp_grpc`` type. This configuration will
 * populate ``StreamAccessLogsMessage.tcp_logs``.
 * [#extension: envoy.access_loggers.tcp_grpc]
 */
export interface TcpGrpcAccessLogConfig {
  $type: "envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig";
  common_config?: CommonGrpcAccessLogConfig | undefined;
}

/**
 * Common configuration for gRPC access logs.
 * [#next-free-field: 9]
 */
export interface CommonGrpcAccessLogConfig {
  $type: "envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig";
  /**
   * The friendly name of the access log to be returned in :ref:`StreamAccessLogsMessage.Identifier
   * <envoy_v3_api_msg_service.accesslog.v3.StreamAccessLogsMessage.Identifier>`. This allows the
   * access log server to differentiate between different access logs coming from the same Envoy.
   */
  log_name?:
    | string
    | undefined;
  /** The gRPC service for the access log service. */
  grpc_service?:
    | GrpcService
    | undefined;
  /**
   * API version for access logs service transport protocol. This describes the access logs service
   * gRPC endpoint and version of messages used on the wire.
   */
  transport_api_version?:
    | ApiVersion
    | undefined;
  /**
   * Interval for flushing access logs to the gRPC stream. Logger will flush requests every time
   * this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
   * 1 second.
   */
  buffer_flush_interval?:
    | Duration
    | undefined;
  /**
   * Soft size limit in bytes for access log entries buffer. Logger will buffer requests until
   * this limit it hit, or every time flush interval is elapsed, whichever comes first. Setting it
   * to zero effectively disables the batching. Defaults to 16384.
   */
  buffer_size_bytes?:
    | number
    | undefined;
  /**
   * Additional filter state objects to log in :ref:`filter_state_objects
   * <envoy_v3_api_field_data.accesslog.v3.AccessLogCommon.filter_state_objects>`.
   * Logger will call ``FilterState::Object::serializeAsProto`` to serialize the filter state object.
   */
  filter_state_objects_to_log?:
    | string[]
    | undefined;
  /**
   * Sets the retry policy when the establishment of a gRPC stream fails.
   * If the stream succeeds at least once in establishing itself,
   * no retry will be performed no matter what gRPC status is received.
   * Note that only :ref:`num_retries <envoy_v3_api_field_config.core.v3.RetryPolicy.num_retries>`
   * will be used in this configuration. This feature is used only when you are using
   * :ref:`Envoy gRPC client <envoy_v3_api_field_config.core.v3.GrpcService.envoy_grpc>`.
   */
  grpc_stream_retry_policy?:
    | RetryPolicy
    | undefined;
  /** A list of custom tags with unique tag name to create tags for the logs. */
  custom_tags?: CustomTag[] | undefined;
}

function createBaseHttpGrpcAccessLogConfig(): HttpGrpcAccessLogConfig {
  return { $type: "envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig" };
}

export const HttpGrpcAccessLogConfig: MessageFns<
  HttpGrpcAccessLogConfig,
  "envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig"
> = {
  $type: "envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig" as const,

  encode(message: HttpGrpcAccessLogConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_config !== undefined) {
      CommonGrpcAccessLogConfig.encode(message.common_config, writer.uint32(10).fork()).join();
    }
    if (
      message.additional_request_headers_to_log !== undefined && message.additional_request_headers_to_log.length !== 0
    ) {
      for (const v of message.additional_request_headers_to_log) {
        writer.uint32(18).string(v!);
      }
    }
    if (
      message.additional_response_headers_to_log !== undefined &&
      message.additional_response_headers_to_log.length !== 0
    ) {
      for (const v of message.additional_response_headers_to_log) {
        writer.uint32(26).string(v!);
      }
    }
    if (
      message.additional_response_trailers_to_log !== undefined &&
      message.additional_response_trailers_to_log.length !== 0
    ) {
      for (const v of message.additional_response_trailers_to_log) {
        writer.uint32(34).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpGrpcAccessLogConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpGrpcAccessLogConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_config = CommonGrpcAccessLogConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.additional_request_headers_to_log === undefined) {
            message.additional_request_headers_to_log = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.additional_request_headers_to_log!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.additional_response_headers_to_log === undefined) {
            message.additional_response_headers_to_log = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.additional_response_headers_to_log!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.additional_response_trailers_to_log === undefined) {
            message.additional_response_trailers_to_log = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.additional_response_trailers_to_log!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpGrpcAccessLogConfig {
    return {
      $type: HttpGrpcAccessLogConfig.$type,
      common_config: isSet(object.common_config) ? CommonGrpcAccessLogConfig.fromJSON(object.common_config) : undefined,
      additional_request_headers_to_log: globalThis.Array.isArray(object?.additional_request_headers_to_log)
        ? object.additional_request_headers_to_log.map((e: any) => globalThis.String(e))
        : undefined,
      additional_response_headers_to_log: globalThis.Array.isArray(object?.additional_response_headers_to_log)
        ? object.additional_response_headers_to_log.map((e: any) => globalThis.String(e))
        : undefined,
      additional_response_trailers_to_log: globalThis.Array.isArray(object?.additional_response_trailers_to_log)
        ? object.additional_response_trailers_to_log.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: HttpGrpcAccessLogConfig): unknown {
    const obj: any = {};
    if (message.common_config !== undefined) {
      obj.common_config = CommonGrpcAccessLogConfig.toJSON(message.common_config);
    }
    if (message.additional_request_headers_to_log?.length) {
      obj.additional_request_headers_to_log = message.additional_request_headers_to_log;
    }
    if (message.additional_response_headers_to_log?.length) {
      obj.additional_response_headers_to_log = message.additional_response_headers_to_log;
    }
    if (message.additional_response_trailers_to_log?.length) {
      obj.additional_response_trailers_to_log = message.additional_response_trailers_to_log;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpGrpcAccessLogConfig>, I>>(base?: I): HttpGrpcAccessLogConfig {
    return HttpGrpcAccessLogConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpGrpcAccessLogConfig>, I>>(object: I): HttpGrpcAccessLogConfig {
    const message = createBaseHttpGrpcAccessLogConfig();
    message.common_config = (object.common_config !== undefined && object.common_config !== null)
      ? CommonGrpcAccessLogConfig.fromPartial(object.common_config)
      : undefined;
    message.additional_request_headers_to_log = object.additional_request_headers_to_log?.map((e) => e) || undefined;
    message.additional_response_headers_to_log = object.additional_response_headers_to_log?.map((e) => e) || undefined;
    message.additional_response_trailers_to_log = object.additional_response_trailers_to_log?.map((e) => e) ||
      undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpGrpcAccessLogConfig.$type, HttpGrpcAccessLogConfig);

function createBaseTcpGrpcAccessLogConfig(): TcpGrpcAccessLogConfig {
  return { $type: "envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig" };
}

export const TcpGrpcAccessLogConfig: MessageFns<
  TcpGrpcAccessLogConfig,
  "envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig"
> = {
  $type: "envoy.extensions.access_loggers.grpc.v3.TcpGrpcAccessLogConfig" as const,

  encode(message: TcpGrpcAccessLogConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_config !== undefined) {
      CommonGrpcAccessLogConfig.encode(message.common_config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TcpGrpcAccessLogConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTcpGrpcAccessLogConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_config = CommonGrpcAccessLogConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TcpGrpcAccessLogConfig {
    return {
      $type: TcpGrpcAccessLogConfig.$type,
      common_config: isSet(object.common_config) ? CommonGrpcAccessLogConfig.fromJSON(object.common_config) : undefined,
    };
  },

  toJSON(message: TcpGrpcAccessLogConfig): unknown {
    const obj: any = {};
    if (message.common_config !== undefined) {
      obj.common_config = CommonGrpcAccessLogConfig.toJSON(message.common_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TcpGrpcAccessLogConfig>, I>>(base?: I): TcpGrpcAccessLogConfig {
    return TcpGrpcAccessLogConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TcpGrpcAccessLogConfig>, I>>(object: I): TcpGrpcAccessLogConfig {
    const message = createBaseTcpGrpcAccessLogConfig();
    message.common_config = (object.common_config !== undefined && object.common_config !== null)
      ? CommonGrpcAccessLogConfig.fromPartial(object.common_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(TcpGrpcAccessLogConfig.$type, TcpGrpcAccessLogConfig);

function createBaseCommonGrpcAccessLogConfig(): CommonGrpcAccessLogConfig {
  return { $type: "envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig" };
}

export const CommonGrpcAccessLogConfig: MessageFns<
  CommonGrpcAccessLogConfig,
  "envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig"
> = {
  $type: "envoy.extensions.access_loggers.grpc.v3.CommonGrpcAccessLogConfig" as const,

  encode(message: CommonGrpcAccessLogConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.log_name !== undefined && message.log_name !== "") {
      writer.uint32(10).string(message.log_name);
    }
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(18).fork()).join();
    }
    if (message.transport_api_version !== undefined && message.transport_api_version !== ApiVersion.AUTO) {
      writer.uint32(48).int32(apiVersionToNumber(message.transport_api_version));
    }
    if (message.buffer_flush_interval !== undefined) {
      Duration.encode(message.buffer_flush_interval, writer.uint32(26).fork()).join();
    }
    if (message.buffer_size_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.buffer_size_bytes! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.filter_state_objects_to_log !== undefined && message.filter_state_objects_to_log.length !== 0) {
      for (const v of message.filter_state_objects_to_log) {
        writer.uint32(42).string(v!);
      }
    }
    if (message.grpc_stream_retry_policy !== undefined) {
      RetryPolicy.encode(message.grpc_stream_retry_policy, writer.uint32(58).fork()).join();
    }
    if (message.custom_tags !== undefined && message.custom_tags.length !== 0) {
      for (const v of message.custom_tags) {
        CustomTag.encode(v!, writer.uint32(66).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonGrpcAccessLogConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonGrpcAccessLogConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.log_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.transport_api_version = apiVersionFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.buffer_flush_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.buffer_size_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.filter_state_objects_to_log === undefined) {
            message.filter_state_objects_to_log = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.filter_state_objects_to_log!.push(el);
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.grpc_stream_retry_policy = RetryPolicy.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          if (message.custom_tags === undefined) {
            message.custom_tags = [];
          }
          const el = CustomTag.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.custom_tags!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonGrpcAccessLogConfig {
    return {
      $type: CommonGrpcAccessLogConfig.$type,
      log_name: isSet(object.log_name) ? globalThis.String(object.log_name) : undefined,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
      transport_api_version: isSet(object.transport_api_version)
        ? apiVersionFromJSON(object.transport_api_version)
        : undefined,
      buffer_flush_interval: isSet(object.buffer_flush_interval)
        ? Duration.fromJSON(object.buffer_flush_interval)
        : undefined,
      buffer_size_bytes: isSet(object.buffer_size_bytes) ? Number(object.buffer_size_bytes) : undefined,
      filter_state_objects_to_log: globalThis.Array.isArray(object?.filter_state_objects_to_log)
        ? object.filter_state_objects_to_log.map((e: any) => globalThis.String(e))
        : undefined,
      grpc_stream_retry_policy: isSet(object.grpc_stream_retry_policy)
        ? RetryPolicy.fromJSON(object.grpc_stream_retry_policy)
        : undefined,
      custom_tags: globalThis.Array.isArray(object?.custom_tags)
        ? object.custom_tags.map((e: any) => CustomTag.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: CommonGrpcAccessLogConfig): unknown {
    const obj: any = {};
    if (message.log_name !== undefined) {
      obj.log_name = message.log_name;
    }
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    if (message.transport_api_version !== undefined) {
      obj.transport_api_version = apiVersionToJSON(message.transport_api_version);
    }
    if (message.buffer_flush_interval !== undefined) {
      obj.buffer_flush_interval = Duration.toJSON(message.buffer_flush_interval);
    }
    if (message.buffer_size_bytes !== undefined) {
      obj.buffer_size_bytes = message.buffer_size_bytes;
    }
    if (message.filter_state_objects_to_log?.length) {
      obj.filter_state_objects_to_log = message.filter_state_objects_to_log;
    }
    if (message.grpc_stream_retry_policy !== undefined) {
      obj.grpc_stream_retry_policy = RetryPolicy.toJSON(message.grpc_stream_retry_policy);
    }
    if (message.custom_tags?.length) {
      obj.custom_tags = message.custom_tags.map((e) => CustomTag.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonGrpcAccessLogConfig>, I>>(base?: I): CommonGrpcAccessLogConfig {
    return CommonGrpcAccessLogConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonGrpcAccessLogConfig>, I>>(object: I): CommonGrpcAccessLogConfig {
    const message = createBaseCommonGrpcAccessLogConfig();
    message.log_name = object.log_name ?? undefined;
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    message.transport_api_version = object.transport_api_version ?? undefined;
    message.buffer_flush_interval =
      (object.buffer_flush_interval !== undefined && object.buffer_flush_interval !== null)
        ? Duration.fromPartial(object.buffer_flush_interval)
        : undefined;
    message.buffer_size_bytes = object.buffer_size_bytes ?? undefined;
    message.filter_state_objects_to_log = object.filter_state_objects_to_log?.map((e) => e) || undefined;
    message.grpc_stream_retry_policy =
      (object.grpc_stream_retry_policy !== undefined && object.grpc_stream_retry_policy !== null)
        ? RetryPolicy.fromPartial(object.grpc_stream_retry_policy)
        : undefined;
    message.custom_tags = object.custom_tags?.map((e) => CustomTag.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(CommonGrpcAccessLogConfig.$type, CommonGrpcAccessLogConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
