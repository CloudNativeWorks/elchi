// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/zookeeper_proxy/v1alpha1/zookeeper_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.config.filter.network.zookeeper_proxy.v1alpha1";

export interface ZooKeeperProxy {
  $type: "envoy.config.filter.network.zookeeper_proxy.v1alpha1.ZooKeeperProxy";
  /**
   * The human readable prefix to use when emitting :ref:`statistics
   * <config_network_filters_zookeeper_proxy_stats>`.
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * [#not-implemented-hide:] The optional path to use for writing ZooKeeper access logs.
   * If the access log field is empty, access logs will not be written.
   */
  access_log?:
    | string
    | undefined;
  /**
   * Messages — requests, responses and events — that are bigger than this value will
   * be ignored. If it is not set, the default value is 1Mb.
   *
   * The value here should match the jute.maxbuffer property in your cluster configuration:
   *
   * https://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html#Unsafe+Options
   *
   * if that is set. If it isn't, ZooKeeper's default is also 1Mb.
   */
  max_packet_bytes?: number | undefined;
}

function createBaseZooKeeperProxy(): ZooKeeperProxy {
  return { $type: "envoy.config.filter.network.zookeeper_proxy.v1alpha1.ZooKeeperProxy" };
}

export const ZooKeeperProxy: MessageFns<
  ZooKeeperProxy,
  "envoy.config.filter.network.zookeeper_proxy.v1alpha1.ZooKeeperProxy"
> = {
  $type: "envoy.config.filter.network.zookeeper_proxy.v1alpha1.ZooKeeperProxy" as const,

  encode(message: ZooKeeperProxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.access_log !== undefined && message.access_log !== "") {
      writer.uint32(18).string(message.access_log);
    }
    if (message.max_packet_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_packet_bytes! },
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZooKeeperProxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZooKeeperProxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_log = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.max_packet_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZooKeeperProxy {
    return {
      $type: ZooKeeperProxy.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      access_log: isSet(object.access_log) ? globalThis.String(object.access_log) : undefined,
      max_packet_bytes: isSet(object.max_packet_bytes) ? Number(object.max_packet_bytes) : undefined,
    };
  },

  toJSON(message: ZooKeeperProxy): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.access_log !== undefined) {
      obj.access_log = message.access_log;
    }
    if (message.max_packet_bytes !== undefined) {
      obj.max_packet_bytes = message.max_packet_bytes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZooKeeperProxy>, I>>(base?: I): ZooKeeperProxy {
    return ZooKeeperProxy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZooKeeperProxy>, I>>(object: I): ZooKeeperProxy {
    const message = createBaseZooKeeperProxy();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.access_log = object.access_log ?? undefined;
    message.max_packet_bytes = object.max_packet_bytes ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ZooKeeperProxy.$type, ZooKeeperProxy);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
