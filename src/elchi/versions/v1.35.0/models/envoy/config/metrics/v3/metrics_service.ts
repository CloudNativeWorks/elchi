// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/metrics/v3/metrics_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { ApiVersion, apiVersionFromJSON, apiVersionToJSON, apiVersionToNumber } from "../../core/v3/config_source";
import { GrpcService } from "../../core/v3/grpc_service";

export const protobufPackage = "envoy.config.metrics.v3";

/** HistogramEmitMode is used to configure which metric types should be emitted for histograms. */
export enum HistogramEmitMode {
  /** SUMMARY_AND_HISTOGRAM - Emit Histogram and Summary metric types. */
  SUMMARY_AND_HISTOGRAM = "SUMMARY_AND_HISTOGRAM",
  /** SUMMARY - Emit only Summary metric types. */
  SUMMARY = "SUMMARY",
  /** HISTOGRAM - Emit only Histogram metric types. */
  HISTOGRAM = "HISTOGRAM",
}

export function histogramEmitModeFromJSON(object: any): HistogramEmitMode {
  switch (object) {
    case 0:
    case "SUMMARY_AND_HISTOGRAM":
      return HistogramEmitMode.SUMMARY_AND_HISTOGRAM;
    case 1:
    case "SUMMARY":
      return HistogramEmitMode.SUMMARY;
    case 2:
    case "HISTOGRAM":
      return HistogramEmitMode.HISTOGRAM;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HistogramEmitMode");
  }
}

export function histogramEmitModeToJSON(object: HistogramEmitMode): string {
  switch (object) {
    case HistogramEmitMode.SUMMARY_AND_HISTOGRAM:
      return "SUMMARY_AND_HISTOGRAM";
    case HistogramEmitMode.SUMMARY:
      return "SUMMARY";
    case HistogramEmitMode.HISTOGRAM:
      return "HISTOGRAM";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HistogramEmitMode");
  }
}

export function histogramEmitModeToNumber(object: HistogramEmitMode): number {
  switch (object) {
    case HistogramEmitMode.SUMMARY_AND_HISTOGRAM:
      return 0;
    case HistogramEmitMode.SUMMARY:
      return 1;
    case HistogramEmitMode.HISTOGRAM:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HistogramEmitMode");
  }
}

/**
 * Metrics Service is configured as a built-in ``envoy.stat_sinks.metrics_service`` :ref:`StatsSink
 * <envoy_v3_api_msg_config.metrics.v3.StatsSink>`. This opaque configuration will be used to create
 * Metrics Service.
 *
 * Example:
 *
 * .. code-block:: yaml
 *
 *     stats_sinks:
 *       - name: envoy.stat_sinks.metrics_service
 *         typed_config:
 *           "@type": type.googleapis.com/envoy.config.metrics.v3.MetricsServiceConfig
 *
 * [#extension: envoy.stat_sinks.metrics_service]
 * [#next-free-field: 6]
 */
export interface MetricsServiceConfig {
  $type: "envoy.config.metrics.v3.MetricsServiceConfig";
  /** The upstream gRPC cluster that hosts the metrics service. */
  grpc_service?:
    | GrpcService
    | undefined;
  /**
   * API version for metric service transport protocol. This describes the metric service gRPC
   * endpoint and version of messages used on the wire.
   */
  transport_api_version?:
    | ApiVersion
    | undefined;
  /**
   * If true, counters are reported as the delta between flushing intervals. Otherwise, the current
   * counter value is reported. Defaults to false.
   * Eventually (https://github.com/envoyproxy/envoy/issues/10968) if this value is not set, the
   * sink will take updates from the :ref:`MetricsResponse <envoy_v3_api_msg_service.metrics.v3.StreamMetricsResponse>`.
   */
  report_counters_as_deltas?:
    | boolean
    | undefined;
  /**
   * If true, metrics will have their tags emitted as labels on the metrics objects sent to the MetricsService,
   * and the tag extracted name will be used instead of the full name, which may contain values used by the tag
   * extractor or additional tags added during stats creation.
   */
  emit_tags_as_labels?:
    | boolean
    | undefined;
  /** Specify which metrics types to emit for histograms. Defaults to SUMMARY_AND_HISTOGRAM. */
  histogram_emit_mode?: HistogramEmitMode | undefined;
}

function createBaseMetricsServiceConfig(): MetricsServiceConfig {
  return { $type: "envoy.config.metrics.v3.MetricsServiceConfig" };
}

export const MetricsServiceConfig: MessageFns<MetricsServiceConfig, "envoy.config.metrics.v3.MetricsServiceConfig"> = {
  $type: "envoy.config.metrics.v3.MetricsServiceConfig" as const,

  encode(message: MetricsServiceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(10).fork()).join();
    }
    if (message.transport_api_version !== undefined && message.transport_api_version !== ApiVersion.AUTO) {
      writer.uint32(24).int32(apiVersionToNumber(message.transport_api_version));
    }
    if (message.report_counters_as_deltas !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.report_counters_as_deltas! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.emit_tags_as_labels !== undefined && message.emit_tags_as_labels !== false) {
      writer.uint32(32).bool(message.emit_tags_as_labels);
    }
    if (
      message.histogram_emit_mode !== undefined &&
      message.histogram_emit_mode !== HistogramEmitMode.SUMMARY_AND_HISTOGRAM
    ) {
      writer.uint32(40).int32(histogramEmitModeToNumber(message.histogram_emit_mode));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetricsServiceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetricsServiceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.transport_api_version = apiVersionFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.report_counters_as_deltas = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.emit_tags_as_labels = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.histogram_emit_mode = histogramEmitModeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetricsServiceConfig {
    return {
      $type: MetricsServiceConfig.$type,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
      transport_api_version: isSet(object.transport_api_version)
        ? apiVersionFromJSON(object.transport_api_version)
        : undefined,
      report_counters_as_deltas: isSet(object.report_counters_as_deltas)
        ? Boolean(object.report_counters_as_deltas)
        : undefined,
      emit_tags_as_labels: isSet(object.emit_tags_as_labels)
        ? globalThis.Boolean(object.emit_tags_as_labels)
        : undefined,
      histogram_emit_mode: isSet(object.histogram_emit_mode)
        ? histogramEmitModeFromJSON(object.histogram_emit_mode)
        : undefined,
    };
  },

  toJSON(message: MetricsServiceConfig): unknown {
    const obj: any = {};
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    if (message.transport_api_version !== undefined) {
      obj.transport_api_version = apiVersionToJSON(message.transport_api_version);
    }
    if (message.report_counters_as_deltas !== undefined) {
      obj.report_counters_as_deltas = message.report_counters_as_deltas;
    }
    if (message.emit_tags_as_labels !== undefined) {
      obj.emit_tags_as_labels = message.emit_tags_as_labels;
    }
    if (message.histogram_emit_mode !== undefined) {
      obj.histogram_emit_mode = histogramEmitModeToJSON(message.histogram_emit_mode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetricsServiceConfig>, I>>(base?: I): MetricsServiceConfig {
    return MetricsServiceConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetricsServiceConfig>, I>>(object: I): MetricsServiceConfig {
    const message = createBaseMetricsServiceConfig();
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    message.transport_api_version = object.transport_api_version ?? undefined;
    message.report_counters_as_deltas = object.report_counters_as_deltas ?? undefined;
    message.emit_tags_as_labels = object.emit_tags_as_labels ?? undefined;
    message.histogram_emit_mode = object.histogram_emit_mode ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(MetricsServiceConfig.$type, MetricsServiceConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
