// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/core/v3/http_uri.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.config.core.v3";

/** Envoy external URI descriptor */
export interface HttpUri {
  $type: "envoy.config.core.v3.HttpUri";
  /**
   * The HTTP server URI. It should be a full FQDN with protocol, host and path.
   *
   * Example:
   *
   * .. code-block:: yaml
   *
   *    uri: https://www.googleapis.com/oauth2/v1/certs
   */
  uri?:
    | string
    | undefined;
  /**
   * Specify how ``uri`` is to be fetched. Today, this requires an explicit
   * cluster, but in the future we may support dynamic cluster creation or
   * inline DNS resolution. See `issue
   * <https://github.com/envoyproxy/envoy/issues/1606>`_.
   */
  http_upstream_type?:
    | //
    /**
     * A cluster is created in the Envoy "cluster_manager" config
     * section. This field specifies the cluster name.
     *
     * Example:
     *
     * .. code-block:: yaml
     *
     *    cluster: jwks_cluster
     */
    { $case: "cluster"; cluster: string }
    | undefined;
  /** Sets the maximum duration in milliseconds that a response can take to arrive upon request. */
  timeout?: Duration | undefined;
}

function createBaseHttpUri(): HttpUri {
  return { $type: "envoy.config.core.v3.HttpUri", http_upstream_type: undefined };
}

export const HttpUri: MessageFns<HttpUri, "envoy.config.core.v3.HttpUri"> = {
  $type: "envoy.config.core.v3.HttpUri" as const,

  encode(message: HttpUri, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== undefined && message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    switch (message.http_upstream_type?.$case) {
      case "cluster":
        writer.uint32(18).string(message.http_upstream_type.cluster);
        break;
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpUri {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpUri();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.http_upstream_type = { $case: "cluster", cluster: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpUri {
    return {
      $type: HttpUri.$type,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined,
      http_upstream_type: isSet(object.cluster)
        ? { $case: "cluster", cluster: globalThis.String(object.cluster) }
        : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
    };
  },

  toJSON(message: HttpUri): unknown {
    const obj: any = {};
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.http_upstream_type?.$case === "cluster") {
      obj.cluster = message.http_upstream_type.cluster;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpUri>, I>>(base?: I): HttpUri {
    return HttpUri.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpUri>, I>>(object: I): HttpUri {
    const message = createBaseHttpUri();
    message.uri = object.uri ?? undefined;
    if (
      object.http_upstream_type?.$case === "cluster" &&
      object.http_upstream_type?.cluster !== undefined &&
      object.http_upstream_type?.cluster !== null
    ) {
      message.http_upstream_type = { $case: "cluster", cluster: object.http_upstream_type.cluster };
    }
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpUri.$type, HttpUri);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
