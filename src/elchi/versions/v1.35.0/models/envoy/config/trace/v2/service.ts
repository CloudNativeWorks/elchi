// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v2/service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { GrpcService } from "../../../api/v2/core/grpc_service";

export const protobufPackage = "envoy.config.trace.v2";

/** Configuration structure. */
export interface TraceServiceConfig {
  $type: "envoy.config.trace.v2.TraceServiceConfig";
  /** The upstream gRPC cluster that hosts the metrics service. */
  grpc_service?: GrpcService | undefined;
}

function createBaseTraceServiceConfig(): TraceServiceConfig {
  return { $type: "envoy.config.trace.v2.TraceServiceConfig" };
}

export const TraceServiceConfig: MessageFns<TraceServiceConfig, "envoy.config.trace.v2.TraceServiceConfig"> = {
  $type: "envoy.config.trace.v2.TraceServiceConfig" as const,

  encode(message: TraceServiceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraceServiceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraceServiceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraceServiceConfig {
    return {
      $type: TraceServiceConfig.$type,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
    };
  },

  toJSON(message: TraceServiceConfig): unknown {
    const obj: any = {};
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TraceServiceConfig>, I>>(base?: I): TraceServiceConfig {
    return TraceServiceConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TraceServiceConfig>, I>>(object: I): TraceServiceConfig {
    const message = createBaseTraceServiceConfig();
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(TraceServiceConfig.$type, TraceServiceConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
