// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/core/grpc_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../google/protobuf/any";
import { Duration } from "../../../../google/protobuf/duration";
import { Empty } from "../../../../google/protobuf/empty";
import { Struct } from "../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { DataSource, HeaderValue } from "./base";

export const protobufPackage = "envoy.api.v2.core";

/**
 * gRPC service configuration. This is used by :ref:`ApiConfigSource
 * <envoy_api_msg_core.ApiConfigSource>` and filter configurations.
 * [#next-free-field: 6]
 */
export interface GrpcService {
  $type: "envoy.api.v2.core.GrpcService";
  target_specifier?:
    | //
    /**
     * Envoy's in-built gRPC client.
     * See the :ref:`gRPC services overview <arch_overview_grpc_services>`
     * documentation for discussion on gRPC client selection.
     */
    { $case: "envoy_grpc"; envoy_grpc: GrpcService_EnvoyGrpc }
    | //
    /**
     * `Google C++ gRPC client <https://github.com/grpc/grpc>`_
     * See the :ref:`gRPC services overview <arch_overview_grpc_services>`
     * documentation for discussion on gRPC client selection.
     */
    { $case: "google_grpc"; google_grpc: GrpcService_GoogleGrpc }
    | undefined;
  /**
   * The timeout for the gRPC request. This is the timeout for a specific
   * request.
   */
  timeout?:
    | Duration
    | undefined;
  /**
   * Additional metadata to include in streams initiated to the GrpcService.
   * This can be used for scenarios in which additional ad hoc authorization
   * headers (e.g. ``x-foo-bar: baz-key``) are to be injected.
   */
  initial_metadata?: HeaderValue[] | undefined;
}

export interface GrpcService_EnvoyGrpc {
  $type: "envoy.api.v2.core.GrpcService.EnvoyGrpc";
  /**
   * The name of the upstream gRPC cluster. SSL credentials will be supplied
   * in the :ref:`Cluster <envoy_api_msg_Cluster>` :ref:`transport_socket
   * <envoy_api_field_Cluster.transport_socket>`.
   */
  cluster_name?: string | undefined;
}

/** [#next-free-field: 7] */
export interface GrpcService_GoogleGrpc {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc";
  /**
   * The target URI when using the `Google C++ gRPC client
   * <https://github.com/grpc/grpc>`_. SSL credentials will be supplied in
   * :ref:`channel_credentials <envoy_api_field_core.GrpcService.GoogleGrpc.channel_credentials>`.
   */
  target_uri?: string | undefined;
  channel_credentials?:
    | GrpcService_GoogleGrpc_ChannelCredentials
    | undefined;
  /**
   * A set of call credentials that can be composed with `channel credentials
   * <https://grpc.io/docs/guides/auth.html#credential-types>`_.
   */
  call_credentials?:
    | GrpcService_GoogleGrpc_CallCredentials[]
    | undefined;
  /**
   * The human readable prefix to use when emitting statistics for the gRPC
   * service.
   *
   * .. csv-table::
   *    :header: Name, Type, Description
   *    :widths: 1, 1, 2
   *
   *    streams_total, Counter, Total number of streams opened
   *    streams_closed_<gRPC status code>, Counter, Total streams closed with <gRPC status code>
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * The name of the Google gRPC credentials factory to use. This must have been registered with
   * Envoy. If this is empty, a default credentials factory will be used that sets up channel
   * credentials based on other configuration parameters.
   */
  credentials_factory_name?:
    | string
    | undefined;
  /**
   * Additional configuration for site-specific customizations of the Google
   * gRPC library.
   */
  config?: { [key: string]: any } | undefined;
}

/** See https://grpc.io/grpc/cpp/structgrpc_1_1_ssl_credentials_options.html. */
export interface GrpcService_GoogleGrpc_SslCredentials {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials";
  /** PEM encoded server root certificates. */
  root_certs?:
    | DataSource
    | undefined;
  /** PEM encoded client private key. */
  private_key?:
    | DataSource
    | undefined;
  /** PEM encoded client certificate chain. */
  cert_chain?: DataSource | undefined;
}

/**
 * Local channel credentials. Only UDS is supported for now.
 * See https://github.com/grpc/grpc/pull/15909.
 */
export interface GrpcService_GoogleGrpc_GoogleLocalCredentials {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials";
}

/**
 * See https://grpc.io/docs/guides/auth.html#credential-types to understand Channel and Call
 * credential types.
 */
export interface GrpcService_GoogleGrpc_ChannelCredentials {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials";
  credential_specifier?:
    | //
    { $case: "ssl_credentials"; ssl_credentials: GrpcService_GoogleGrpc_SslCredentials }
    | //
    /** https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61 */
    { $case: "google_default"; google_default: Empty }
    | //
    { $case: "local_credentials"; local_credentials: GrpcService_GoogleGrpc_GoogleLocalCredentials }
    | undefined;
}

/** [#next-free-field: 8] */
export interface GrpcService_GoogleGrpc_CallCredentials {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials";
  credential_specifier?:
    | //
    /**
     * Access token credentials.
     * https://grpc.io/grpc/cpp/namespacegrpc.html#ad3a80da696ffdaea943f0f858d7a360d.
     */
    { $case: "access_token"; access_token: string }
    | //
    /**
     * Google Compute Engine credentials.
     * https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61
     */
    { $case: "google_compute_engine"; google_compute_engine: Empty }
    | //
    /**
     * Google refresh token credentials.
     * https://grpc.io/grpc/cpp/namespacegrpc.html#a96901c997b91bc6513b08491e0dca37c.
     */
    { $case: "google_refresh_token"; google_refresh_token: string }
    | //
    /**
     * Service Account JWT Access credentials.
     * https://grpc.io/grpc/cpp/namespacegrpc.html#a92a9f959d6102461f66ee973d8e9d3aa.
     */
    {
      $case: "service_account_jwt_access";
      service_account_jwt_access: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials;
    }
    | //
    /**
     * Google IAM credentials.
     * https://grpc.io/grpc/cpp/namespacegrpc.html#a9fc1fc101b41e680d47028166e76f9d0.
     */
    { $case: "google_iam"; google_iam: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials }
    | //
    /**
     * Custom authenticator credentials.
     * https://grpc.io/grpc/cpp/namespacegrpc.html#a823c6a4b19ffc71fb33e90154ee2ad07.
     * https://grpc.io/docs/guides/auth.html#extending-grpc-to-support-other-authentication-mechanisms.
     */
    { $case: "from_plugin"; from_plugin: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin }
    | //
    /**
     * Custom security token service which implements OAuth 2.0 token exchange.
     * https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16
     * See https://github.com/grpc/grpc/pull/19587.
     */
    { $case: "sts_service"; sts_service: GrpcService_GoogleGrpc_CallCredentials_StsService }
    | undefined;
}

export interface GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials";
  json_key?: string | undefined;
  token_lifetime_seconds?: number | undefined;
}

export interface GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials";
  authorization_token?: string | undefined;
  authority_selector?: string | undefined;
}

export interface GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin";
  name?: string | undefined;
  config_type?:
    | //
    { $case: "config"; config: { [key: string]: any } | undefined }
    | //
    { $case: "typed_config"; typed_config: Any }
    | undefined;
}

/**
 * Security token service configuration that allows Google gRPC to
 * fetch security token from an OAuth 2.0 authorization server.
 * See https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16 and
 * https://github.com/grpc/grpc/pull/19587.
 * [#next-free-field: 10]
 */
export interface GrpcService_GoogleGrpc_CallCredentials_StsService {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService";
  /**
   * URI of the token exchange service that handles token exchange requests.
   * [#comment:TODO(asraa): Add URI validation when implemented. Tracked by
   * https://github.com/bufbuild/protoc-gen-validate/issues/303]
   */
  token_exchange_service_uri?:
    | string
    | undefined;
  /**
   * Location of the target service or resource where the client
   * intends to use the requested security token.
   */
  resource?:
    | string
    | undefined;
  /**
   * Logical name of the target service where the client intends to
   * use the requested security token.
   */
  audience?:
    | string
    | undefined;
  /**
   * The desired scope of the requested security token in the
   * context of the service or resource where the token will be used.
   */
  scope?:
    | string
    | undefined;
  /** Type of the requested security token. */
  requested_token_type?:
    | string
    | undefined;
  /**
   * The path of subject token, a security token that represents the
   * identity of the party on behalf of whom the request is being made.
   */
  subject_token_path?:
    | string
    | undefined;
  /** Type of the subject token. */
  subject_token_type?:
    | string
    | undefined;
  /**
   * The path of actor token, a security token that represents the identity
   * of the acting party. The acting party is authorized to use the
   * requested security token and act on behalf of the subject.
   */
  actor_token_path?:
    | string
    | undefined;
  /** Type of the actor token. */
  actor_token_type?: string | undefined;
}

function createBaseGrpcService(): GrpcService {
  return { $type: "envoy.api.v2.core.GrpcService", target_specifier: undefined };
}

export const GrpcService: MessageFns<GrpcService, "envoy.api.v2.core.GrpcService"> = {
  $type: "envoy.api.v2.core.GrpcService" as const,

  encode(message: GrpcService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.target_specifier?.$case) {
      case "envoy_grpc":
        GrpcService_EnvoyGrpc.encode(message.target_specifier.envoy_grpc, writer.uint32(10).fork()).join();
        break;
      case "google_grpc":
        GrpcService_GoogleGrpc.encode(message.target_specifier.google_grpc, writer.uint32(18).fork()).join();
        break;
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(26).fork()).join();
    }
    if (message.initial_metadata !== undefined && message.initial_metadata.length !== 0) {
      for (const v of message.initial_metadata) {
        HeaderValue.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.target_specifier = {
            $case: "envoy_grpc",
            envoy_grpc: GrpcService_EnvoyGrpc.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.target_specifier = {
            $case: "google_grpc",
            google_grpc: GrpcService_GoogleGrpc.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.initial_metadata === undefined) {
            message.initial_metadata = [];
          }
          const el = HeaderValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.initial_metadata!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService {
    return {
      $type: GrpcService.$type,
      target_specifier: isSet(object.envoy_grpc)
        ? { $case: "envoy_grpc", envoy_grpc: GrpcService_EnvoyGrpc.fromJSON(object.envoy_grpc) }
        : isSet(object.google_grpc)
        ? { $case: "google_grpc", google_grpc: GrpcService_GoogleGrpc.fromJSON(object.google_grpc) }
        : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      initial_metadata: globalThis.Array.isArray(object?.initial_metadata)
        ? object.initial_metadata.map((e: any) => HeaderValue.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: GrpcService): unknown {
    const obj: any = {};
    if (message.target_specifier?.$case === "envoy_grpc") {
      obj.envoy_grpc = GrpcService_EnvoyGrpc.toJSON(message.target_specifier.envoy_grpc);
    }
    if (message.target_specifier?.$case === "google_grpc") {
      obj.google_grpc = GrpcService_GoogleGrpc.toJSON(message.target_specifier.google_grpc);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.initial_metadata?.length) {
      obj.initial_metadata = message.initial_metadata.map((e) => HeaderValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService>, I>>(base?: I): GrpcService {
    return GrpcService.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService>, I>>(object: I): GrpcService {
    const message = createBaseGrpcService();
    if (
      object.target_specifier?.$case === "envoy_grpc" &&
      object.target_specifier?.envoy_grpc !== undefined &&
      object.target_specifier?.envoy_grpc !== null
    ) {
      message.target_specifier = {
        $case: "envoy_grpc",
        envoy_grpc: GrpcService_EnvoyGrpc.fromPartial(object.target_specifier.envoy_grpc),
      };
    }
    if (
      object.target_specifier?.$case === "google_grpc" &&
      object.target_specifier?.google_grpc !== undefined &&
      object.target_specifier?.google_grpc !== null
    ) {
      message.target_specifier = {
        $case: "google_grpc",
        google_grpc: GrpcService_GoogleGrpc.fromPartial(object.target_specifier.google_grpc),
      };
    }
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.initial_metadata = object.initial_metadata?.map((e) => HeaderValue.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(GrpcService.$type, GrpcService);

function createBaseGrpcService_EnvoyGrpc(): GrpcService_EnvoyGrpc {
  return { $type: "envoy.api.v2.core.GrpcService.EnvoyGrpc" };
}

export const GrpcService_EnvoyGrpc: MessageFns<GrpcService_EnvoyGrpc, "envoy.api.v2.core.GrpcService.EnvoyGrpc"> = {
  $type: "envoy.api.v2.core.GrpcService.EnvoyGrpc" as const,

  encode(message: GrpcService_EnvoyGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster_name !== undefined && message.cluster_name !== "") {
      writer.uint32(10).string(message.cluster_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService_EnvoyGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_EnvoyGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_EnvoyGrpc {
    return {
      $type: GrpcService_EnvoyGrpc.$type,
      cluster_name: isSet(object.cluster_name) ? globalThis.String(object.cluster_name) : undefined,
    };
  },

  toJSON(message: GrpcService_EnvoyGrpc): unknown {
    const obj: any = {};
    if (message.cluster_name !== undefined) {
      obj.cluster_name = message.cluster_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_EnvoyGrpc>, I>>(base?: I): GrpcService_EnvoyGrpc {
    return GrpcService_EnvoyGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_EnvoyGrpc>, I>>(object: I): GrpcService_EnvoyGrpc {
    const message = createBaseGrpcService_EnvoyGrpc();
    message.cluster_name = object.cluster_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(GrpcService_EnvoyGrpc.$type, GrpcService_EnvoyGrpc);

function createBaseGrpcService_GoogleGrpc(): GrpcService_GoogleGrpc {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc" };
}

export const GrpcService_GoogleGrpc: MessageFns<GrpcService_GoogleGrpc, "envoy.api.v2.core.GrpcService.GoogleGrpc"> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc" as const,

  encode(message: GrpcService_GoogleGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target_uri !== undefined && message.target_uri !== "") {
      writer.uint32(10).string(message.target_uri);
    }
    if (message.channel_credentials !== undefined) {
      GrpcService_GoogleGrpc_ChannelCredentials.encode(message.channel_credentials, writer.uint32(18).fork()).join();
    }
    if (message.call_credentials !== undefined && message.call_credentials.length !== 0) {
      for (const v of message.call_credentials) {
        GrpcService_GoogleGrpc_CallCredentials.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(34).string(message.stat_prefix);
    }
    if (message.credentials_factory_name !== undefined && message.credentials_factory_name !== "") {
      writer.uint32(42).string(message.credentials_factory_name);
    }
    if (message.config !== undefined) {
      Struct.encode(Struct.wrap(message.config), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService_GoogleGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.target_uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.channel_credentials = GrpcService_GoogleGrpc_ChannelCredentials.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.call_credentials === undefined) {
            message.call_credentials = [];
          }
          const el = GrpcService_GoogleGrpc_CallCredentials.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.call_credentials!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.credentials_factory_name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.config = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc {
    return {
      $type: GrpcService_GoogleGrpc.$type,
      target_uri: isSet(object.target_uri) ? globalThis.String(object.target_uri) : undefined,
      channel_credentials: isSet(object.channel_credentials)
        ? GrpcService_GoogleGrpc_ChannelCredentials.fromJSON(object.channel_credentials)
        : undefined,
      call_credentials: globalThis.Array.isArray(object?.call_credentials)
        ? object.call_credentials.map((e: any) => GrpcService_GoogleGrpc_CallCredentials.fromJSON(e))
        : undefined,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      credentials_factory_name: isSet(object.credentials_factory_name)
        ? globalThis.String(object.credentials_factory_name)
        : undefined,
      config: isObject(object.config) ? object.config : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc): unknown {
    const obj: any = {};
    if (message.target_uri !== undefined) {
      obj.target_uri = message.target_uri;
    }
    if (message.channel_credentials !== undefined) {
      obj.channel_credentials = GrpcService_GoogleGrpc_ChannelCredentials.toJSON(message.channel_credentials);
    }
    if (message.call_credentials?.length) {
      obj.call_credentials = message.call_credentials.map((e) => GrpcService_GoogleGrpc_CallCredentials.toJSON(e));
    }
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.credentials_factory_name !== undefined) {
      obj.credentials_factory_name = message.credentials_factory_name;
    }
    if (message.config !== undefined) {
      obj.config = message.config;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc>, I>>(base?: I): GrpcService_GoogleGrpc {
    return GrpcService_GoogleGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc>, I>>(object: I): GrpcService_GoogleGrpc {
    const message = createBaseGrpcService_GoogleGrpc();
    message.target_uri = object.target_uri ?? undefined;
    message.channel_credentials = (object.channel_credentials !== undefined && object.channel_credentials !== null)
      ? GrpcService_GoogleGrpc_ChannelCredentials.fromPartial(object.channel_credentials)
      : undefined;
    message.call_credentials =
      object.call_credentials?.map((e) => GrpcService_GoogleGrpc_CallCredentials.fromPartial(e)) || undefined;
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.credentials_factory_name = object.credentials_factory_name ?? undefined;
    message.config = object.config ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(GrpcService_GoogleGrpc.$type, GrpcService_GoogleGrpc);

function createBaseGrpcService_GoogleGrpc_SslCredentials(): GrpcService_GoogleGrpc_SslCredentials {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials" };
}

export const GrpcService_GoogleGrpc_SslCredentials: MessageFns<
  GrpcService_GoogleGrpc_SslCredentials,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials" as const,

  encode(message: GrpcService_GoogleGrpc_SslCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.root_certs !== undefined) {
      DataSource.encode(message.root_certs, writer.uint32(10).fork()).join();
    }
    if (message.private_key !== undefined) {
      DataSource.encode(message.private_key, writer.uint32(18).fork()).join();
    }
    if (message.cert_chain !== undefined) {
      DataSource.encode(message.cert_chain, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService_GoogleGrpc_SslCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_SslCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.root_certs = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.private_key = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cert_chain = DataSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc_SslCredentials {
    return {
      $type: GrpcService_GoogleGrpc_SslCredentials.$type,
      root_certs: isSet(object.root_certs) ? DataSource.fromJSON(object.root_certs) : undefined,
      private_key: isSet(object.private_key) ? DataSource.fromJSON(object.private_key) : undefined,
      cert_chain: isSet(object.cert_chain) ? DataSource.fromJSON(object.cert_chain) : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc_SslCredentials): unknown {
    const obj: any = {};
    if (message.root_certs !== undefined) {
      obj.root_certs = DataSource.toJSON(message.root_certs);
    }
    if (message.private_key !== undefined) {
      obj.private_key = DataSource.toJSON(message.private_key);
    }
    if (message.cert_chain !== undefined) {
      obj.cert_chain = DataSource.toJSON(message.cert_chain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_SslCredentials>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_SslCredentials {
    return GrpcService_GoogleGrpc_SslCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_SslCredentials>, I>>(
    object: I,
  ): GrpcService_GoogleGrpc_SslCredentials {
    const message = createBaseGrpcService_GoogleGrpc_SslCredentials();
    message.root_certs = (object.root_certs !== undefined && object.root_certs !== null)
      ? DataSource.fromPartial(object.root_certs)
      : undefined;
    message.private_key = (object.private_key !== undefined && object.private_key !== null)
      ? DataSource.fromPartial(object.private_key)
      : undefined;
    message.cert_chain = (object.cert_chain !== undefined && object.cert_chain !== null)
      ? DataSource.fromPartial(object.cert_chain)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(GrpcService_GoogleGrpc_SslCredentials.$type, GrpcService_GoogleGrpc_SslCredentials);

function createBaseGrpcService_GoogleGrpc_GoogleLocalCredentials(): GrpcService_GoogleGrpc_GoogleLocalCredentials {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials" };
}

export const GrpcService_GoogleGrpc_GoogleLocalCredentials: MessageFns<
  GrpcService_GoogleGrpc_GoogleLocalCredentials,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials" as const,

  encode(_: GrpcService_GoogleGrpc_GoogleLocalCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService_GoogleGrpc_GoogleLocalCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_GoogleLocalCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GrpcService_GoogleGrpc_GoogleLocalCredentials {
    return { $type: GrpcService_GoogleGrpc_GoogleLocalCredentials.$type };
  },

  toJSON(_: GrpcService_GoogleGrpc_GoogleLocalCredentials): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_GoogleLocalCredentials>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_GoogleLocalCredentials {
    return GrpcService_GoogleGrpc_GoogleLocalCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_GoogleLocalCredentials>, I>>(
    _: I,
  ): GrpcService_GoogleGrpc_GoogleLocalCredentials {
    const message = createBaseGrpcService_GoogleGrpc_GoogleLocalCredentials();
    return message;
  },
};

messageTypeRegistry.set(
  GrpcService_GoogleGrpc_GoogleLocalCredentials.$type,
  GrpcService_GoogleGrpc_GoogleLocalCredentials,
);

function createBaseGrpcService_GoogleGrpc_ChannelCredentials(): GrpcService_GoogleGrpc_ChannelCredentials {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials", credential_specifier: undefined };
}

export const GrpcService_GoogleGrpc_ChannelCredentials: MessageFns<
  GrpcService_GoogleGrpc_ChannelCredentials,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials" as const,

  encode(message: GrpcService_GoogleGrpc_ChannelCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.credential_specifier?.$case) {
      case "ssl_credentials":
        GrpcService_GoogleGrpc_SslCredentials.encode(
          message.credential_specifier.ssl_credentials,
          writer.uint32(10).fork(),
        ).join();
        break;
      case "google_default":
        Empty.encode(message.credential_specifier.google_default, writer.uint32(18).fork()).join();
        break;
      case "local_credentials":
        GrpcService_GoogleGrpc_GoogleLocalCredentials.encode(
          message.credential_specifier.local_credentials,
          writer.uint32(26).fork(),
        ).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService_GoogleGrpc_ChannelCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_ChannelCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credential_specifier = {
            $case: "ssl_credentials",
            ssl_credentials: GrpcService_GoogleGrpc_SslCredentials.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.credential_specifier = {
            $case: "google_default",
            google_default: Empty.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.credential_specifier = {
            $case: "local_credentials",
            local_credentials: GrpcService_GoogleGrpc_GoogleLocalCredentials.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc_ChannelCredentials {
    return {
      $type: GrpcService_GoogleGrpc_ChannelCredentials.$type,
      credential_specifier: isSet(object.ssl_credentials)
        ? {
          $case: "ssl_credentials",
          ssl_credentials: GrpcService_GoogleGrpc_SslCredentials.fromJSON(object.ssl_credentials),
        }
        : isSet(object.google_default)
        ? { $case: "google_default", google_default: Empty.fromJSON(object.google_default) }
        : isSet(object.local_credentials)
        ? {
          $case: "local_credentials",
          local_credentials: GrpcService_GoogleGrpc_GoogleLocalCredentials.fromJSON(object.local_credentials),
        }
        : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc_ChannelCredentials): unknown {
    const obj: any = {};
    if (message.credential_specifier?.$case === "ssl_credentials") {
      obj.ssl_credentials = GrpcService_GoogleGrpc_SslCredentials.toJSON(message.credential_specifier.ssl_credentials);
    }
    if (message.credential_specifier?.$case === "google_default") {
      obj.google_default = Empty.toJSON(message.credential_specifier.google_default);
    }
    if (message.credential_specifier?.$case === "local_credentials") {
      obj.local_credentials = GrpcService_GoogleGrpc_GoogleLocalCredentials.toJSON(
        message.credential_specifier.local_credentials,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_ChannelCredentials>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_ChannelCredentials {
    return GrpcService_GoogleGrpc_ChannelCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_ChannelCredentials>, I>>(
    object: I,
  ): GrpcService_GoogleGrpc_ChannelCredentials {
    const message = createBaseGrpcService_GoogleGrpc_ChannelCredentials();
    if (
      object.credential_specifier?.$case === "ssl_credentials" &&
      object.credential_specifier?.ssl_credentials !== undefined &&
      object.credential_specifier?.ssl_credentials !== null
    ) {
      message.credential_specifier = {
        $case: "ssl_credentials",
        ssl_credentials: GrpcService_GoogleGrpc_SslCredentials.fromPartial(object.credential_specifier.ssl_credentials),
      };
    }
    if (
      object.credential_specifier?.$case === "google_default" &&
      object.credential_specifier?.google_default !== undefined &&
      object.credential_specifier?.google_default !== null
    ) {
      message.credential_specifier = {
        $case: "google_default",
        google_default: Empty.fromPartial(object.credential_specifier.google_default),
      };
    }
    if (
      object.credential_specifier?.$case === "local_credentials" &&
      object.credential_specifier?.local_credentials !== undefined &&
      object.credential_specifier?.local_credentials !== null
    ) {
      message.credential_specifier = {
        $case: "local_credentials",
        local_credentials: GrpcService_GoogleGrpc_GoogleLocalCredentials.fromPartial(
          object.credential_specifier.local_credentials,
        ),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(GrpcService_GoogleGrpc_ChannelCredentials.$type, GrpcService_GoogleGrpc_ChannelCredentials);

function createBaseGrpcService_GoogleGrpc_CallCredentials(): GrpcService_GoogleGrpc_CallCredentials {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials", credential_specifier: undefined };
}

export const GrpcService_GoogleGrpc_CallCredentials: MessageFns<
  GrpcService_GoogleGrpc_CallCredentials,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials" as const,

  encode(message: GrpcService_GoogleGrpc_CallCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.credential_specifier?.$case) {
      case "access_token":
        writer.uint32(10).string(message.credential_specifier.access_token);
        break;
      case "google_compute_engine":
        Empty.encode(message.credential_specifier.google_compute_engine, writer.uint32(18).fork()).join();
        break;
      case "google_refresh_token":
        writer.uint32(26).string(message.credential_specifier.google_refresh_token);
        break;
      case "service_account_jwt_access":
        GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials.encode(
          message.credential_specifier.service_account_jwt_access,
          writer.uint32(34).fork(),
        ).join();
        break;
      case "google_iam":
        GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.encode(
          message.credential_specifier.google_iam,
          writer.uint32(42).fork(),
        ).join();
        break;
      case "from_plugin":
        GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.encode(
          message.credential_specifier.from_plugin,
          writer.uint32(50).fork(),
        ).join();
        break;
      case "sts_service":
        GrpcService_GoogleGrpc_CallCredentials_StsService.encode(
          message.credential_specifier.sts_service,
          writer.uint32(58).fork(),
        ).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService_GoogleGrpc_CallCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credential_specifier = { $case: "access_token", access_token: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.credential_specifier = {
            $case: "google_compute_engine",
            google_compute_engine: Empty.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.credential_specifier = { $case: "google_refresh_token", google_refresh_token: reader.string() };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.credential_specifier = {
            $case: "service_account_jwt_access",
            service_account_jwt_access: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials
              .decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.credential_specifier = {
            $case: "google_iam",
            google_iam: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.credential_specifier = {
            $case: "from_plugin",
            from_plugin: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.decode(
              reader,
              reader.uint32(),
            ),
          };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.credential_specifier = {
            $case: "sts_service",
            sts_service: GrpcService_GoogleGrpc_CallCredentials_StsService.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc_CallCredentials {
    return {
      $type: GrpcService_GoogleGrpc_CallCredentials.$type,
      credential_specifier: isSet(object.access_token)
        ? { $case: "access_token", access_token: globalThis.String(object.access_token) }
        : isSet(object.google_compute_engine)
        ? { $case: "google_compute_engine", google_compute_engine: Empty.fromJSON(object.google_compute_engine) }
        : isSet(object.google_refresh_token)
        ? { $case: "google_refresh_token", google_refresh_token: globalThis.String(object.google_refresh_token) }
        : isSet(object.service_account_jwt_access)
        ? {
          $case: "service_account_jwt_access",
          service_account_jwt_access: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials
            .fromJSON(object.service_account_jwt_access),
        }
        : isSet(object.google_iam)
        ? {
          $case: "google_iam",
          google_iam: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.fromJSON(object.google_iam),
        }
        : isSet(object.from_plugin)
        ? {
          $case: "from_plugin",
          from_plugin: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.fromJSON(
            object.from_plugin,
          ),
        }
        : isSet(object.sts_service)
        ? {
          $case: "sts_service",
          sts_service: GrpcService_GoogleGrpc_CallCredentials_StsService.fromJSON(object.sts_service),
        }
        : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc_CallCredentials): unknown {
    const obj: any = {};
    if (message.credential_specifier?.$case === "access_token") {
      obj.access_token = message.credential_specifier.access_token;
    }
    if (message.credential_specifier?.$case === "google_compute_engine") {
      obj.google_compute_engine = Empty.toJSON(message.credential_specifier.google_compute_engine);
    }
    if (message.credential_specifier?.$case === "google_refresh_token") {
      obj.google_refresh_token = message.credential_specifier.google_refresh_token;
    }
    if (message.credential_specifier?.$case === "service_account_jwt_access") {
      obj.service_account_jwt_access = GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials.toJSON(
        message.credential_specifier.service_account_jwt_access,
      );
    }
    if (message.credential_specifier?.$case === "google_iam") {
      obj.google_iam = GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.toJSON(
        message.credential_specifier.google_iam,
      );
    }
    if (message.credential_specifier?.$case === "from_plugin") {
      obj.from_plugin = GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.toJSON(
        message.credential_specifier.from_plugin,
      );
    }
    if (message.credential_specifier?.$case === "sts_service") {
      obj.sts_service = GrpcService_GoogleGrpc_CallCredentials_StsService.toJSON(
        message.credential_specifier.sts_service,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_CallCredentials {
    return GrpcService_GoogleGrpc_CallCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials>, I>>(
    object: I,
  ): GrpcService_GoogleGrpc_CallCredentials {
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials();
    if (
      object.credential_specifier?.$case === "access_token" &&
      object.credential_specifier?.access_token !== undefined &&
      object.credential_specifier?.access_token !== null
    ) {
      message.credential_specifier = { $case: "access_token", access_token: object.credential_specifier.access_token };
    }
    if (
      object.credential_specifier?.$case === "google_compute_engine" &&
      object.credential_specifier?.google_compute_engine !== undefined &&
      object.credential_specifier?.google_compute_engine !== null
    ) {
      message.credential_specifier = {
        $case: "google_compute_engine",
        google_compute_engine: Empty.fromPartial(object.credential_specifier.google_compute_engine),
      };
    }
    if (
      object.credential_specifier?.$case === "google_refresh_token" &&
      object.credential_specifier?.google_refresh_token !== undefined &&
      object.credential_specifier?.google_refresh_token !== null
    ) {
      message.credential_specifier = {
        $case: "google_refresh_token",
        google_refresh_token: object.credential_specifier.google_refresh_token,
      };
    }
    if (
      object.credential_specifier?.$case === "service_account_jwt_access" &&
      object.credential_specifier?.service_account_jwt_access !== undefined &&
      object.credential_specifier?.service_account_jwt_access !== null
    ) {
      message.credential_specifier = {
        $case: "service_account_jwt_access",
        service_account_jwt_access: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials
          .fromPartial(object.credential_specifier.service_account_jwt_access),
      };
    }
    if (
      object.credential_specifier?.$case === "google_iam" &&
      object.credential_specifier?.google_iam !== undefined &&
      object.credential_specifier?.google_iam !== null
    ) {
      message.credential_specifier = {
        $case: "google_iam",
        google_iam: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.fromPartial(
          object.credential_specifier.google_iam,
        ),
      };
    }
    if (
      object.credential_specifier?.$case === "from_plugin" &&
      object.credential_specifier?.from_plugin !== undefined &&
      object.credential_specifier?.from_plugin !== null
    ) {
      message.credential_specifier = {
        $case: "from_plugin",
        from_plugin: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.fromPartial(
          object.credential_specifier.from_plugin,
        ),
      };
    }
    if (
      object.credential_specifier?.$case === "sts_service" &&
      object.credential_specifier?.sts_service !== undefined &&
      object.credential_specifier?.sts_service !== null
    ) {
      message.credential_specifier = {
        $case: "sts_service",
        sts_service: GrpcService_GoogleGrpc_CallCredentials_StsService.fromPartial(
          object.credential_specifier.sts_service,
        ),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(GrpcService_GoogleGrpc_CallCredentials.$type, GrpcService_GoogleGrpc_CallCredentials);

function createBaseGrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials(): GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials" };
}

export const GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials: MessageFns<
  GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials" as const,

  encode(
    message: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.json_key !== undefined && message.json_key !== "") {
      writer.uint32(10).string(message.json_key);
    }
    if (message.token_lifetime_seconds !== undefined && message.token_lifetime_seconds !== 0) {
      writer.uint32(16).uint64(message.token_lifetime_seconds);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.json_key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.token_lifetime_seconds = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    return {
      $type: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials.$type,
      json_key: isSet(object.json_key) ? globalThis.String(object.json_key) : undefined,
      token_lifetime_seconds: isSet(object.token_lifetime_seconds)
        ? globalThis.Number(object.token_lifetime_seconds)
        : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials): unknown {
    const obj: any = {};
    if (message.json_key !== undefined) {
      obj.json_key = message.json_key;
    }
    if (message.token_lifetime_seconds !== undefined) {
      obj.token_lifetime_seconds = Math.round(message.token_lifetime_seconds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    return GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<
    I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials>, I>,
  >(object: I): GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials();
    message.json_key = object.json_key ?? undefined;
    message.token_lifetime_seconds = object.token_lifetime_seconds ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(
  GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials.$type,
  GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials,
);

function createBaseGrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials(): GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials" };
}

export const GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials: MessageFns<
  GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials" as const,

  encode(
    message: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.authorization_token !== undefined && message.authorization_token !== "") {
      writer.uint32(10).string(message.authorization_token);
    }
    if (message.authority_selector !== undefined && message.authority_selector !== "") {
      writer.uint32(18).string(message.authority_selector);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorization_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authority_selector = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    return {
      $type: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.$type,
      authorization_token: isSet(object.authorization_token)
        ? globalThis.String(object.authorization_token)
        : undefined,
      authority_selector: isSet(object.authority_selector) ? globalThis.String(object.authority_selector) : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials): unknown {
    const obj: any = {};
    if (message.authorization_token !== undefined) {
      obj.authorization_token = message.authorization_token;
    }
    if (message.authority_selector !== undefined) {
      obj.authority_selector = message.authority_selector;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    return GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials>, I>>(
    object: I,
  ): GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials();
    message.authorization_token = object.authorization_token ?? undefined;
    message.authority_selector = object.authority_selector ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(
  GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials.$type,
  GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials,
);

function createBaseGrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin(): GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
  return {
    $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin",
    config_type: undefined,
  };
}

export const GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin: MessageFns<
  GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin" as const,

  encode(
    message: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    switch (message.config_type?.$case) {
      case "config":
        Struct.encode(Struct.wrap(message.config_type.config), writer.uint32(18).fork()).join();
        break;
      case "typed_config":
        Any.encode(message.config_type.typed_config, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config_type = { $case: "config", config: Struct.unwrap(Struct.decode(reader, reader.uint32())) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.config_type = { $case: "typed_config", typed_config: Any.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    return {
      $type: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      config_type: isSet(object.config)
        ? { $case: "config", config: object.config }
        : isSet(object.typed_config)
        ? { $case: "typed_config", typed_config: Any.fromJSON(object.typed_config) }
        : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.config_type?.$case === "config") {
      obj.config = message.config_type.config;
    }
    if (message.config_type?.$case === "typed_config") {
      obj.typed_config = Any.toJSON(message.config_type.typed_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    return GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin>, I>>(
    object: I,
  ): GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin();
    message.name = object.name ?? undefined;
    if (
      object.config_type?.$case === "config" &&
      object.config_type?.config !== undefined &&
      object.config_type?.config !== null
    ) {
      message.config_type = { $case: "config", config: object.config_type.config };
    }
    if (
      object.config_type?.$case === "typed_config" &&
      object.config_type?.typed_config !== undefined &&
      object.config_type?.typed_config !== null
    ) {
      message.config_type = { $case: "typed_config", typed_config: Any.fromPartial(object.config_type.typed_config) };
    }
    return message;
  },
};

messageTypeRegistry.set(
  GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin.$type,
  GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin,
);

function createBaseGrpcService_GoogleGrpc_CallCredentials_StsService(): GrpcService_GoogleGrpc_CallCredentials_StsService {
  return { $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService" };
}

export const GrpcService_GoogleGrpc_CallCredentials_StsService: MessageFns<
  GrpcService_GoogleGrpc_CallCredentials_StsService,
  "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService"
> = {
  $type: "envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService" as const,

  encode(
    message: GrpcService_GoogleGrpc_CallCredentials_StsService,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.token_exchange_service_uri !== undefined && message.token_exchange_service_uri !== "") {
      writer.uint32(10).string(message.token_exchange_service_uri);
    }
    if (message.resource !== undefined && message.resource !== "") {
      writer.uint32(18).string(message.resource);
    }
    if (message.audience !== undefined && message.audience !== "") {
      writer.uint32(26).string(message.audience);
    }
    if (message.scope !== undefined && message.scope !== "") {
      writer.uint32(34).string(message.scope);
    }
    if (message.requested_token_type !== undefined && message.requested_token_type !== "") {
      writer.uint32(42).string(message.requested_token_type);
    }
    if (message.subject_token_path !== undefined && message.subject_token_path !== "") {
      writer.uint32(50).string(message.subject_token_path);
    }
    if (message.subject_token_type !== undefined && message.subject_token_type !== "") {
      writer.uint32(58).string(message.subject_token_type);
    }
    if (message.actor_token_path !== undefined && message.actor_token_path !== "") {
      writer.uint32(66).string(message.actor_token_path);
    }
    if (message.actor_token_type !== undefined && message.actor_token_type !== "") {
      writer.uint32(74).string(message.actor_token_type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcService_GoogleGrpc_CallCredentials_StsService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_StsService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token_exchange_service_uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resource = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.audience = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.scope = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.requested_token_type = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.subject_token_path = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.subject_token_type = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.actor_token_path = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.actor_token_type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrpcService_GoogleGrpc_CallCredentials_StsService {
    return {
      $type: GrpcService_GoogleGrpc_CallCredentials_StsService.$type,
      token_exchange_service_uri: isSet(object.token_exchange_service_uri)
        ? globalThis.String(object.token_exchange_service_uri)
        : undefined,
      resource: isSet(object.resource) ? globalThis.String(object.resource) : undefined,
      audience: isSet(object.audience) ? globalThis.String(object.audience) : undefined,
      scope: isSet(object.scope) ? globalThis.String(object.scope) : undefined,
      requested_token_type: isSet(object.requested_token_type)
        ? globalThis.String(object.requested_token_type)
        : undefined,
      subject_token_path: isSet(object.subject_token_path) ? globalThis.String(object.subject_token_path) : undefined,
      subject_token_type: isSet(object.subject_token_type) ? globalThis.String(object.subject_token_type) : undefined,
      actor_token_path: isSet(object.actor_token_path) ? globalThis.String(object.actor_token_path) : undefined,
      actor_token_type: isSet(object.actor_token_type) ? globalThis.String(object.actor_token_type) : undefined,
    };
  },

  toJSON(message: GrpcService_GoogleGrpc_CallCredentials_StsService): unknown {
    const obj: any = {};
    if (message.token_exchange_service_uri !== undefined) {
      obj.token_exchange_service_uri = message.token_exchange_service_uri;
    }
    if (message.resource !== undefined) {
      obj.resource = message.resource;
    }
    if (message.audience !== undefined) {
      obj.audience = message.audience;
    }
    if (message.scope !== undefined) {
      obj.scope = message.scope;
    }
    if (message.requested_token_type !== undefined) {
      obj.requested_token_type = message.requested_token_type;
    }
    if (message.subject_token_path !== undefined) {
      obj.subject_token_path = message.subject_token_path;
    }
    if (message.subject_token_type !== undefined) {
      obj.subject_token_type = message.subject_token_type;
    }
    if (message.actor_token_path !== undefined) {
      obj.actor_token_path = message.actor_token_path;
    }
    if (message.actor_token_type !== undefined) {
      obj.actor_token_type = message.actor_token_type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_StsService>, I>>(
    base?: I,
  ): GrpcService_GoogleGrpc_CallCredentials_StsService {
    return GrpcService_GoogleGrpc_CallCredentials_StsService.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrpcService_GoogleGrpc_CallCredentials_StsService>, I>>(
    object: I,
  ): GrpcService_GoogleGrpc_CallCredentials_StsService {
    const message = createBaseGrpcService_GoogleGrpc_CallCredentials_StsService();
    message.token_exchange_service_uri = object.token_exchange_service_uri ?? undefined;
    message.resource = object.resource ?? undefined;
    message.audience = object.audience ?? undefined;
    message.scope = object.scope ?? undefined;
    message.requested_token_type = object.requested_token_type ?? undefined;
    message.subject_token_path = object.subject_token_path ?? undefined;
    message.subject_token_type = object.subject_token_type ?? undefined;
    message.actor_token_path = object.actor_token_path ?? undefined;
    message.actor_token_type = object.actor_token_type ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(
  GrpcService_GoogleGrpc_CallCredentials_StsService.$type,
  GrpcService_GoogleGrpc_CallCredentials_StsService,
);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
