// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/dns/v3/dns_table.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { StringMatcher } from "../../../type/matcher/v3/string";

export const protobufPackage = "envoy.data.dns.v3";

/**
 * This message contains the configuration for the DNS Filter if populated
 * from the control plane
 */
export interface DnsTable {
  $type: "envoy.data.dns.v3.DnsTable";
  /** Control how many times Envoy makes an attempt to forward a query to an external DNS server */
  external_retry_count?:
    | number
    | undefined;
  /**
   * Fully qualified domain names for which Envoy will respond to DNS queries. By leaving this
   * list empty, Envoy will forward all queries to external resolvers
   */
  virtual_domains?:
    | DnsTable_DnsVirtualDomain[]
    | undefined;
  /**
   * This field is deprecated and no longer used in Envoy. The filter's behavior has changed
   * internally to use a different data structure allowing the filter to determine whether a
   * query is for known domain without the use of this field.
   *
   * This field serves to help Envoy determine whether it can authoritatively answer a query
   * for a name matching a suffix in this list. If the query name does not match a suffix in
   * this list, Envoy will forward the query to an upstream DNS server
   *
   * @deprecated
   */
  known_suffixes?: StringMatcher[] | undefined;
}

/** This message contains a list of IP addresses returned for a query for a known name */
export interface DnsTable_AddressList {
  $type: "envoy.data.dns.v3.DnsTable.AddressList";
  /**
   * This field contains a well formed IP address that is returned in the answer for a
   * name query. The address field can be an IPv4 or IPv6 address. Address family
   * detection is done automatically when Envoy parses the string. Since this field is
   * repeated, Envoy will return as many entries from this list in the DNS response while
   * keeping the response under 512 bytes
   */
  address?: string[] | undefined;
}

/** Specify the service protocol using a numeric or string value */
export interface DnsTable_DnsServiceProtocol {
  $type: "envoy.data.dns.v3.DnsTable.DnsServiceProtocol";
  protocol_config?:
    | //
    /**
     * Specify the protocol number for the service. Envoy will try to resolve the number to
     * the protocol name. For example, 6 will resolve to "tcp". Refer to:
     * https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
     * for protocol names and numbers
     */
    { $case: "number"; number: number }
    | //
    /** Specify the protocol name for the service. */
    { $case: "name"; name: string }
    | undefined;
}

/**
 * Specify the target for a given DNS service
 * [#next-free-field: 6]
 */
export interface DnsTable_DnsServiceTarget {
  $type: "envoy.data.dns.v3.DnsTable.DnsServiceTarget";
  /** Specify the name of the endpoint for the Service. The name is a hostname or a cluster */
  endpoint_type?:
    | //
    /** Use a resolvable hostname as the endpoint for a service. */
    { $case: "host_name"; host_name: string }
    | //
    /** Use a cluster name as the endpoint for a service. */
    { $case: "cluster_name"; cluster_name: string }
    | undefined;
  /** The priority of the service record target */
  priority?:
    | number
    | undefined;
  /** The weight of the service record target */
  weight?:
    | number
    | undefined;
  /**
   * The port to which the service is bound. This value is optional if the target is a
   * cluster. Setting port to zero in this case makes the filter use the port value
   * from the cluster host
   */
  port?: number | undefined;
}

/** This message defines a service selection record returned for a service query in a domain */
export interface DnsTable_DnsService {
  $type: "envoy.data.dns.v3.DnsTable.DnsService";
  /** The name of the service without the protocol or domain name */
  service_name?:
    | string
    | undefined;
  /** The service protocol. This can be specified as a string or the numeric value of the protocol */
  protocol?:
    | DnsTable_DnsServiceProtocol
    | undefined;
  /** The service entry time to live. This is independent from the DNS Answer record TTL */
  ttl?:
    | Duration
    | undefined;
  /** The list of targets hosting the service */
  targets?: DnsTable_DnsServiceTarget[] | undefined;
}

/** Define a list of service records for a given service */
export interface DnsTable_DnsServiceList {
  $type: "envoy.data.dns.v3.DnsTable.DnsServiceList";
  services?: DnsTable_DnsService[] | undefined;
}

export interface DnsTable_DnsEndpoint {
  $type: "envoy.data.dns.v3.DnsTable.DnsEndpoint";
  endpoint_config?:
    | //
    /** Define a list of addresses to return for the specified endpoint */
    { $case: "address_list"; address_list: DnsTable_AddressList }
    | //
    /** Define a cluster whose addresses are returned for the specified endpoint */
    { $case: "cluster_name"; cluster_name: string }
    | //
    /** Define a DNS Service List for the specified endpoint */
    { $case: "service_list"; service_list: DnsTable_DnsServiceList }
    | undefined;
}

export interface DnsTable_DnsVirtualDomain {
  $type: "envoy.data.dns.v3.DnsTable.DnsVirtualDomain";
  /**
   * A domain name for which Envoy will respond to query requests.
   * Wildcard records are supported on the first label only, e.g. ``*.example.com`` or ``*.subdomain.example.com``.
   * Names such as ``*example.com``, ``subdomain.*.example.com``, ``*subdomain.example.com``, etc
   * are not valid wildcard names and asterisk will be interpreted as a literal ``*`` character.
   * Wildcard records match subdomains on any levels, e.g. ``*.example.com`` will match
   * ``foo.example.com``, ``bar.foo.example.com``, ``baz.bar.foo.example.com``, etc. In case there are multiple
   * wildcard records, the longest wildcard match will be used, e.g. if there are wildcard records for
   * ``*.example.com`` and ``*.foo.example.com`` and the query is for ``bar.foo.example.com``, the latter will be used.
   * Specific records will always take precedence over wildcard records.
   */
  name?:
    | string
    | undefined;
  /** The configuration containing the method to determine the address of this endpoint */
  endpoint?:
    | DnsTable_DnsEndpoint
    | undefined;
  /** Sets the TTL in DNS answers from Envoy returned to the client. The default TTL is 300s */
  answer_ttl?: Duration | undefined;
}

function createBaseDnsTable(): DnsTable {
  return { $type: "envoy.data.dns.v3.DnsTable" };
}

export const DnsTable: MessageFns<DnsTable, "envoy.data.dns.v3.DnsTable"> = {
  $type: "envoy.data.dns.v3.DnsTable" as const,

  encode(message: DnsTable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.external_retry_count !== undefined && message.external_retry_count !== 0) {
      writer.uint32(8).uint32(message.external_retry_count);
    }
    if (message.virtual_domains !== undefined && message.virtual_domains.length !== 0) {
      for (const v of message.virtual_domains) {
        DnsTable_DnsVirtualDomain.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.known_suffixes !== undefined && message.known_suffixes.length !== 0) {
      for (const v of message.known_suffixes) {
        StringMatcher.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.external_retry_count = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.virtual_domains === undefined) {
            message.virtual_domains = [];
          }
          const el = DnsTable_DnsVirtualDomain.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.virtual_domains!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.known_suffixes === undefined) {
            message.known_suffixes = [];
          }
          const el = StringMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.known_suffixes!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable {
    return {
      $type: DnsTable.$type,
      external_retry_count: isSet(object.external_retry_count)
        ? globalThis.Number(object.external_retry_count)
        : undefined,
      virtual_domains: globalThis.Array.isArray(object?.virtual_domains)
        ? object.virtual_domains.map((e: any) => DnsTable_DnsVirtualDomain.fromJSON(e))
        : undefined,
      known_suffixes: globalThis.Array.isArray(object?.known_suffixes)
        ? object.known_suffixes.map((e: any) => StringMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: DnsTable): unknown {
    const obj: any = {};
    if (message.external_retry_count !== undefined) {
      obj.external_retry_count = Math.round(message.external_retry_count);
    }
    if (message.virtual_domains?.length) {
      obj.virtual_domains = message.virtual_domains.map((e) => DnsTable_DnsVirtualDomain.toJSON(e));
    }
    if (message.known_suffixes?.length) {
      obj.known_suffixes = message.known_suffixes.map((e) => StringMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable>, I>>(base?: I): DnsTable {
    return DnsTable.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable>, I>>(object: I): DnsTable {
    const message = createBaseDnsTable();
    message.external_retry_count = object.external_retry_count ?? undefined;
    message.virtual_domains = object.virtual_domains?.map((e) => DnsTable_DnsVirtualDomain.fromPartial(e)) || undefined;
    message.known_suffixes = object.known_suffixes?.map((e) => StringMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable.$type, DnsTable);

function createBaseDnsTable_AddressList(): DnsTable_AddressList {
  return { $type: "envoy.data.dns.v3.DnsTable.AddressList" };
}

export const DnsTable_AddressList: MessageFns<DnsTable_AddressList, "envoy.data.dns.v3.DnsTable.AddressList"> = {
  $type: "envoy.data.dns.v3.DnsTable.AddressList" as const,

  encode(message: DnsTable_AddressList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined && message.address.length !== 0) {
      for (const v of message.address) {
        writer.uint32(10).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_AddressList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_AddressList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.address === undefined) {
            message.address = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.address!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_AddressList {
    return {
      $type: DnsTable_AddressList.$type,
      address: globalThis.Array.isArray(object?.address)
        ? object.address.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: DnsTable_AddressList): unknown {
    const obj: any = {};
    if (message.address?.length) {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_AddressList>, I>>(base?: I): DnsTable_AddressList {
    return DnsTable_AddressList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_AddressList>, I>>(object: I): DnsTable_AddressList {
    const message = createBaseDnsTable_AddressList();
    message.address = object.address?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable_AddressList.$type, DnsTable_AddressList);

function createBaseDnsTable_DnsServiceProtocol(): DnsTable_DnsServiceProtocol {
  return { $type: "envoy.data.dns.v3.DnsTable.DnsServiceProtocol", protocol_config: undefined };
}

export const DnsTable_DnsServiceProtocol: MessageFns<
  DnsTable_DnsServiceProtocol,
  "envoy.data.dns.v3.DnsTable.DnsServiceProtocol"
> = {
  $type: "envoy.data.dns.v3.DnsTable.DnsServiceProtocol" as const,

  encode(message: DnsTable_DnsServiceProtocol, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.protocol_config?.$case) {
      case "number":
        writer.uint32(8).uint32(message.protocol_config.number);
        break;
      case "name":
        writer.uint32(18).string(message.protocol_config.name);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsServiceProtocol {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_DnsServiceProtocol();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocol_config = { $case: "number", number: reader.uint32() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.protocol_config = { $case: "name", name: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_DnsServiceProtocol {
    return {
      $type: DnsTable_DnsServiceProtocol.$type,
      protocol_config: isSet(object.number)
        ? { $case: "number", number: globalThis.Number(object.number) }
        : isSet(object.name)
        ? { $case: "name", name: globalThis.String(object.name) }
        : undefined,
    };
  },

  toJSON(message: DnsTable_DnsServiceProtocol): unknown {
    const obj: any = {};
    if (message.protocol_config?.$case === "number") {
      obj.number = Math.round(message.protocol_config.number);
    }
    if (message.protocol_config?.$case === "name") {
      obj.name = message.protocol_config.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_DnsServiceProtocol>, I>>(base?: I): DnsTable_DnsServiceProtocol {
    return DnsTable_DnsServiceProtocol.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_DnsServiceProtocol>, I>>(object: I): DnsTable_DnsServiceProtocol {
    const message = createBaseDnsTable_DnsServiceProtocol();
    if (
      object.protocol_config?.$case === "number" &&
      object.protocol_config?.number !== undefined &&
      object.protocol_config?.number !== null
    ) {
      message.protocol_config = { $case: "number", number: object.protocol_config.number };
    }
    if (
      object.protocol_config?.$case === "name" &&
      object.protocol_config?.name !== undefined &&
      object.protocol_config?.name !== null
    ) {
      message.protocol_config = { $case: "name", name: object.protocol_config.name };
    }
    return message;
  },
};

messageTypeRegistry.set(DnsTable_DnsServiceProtocol.$type, DnsTable_DnsServiceProtocol);

function createBaseDnsTable_DnsServiceTarget(): DnsTable_DnsServiceTarget {
  return { $type: "envoy.data.dns.v3.DnsTable.DnsServiceTarget", endpoint_type: undefined };
}

export const DnsTable_DnsServiceTarget: MessageFns<
  DnsTable_DnsServiceTarget,
  "envoy.data.dns.v3.DnsTable.DnsServiceTarget"
> = {
  $type: "envoy.data.dns.v3.DnsTable.DnsServiceTarget" as const,

  encode(message: DnsTable_DnsServiceTarget, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.endpoint_type?.$case) {
      case "host_name":
        writer.uint32(10).string(message.endpoint_type.host_name);
        break;
      case "cluster_name":
        writer.uint32(18).string(message.endpoint_type.cluster_name);
        break;
    }
    if (message.priority !== undefined && message.priority !== 0) {
      writer.uint32(24).uint32(message.priority);
    }
    if (message.weight !== undefined && message.weight !== 0) {
      writer.uint32(32).uint32(message.weight);
    }
    if (message.port !== undefined && message.port !== 0) {
      writer.uint32(40).uint32(message.port);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsServiceTarget {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_DnsServiceTarget();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpoint_type = { $case: "host_name", host_name: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpoint_type = { $case: "cluster_name", cluster_name: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.weight = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.port = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_DnsServiceTarget {
    return {
      $type: DnsTable_DnsServiceTarget.$type,
      endpoint_type: isSet(object.host_name)
        ? { $case: "host_name", host_name: globalThis.String(object.host_name) }
        : isSet(object.cluster_name)
        ? { $case: "cluster_name", cluster_name: globalThis.String(object.cluster_name) }
        : undefined,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : undefined,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      port: isSet(object.port) ? globalThis.Number(object.port) : undefined,
    };
  },

  toJSON(message: DnsTable_DnsServiceTarget): unknown {
    const obj: any = {};
    if (message.endpoint_type?.$case === "host_name") {
      obj.host_name = message.endpoint_type.host_name;
    }
    if (message.endpoint_type?.$case === "cluster_name") {
      obj.cluster_name = message.endpoint_type.cluster_name;
    }
    if (message.priority !== undefined) {
      obj.priority = Math.round(message.priority);
    }
    if (message.weight !== undefined) {
      obj.weight = Math.round(message.weight);
    }
    if (message.port !== undefined) {
      obj.port = Math.round(message.port);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_DnsServiceTarget>, I>>(base?: I): DnsTable_DnsServiceTarget {
    return DnsTable_DnsServiceTarget.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_DnsServiceTarget>, I>>(object: I): DnsTable_DnsServiceTarget {
    const message = createBaseDnsTable_DnsServiceTarget();
    if (
      object.endpoint_type?.$case === "host_name" &&
      object.endpoint_type?.host_name !== undefined &&
      object.endpoint_type?.host_name !== null
    ) {
      message.endpoint_type = { $case: "host_name", host_name: object.endpoint_type.host_name };
    }
    if (
      object.endpoint_type?.$case === "cluster_name" &&
      object.endpoint_type?.cluster_name !== undefined &&
      object.endpoint_type?.cluster_name !== null
    ) {
      message.endpoint_type = { $case: "cluster_name", cluster_name: object.endpoint_type.cluster_name };
    }
    message.priority = object.priority ?? undefined;
    message.weight = object.weight ?? undefined;
    message.port = object.port ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable_DnsServiceTarget.$type, DnsTable_DnsServiceTarget);

function createBaseDnsTable_DnsService(): DnsTable_DnsService {
  return { $type: "envoy.data.dns.v3.DnsTable.DnsService" };
}

export const DnsTable_DnsService: MessageFns<DnsTable_DnsService, "envoy.data.dns.v3.DnsTable.DnsService"> = {
  $type: "envoy.data.dns.v3.DnsTable.DnsService" as const,

  encode(message: DnsTable_DnsService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service_name !== undefined && message.service_name !== "") {
      writer.uint32(10).string(message.service_name);
    }
    if (message.protocol !== undefined) {
      DnsTable_DnsServiceProtocol.encode(message.protocol, writer.uint32(18).fork()).join();
    }
    if (message.ttl !== undefined) {
      Duration.encode(message.ttl, writer.uint32(26).fork()).join();
    }
    if (message.targets !== undefined && message.targets.length !== 0) {
      for (const v of message.targets) {
        DnsTable_DnsServiceTarget.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_DnsService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.protocol = DnsTable_DnsServiceProtocol.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ttl = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.targets === undefined) {
            message.targets = [];
          }
          const el = DnsTable_DnsServiceTarget.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.targets!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_DnsService {
    return {
      $type: DnsTable_DnsService.$type,
      service_name: isSet(object.service_name) ? globalThis.String(object.service_name) : undefined,
      protocol: isSet(object.protocol) ? DnsTable_DnsServiceProtocol.fromJSON(object.protocol) : undefined,
      ttl: isSet(object.ttl) ? Duration.fromJSON(object.ttl) : undefined,
      targets: globalThis.Array.isArray(object?.targets)
        ? object.targets.map((e: any) => DnsTable_DnsServiceTarget.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: DnsTable_DnsService): unknown {
    const obj: any = {};
    if (message.service_name !== undefined) {
      obj.service_name = message.service_name;
    }
    if (message.protocol !== undefined) {
      obj.protocol = DnsTable_DnsServiceProtocol.toJSON(message.protocol);
    }
    if (message.ttl !== undefined) {
      obj.ttl = Duration.toJSON(message.ttl);
    }
    if (message.targets?.length) {
      obj.targets = message.targets.map((e) => DnsTable_DnsServiceTarget.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_DnsService>, I>>(base?: I): DnsTable_DnsService {
    return DnsTable_DnsService.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_DnsService>, I>>(object: I): DnsTable_DnsService {
    const message = createBaseDnsTable_DnsService();
    message.service_name = object.service_name ?? undefined;
    message.protocol = (object.protocol !== undefined && object.protocol !== null)
      ? DnsTable_DnsServiceProtocol.fromPartial(object.protocol)
      : undefined;
    message.ttl = (object.ttl !== undefined && object.ttl !== null) ? Duration.fromPartial(object.ttl) : undefined;
    message.targets = object.targets?.map((e) => DnsTable_DnsServiceTarget.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable_DnsService.$type, DnsTable_DnsService);

function createBaseDnsTable_DnsServiceList(): DnsTable_DnsServiceList {
  return { $type: "envoy.data.dns.v3.DnsTable.DnsServiceList" };
}

export const DnsTable_DnsServiceList: MessageFns<DnsTable_DnsServiceList, "envoy.data.dns.v3.DnsTable.DnsServiceList"> =
  {
    $type: "envoy.data.dns.v3.DnsTable.DnsServiceList" as const,

    encode(message: DnsTable_DnsServiceList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.services !== undefined && message.services.length !== 0) {
        for (const v of message.services) {
          DnsTable_DnsService.encode(v!, writer.uint32(10).fork()).join();
        }
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsServiceList {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseDnsTable_DnsServiceList();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            if (message.services === undefined) {
              message.services = [];
            }
            const el = DnsTable_DnsService.decode(reader, reader.uint32());
            if (el !== undefined) {
              message.services!.push(el);
            }
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): DnsTable_DnsServiceList {
      return {
        $type: DnsTable_DnsServiceList.$type,
        services: globalThis.Array.isArray(object?.services)
          ? object.services.map((e: any) => DnsTable_DnsService.fromJSON(e))
          : undefined,
      };
    },

    toJSON(message: DnsTable_DnsServiceList): unknown {
      const obj: any = {};
      if (message.services?.length) {
        obj.services = message.services.map((e) => DnsTable_DnsService.toJSON(e));
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<DnsTable_DnsServiceList>, I>>(base?: I): DnsTable_DnsServiceList {
      return DnsTable_DnsServiceList.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<DnsTable_DnsServiceList>, I>>(object: I): DnsTable_DnsServiceList {
      const message = createBaseDnsTable_DnsServiceList();
      message.services = object.services?.map((e) => DnsTable_DnsService.fromPartial(e)) || undefined;
      return message;
    },
  };

messageTypeRegistry.set(DnsTable_DnsServiceList.$type, DnsTable_DnsServiceList);

function createBaseDnsTable_DnsEndpoint(): DnsTable_DnsEndpoint {
  return { $type: "envoy.data.dns.v3.DnsTable.DnsEndpoint", endpoint_config: undefined };
}

export const DnsTable_DnsEndpoint: MessageFns<DnsTable_DnsEndpoint, "envoy.data.dns.v3.DnsTable.DnsEndpoint"> = {
  $type: "envoy.data.dns.v3.DnsTable.DnsEndpoint" as const,

  encode(message: DnsTable_DnsEndpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.endpoint_config?.$case) {
      case "address_list":
        DnsTable_AddressList.encode(message.endpoint_config.address_list, writer.uint32(10).fork()).join();
        break;
      case "cluster_name":
        writer.uint32(18).string(message.endpoint_config.cluster_name);
        break;
      case "service_list":
        DnsTable_DnsServiceList.encode(message.endpoint_config.service_list, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsEndpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_DnsEndpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpoint_config = {
            $case: "address_list",
            address_list: DnsTable_AddressList.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpoint_config = { $case: "cluster_name", cluster_name: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.endpoint_config = {
            $case: "service_list",
            service_list: DnsTable_DnsServiceList.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_DnsEndpoint {
    return {
      $type: DnsTable_DnsEndpoint.$type,
      endpoint_config: isSet(object.address_list)
        ? { $case: "address_list", address_list: DnsTable_AddressList.fromJSON(object.address_list) }
        : isSet(object.cluster_name)
        ? { $case: "cluster_name", cluster_name: globalThis.String(object.cluster_name) }
        : isSet(object.service_list)
        ? { $case: "service_list", service_list: DnsTable_DnsServiceList.fromJSON(object.service_list) }
        : undefined,
    };
  },

  toJSON(message: DnsTable_DnsEndpoint): unknown {
    const obj: any = {};
    if (message.endpoint_config?.$case === "address_list") {
      obj.address_list = DnsTable_AddressList.toJSON(message.endpoint_config.address_list);
    }
    if (message.endpoint_config?.$case === "cluster_name") {
      obj.cluster_name = message.endpoint_config.cluster_name;
    }
    if (message.endpoint_config?.$case === "service_list") {
      obj.service_list = DnsTable_DnsServiceList.toJSON(message.endpoint_config.service_list);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_DnsEndpoint>, I>>(base?: I): DnsTable_DnsEndpoint {
    return DnsTable_DnsEndpoint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_DnsEndpoint>, I>>(object: I): DnsTable_DnsEndpoint {
    const message = createBaseDnsTable_DnsEndpoint();
    if (
      object.endpoint_config?.$case === "address_list" &&
      object.endpoint_config?.address_list !== undefined &&
      object.endpoint_config?.address_list !== null
    ) {
      message.endpoint_config = {
        $case: "address_list",
        address_list: DnsTable_AddressList.fromPartial(object.endpoint_config.address_list),
      };
    }
    if (
      object.endpoint_config?.$case === "cluster_name" &&
      object.endpoint_config?.cluster_name !== undefined &&
      object.endpoint_config?.cluster_name !== null
    ) {
      message.endpoint_config = { $case: "cluster_name", cluster_name: object.endpoint_config.cluster_name };
    }
    if (
      object.endpoint_config?.$case === "service_list" &&
      object.endpoint_config?.service_list !== undefined &&
      object.endpoint_config?.service_list !== null
    ) {
      message.endpoint_config = {
        $case: "service_list",
        service_list: DnsTable_DnsServiceList.fromPartial(object.endpoint_config.service_list),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(DnsTable_DnsEndpoint.$type, DnsTable_DnsEndpoint);

function createBaseDnsTable_DnsVirtualDomain(): DnsTable_DnsVirtualDomain {
  return { $type: "envoy.data.dns.v3.DnsTable.DnsVirtualDomain" };
}

export const DnsTable_DnsVirtualDomain: MessageFns<
  DnsTable_DnsVirtualDomain,
  "envoy.data.dns.v3.DnsTable.DnsVirtualDomain"
> = {
  $type: "envoy.data.dns.v3.DnsTable.DnsVirtualDomain" as const,

  encode(message: DnsTable_DnsVirtualDomain, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.endpoint !== undefined) {
      DnsTable_DnsEndpoint.encode(message.endpoint, writer.uint32(18).fork()).join();
    }
    if (message.answer_ttl !== undefined) {
      Duration.encode(message.answer_ttl, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsTable_DnsVirtualDomain {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsTable_DnsVirtualDomain();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpoint = DnsTable_DnsEndpoint.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.answer_ttl = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsTable_DnsVirtualDomain {
    return {
      $type: DnsTable_DnsVirtualDomain.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      endpoint: isSet(object.endpoint) ? DnsTable_DnsEndpoint.fromJSON(object.endpoint) : undefined,
      answer_ttl: isSet(object.answer_ttl) ? Duration.fromJSON(object.answer_ttl) : undefined,
    };
  },

  toJSON(message: DnsTable_DnsVirtualDomain): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.endpoint !== undefined) {
      obj.endpoint = DnsTable_DnsEndpoint.toJSON(message.endpoint);
    }
    if (message.answer_ttl !== undefined) {
      obj.answer_ttl = Duration.toJSON(message.answer_ttl);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsTable_DnsVirtualDomain>, I>>(base?: I): DnsTable_DnsVirtualDomain {
    return DnsTable_DnsVirtualDomain.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsTable_DnsVirtualDomain>, I>>(object: I): DnsTable_DnsVirtualDomain {
    const message = createBaseDnsTable_DnsVirtualDomain();
    message.name = object.name ?? undefined;
    message.endpoint = (object.endpoint !== undefined && object.endpoint !== null)
      ? DnsTable_DnsEndpoint.fromPartial(object.endpoint)
      : undefined;
    message.answer_ttl = (object.answer_ttl !== undefined && object.answer_ttl !== null)
      ? Duration.fromPartial(object.answer_ttl)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsTable_DnsVirtualDomain.$type, DnsTable_DnsVirtualDomain);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
