// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/v3/node.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { StringMatcher } from "./string";
import { StructMatcher } from "./struct";

export const protobufPackage = "envoy.type.matcher.v3";

/**
 * Specifies the way to match a Node.
 * The match follows AND semantics.
 */
export interface NodeMatcher {
  $type: "envoy.type.matcher.v3.NodeMatcher";
  /** Specifies match criteria on the node id. */
  node_id?:
    | StringMatcher
    | undefined;
  /** Specifies match criteria on the node metadata. */
  node_metadatas?: StructMatcher[] | undefined;
}

function createBaseNodeMatcher(): NodeMatcher {
  return { $type: "envoy.type.matcher.v3.NodeMatcher" };
}

export const NodeMatcher: MessageFns<NodeMatcher, "envoy.type.matcher.v3.NodeMatcher"> = {
  $type: "envoy.type.matcher.v3.NodeMatcher" as const,

  encode(message: NodeMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.node_id !== undefined) {
      StringMatcher.encode(message.node_id, writer.uint32(10).fork()).join();
    }
    if (message.node_metadatas !== undefined && message.node_metadatas.length !== 0) {
      for (const v of message.node_metadatas) {
        StructMatcher.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NodeMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNodeMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.node_id = StringMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.node_metadatas === undefined) {
            message.node_metadatas = [];
          }
          const el = StructMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.node_metadatas!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NodeMatcher {
    return {
      $type: NodeMatcher.$type,
      node_id: isSet(object.node_id) ? StringMatcher.fromJSON(object.node_id) : undefined,
      node_metadatas: globalThis.Array.isArray(object?.node_metadatas)
        ? object.node_metadatas.map((e: any) => StructMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: NodeMatcher): unknown {
    const obj: any = {};
    if (message.node_id !== undefined) {
      obj.node_id = StringMatcher.toJSON(message.node_id);
    }
    if (message.node_metadatas?.length) {
      obj.node_metadatas = message.node_metadatas.map((e) => StructMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NodeMatcher>, I>>(base?: I): NodeMatcher {
    return NodeMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NodeMatcher>, I>>(object: I): NodeMatcher {
    const message = createBaseNodeMatcher();
    message.node_id = (object.node_id !== undefined && object.node_id !== null)
      ? StringMatcher.fromPartial(object.node_id)
      : undefined;
    message.node_metadatas = object.node_metadatas?.map((e) => StructMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(NodeMatcher.$type, NodeMatcher);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
