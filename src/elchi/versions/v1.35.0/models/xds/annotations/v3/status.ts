// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: xds/annotations/v3/status.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xds.annotations.v3";

export enum PackageVersionStatus {
  /** UNKNOWN - Unknown package version status. */
  UNKNOWN = "UNKNOWN",
  /** FROZEN - This version of the package is frozen. */
  FROZEN = "FROZEN",
  /** ACTIVE - This version of the package is the active development version. */
  ACTIVE = "ACTIVE",
  /**
   * NEXT_MAJOR_VERSION_CANDIDATE - This version of the package is the candidate for the next major version. It
   * is typically machine generated from the active development version.
   */
  NEXT_MAJOR_VERSION_CANDIDATE = "NEXT_MAJOR_VERSION_CANDIDATE",
}

export function packageVersionStatusFromJSON(object: any): PackageVersionStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return PackageVersionStatus.UNKNOWN;
    case 1:
    case "FROZEN":
      return PackageVersionStatus.FROZEN;
    case 2:
    case "ACTIVE":
      return PackageVersionStatus.ACTIVE;
    case 3:
    case "NEXT_MAJOR_VERSION_CANDIDATE":
      return PackageVersionStatus.NEXT_MAJOR_VERSION_CANDIDATE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PackageVersionStatus");
  }
}

export function packageVersionStatusToJSON(object: PackageVersionStatus): string {
  switch (object) {
    case PackageVersionStatus.UNKNOWN:
      return "UNKNOWN";
    case PackageVersionStatus.FROZEN:
      return "FROZEN";
    case PackageVersionStatus.ACTIVE:
      return "ACTIVE";
    case PackageVersionStatus.NEXT_MAJOR_VERSION_CANDIDATE:
      return "NEXT_MAJOR_VERSION_CANDIDATE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PackageVersionStatus");
  }
}

export function packageVersionStatusToNumber(object: PackageVersionStatus): number {
  switch (object) {
    case PackageVersionStatus.UNKNOWN:
      return 0;
    case PackageVersionStatus.FROZEN:
      return 1;
    case PackageVersionStatus.ACTIVE:
      return 2;
    case PackageVersionStatus.NEXT_MAJOR_VERSION_CANDIDATE:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PackageVersionStatus");
  }
}

export interface FileStatusAnnotation {
  $type: "xds.annotations.v3.FileStatusAnnotation";
  /** The entity is work-in-progress and subject to breaking changes. */
  work_in_progress?: boolean | undefined;
}

export interface MessageStatusAnnotation {
  $type: "xds.annotations.v3.MessageStatusAnnotation";
  /** The entity is work-in-progress and subject to breaking changes. */
  work_in_progress?: boolean | undefined;
}

export interface FieldStatusAnnotation {
  $type: "xds.annotations.v3.FieldStatusAnnotation";
  /** The entity is work-in-progress and subject to breaking changes. */
  work_in_progress?: boolean | undefined;
}

export interface StatusAnnotation {
  $type: "xds.annotations.v3.StatusAnnotation";
  /** The entity is work-in-progress and subject to breaking changes. */
  work_in_progress?:
    | boolean
    | undefined;
  /** The entity belongs to a package with the given version status. */
  package_version_status?: PackageVersionStatus | undefined;
}

function createBaseFileStatusAnnotation(): FileStatusAnnotation {
  return { $type: "xds.annotations.v3.FileStatusAnnotation" };
}

export const FileStatusAnnotation: MessageFns<FileStatusAnnotation, "xds.annotations.v3.FileStatusAnnotation"> = {
  $type: "xds.annotations.v3.FileStatusAnnotation" as const,

  encode(message: FileStatusAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.work_in_progress !== undefined && message.work_in_progress !== false) {
      writer.uint32(8).bool(message.work_in_progress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileStatusAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileStatusAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.work_in_progress = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileStatusAnnotation {
    return {
      $type: FileStatusAnnotation.$type,
      work_in_progress: isSet(object.work_in_progress) ? globalThis.Boolean(object.work_in_progress) : undefined,
    };
  },

  toJSON(message: FileStatusAnnotation): unknown {
    const obj: any = {};
    if (message.work_in_progress !== undefined) {
      obj.work_in_progress = message.work_in_progress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileStatusAnnotation>, I>>(base?: I): FileStatusAnnotation {
    return FileStatusAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileStatusAnnotation>, I>>(object: I): FileStatusAnnotation {
    const message = createBaseFileStatusAnnotation();
    message.work_in_progress = object.work_in_progress ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FileStatusAnnotation.$type, FileStatusAnnotation);

function createBaseMessageStatusAnnotation(): MessageStatusAnnotation {
  return { $type: "xds.annotations.v3.MessageStatusAnnotation" };
}

export const MessageStatusAnnotation: MessageFns<
  MessageStatusAnnotation,
  "xds.annotations.v3.MessageStatusAnnotation"
> = {
  $type: "xds.annotations.v3.MessageStatusAnnotation" as const,

  encode(message: MessageStatusAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.work_in_progress !== undefined && message.work_in_progress !== false) {
      writer.uint32(8).bool(message.work_in_progress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageStatusAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageStatusAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.work_in_progress = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageStatusAnnotation {
    return {
      $type: MessageStatusAnnotation.$type,
      work_in_progress: isSet(object.work_in_progress) ? globalThis.Boolean(object.work_in_progress) : undefined,
    };
  },

  toJSON(message: MessageStatusAnnotation): unknown {
    const obj: any = {};
    if (message.work_in_progress !== undefined) {
      obj.work_in_progress = message.work_in_progress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageStatusAnnotation>, I>>(base?: I): MessageStatusAnnotation {
    return MessageStatusAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageStatusAnnotation>, I>>(object: I): MessageStatusAnnotation {
    const message = createBaseMessageStatusAnnotation();
    message.work_in_progress = object.work_in_progress ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(MessageStatusAnnotation.$type, MessageStatusAnnotation);

function createBaseFieldStatusAnnotation(): FieldStatusAnnotation {
  return { $type: "xds.annotations.v3.FieldStatusAnnotation" };
}

export const FieldStatusAnnotation: MessageFns<FieldStatusAnnotation, "xds.annotations.v3.FieldStatusAnnotation"> = {
  $type: "xds.annotations.v3.FieldStatusAnnotation" as const,

  encode(message: FieldStatusAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.work_in_progress !== undefined && message.work_in_progress !== false) {
      writer.uint32(8).bool(message.work_in_progress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldStatusAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldStatusAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.work_in_progress = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldStatusAnnotation {
    return {
      $type: FieldStatusAnnotation.$type,
      work_in_progress: isSet(object.work_in_progress) ? globalThis.Boolean(object.work_in_progress) : undefined,
    };
  },

  toJSON(message: FieldStatusAnnotation): unknown {
    const obj: any = {};
    if (message.work_in_progress !== undefined) {
      obj.work_in_progress = message.work_in_progress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FieldStatusAnnotation>, I>>(base?: I): FieldStatusAnnotation {
    return FieldStatusAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FieldStatusAnnotation>, I>>(object: I): FieldStatusAnnotation {
    const message = createBaseFieldStatusAnnotation();
    message.work_in_progress = object.work_in_progress ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FieldStatusAnnotation.$type, FieldStatusAnnotation);

function createBaseStatusAnnotation(): StatusAnnotation {
  return { $type: "xds.annotations.v3.StatusAnnotation" };
}

export const StatusAnnotation: MessageFns<StatusAnnotation, "xds.annotations.v3.StatusAnnotation"> = {
  $type: "xds.annotations.v3.StatusAnnotation" as const,

  encode(message: StatusAnnotation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.work_in_progress !== undefined && message.work_in_progress !== false) {
      writer.uint32(8).bool(message.work_in_progress);
    }
    if (
      message.package_version_status !== undefined && message.package_version_status !== PackageVersionStatus.UNKNOWN
    ) {
      writer.uint32(16).int32(packageVersionStatusToNumber(message.package_version_status));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StatusAnnotation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatusAnnotation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.work_in_progress = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.package_version_status = packageVersionStatusFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StatusAnnotation {
    return {
      $type: StatusAnnotation.$type,
      work_in_progress: isSet(object.work_in_progress) ? globalThis.Boolean(object.work_in_progress) : undefined,
      package_version_status: isSet(object.package_version_status)
        ? packageVersionStatusFromJSON(object.package_version_status)
        : undefined,
    };
  },

  toJSON(message: StatusAnnotation): unknown {
    const obj: any = {};
    if (message.work_in_progress !== undefined) {
      obj.work_in_progress = message.work_in_progress;
    }
    if (message.package_version_status !== undefined) {
      obj.package_version_status = packageVersionStatusToJSON(message.package_version_status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StatusAnnotation>, I>>(base?: I): StatusAnnotation {
    return StatusAnnotation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StatusAnnotation>, I>>(object: I): StatusAnnotation {
    const message = createBaseStatusAnnotation();
    message.work_in_progress = object.work_in_progress ?? undefined;
    message.package_version_status = object.package_version_status ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(StatusAnnotation.$type, StatusAnnotation);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
