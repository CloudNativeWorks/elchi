// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v3/http_tracer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../google/protobuf/any";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.config.trace.v3";

/**
 * The tracing configuration specifies settings for an HTTP tracer provider used by Envoy.
 *
 * Envoy may support other tracers in the future, but right now the HTTP tracer is the only one
 * supported.
 *
 * .. attention::
 *
 *   Use of this message type has been deprecated in favor of direct use of
 *   :ref:`Tracing.Http <envoy_v3_api_msg_config.trace.v3.Tracing.Http>`.
 */
export interface Tracing {
  $type: "envoy.config.trace.v3.Tracing";
  /** Provides configuration for the HTTP tracer. */
  http?: Tracing_Http | undefined;
}

/**
 * Configuration for an HTTP tracer provider used by Envoy.
 *
 * The configuration is defined by the
 * :ref:`HttpConnectionManager.Tracing <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing>`
 * :ref:`provider <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider>`
 * field.
 */
export interface Tracing_Http {
  $type: "envoy.config.trace.v3.Tracing.Http";
  /**
   * The name of the HTTP trace driver to instantiate. The name must match a
   * supported HTTP trace driver.
   * See the :ref:`extensions listed in typed_config below <extension_category_envoy.tracers>` for the default list of the HTTP trace driver.
   */
  name?:
    | string
    | undefined;
  /**
   * Trace driver specific configuration which must be set according to the driver being instantiated.
   * [#extension-category: envoy.tracers]
   */
  config_type?:
    | //
    { $case: "typed_config"; typed_config: Any }
    | undefined;
}

function createBaseTracing(): Tracing {
  return { $type: "envoy.config.trace.v3.Tracing" };
}

export const Tracing: MessageFns<Tracing, "envoy.config.trace.v3.Tracing"> = {
  $type: "envoy.config.trace.v3.Tracing" as const,

  encode(message: Tracing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.http !== undefined) {
      Tracing_Http.encode(message.http, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tracing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTracing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.http = Tracing_Http.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tracing {
    return { $type: Tracing.$type, http: isSet(object.http) ? Tracing_Http.fromJSON(object.http) : undefined };
  },

  toJSON(message: Tracing): unknown {
    const obj: any = {};
    if (message.http !== undefined) {
      obj.http = Tracing_Http.toJSON(message.http);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tracing>, I>>(base?: I): Tracing {
    return Tracing.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tracing>, I>>(object: I): Tracing {
    const message = createBaseTracing();
    message.http = (object.http !== undefined && object.http !== null)
      ? Tracing_Http.fromPartial(object.http)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Tracing.$type, Tracing);

function createBaseTracing_Http(): Tracing_Http {
  return { $type: "envoy.config.trace.v3.Tracing.Http", config_type: undefined };
}

export const Tracing_Http: MessageFns<Tracing_Http, "envoy.config.trace.v3.Tracing.Http"> = {
  $type: "envoy.config.trace.v3.Tracing.Http" as const,

  encode(message: Tracing_Http, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    switch (message.config_type?.$case) {
      case "typed_config":
        Any.encode(message.config_type.typed_config, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tracing_Http {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTracing_Http();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.config_type = { $case: "typed_config", typed_config: Any.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tracing_Http {
    return {
      $type: Tracing_Http.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      config_type: isSet(object.typed_config)
        ? { $case: "typed_config", typed_config: Any.fromJSON(object.typed_config) }
        : undefined,
    };
  },

  toJSON(message: Tracing_Http): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.config_type?.$case === "typed_config") {
      obj.typed_config = Any.toJSON(message.config_type.typed_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tracing_Http>, I>>(base?: I): Tracing_Http {
    return Tracing_Http.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tracing_Http>, I>>(object: I): Tracing_Http {
    const message = createBaseTracing_Http();
    message.name = object.name ?? undefined;
    if (
      object.config_type?.$case === "typed_config" &&
      object.config_type?.typed_config !== undefined &&
      object.config_type?.typed_config !== null
    ) {
      message.config_type = { $case: "typed_config", typed_config: Any.fromPartial(object.config_type.typed_config) };
    }
    return message;
  },
};

messageTypeRegistry.set(Tracing_Http.$type, Tracing_Http);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
