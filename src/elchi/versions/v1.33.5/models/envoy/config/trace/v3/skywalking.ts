// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v3/skywalking.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { GrpcService } from "../../core/v3/grpc_service";

export const protobufPackage = "envoy.config.trace.v3";

/**
 * Configuration for the SkyWalking tracer. Please note that if SkyWalking tracer is used as the
 * provider of tracing, then
 * :ref:`spawn_upstream_span <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.spawn_upstream_span>`
 * in the tracing config must be set to true to get the correct topology and tracing data. Moreover, SkyWalking
 * Tracer does not support SkyWalking extension header (``sw8-x``) temporarily.
 * [#extension: envoy.tracers.skywalking]
 */
export interface SkyWalkingConfig {
  $type: "envoy.config.trace.v3.SkyWalkingConfig";
  /** SkyWalking collector service. */
  grpc_service?: GrpcService | undefined;
  client_config?: ClientConfig | undefined;
}

/** Client config for SkyWalking tracer. */
export interface ClientConfig {
  $type: "envoy.config.trace.v3.ClientConfig";
  /**
   * Service name for SkyWalking tracer. If this field is empty, then local service cluster name
   * that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
   * message's :ref:`cluster <envoy_v3_api_field_config.core.v3.Node.cluster>` field or command line
   * option :option:`--service-cluster` will be used. If both this field and local service cluster
   * name are empty, ``EnvoyProxy`` is used as the service name by default.
   */
  service_name?:
    | string
    | undefined;
  /**
   * Service instance name for SkyWalking tracer. If this field is empty, then local service node
   * that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
   * message's :ref:`id <envoy_v3_api_field_config.core.v3.Node.id>` field or command line  option
   * :option:`--service-node` will be used. If both this field and local service node are empty,
   * ``EnvoyProxy`` is used as the instance name by default.
   */
  instance_name?:
    | string
    | undefined;
  /**
   * Authentication token config for SkyWalking. SkyWalking can use token authentication to secure
   * that monitoring application data can be trusted. In current version, Token is considered as a
   * simple string.
   * [#comment:TODO(wbpcode): Get backend token through the SDS API.]
   */
  backend_token_specifier?:
    | //
    /** Inline authentication token string. */
    { $case: "backend_token"; backend_token: string }
    | undefined;
  /**
   * Envoy caches the segment in memory when the SkyWalking backend service is temporarily unavailable.
   * This field specifies the maximum number of segments that can be cached. If not specified, the
   * default is 1024.
   */
  max_cache_size?: number | undefined;
}

function createBaseSkyWalkingConfig(): SkyWalkingConfig {
  return { $type: "envoy.config.trace.v3.SkyWalkingConfig" };
}

export const SkyWalkingConfig: MessageFns<SkyWalkingConfig, "envoy.config.trace.v3.SkyWalkingConfig"> = {
  $type: "envoy.config.trace.v3.SkyWalkingConfig" as const,

  encode(message: SkyWalkingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(10).fork()).join();
    }
    if (message.client_config !== undefined) {
      ClientConfig.encode(message.client_config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SkyWalkingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkyWalkingConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.client_config = ClientConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SkyWalkingConfig {
    return {
      $type: SkyWalkingConfig.$type,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
      client_config: isSet(object.client_config) ? ClientConfig.fromJSON(object.client_config) : undefined,
    };
  },

  toJSON(message: SkyWalkingConfig): unknown {
    const obj: any = {};
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    if (message.client_config !== undefined) {
      obj.client_config = ClientConfig.toJSON(message.client_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SkyWalkingConfig>, I>>(base?: I): SkyWalkingConfig {
    return SkyWalkingConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SkyWalkingConfig>, I>>(object: I): SkyWalkingConfig {
    const message = createBaseSkyWalkingConfig();
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    message.client_config = (object.client_config !== undefined && object.client_config !== null)
      ? ClientConfig.fromPartial(object.client_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SkyWalkingConfig.$type, SkyWalkingConfig);

function createBaseClientConfig(): ClientConfig {
  return { $type: "envoy.config.trace.v3.ClientConfig", backend_token_specifier: undefined };
}

export const ClientConfig: MessageFns<ClientConfig, "envoy.config.trace.v3.ClientConfig"> = {
  $type: "envoy.config.trace.v3.ClientConfig" as const,

  encode(message: ClientConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.service_name !== undefined && message.service_name !== "") {
      writer.uint32(10).string(message.service_name);
    }
    if (message.instance_name !== undefined && message.instance_name !== "") {
      writer.uint32(18).string(message.instance_name);
    }
    switch (message.backend_token_specifier?.$case) {
      case "backend_token":
        writer.uint32(26).string(message.backend_token_specifier.backend_token);
        break;
    }
    if (message.max_cache_size !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_cache_size! },
        writer.uint32(34).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.service_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.instance_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.backend_token_specifier = { $case: "backend_token", backend_token: reader.string() };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.max_cache_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConfig {
    return {
      $type: ClientConfig.$type,
      service_name: isSet(object.service_name) ? globalThis.String(object.service_name) : undefined,
      instance_name: isSet(object.instance_name) ? globalThis.String(object.instance_name) : undefined,
      backend_token_specifier: isSet(object.backend_token)
        ? { $case: "backend_token", backend_token: globalThis.String(object.backend_token) }
        : undefined,
      max_cache_size: isSet(object.max_cache_size) ? Number(object.max_cache_size) : undefined,
    };
  },

  toJSON(message: ClientConfig): unknown {
    const obj: any = {};
    if (message.service_name !== undefined) {
      obj.service_name = message.service_name;
    }
    if (message.instance_name !== undefined) {
      obj.instance_name = message.instance_name;
    }
    if (message.backend_token_specifier?.$case === "backend_token") {
      obj.backend_token = message.backend_token_specifier.backend_token;
    }
    if (message.max_cache_size !== undefined) {
      obj.max_cache_size = message.max_cache_size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientConfig>, I>>(base?: I): ClientConfig {
    return ClientConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientConfig>, I>>(object: I): ClientConfig {
    const message = createBaseClientConfig();
    message.service_name = object.service_name ?? undefined;
    message.instance_name = object.instance_name ?? undefined;
    if (
      object.backend_token_specifier?.$case === "backend_token" &&
      object.backend_token_specifier?.backend_token !== undefined &&
      object.backend_token_specifier?.backend_token !== null
    ) {
      message.backend_token_specifier = {
        $case: "backend_token",
        backend_token: object.backend_token_specifier.backend_token,
      };
    }
    message.max_cache_size = object.max_cache_size ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ClientConfig.$type, ClientConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
