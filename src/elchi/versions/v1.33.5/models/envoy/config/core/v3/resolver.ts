// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/core/v3/resolver.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Address } from "./address";

export const protobufPackage = "envoy.config.core.v3";

/** Configuration of DNS resolver option flags which control the behavior of the DNS resolver. */
export interface DnsResolverOptions {
  $type: "envoy.config.core.v3.DnsResolverOptions";
  /** Use TCP for all DNS queries instead of the default protocol UDP. */
  use_tcp_for_dns_lookups?:
    | boolean
    | undefined;
  /** Do not use the default search domains; only query hostnames as-is or as aliases. */
  no_default_search_domain?: boolean | undefined;
}

/** DNS resolution configuration which includes the underlying dns resolver addresses and options. */
export interface DnsResolutionConfig {
  $type: "envoy.config.core.v3.DnsResolutionConfig";
  /**
   * A list of dns resolver addresses. If specified, the DNS client library will perform resolution
   * via the underlying DNS resolvers. Otherwise, the default system resolvers
   * (e.g., /etc/resolv.conf) will be used.
   */
  resolvers?:
    | Address[]
    | undefined;
  /** Configuration of DNS resolver option flags which control the behavior of the DNS resolver. */
  dns_resolver_options?: DnsResolverOptions | undefined;
}

function createBaseDnsResolverOptions(): DnsResolverOptions {
  return { $type: "envoy.config.core.v3.DnsResolverOptions" };
}

export const DnsResolverOptions: MessageFns<DnsResolverOptions, "envoy.config.core.v3.DnsResolverOptions"> = {
  $type: "envoy.config.core.v3.DnsResolverOptions" as const,

  encode(message: DnsResolverOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.use_tcp_for_dns_lookups !== undefined && message.use_tcp_for_dns_lookups !== false) {
      writer.uint32(8).bool(message.use_tcp_for_dns_lookups);
    }
    if (message.no_default_search_domain !== undefined && message.no_default_search_domain !== false) {
      writer.uint32(16).bool(message.no_default_search_domain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsResolverOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsResolverOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.use_tcp_for_dns_lookups = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.no_default_search_domain = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsResolverOptions {
    return {
      $type: DnsResolverOptions.$type,
      use_tcp_for_dns_lookups: isSet(object.use_tcp_for_dns_lookups)
        ? globalThis.Boolean(object.use_tcp_for_dns_lookups)
        : undefined,
      no_default_search_domain: isSet(object.no_default_search_domain)
        ? globalThis.Boolean(object.no_default_search_domain)
        : undefined,
    };
  },

  toJSON(message: DnsResolverOptions): unknown {
    const obj: any = {};
    if (message.use_tcp_for_dns_lookups !== undefined) {
      obj.use_tcp_for_dns_lookups = message.use_tcp_for_dns_lookups;
    }
    if (message.no_default_search_domain !== undefined) {
      obj.no_default_search_domain = message.no_default_search_domain;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsResolverOptions>, I>>(base?: I): DnsResolverOptions {
    return DnsResolverOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsResolverOptions>, I>>(object: I): DnsResolverOptions {
    const message = createBaseDnsResolverOptions();
    message.use_tcp_for_dns_lookups = object.use_tcp_for_dns_lookups ?? undefined;
    message.no_default_search_domain = object.no_default_search_domain ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsResolverOptions.$type, DnsResolverOptions);

function createBaseDnsResolutionConfig(): DnsResolutionConfig {
  return { $type: "envoy.config.core.v3.DnsResolutionConfig" };
}

export const DnsResolutionConfig: MessageFns<DnsResolutionConfig, "envoy.config.core.v3.DnsResolutionConfig"> = {
  $type: "envoy.config.core.v3.DnsResolutionConfig" as const,

  encode(message: DnsResolutionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resolvers !== undefined && message.resolvers.length !== 0) {
      for (const v of message.resolvers) {
        Address.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.dns_resolver_options !== undefined) {
      DnsResolverOptions.encode(message.dns_resolver_options, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DnsResolutionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDnsResolutionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.resolvers === undefined) {
            message.resolvers = [];
          }
          const el = Address.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.resolvers!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dns_resolver_options = DnsResolverOptions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DnsResolutionConfig {
    return {
      $type: DnsResolutionConfig.$type,
      resolvers: globalThis.Array.isArray(object?.resolvers)
        ? object.resolvers.map((e: any) => Address.fromJSON(e))
        : undefined,
      dns_resolver_options: isSet(object.dns_resolver_options)
        ? DnsResolverOptions.fromJSON(object.dns_resolver_options)
        : undefined,
    };
  },

  toJSON(message: DnsResolutionConfig): unknown {
    const obj: any = {};
    if (message.resolvers?.length) {
      obj.resolvers = message.resolvers.map((e) => Address.toJSON(e));
    }
    if (message.dns_resolver_options !== undefined) {
      obj.dns_resolver_options = DnsResolverOptions.toJSON(message.dns_resolver_options);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DnsResolutionConfig>, I>>(base?: I): DnsResolutionConfig {
    return DnsResolutionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DnsResolutionConfig>, I>>(object: I): DnsResolutionConfig {
    const message = createBaseDnsResolutionConfig();
    message.resolvers = object.resolvers?.map((e) => Address.fromPartial(e)) || undefined;
    message.dns_resolver_options = (object.dns_resolver_options !== undefined && object.dns_resolver_options !== null)
      ? DnsResolverOptions.fromPartial(object.dns_resolver_options)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DnsResolutionConfig.$type, DnsResolutionConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
