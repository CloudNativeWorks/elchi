// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/rate_limit/v2/rate_limit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RateLimitDescriptor } from "../../../../../api/v2/ratelimit/ratelimit";
import { RateLimitServiceConfig } from "../../../../ratelimit/v2/rls";

export const protobufPackage = "envoy.config.filter.network.rate_limit.v2";

/** [#next-free-field: 7] */
export interface RateLimit {
  $type: "envoy.config.filter.network.rate_limit.v2.RateLimit";
  /** The prefix to use when emitting :ref:`statistics <config_network_filters_rate_limit_stats>`. */
  stat_prefix?:
    | string
    | undefined;
  /** The rate limit domain to use in the rate limit service request. */
  domain?:
    | string
    | undefined;
  /** The rate limit descriptor list to use in the rate limit service request. */
  descriptors?:
    | RateLimitDescriptor[]
    | undefined;
  /**
   * The timeout in milliseconds for the rate limit service RPC. If not
   * set, this defaults to 20ms.
   */
  timeout?:
    | Duration
    | undefined;
  /**
   * The filter's behaviour in case the rate limiting service does
   * not respond back. When it is set to true, Envoy will not allow traffic in case of
   * communication failure between rate limiting service and the proxy.
   * Defaults to false.
   */
  failure_mode_deny?:
    | boolean
    | undefined;
  /**
   * Configuration for an external rate limit service provider. If not
   * specified, any calls to the rate limit service will immediately return
   * success.
   */
  rate_limit_service?: RateLimitServiceConfig | undefined;
}

function createBaseRateLimit(): RateLimit {
  return { $type: "envoy.config.filter.network.rate_limit.v2.RateLimit" };
}

export const RateLimit: MessageFns<RateLimit, "envoy.config.filter.network.rate_limit.v2.RateLimit"> = {
  $type: "envoy.config.filter.network.rate_limit.v2.RateLimit" as const,

  encode(message: RateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.domain !== undefined && message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    if (message.descriptors !== undefined && message.descriptors.length !== 0) {
      for (const v of message.descriptors) {
        RateLimitDescriptor.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(34).fork()).join();
    }
    if (message.failure_mode_deny !== undefined && message.failure_mode_deny !== false) {
      writer.uint32(40).bool(message.failure_mode_deny);
    }
    if (message.rate_limit_service !== undefined) {
      RateLimitServiceConfig.encode(message.rate_limit_service, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.descriptors === undefined) {
            message.descriptors = [];
          }
          const el = RateLimitDescriptor.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.descriptors!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.failure_mode_deny = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rate_limit_service = RateLimitServiceConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RateLimit {
    return {
      $type: RateLimit.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      domain: isSet(object.domain) ? globalThis.String(object.domain) : undefined,
      descriptors: globalThis.Array.isArray(object?.descriptors)
        ? object.descriptors.map((e: any) => RateLimitDescriptor.fromJSON(e))
        : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      failure_mode_deny: isSet(object.failure_mode_deny) ? globalThis.Boolean(object.failure_mode_deny) : undefined,
      rate_limit_service: isSet(object.rate_limit_service)
        ? RateLimitServiceConfig.fromJSON(object.rate_limit_service)
        : undefined,
    };
  },

  toJSON(message: RateLimit): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.domain !== undefined) {
      obj.domain = message.domain;
    }
    if (message.descriptors?.length) {
      obj.descriptors = message.descriptors.map((e) => RateLimitDescriptor.toJSON(e));
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.failure_mode_deny !== undefined) {
      obj.failure_mode_deny = message.failure_mode_deny;
    }
    if (message.rate_limit_service !== undefined) {
      obj.rate_limit_service = RateLimitServiceConfig.toJSON(message.rate_limit_service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RateLimit>, I>>(base?: I): RateLimit {
    return RateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RateLimit>, I>>(object: I): RateLimit {
    const message = createBaseRateLimit();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.domain = object.domain ?? undefined;
    message.descriptors = object.descriptors?.map((e) => RateLimitDescriptor.fromPartial(e)) || undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.failure_mode_deny = object.failure_mode_deny ?? undefined;
    message.rate_limit_service = (object.rate_limit_service !== undefined && object.rate_limit_service !== null)
      ? RateLimitServiceConfig.fromPartial(object.rate_limit_service)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(RateLimit.$type, RateLimit);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
