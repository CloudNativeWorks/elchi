// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/load_balancing_policies/maglev/v3/maglev.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt64Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { ConsistentHashingLbConfig, LocalityLbConfig_LocalityWeightedLbConfig } from "../../common/v3/common";

export const protobufPackage = "envoy.extensions.load_balancing_policies.maglev.v3";

/**
 * This configuration allows the built-in Maglev LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` and :ref:`Maglev<arch_overview_load_balancing_types_maglev>` for more information.
 */
export interface Maglev {
  $type: "envoy.extensions.load_balancing_policies.maglev.v3.Maglev";
  /**
   * The table size for Maglev hashing. Maglev aims for "minimal disruption" rather than an absolute guarantee.
   * Minimal disruption means that when the set of upstream hosts change, a connection will likely be sent to the same
   * upstream as it was before. Increasing the table size reduces the amount of disruption.
   * The table size must be prime number limited to 5000011. If it is not specified, the default is 65537.
   */
  table_size?:
    | number
    | undefined;
  /** Common configuration for hashing-based load balancing policies. */
  consistent_hashing_lb_config?:
    | ConsistentHashingLbConfig
    | undefined;
  /** Enable locality weighted load balancing for maglev lb explicitly. */
  locality_weighted_lb_config?: LocalityLbConfig_LocalityWeightedLbConfig | undefined;
}

function createBaseMaglev(): Maglev {
  return { $type: "envoy.extensions.load_balancing_policies.maglev.v3.Maglev" };
}

export const Maglev: MessageFns<Maglev, "envoy.extensions.load_balancing_policies.maglev.v3.Maglev"> = {
  $type: "envoy.extensions.load_balancing_policies.maglev.v3.Maglev" as const,

  encode(message: Maglev, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.table_size !== undefined) {
      UInt64Value.encode({ $type: "google.protobuf.UInt64Value", value: message.table_size! }, writer.uint32(10).fork())
        .join();
    }
    if (message.consistent_hashing_lb_config !== undefined) {
      ConsistentHashingLbConfig.encode(message.consistent_hashing_lb_config, writer.uint32(18).fork()).join();
    }
    if (message.locality_weighted_lb_config !== undefined) {
      LocalityLbConfig_LocalityWeightedLbConfig.encode(message.locality_weighted_lb_config, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Maglev {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaglev();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.table_size = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.consistent_hashing_lb_config = ConsistentHashingLbConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.locality_weighted_lb_config = LocalityLbConfig_LocalityWeightedLbConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Maglev {
    return {
      $type: Maglev.$type,
      table_size: isSet(object.table_size) ? Number(object.table_size) : undefined,
      consistent_hashing_lb_config: isSet(object.consistent_hashing_lb_config)
        ? ConsistentHashingLbConfig.fromJSON(object.consistent_hashing_lb_config)
        : undefined,
      locality_weighted_lb_config: isSet(object.locality_weighted_lb_config)
        ? LocalityLbConfig_LocalityWeightedLbConfig.fromJSON(object.locality_weighted_lb_config)
        : undefined,
    };
  },

  toJSON(message: Maglev): unknown {
    const obj: any = {};
    if (message.table_size !== undefined) {
      obj.table_size = message.table_size;
    }
    if (message.consistent_hashing_lb_config !== undefined) {
      obj.consistent_hashing_lb_config = ConsistentHashingLbConfig.toJSON(message.consistent_hashing_lb_config);
    }
    if (message.locality_weighted_lb_config !== undefined) {
      obj.locality_weighted_lb_config = LocalityLbConfig_LocalityWeightedLbConfig.toJSON(
        message.locality_weighted_lb_config,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Maglev>, I>>(base?: I): Maglev {
    return Maglev.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Maglev>, I>>(object: I): Maglev {
    const message = createBaseMaglev();
    message.table_size = object.table_size ?? undefined;
    message.consistent_hashing_lb_config =
      (object.consistent_hashing_lb_config !== undefined && object.consistent_hashing_lb_config !== null)
        ? ConsistentHashingLbConfig.fromPartial(object.consistent_hashing_lb_config)
        : undefined;
    message.locality_weighted_lb_config =
      (object.locality_weighted_lb_config !== undefined && object.locality_weighted_lb_config !== null)
        ? LocalityLbConfig_LocalityWeightedLbConfig.fromPartial(object.locality_weighted_lb_config)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(Maglev.$type, Maglev);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
