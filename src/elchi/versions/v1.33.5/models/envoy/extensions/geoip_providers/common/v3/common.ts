// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/geoip_providers/common/v3/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.geoip_providers.common.v3";

export interface CommonGeoipProviderConfig {
  $type: "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig";
  /** Configuration for geolocation headers to add to request. */
  geo_headers_to_add?: CommonGeoipProviderConfig_GeolocationHeadersToAdd | undefined;
}

/**
 * The set of geolocation headers to add to request. If any of the configured headers is present
 * in the incoming request, it will be overridden by the :ref:`Geoip filter <config_http_filters_geoip>`.
 * [#next-free-field: 10]
 */
export interface CommonGeoipProviderConfig_GeolocationHeadersToAdd {
  $type: "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.GeolocationHeadersToAdd";
  /** If set, the header will be used to populate the country ISO code associated with the IP address. */
  country?:
    | string
    | undefined;
  /** If set, the header will be used to populate the city associated with the IP address. */
  city?:
    | string
    | undefined;
  /**
   * If set, the header will be used to populate the region ISO code associated with the IP address.
   * The least specific subdivision will be selected as region value.
   */
  region?:
    | string
    | undefined;
  /** If set, the header will be used to populate the ASN associated with the IP address. */
  asn?:
    | string
    | undefined;
  /**
   * If set, the IP address will be checked if it belongs to any type of anonymization network (e.g. VPN, public proxy etc)
   * and header will be populated with the check result. Header value will be set to either "true" or "false" depending on the check result.
   */
  is_anon?:
    | string
    | undefined;
  /**
   * If set, the IP address will be checked if it belongs to a VPN and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   */
  anon_vpn?:
    | string
    | undefined;
  /**
   * If set, the IP address will be checked if it belongs to a hosting provider and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   */
  anon_hosting?:
    | string
    | undefined;
  /**
   * If set, the IP address will be checked if it belongs to a TOR exit node and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   */
  anon_tor?:
    | string
    | undefined;
  /**
   * If set, the IP address will be checked if it belongs to a public proxy and header will be populated with the check result.
   * Header value will be set to either "true" or "false" depending on the check result.
   */
  anon_proxy?: string | undefined;
}

function createBaseCommonGeoipProviderConfig(): CommonGeoipProviderConfig {
  return { $type: "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig" };
}

export const CommonGeoipProviderConfig: MessageFns<
  CommonGeoipProviderConfig,
  "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig"
> = {
  $type: "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig" as const,

  encode(message: CommonGeoipProviderConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.geo_headers_to_add !== undefined) {
      CommonGeoipProviderConfig_GeolocationHeadersToAdd.encode(message.geo_headers_to_add, writer.uint32(10).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonGeoipProviderConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonGeoipProviderConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.geo_headers_to_add = CommonGeoipProviderConfig_GeolocationHeadersToAdd.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonGeoipProviderConfig {
    return {
      $type: CommonGeoipProviderConfig.$type,
      geo_headers_to_add: isSet(object.geo_headers_to_add)
        ? CommonGeoipProviderConfig_GeolocationHeadersToAdd.fromJSON(object.geo_headers_to_add)
        : undefined,
    };
  },

  toJSON(message: CommonGeoipProviderConfig): unknown {
    const obj: any = {};
    if (message.geo_headers_to_add !== undefined) {
      obj.geo_headers_to_add = CommonGeoipProviderConfig_GeolocationHeadersToAdd.toJSON(message.geo_headers_to_add);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonGeoipProviderConfig>, I>>(base?: I): CommonGeoipProviderConfig {
    return CommonGeoipProviderConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonGeoipProviderConfig>, I>>(object: I): CommonGeoipProviderConfig {
    const message = createBaseCommonGeoipProviderConfig();
    message.geo_headers_to_add = (object.geo_headers_to_add !== undefined && object.geo_headers_to_add !== null)
      ? CommonGeoipProviderConfig_GeolocationHeadersToAdd.fromPartial(object.geo_headers_to_add)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CommonGeoipProviderConfig.$type, CommonGeoipProviderConfig);

function createBaseCommonGeoipProviderConfig_GeolocationHeadersToAdd(): CommonGeoipProviderConfig_GeolocationHeadersToAdd {
  return { $type: "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.GeolocationHeadersToAdd" };
}

export const CommonGeoipProviderConfig_GeolocationHeadersToAdd: MessageFns<
  CommonGeoipProviderConfig_GeolocationHeadersToAdd,
  "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.GeolocationHeadersToAdd"
> = {
  $type: "envoy.extensions.geoip_providers.common.v3.CommonGeoipProviderConfig.GeolocationHeadersToAdd" as const,

  encode(
    message: CommonGeoipProviderConfig_GeolocationHeadersToAdd,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.country !== undefined && message.country !== "") {
      writer.uint32(10).string(message.country);
    }
    if (message.city !== undefined && message.city !== "") {
      writer.uint32(18).string(message.city);
    }
    if (message.region !== undefined && message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.asn !== undefined && message.asn !== "") {
      writer.uint32(34).string(message.asn);
    }
    if (message.is_anon !== undefined && message.is_anon !== "") {
      writer.uint32(42).string(message.is_anon);
    }
    if (message.anon_vpn !== undefined && message.anon_vpn !== "") {
      writer.uint32(50).string(message.anon_vpn);
    }
    if (message.anon_hosting !== undefined && message.anon_hosting !== "") {
      writer.uint32(58).string(message.anon_hosting);
    }
    if (message.anon_tor !== undefined && message.anon_tor !== "") {
      writer.uint32(66).string(message.anon_tor);
    }
    if (message.anon_proxy !== undefined && message.anon_proxy !== "") {
      writer.uint32(74).string(message.anon_proxy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonGeoipProviderConfig_GeolocationHeadersToAdd {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonGeoipProviderConfig_GeolocationHeadersToAdd();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.asn = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.is_anon = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.anon_vpn = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.anon_hosting = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.anon_tor = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.anon_proxy = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonGeoipProviderConfig_GeolocationHeadersToAdd {
    return {
      $type: CommonGeoipProviderConfig_GeolocationHeadersToAdd.$type,
      country: isSet(object.country) ? globalThis.String(object.country) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : undefined,
      asn: isSet(object.asn) ? globalThis.String(object.asn) : undefined,
      is_anon: isSet(object.is_anon) ? globalThis.String(object.is_anon) : undefined,
      anon_vpn: isSet(object.anon_vpn) ? globalThis.String(object.anon_vpn) : undefined,
      anon_hosting: isSet(object.anon_hosting) ? globalThis.String(object.anon_hosting) : undefined,
      anon_tor: isSet(object.anon_tor) ? globalThis.String(object.anon_tor) : undefined,
      anon_proxy: isSet(object.anon_proxy) ? globalThis.String(object.anon_proxy) : undefined,
    };
  },

  toJSON(message: CommonGeoipProviderConfig_GeolocationHeadersToAdd): unknown {
    const obj: any = {};
    if (message.country !== undefined) {
      obj.country = message.country;
    }
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.region !== undefined) {
      obj.region = message.region;
    }
    if (message.asn !== undefined) {
      obj.asn = message.asn;
    }
    if (message.is_anon !== undefined) {
      obj.is_anon = message.is_anon;
    }
    if (message.anon_vpn !== undefined) {
      obj.anon_vpn = message.anon_vpn;
    }
    if (message.anon_hosting !== undefined) {
      obj.anon_hosting = message.anon_hosting;
    }
    if (message.anon_tor !== undefined) {
      obj.anon_tor = message.anon_tor;
    }
    if (message.anon_proxy !== undefined) {
      obj.anon_proxy = message.anon_proxy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonGeoipProviderConfig_GeolocationHeadersToAdd>, I>>(
    base?: I,
  ): CommonGeoipProviderConfig_GeolocationHeadersToAdd {
    return CommonGeoipProviderConfig_GeolocationHeadersToAdd.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonGeoipProviderConfig_GeolocationHeadersToAdd>, I>>(
    object: I,
  ): CommonGeoipProviderConfig_GeolocationHeadersToAdd {
    const message = createBaseCommonGeoipProviderConfig_GeolocationHeadersToAdd();
    message.country = object.country ?? undefined;
    message.city = object.city ?? undefined;
    message.region = object.region ?? undefined;
    message.asn = object.asn ?? undefined;
    message.is_anon = object.is_anon ?? undefined;
    message.anon_vpn = object.anon_vpn ?? undefined;
    message.anon_hosting = object.anon_hosting ?? undefined;
    message.anon_tor = object.anon_tor ?? undefined;
    message.anon_proxy = object.anon_proxy ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(
  CommonGeoipProviderConfig_GeolocationHeadersToAdd.$type,
  CommonGeoipProviderConfig_GeolocationHeadersToAdd,
);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
