// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/router/v3/router.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { BoolValue } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { AccessLog } from "../../../../../config/accesslog/v3/accesslog";
import { HttpFilter } from "../../../network/http_connection_manager/v3/http_connection_manager";

export const protobufPackage = "envoy.extensions.filters.http.router.v3";

/** [#next-free-field: 10] */
export interface Router {
  $type: "envoy.extensions.filters.http.router.v3.Router";
  /**
   * Whether the router generates dynamic cluster statistics. Defaults to
   * true. Can be disabled in high performance scenarios.
   */
  dynamic_stats?:
    | boolean
    | undefined;
  /**
   * Whether to start a child span for egress routed calls. This can be
   * useful in scenarios where other filters (auth, ratelimit, etc.) make
   * outbound calls and have child spans rooted at the same ingress
   * parent. Defaults to false.
   *
   * .. attention::
   *   This field is deprecated by the
   *   :ref:`spawn_upstream_span <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.spawn_upstream_span>`.
   *   Please use that ``spawn_upstream_span`` field to control the span creation.
   *
   * @deprecated
   */
  start_child_span?:
    | boolean
    | undefined;
  /**
   * Configuration for HTTP upstream logs emitted by the router. Upstream logs
   * are configured in the same way as access logs, but each log entry represents
   * an upstream request. Presuming retries are configured, multiple upstream
   * requests may be made for each downstream (inbound) request.
   */
  upstream_log?:
    | AccessLog[]
    | undefined;
  /** Additional upstream access log options. */
  upstream_log_options?:
    | Router_UpstreamAccessLogOptions
    | undefined;
  /**
   * Do not add any additional ``x-envoy-`` headers to requests or responses. This
   * only affects the :ref:`router filter generated x-envoy- headers
   * <config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
   * connection manager may continue to set ``x-envoy-`` headers.
   */
  suppress_envoy_headers?:
    | boolean
    | undefined;
  /**
   * Specifies a list of HTTP headers to strictly validate. Envoy will reject a
   * request and respond with HTTP status 400 if the request contains an invalid
   * value for any of the headers listed in this field. Strict header checking
   * is only supported for the following headers:
   *
   * Value must be a ','-delimited list (i.e. no spaces) of supported retry
   * policy values:
   *
   * * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
   * * :ref:`config_http_filters_router_x-envoy-retry-on`
   *
   * Value must be an integer:
   *
   * * :ref:`config_http_filters_router_x-envoy-max-retries`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
   * * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
   */
  strict_check_headers?:
    | string[]
    | undefined;
  /**
   * If not set, ingress Envoy will ignore
   * :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
   * Envoy, when deriving timeout for upstream cluster.
   */
  respect_expected_rq_timeout?:
    | boolean
    | undefined;
  /**
   * If set, Envoy will avoid incrementing HTTP failure code stats
   * on gRPC requests. This includes the individual status code value
   * (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
   * This field is useful if interested in relying only on the gRPC
   * stats filter to define success and failure metrics for gRPC requests
   * as not all failed gRPC requests charge HTTP status code metrics. See
   * :ref:`gRPC stats filter<config_http_filters_grpc_stats>` documentation
   * for more details.
   */
  suppress_grpc_request_failure_code_stats?:
    | boolean
    | undefined;
  /**
   * .. note::
   *   Upstream HTTP filters are currently in alpha.
   *
   * Optional HTTP filters for the upstream HTTP filter chain.
   *
   * These filters will be applied for all requests that pass through the router.
   * They will also be applied to shadowed requests.
   * Upstream HTTP filters cannot change route or cluster.
   * Upstream HTTP filters specified on the cluster will override these filters.
   *
   * If using upstream HTTP filters, please be aware that local errors sent by
   * upstream HTTP filters will not trigger retries, and local errors sent by
   * upstream HTTP filters will count as a final response if hedging is configured.
   * [#extension-category: envoy.filters.http.upstream]
   */
  upstream_http_filters?: HttpFilter[] | undefined;
}

export interface Router_UpstreamAccessLogOptions {
  $type: "envoy.extensions.filters.http.router.v3.Router.UpstreamAccessLogOptions";
  /**
   * If set to true, an upstream access log will be recorded when an upstream stream is
   * associated to an http request. Note: Each HTTP request received for an already established
   * connection will result in an upstream access log record. This includes, for example,
   * consecutive HTTP requests over the same connection or a request that is retried.
   * In case a retry is applied, an upstream access log will be recorded for each retry.
   */
  flush_upstream_log_on_upstream_stream?:
    | boolean
    | undefined;
  /**
   * The interval to flush the upstream access logs. By default, the router will flush an upstream
   * access log on stream close, when the HTTP request is complete. If this field is set, the router
   * will flush access logs periodically at the specified interval. This is especially useful in the
   * case of long-lived requests, such as CONNECT and Websockets.
   * The interval must be at least 1 millisecond.
   */
  upstream_log_flush_interval?: Duration | undefined;
}

function createBaseRouter(): Router {
  return { $type: "envoy.extensions.filters.http.router.v3.Router" };
}

export const Router: MessageFns<Router, "envoy.extensions.filters.http.router.v3.Router"> = {
  $type: "envoy.extensions.filters.http.router.v3.Router" as const,

  encode(message: Router, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dynamic_stats !== undefined) {
      BoolValue.encode({ $type: "google.protobuf.BoolValue", value: message.dynamic_stats! }, writer.uint32(10).fork())
        .join();
    }
    if (message.start_child_span !== undefined && message.start_child_span !== false) {
      writer.uint32(16).bool(message.start_child_span);
    }
    if (message.upstream_log !== undefined && message.upstream_log.length !== 0) {
      for (const v of message.upstream_log) {
        AccessLog.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.upstream_log_options !== undefined) {
      Router_UpstreamAccessLogOptions.encode(message.upstream_log_options, writer.uint32(74).fork()).join();
    }
    if (message.suppress_envoy_headers !== undefined && message.suppress_envoy_headers !== false) {
      writer.uint32(32).bool(message.suppress_envoy_headers);
    }
    if (message.strict_check_headers !== undefined && message.strict_check_headers.length !== 0) {
      for (const v of message.strict_check_headers) {
        writer.uint32(42).string(v!);
      }
    }
    if (message.respect_expected_rq_timeout !== undefined && message.respect_expected_rq_timeout !== false) {
      writer.uint32(48).bool(message.respect_expected_rq_timeout);
    }
    if (
      message.suppress_grpc_request_failure_code_stats !== undefined &&
      message.suppress_grpc_request_failure_code_stats !== false
    ) {
      writer.uint32(56).bool(message.suppress_grpc_request_failure_code_stats);
    }
    if (message.upstream_http_filters !== undefined && message.upstream_http_filters.length !== 0) {
      for (const v of message.upstream_http_filters) {
        HttpFilter.encode(v!, writer.uint32(66).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Router {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dynamic_stats = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.start_child_span = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.upstream_log === undefined) {
            message.upstream_log = [];
          }
          const el = AccessLog.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.upstream_log!.push(el);
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.upstream_log_options = Router_UpstreamAccessLogOptions.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.suppress_envoy_headers = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.strict_check_headers === undefined) {
            message.strict_check_headers = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.strict_check_headers!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.respect_expected_rq_timeout = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.suppress_grpc_request_failure_code_stats = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          if (message.upstream_http_filters === undefined) {
            message.upstream_http_filters = [];
          }
          const el = HttpFilter.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.upstream_http_filters!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Router {
    return {
      $type: Router.$type,
      dynamic_stats: isSet(object.dynamic_stats) ? Boolean(object.dynamic_stats) : undefined,
      start_child_span: isSet(object.start_child_span) ? globalThis.Boolean(object.start_child_span) : undefined,
      upstream_log: globalThis.Array.isArray(object?.upstream_log)
        ? object.upstream_log.map((e: any) => AccessLog.fromJSON(e))
        : undefined,
      upstream_log_options: isSet(object.upstream_log_options)
        ? Router_UpstreamAccessLogOptions.fromJSON(object.upstream_log_options)
        : undefined,
      suppress_envoy_headers: isSet(object.suppress_envoy_headers)
        ? globalThis.Boolean(object.suppress_envoy_headers)
        : undefined,
      strict_check_headers: globalThis.Array.isArray(object?.strict_check_headers)
        ? object.strict_check_headers.map((e: any) => globalThis.String(e))
        : undefined,
      respect_expected_rq_timeout: isSet(object.respect_expected_rq_timeout)
        ? globalThis.Boolean(object.respect_expected_rq_timeout)
        : undefined,
      suppress_grpc_request_failure_code_stats: isSet(object.suppress_grpc_request_failure_code_stats)
        ? globalThis.Boolean(object.suppress_grpc_request_failure_code_stats)
        : undefined,
      upstream_http_filters: globalThis.Array.isArray(object?.upstream_http_filters)
        ? object.upstream_http_filters.map((e: any) => HttpFilter.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Router): unknown {
    const obj: any = {};
    if (message.dynamic_stats !== undefined) {
      obj.dynamic_stats = message.dynamic_stats;
    }
    if (message.start_child_span !== undefined) {
      obj.start_child_span = message.start_child_span;
    }
    if (message.upstream_log?.length) {
      obj.upstream_log = message.upstream_log.map((e) => AccessLog.toJSON(e));
    }
    if (message.upstream_log_options !== undefined) {
      obj.upstream_log_options = Router_UpstreamAccessLogOptions.toJSON(message.upstream_log_options);
    }
    if (message.suppress_envoy_headers !== undefined) {
      obj.suppress_envoy_headers = message.suppress_envoy_headers;
    }
    if (message.strict_check_headers?.length) {
      obj.strict_check_headers = message.strict_check_headers;
    }
    if (message.respect_expected_rq_timeout !== undefined) {
      obj.respect_expected_rq_timeout = message.respect_expected_rq_timeout;
    }
    if (message.suppress_grpc_request_failure_code_stats !== undefined) {
      obj.suppress_grpc_request_failure_code_stats = message.suppress_grpc_request_failure_code_stats;
    }
    if (message.upstream_http_filters?.length) {
      obj.upstream_http_filters = message.upstream_http_filters.map((e) => HttpFilter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Router>, I>>(base?: I): Router {
    return Router.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Router>, I>>(object: I): Router {
    const message = createBaseRouter();
    message.dynamic_stats = object.dynamic_stats ?? undefined;
    message.start_child_span = object.start_child_span ?? undefined;
    message.upstream_log = object.upstream_log?.map((e) => AccessLog.fromPartial(e)) || undefined;
    message.upstream_log_options = (object.upstream_log_options !== undefined && object.upstream_log_options !== null)
      ? Router_UpstreamAccessLogOptions.fromPartial(object.upstream_log_options)
      : undefined;
    message.suppress_envoy_headers = object.suppress_envoy_headers ?? undefined;
    message.strict_check_headers = object.strict_check_headers?.map((e) => e) || undefined;
    message.respect_expected_rq_timeout = object.respect_expected_rq_timeout ?? undefined;
    message.suppress_grpc_request_failure_code_stats = object.suppress_grpc_request_failure_code_stats ?? undefined;
    message.upstream_http_filters = object.upstream_http_filters?.map((e) => HttpFilter.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Router.$type, Router);

function createBaseRouter_UpstreamAccessLogOptions(): Router_UpstreamAccessLogOptions {
  return { $type: "envoy.extensions.filters.http.router.v3.Router.UpstreamAccessLogOptions" };
}

export const Router_UpstreamAccessLogOptions: MessageFns<
  Router_UpstreamAccessLogOptions,
  "envoy.extensions.filters.http.router.v3.Router.UpstreamAccessLogOptions"
> = {
  $type: "envoy.extensions.filters.http.router.v3.Router.UpstreamAccessLogOptions" as const,

  encode(message: Router_UpstreamAccessLogOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (
      message.flush_upstream_log_on_upstream_stream !== undefined &&
      message.flush_upstream_log_on_upstream_stream !== false
    ) {
      writer.uint32(8).bool(message.flush_upstream_log_on_upstream_stream);
    }
    if (message.upstream_log_flush_interval !== undefined) {
      Duration.encode(message.upstream_log_flush_interval, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Router_UpstreamAccessLogOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouter_UpstreamAccessLogOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.flush_upstream_log_on_upstream_stream = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.upstream_log_flush_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Router_UpstreamAccessLogOptions {
    return {
      $type: Router_UpstreamAccessLogOptions.$type,
      flush_upstream_log_on_upstream_stream: isSet(object.flush_upstream_log_on_upstream_stream)
        ? globalThis.Boolean(object.flush_upstream_log_on_upstream_stream)
        : undefined,
      upstream_log_flush_interval: isSet(object.upstream_log_flush_interval)
        ? Duration.fromJSON(object.upstream_log_flush_interval)
        : undefined,
    };
  },

  toJSON(message: Router_UpstreamAccessLogOptions): unknown {
    const obj: any = {};
    if (message.flush_upstream_log_on_upstream_stream !== undefined) {
      obj.flush_upstream_log_on_upstream_stream = message.flush_upstream_log_on_upstream_stream;
    }
    if (message.upstream_log_flush_interval !== undefined) {
      obj.upstream_log_flush_interval = Duration.toJSON(message.upstream_log_flush_interval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Router_UpstreamAccessLogOptions>, I>>(base?: I): Router_UpstreamAccessLogOptions {
    return Router_UpstreamAccessLogOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Router_UpstreamAccessLogOptions>, I>>(
    object: I,
  ): Router_UpstreamAccessLogOptions {
    const message = createBaseRouter_UpstreamAccessLogOptions();
    message.flush_upstream_log_on_upstream_stream = object.flush_upstream_log_on_upstream_stream ?? undefined;
    message.upstream_log_flush_interval =
      (object.upstream_log_flush_interval !== undefined && object.upstream_log_flush_interval !== null)
        ? Duration.fromPartial(object.upstream_log_flush_interval)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(Router_UpstreamAccessLogOptions.$type, Router_UpstreamAccessLogOptions);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
