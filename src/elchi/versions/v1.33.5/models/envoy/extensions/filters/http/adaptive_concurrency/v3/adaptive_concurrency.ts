// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFeatureFlag } from "../../../../../config/core/v3/base";
import { HttpStatus } from "../../../../../type/v3/http_status";
import { Percent } from "../../../../../type/v3/percent";

export const protobufPackage = "envoy.extensions.filters.http.adaptive_concurrency.v3";

/** Configuration parameters for the gradient controller. */
export interface GradientControllerConfig {
  $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig";
  /** The percentile to use when summarizing aggregated samples. Defaults to p50. */
  sample_aggregate_percentile?: Percent | undefined;
  concurrency_limit_params?: GradientControllerConfig_ConcurrencyLimitCalculationParams | undefined;
  min_rtt_calc_params?: GradientControllerConfig_MinimumRTTCalculationParams | undefined;
}

/**
 * Parameters controlling the periodic recalculation of the concurrency limit from sampled request
 * latencies.
 */
export interface GradientControllerConfig_ConcurrencyLimitCalculationParams {
  $type:
    "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams";
  /** The allowed upper-bound on the calculated concurrency limit. Defaults to 1000. */
  max_concurrency_limit?:
    | number
    | undefined;
  /** The period of time samples are taken to recalculate the concurrency limit. */
  concurrency_update_interval?: Duration | undefined;
}

/**
 * Parameters controlling the periodic minRTT recalculation.
 * [#next-free-field: 6]
 */
export interface GradientControllerConfig_MinimumRTTCalculationParams {
  $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams";
  /**
   * The time interval between recalculating the minimum request round-trip time. Has to be
   * positive.
   */
  interval?:
    | Duration
    | undefined;
  /**
   * The number of requests to aggregate/sample during the minRTT recalculation window before
   * updating. Defaults to 50.
   */
  request_count?:
    | number
    | undefined;
  /**
   * Randomized time delta that will be introduced to the start of the minRTT calculation window.
   * This is represented as a percentage of the interval duration. Defaults to 15%.
   *
   * Example: If the interval is 10s and the jitter is 15%, the next window will begin
   * somewhere in the range (10s - 11.5s).
   */
  jitter?:
    | Percent
    | undefined;
  /** The concurrency limit set while measuring the minRTT. Defaults to 3. */
  min_concurrency?:
    | number
    | undefined;
  /**
   * Amount added to the measured minRTT to add stability to the concurrency limit during natural
   * variability in latency. This is expressed as a percentage of the measured value and can be
   * adjusted to allow more or less tolerance to the sampled latency values.
   *
   * Defaults to 25%.
   */
  buffer?: Percent | undefined;
}

export interface AdaptiveConcurrency {
  $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency";
  concurrency_controller_config?:
    | //
    /** Gradient concurrency control will be used. */
    { $case: "gradient_controller_config"; gradient_controller_config: GradientControllerConfig }
    | undefined;
  /**
   * If set to false, the adaptive concurrency filter will operate as a pass-through filter. If the
   * message is unspecified, the filter will be enabled.
   */
  enabled?:
    | RuntimeFeatureFlag
    | undefined;
  /**
   * This field allows for a custom HTTP response status code to the downstream client when
   * the concurrency limit has been exceeded.
   * Defaults to 503 (Service Unavailable).
   *
   * .. note::
   *   If this is set to < 400, 503 will be used instead.
   */
  concurrency_limit_exceeded_status?: HttpStatus | undefined;
}

function createBaseGradientControllerConfig(): GradientControllerConfig {
  return { $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig" };
}

export const GradientControllerConfig: MessageFns<
  GradientControllerConfig,
  "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig"
> = {
  $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig" as const,

  encode(message: GradientControllerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sample_aggregate_percentile !== undefined) {
      Percent.encode(message.sample_aggregate_percentile, writer.uint32(10).fork()).join();
    }
    if (message.concurrency_limit_params !== undefined) {
      GradientControllerConfig_ConcurrencyLimitCalculationParams.encode(
        message.concurrency_limit_params,
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.min_rtt_calc_params !== undefined) {
      GradientControllerConfig_MinimumRTTCalculationParams.encode(message.min_rtt_calc_params, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GradientControllerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGradientControllerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sample_aggregate_percentile = Percent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.concurrency_limit_params = GradientControllerConfig_ConcurrencyLimitCalculationParams.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.min_rtt_calc_params = GradientControllerConfig_MinimumRTTCalculationParams.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GradientControllerConfig {
    return {
      $type: GradientControllerConfig.$type,
      sample_aggregate_percentile: isSet(object.sample_aggregate_percentile)
        ? Percent.fromJSON(object.sample_aggregate_percentile)
        : undefined,
      concurrency_limit_params: isSet(object.concurrency_limit_params)
        ? GradientControllerConfig_ConcurrencyLimitCalculationParams.fromJSON(object.concurrency_limit_params)
        : undefined,
      min_rtt_calc_params: isSet(object.min_rtt_calc_params)
        ? GradientControllerConfig_MinimumRTTCalculationParams.fromJSON(object.min_rtt_calc_params)
        : undefined,
    };
  },

  toJSON(message: GradientControllerConfig): unknown {
    const obj: any = {};
    if (message.sample_aggregate_percentile !== undefined) {
      obj.sample_aggregate_percentile = Percent.toJSON(message.sample_aggregate_percentile);
    }
    if (message.concurrency_limit_params !== undefined) {
      obj.concurrency_limit_params = GradientControllerConfig_ConcurrencyLimitCalculationParams.toJSON(
        message.concurrency_limit_params,
      );
    }
    if (message.min_rtt_calc_params !== undefined) {
      obj.min_rtt_calc_params = GradientControllerConfig_MinimumRTTCalculationParams.toJSON(
        message.min_rtt_calc_params,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GradientControllerConfig>, I>>(base?: I): GradientControllerConfig {
    return GradientControllerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GradientControllerConfig>, I>>(object: I): GradientControllerConfig {
    const message = createBaseGradientControllerConfig();
    message.sample_aggregate_percentile =
      (object.sample_aggregate_percentile !== undefined && object.sample_aggregate_percentile !== null)
        ? Percent.fromPartial(object.sample_aggregate_percentile)
        : undefined;
    message.concurrency_limit_params =
      (object.concurrency_limit_params !== undefined && object.concurrency_limit_params !== null)
        ? GradientControllerConfig_ConcurrencyLimitCalculationParams.fromPartial(object.concurrency_limit_params)
        : undefined;
    message.min_rtt_calc_params = (object.min_rtt_calc_params !== undefined && object.min_rtt_calc_params !== null)
      ? GradientControllerConfig_MinimumRTTCalculationParams.fromPartial(object.min_rtt_calc_params)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(GradientControllerConfig.$type, GradientControllerConfig);

function createBaseGradientControllerConfig_ConcurrencyLimitCalculationParams(): GradientControllerConfig_ConcurrencyLimitCalculationParams {
  return {
    $type:
      "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams",
  };
}

export const GradientControllerConfig_ConcurrencyLimitCalculationParams: MessageFns<
  GradientControllerConfig_ConcurrencyLimitCalculationParams,
  "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams"
> = {
  $type:
    "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams" as const,

  encode(
    message: GradientControllerConfig_ConcurrencyLimitCalculationParams,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.max_concurrency_limit !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_concurrency_limit! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.concurrency_update_interval !== undefined) {
      Duration.encode(message.concurrency_update_interval, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GradientControllerConfig_ConcurrencyLimitCalculationParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGradientControllerConfig_ConcurrencyLimitCalculationParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.max_concurrency_limit = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.concurrency_update_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GradientControllerConfig_ConcurrencyLimitCalculationParams {
    return {
      $type: GradientControllerConfig_ConcurrencyLimitCalculationParams.$type,
      max_concurrency_limit: isSet(object.max_concurrency_limit) ? Number(object.max_concurrency_limit) : undefined,
      concurrency_update_interval: isSet(object.concurrency_update_interval)
        ? Duration.fromJSON(object.concurrency_update_interval)
        : undefined,
    };
  },

  toJSON(message: GradientControllerConfig_ConcurrencyLimitCalculationParams): unknown {
    const obj: any = {};
    if (message.max_concurrency_limit !== undefined) {
      obj.max_concurrency_limit = message.max_concurrency_limit;
    }
    if (message.concurrency_update_interval !== undefined) {
      obj.concurrency_update_interval = Duration.toJSON(message.concurrency_update_interval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GradientControllerConfig_ConcurrencyLimitCalculationParams>, I>>(
    base?: I,
  ): GradientControllerConfig_ConcurrencyLimitCalculationParams {
    return GradientControllerConfig_ConcurrencyLimitCalculationParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GradientControllerConfig_ConcurrencyLimitCalculationParams>, I>>(
    object: I,
  ): GradientControllerConfig_ConcurrencyLimitCalculationParams {
    const message = createBaseGradientControllerConfig_ConcurrencyLimitCalculationParams();
    message.max_concurrency_limit = object.max_concurrency_limit ?? undefined;
    message.concurrency_update_interval =
      (object.concurrency_update_interval !== undefined && object.concurrency_update_interval !== null)
        ? Duration.fromPartial(object.concurrency_update_interval)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(
  GradientControllerConfig_ConcurrencyLimitCalculationParams.$type,
  GradientControllerConfig_ConcurrencyLimitCalculationParams,
);

function createBaseGradientControllerConfig_MinimumRTTCalculationParams(): GradientControllerConfig_MinimumRTTCalculationParams {
  return {
    $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams",
  };
}

export const GradientControllerConfig_MinimumRTTCalculationParams: MessageFns<
  GradientControllerConfig_MinimumRTTCalculationParams,
  "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams"
> = {
  $type:
    "envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams" as const,

  encode(
    message: GradientControllerConfig_MinimumRTTCalculationParams,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.interval !== undefined) {
      Duration.encode(message.interval, writer.uint32(10).fork()).join();
    }
    if (message.request_count !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.request_count! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.jitter !== undefined) {
      Percent.encode(message.jitter, writer.uint32(26).fork()).join();
    }
    if (message.min_concurrency !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.min_concurrency! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.buffer !== undefined) {
      Percent.encode(message.buffer, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GradientControllerConfig_MinimumRTTCalculationParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGradientControllerConfig_MinimumRTTCalculationParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.request_count = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jitter = Percent.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.min_concurrency = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.buffer = Percent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GradientControllerConfig_MinimumRTTCalculationParams {
    return {
      $type: GradientControllerConfig_MinimumRTTCalculationParams.$type,
      interval: isSet(object.interval) ? Duration.fromJSON(object.interval) : undefined,
      request_count: isSet(object.request_count) ? Number(object.request_count) : undefined,
      jitter: isSet(object.jitter) ? Percent.fromJSON(object.jitter) : undefined,
      min_concurrency: isSet(object.min_concurrency) ? Number(object.min_concurrency) : undefined,
      buffer: isSet(object.buffer) ? Percent.fromJSON(object.buffer) : undefined,
    };
  },

  toJSON(message: GradientControllerConfig_MinimumRTTCalculationParams): unknown {
    const obj: any = {};
    if (message.interval !== undefined) {
      obj.interval = Duration.toJSON(message.interval);
    }
    if (message.request_count !== undefined) {
      obj.request_count = message.request_count;
    }
    if (message.jitter !== undefined) {
      obj.jitter = Percent.toJSON(message.jitter);
    }
    if (message.min_concurrency !== undefined) {
      obj.min_concurrency = message.min_concurrency;
    }
    if (message.buffer !== undefined) {
      obj.buffer = Percent.toJSON(message.buffer);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GradientControllerConfig_MinimumRTTCalculationParams>, I>>(
    base?: I,
  ): GradientControllerConfig_MinimumRTTCalculationParams {
    return GradientControllerConfig_MinimumRTTCalculationParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GradientControllerConfig_MinimumRTTCalculationParams>, I>>(
    object: I,
  ): GradientControllerConfig_MinimumRTTCalculationParams {
    const message = createBaseGradientControllerConfig_MinimumRTTCalculationParams();
    message.interval = (object.interval !== undefined && object.interval !== null)
      ? Duration.fromPartial(object.interval)
      : undefined;
    message.request_count = object.request_count ?? undefined;
    message.jitter = (object.jitter !== undefined && object.jitter !== null)
      ? Percent.fromPartial(object.jitter)
      : undefined;
    message.min_concurrency = object.min_concurrency ?? undefined;
    message.buffer = (object.buffer !== undefined && object.buffer !== null)
      ? Percent.fromPartial(object.buffer)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(
  GradientControllerConfig_MinimumRTTCalculationParams.$type,
  GradientControllerConfig_MinimumRTTCalculationParams,
);

function createBaseAdaptiveConcurrency(): AdaptiveConcurrency {
  return {
    $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency",
    concurrency_controller_config: undefined,
  };
}

export const AdaptiveConcurrency: MessageFns<
  AdaptiveConcurrency,
  "envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency"
> = {
  $type: "envoy.extensions.filters.http.adaptive_concurrency.v3.AdaptiveConcurrency" as const,

  encode(message: AdaptiveConcurrency, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.concurrency_controller_config?.$case) {
      case "gradient_controller_config":
        GradientControllerConfig.encode(
          message.concurrency_controller_config.gradient_controller_config,
          writer.uint32(10).fork(),
        ).join();
        break;
    }
    if (message.enabled !== undefined) {
      RuntimeFeatureFlag.encode(message.enabled, writer.uint32(18).fork()).join();
    }
    if (message.concurrency_limit_exceeded_status !== undefined) {
      HttpStatus.encode(message.concurrency_limit_exceeded_status, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AdaptiveConcurrency {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAdaptiveConcurrency();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.concurrency_controller_config = {
            $case: "gradient_controller_config",
            gradient_controller_config: GradientControllerConfig.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enabled = RuntimeFeatureFlag.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.concurrency_limit_exceeded_status = HttpStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AdaptiveConcurrency {
    return {
      $type: AdaptiveConcurrency.$type,
      concurrency_controller_config: isSet(object.gradient_controller_config)
        ? {
          $case: "gradient_controller_config",
          gradient_controller_config: GradientControllerConfig.fromJSON(object.gradient_controller_config),
        }
        : undefined,
      enabled: isSet(object.enabled) ? RuntimeFeatureFlag.fromJSON(object.enabled) : undefined,
      concurrency_limit_exceeded_status: isSet(object.concurrency_limit_exceeded_status)
        ? HttpStatus.fromJSON(object.concurrency_limit_exceeded_status)
        : undefined,
    };
  },

  toJSON(message: AdaptiveConcurrency): unknown {
    const obj: any = {};
    if (message.concurrency_controller_config?.$case === "gradient_controller_config") {
      obj.gradient_controller_config = GradientControllerConfig.toJSON(
        message.concurrency_controller_config.gradient_controller_config,
      );
    }
    if (message.enabled !== undefined) {
      obj.enabled = RuntimeFeatureFlag.toJSON(message.enabled);
    }
    if (message.concurrency_limit_exceeded_status !== undefined) {
      obj.concurrency_limit_exceeded_status = HttpStatus.toJSON(message.concurrency_limit_exceeded_status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AdaptiveConcurrency>, I>>(base?: I): AdaptiveConcurrency {
    return AdaptiveConcurrency.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AdaptiveConcurrency>, I>>(object: I): AdaptiveConcurrency {
    const message = createBaseAdaptiveConcurrency();
    if (
      object.concurrency_controller_config?.$case === "gradient_controller_config" &&
      object.concurrency_controller_config?.gradient_controller_config !== undefined &&
      object.concurrency_controller_config?.gradient_controller_config !== null
    ) {
      message.concurrency_controller_config = {
        $case: "gradient_controller_config",
        gradient_controller_config: GradientControllerConfig.fromPartial(
          object.concurrency_controller_config.gradient_controller_config,
        ),
      };
    }
    message.enabled = (object.enabled !== undefined && object.enabled !== null)
      ? RuntimeFeatureFlag.fromPartial(object.enabled)
      : undefined;
    message.concurrency_limit_exceeded_status =
      (object.concurrency_limit_exceeded_status !== undefined && object.concurrency_limit_exceeded_status !== null)
        ? HttpStatus.fromPartial(object.concurrency_limit_exceeded_status)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(AdaptiveConcurrency.$type, AdaptiveConcurrency);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
