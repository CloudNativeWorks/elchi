// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/compressor/v3/compressor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue, UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFeatureFlag } from "../../../../../config/core/v3/base";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";

export const protobufPackage = "envoy.extensions.filters.http.compressor.v3";

/** [#next-free-field: 10] */
export interface Compressor {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor";
  /**
   * Minimum response length, in bytes, which will trigger compression. The default value is 30.
   *
   * @deprecated
   */
  content_length?:
    | number
    | undefined;
  /**
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   *
   * @deprecated
   */
  content_type?:
    | string[]
    | undefined;
  /**
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   *
   * @deprecated
   */
  disable_on_etag_header?:
    | boolean
    | undefined;
  /**
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   *
   * .. attention::
   *
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   *
   * @deprecated
   */
  remove_accept_encoding_header?:
    | boolean
    | undefined;
  /**
   * Runtime flag that controls whether the filter is enabled or not. If set to false, the
   * filter will operate as a pass-through filter, unless overridden by
   * CompressorPerRoute. If not specified, defaults to enabled.
   *
   * @deprecated
   */
  runtime_enabled?:
    | RuntimeFeatureFlag
    | undefined;
  /**
   * A compressor library to use for compression. Currently only
   * :ref:`envoy.compression.gzip.compressor<envoy_v3_api_msg_extensions.compression.gzip.compressor.v3.Gzip>`
   * is included in Envoy.
   * [#extension-category: envoy.compression.compressor]
   */
  compressor_library?:
    | TypedExtensionConfig
    | undefined;
  /** Configuration for request compression. Compression is disabled by default if left empty. */
  request_direction_config?:
    | Compressor_RequestDirectionConfig
    | undefined;
  /**
   * Configuration for response compression. Compression is enabled by default if left empty.
   *
   * .. attention::
   *
   *    If the field is not empty then the duplicate deprecated fields of the ``Compressor`` message,
   *    such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
   *    ``remove_accept_encoding_header`` and ``runtime_enabled``, are ignored.
   *
   *    Also all the statistics related to response compression will be rooted in
   *    ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.response.*``
   *    instead of
   *    ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.*``.
   */
  response_direction_config?:
    | Compressor_ResponseDirectionConfig
    | undefined;
  /**
   * If true, chooses this compressor first to do compression when the q-values in ``Accept-Encoding`` are same.
   * The last compressor which enables choose_first will be chosen if multiple compressor filters in the chain have choose_first as true.
   */
  choose_first?: boolean | undefined;
}

export interface Compressor_CommonDirectionConfig {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig";
  /**
   * Runtime flag that controls whether compression is enabled or not for the direction this
   * common config is put in. If set to false, the filter will operate as a pass-through filter
   * in the chosen direction, unless overridden by CompressorPerRoute.
   * If the field is omitted, the filter will be enabled.
   */
  enabled?:
    | RuntimeFeatureFlag
    | undefined;
  /**
   * Minimum value of Content-Length header of request or response messages (depending on the direction
   * this common config is put in), in bytes, which will trigger compression. The default value is 30.
   */
  min_content_length?:
    | number
    | undefined;
  /**
   * Set of strings that allows specifying which mime-types yield compression; e.g.,
   * application/json, text/html, etc. When this field is not defined, compression will be applied
   * to the following mime-types: "application/javascript", "application/json",
   * "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml"
   * and their synonyms.
   */
  content_type?: string[] | undefined;
}

/** Configuration for filter behavior on the request direction. */
export interface Compressor_RequestDirectionConfig {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig";
  common_config?: Compressor_CommonDirectionConfig | undefined;
}

/** Configuration for filter behavior on the response direction. */
export interface Compressor_ResponseDirectionConfig {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig";
  common_config?:
    | Compressor_CommonDirectionConfig
    | undefined;
  /**
   * If true, disables compression when the response contains an etag header. When it is false, the
   * filter will preserve weak etags and remove the ones that require strong validation.
   */
  disable_on_etag_header?:
    | boolean
    | undefined;
  /**
   * If true, removes accept-encoding from the request headers before dispatching it to the upstream
   * so that responses do not get compressed before reaching the filter.
   *
   * .. attention::
   *
   *    To avoid interfering with other compression filters in the same chain use this option in
   *    the filter closest to the upstream.
   */
  remove_accept_encoding_header?: boolean | undefined;
}

/**
 * Per-route overrides of ``ResponseDirectionConfig``. Anything added here should be optional,
 * to allow overriding arbitrary subsets of configuration. Omitted fields must have no effect.
 */
export interface ResponseDirectionOverrides {
  $type: "envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides";
  /**
   * If set, overrides the filter-level
   * :ref:`remove_accept_encoding_header<envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.remove_accept_encoding_header>`.
   */
  remove_accept_encoding_header?: boolean | undefined;
}

/**
 * Per-route overrides. As per-route overrides are needed, they should be
 * added here, mirroring the structure of ``Compressor``. All fields should be
 * optional, to allow overriding arbitrary subsets of configuration.
 */
export interface CompressorOverrides {
  $type: "envoy.extensions.filters.http.compressor.v3.CompressorOverrides";
  /** If present, response compression is enabled. */
  response_direction_config?: ResponseDirectionOverrides | undefined;
}

export interface CompressorPerRoute {
  $type: "envoy.extensions.filters.http.compressor.v3.CompressorPerRoute";
  override?:
    | //
    /**
     * If set, the filter will operate as a pass-through filter.
     * Overrides Compressor.runtime_enabled and CommonDirectionConfig.enabled.
     */
    { $case: "disabled"; disabled: boolean }
    | //
    /** Per-route overrides. Fields set here will override corresponding fields in ``Compressor``. */
    { $case: "overrides"; overrides: CompressorOverrides }
    | undefined;
}

function createBaseCompressor(): Compressor {
  return { $type: "envoy.extensions.filters.http.compressor.v3.Compressor" };
}

export const Compressor: MessageFns<Compressor, "envoy.extensions.filters.http.compressor.v3.Compressor"> = {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor" as const,

  encode(message: Compressor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content_length !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.content_length! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.content_type !== undefined && message.content_type.length !== 0) {
      for (const v of message.content_type) {
        writer.uint32(18).string(v!);
      }
    }
    if (message.disable_on_etag_header !== undefined && message.disable_on_etag_header !== false) {
      writer.uint32(24).bool(message.disable_on_etag_header);
    }
    if (message.remove_accept_encoding_header !== undefined && message.remove_accept_encoding_header !== false) {
      writer.uint32(32).bool(message.remove_accept_encoding_header);
    }
    if (message.runtime_enabled !== undefined) {
      RuntimeFeatureFlag.encode(message.runtime_enabled, writer.uint32(42).fork()).join();
    }
    if (message.compressor_library !== undefined) {
      TypedExtensionConfig.encode(message.compressor_library, writer.uint32(50).fork()).join();
    }
    if (message.request_direction_config !== undefined) {
      Compressor_RequestDirectionConfig.encode(message.request_direction_config, writer.uint32(58).fork()).join();
    }
    if (message.response_direction_config !== undefined) {
      Compressor_ResponseDirectionConfig.encode(message.response_direction_config, writer.uint32(66).fork()).join();
    }
    if (message.choose_first !== undefined && message.choose_first !== false) {
      writer.uint32(72).bool(message.choose_first);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Compressor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content_length = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.content_type === undefined) {
            message.content_type = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.content_type!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.disable_on_etag_header = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.remove_accept_encoding_header = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.runtime_enabled = RuntimeFeatureFlag.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.compressor_library = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.request_direction_config = Compressor_RequestDirectionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.response_direction_config = Compressor_ResponseDirectionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.choose_first = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Compressor {
    return {
      $type: Compressor.$type,
      content_length: isSet(object.content_length) ? Number(object.content_length) : undefined,
      content_type: globalThis.Array.isArray(object?.content_type)
        ? object.content_type.map((e: any) => globalThis.String(e))
        : undefined,
      disable_on_etag_header: isSet(object.disable_on_etag_header)
        ? globalThis.Boolean(object.disable_on_etag_header)
        : undefined,
      remove_accept_encoding_header: isSet(object.remove_accept_encoding_header)
        ? globalThis.Boolean(object.remove_accept_encoding_header)
        : undefined,
      runtime_enabled: isSet(object.runtime_enabled) ? RuntimeFeatureFlag.fromJSON(object.runtime_enabled) : undefined,
      compressor_library: isSet(object.compressor_library)
        ? TypedExtensionConfig.fromJSON(object.compressor_library)
        : undefined,
      request_direction_config: isSet(object.request_direction_config)
        ? Compressor_RequestDirectionConfig.fromJSON(object.request_direction_config)
        : undefined,
      response_direction_config: isSet(object.response_direction_config)
        ? Compressor_ResponseDirectionConfig.fromJSON(object.response_direction_config)
        : undefined,
      choose_first: isSet(object.choose_first) ? globalThis.Boolean(object.choose_first) : undefined,
    };
  },

  toJSON(message: Compressor): unknown {
    const obj: any = {};
    if (message.content_length !== undefined) {
      obj.content_length = message.content_length;
    }
    if (message.content_type?.length) {
      obj.content_type = message.content_type;
    }
    if (message.disable_on_etag_header !== undefined) {
      obj.disable_on_etag_header = message.disable_on_etag_header;
    }
    if (message.remove_accept_encoding_header !== undefined) {
      obj.remove_accept_encoding_header = message.remove_accept_encoding_header;
    }
    if (message.runtime_enabled !== undefined) {
      obj.runtime_enabled = RuntimeFeatureFlag.toJSON(message.runtime_enabled);
    }
    if (message.compressor_library !== undefined) {
      obj.compressor_library = TypedExtensionConfig.toJSON(message.compressor_library);
    }
    if (message.request_direction_config !== undefined) {
      obj.request_direction_config = Compressor_RequestDirectionConfig.toJSON(message.request_direction_config);
    }
    if (message.response_direction_config !== undefined) {
      obj.response_direction_config = Compressor_ResponseDirectionConfig.toJSON(message.response_direction_config);
    }
    if (message.choose_first !== undefined) {
      obj.choose_first = message.choose_first;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Compressor>, I>>(base?: I): Compressor {
    return Compressor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Compressor>, I>>(object: I): Compressor {
    const message = createBaseCompressor();
    message.content_length = object.content_length ?? undefined;
    message.content_type = object.content_type?.map((e) => e) || undefined;
    message.disable_on_etag_header = object.disable_on_etag_header ?? undefined;
    message.remove_accept_encoding_header = object.remove_accept_encoding_header ?? undefined;
    message.runtime_enabled = (object.runtime_enabled !== undefined && object.runtime_enabled !== null)
      ? RuntimeFeatureFlag.fromPartial(object.runtime_enabled)
      : undefined;
    message.compressor_library = (object.compressor_library !== undefined && object.compressor_library !== null)
      ? TypedExtensionConfig.fromPartial(object.compressor_library)
      : undefined;
    message.request_direction_config =
      (object.request_direction_config !== undefined && object.request_direction_config !== null)
        ? Compressor_RequestDirectionConfig.fromPartial(object.request_direction_config)
        : undefined;
    message.response_direction_config =
      (object.response_direction_config !== undefined && object.response_direction_config !== null)
        ? Compressor_ResponseDirectionConfig.fromPartial(object.response_direction_config)
        : undefined;
    message.choose_first = object.choose_first ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Compressor.$type, Compressor);

function createBaseCompressor_CommonDirectionConfig(): Compressor_CommonDirectionConfig {
  return { $type: "envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig" };
}

export const Compressor_CommonDirectionConfig: MessageFns<
  Compressor_CommonDirectionConfig,
  "envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig"
> = {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor.CommonDirectionConfig" as const,

  encode(message: Compressor_CommonDirectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== undefined) {
      RuntimeFeatureFlag.encode(message.enabled, writer.uint32(10).fork()).join();
    }
    if (message.min_content_length !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.min_content_length! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.content_type !== undefined && message.content_type.length !== 0) {
      for (const v of message.content_type) {
        writer.uint32(26).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Compressor_CommonDirectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressor_CommonDirectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.enabled = RuntimeFeatureFlag.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.min_content_length = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.content_type === undefined) {
            message.content_type = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.content_type!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Compressor_CommonDirectionConfig {
    return {
      $type: Compressor_CommonDirectionConfig.$type,
      enabled: isSet(object.enabled) ? RuntimeFeatureFlag.fromJSON(object.enabled) : undefined,
      min_content_length: isSet(object.min_content_length) ? Number(object.min_content_length) : undefined,
      content_type: globalThis.Array.isArray(object?.content_type)
        ? object.content_type.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: Compressor_CommonDirectionConfig): unknown {
    const obj: any = {};
    if (message.enabled !== undefined) {
      obj.enabled = RuntimeFeatureFlag.toJSON(message.enabled);
    }
    if (message.min_content_length !== undefined) {
      obj.min_content_length = message.min_content_length;
    }
    if (message.content_type?.length) {
      obj.content_type = message.content_type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Compressor_CommonDirectionConfig>, I>>(
    base?: I,
  ): Compressor_CommonDirectionConfig {
    return Compressor_CommonDirectionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Compressor_CommonDirectionConfig>, I>>(
    object: I,
  ): Compressor_CommonDirectionConfig {
    const message = createBaseCompressor_CommonDirectionConfig();
    message.enabled = (object.enabled !== undefined && object.enabled !== null)
      ? RuntimeFeatureFlag.fromPartial(object.enabled)
      : undefined;
    message.min_content_length = object.min_content_length ?? undefined;
    message.content_type = object.content_type?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Compressor_CommonDirectionConfig.$type, Compressor_CommonDirectionConfig);

function createBaseCompressor_RequestDirectionConfig(): Compressor_RequestDirectionConfig {
  return { $type: "envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig" };
}

export const Compressor_RequestDirectionConfig: MessageFns<
  Compressor_RequestDirectionConfig,
  "envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig"
> = {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor.RequestDirectionConfig" as const,

  encode(message: Compressor_RequestDirectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_config !== undefined) {
      Compressor_CommonDirectionConfig.encode(message.common_config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Compressor_RequestDirectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressor_RequestDirectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_config = Compressor_CommonDirectionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Compressor_RequestDirectionConfig {
    return {
      $type: Compressor_RequestDirectionConfig.$type,
      common_config: isSet(object.common_config)
        ? Compressor_CommonDirectionConfig.fromJSON(object.common_config)
        : undefined,
    };
  },

  toJSON(message: Compressor_RequestDirectionConfig): unknown {
    const obj: any = {};
    if (message.common_config !== undefined) {
      obj.common_config = Compressor_CommonDirectionConfig.toJSON(message.common_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Compressor_RequestDirectionConfig>, I>>(
    base?: I,
  ): Compressor_RequestDirectionConfig {
    return Compressor_RequestDirectionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Compressor_RequestDirectionConfig>, I>>(
    object: I,
  ): Compressor_RequestDirectionConfig {
    const message = createBaseCompressor_RequestDirectionConfig();
    message.common_config = (object.common_config !== undefined && object.common_config !== null)
      ? Compressor_CommonDirectionConfig.fromPartial(object.common_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Compressor_RequestDirectionConfig.$type, Compressor_RequestDirectionConfig);

function createBaseCompressor_ResponseDirectionConfig(): Compressor_ResponseDirectionConfig {
  return { $type: "envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig" };
}

export const Compressor_ResponseDirectionConfig: MessageFns<
  Compressor_ResponseDirectionConfig,
  "envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig"
> = {
  $type: "envoy.extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig" as const,

  encode(message: Compressor_ResponseDirectionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_config !== undefined) {
      Compressor_CommonDirectionConfig.encode(message.common_config, writer.uint32(10).fork()).join();
    }
    if (message.disable_on_etag_header !== undefined && message.disable_on_etag_header !== false) {
      writer.uint32(16).bool(message.disable_on_etag_header);
    }
    if (message.remove_accept_encoding_header !== undefined && message.remove_accept_encoding_header !== false) {
      writer.uint32(24).bool(message.remove_accept_encoding_header);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Compressor_ResponseDirectionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressor_ResponseDirectionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_config = Compressor_CommonDirectionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.disable_on_etag_header = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.remove_accept_encoding_header = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Compressor_ResponseDirectionConfig {
    return {
      $type: Compressor_ResponseDirectionConfig.$type,
      common_config: isSet(object.common_config)
        ? Compressor_CommonDirectionConfig.fromJSON(object.common_config)
        : undefined,
      disable_on_etag_header: isSet(object.disable_on_etag_header)
        ? globalThis.Boolean(object.disable_on_etag_header)
        : undefined,
      remove_accept_encoding_header: isSet(object.remove_accept_encoding_header)
        ? globalThis.Boolean(object.remove_accept_encoding_header)
        : undefined,
    };
  },

  toJSON(message: Compressor_ResponseDirectionConfig): unknown {
    const obj: any = {};
    if (message.common_config !== undefined) {
      obj.common_config = Compressor_CommonDirectionConfig.toJSON(message.common_config);
    }
    if (message.disable_on_etag_header !== undefined) {
      obj.disable_on_etag_header = message.disable_on_etag_header;
    }
    if (message.remove_accept_encoding_header !== undefined) {
      obj.remove_accept_encoding_header = message.remove_accept_encoding_header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Compressor_ResponseDirectionConfig>, I>>(
    base?: I,
  ): Compressor_ResponseDirectionConfig {
    return Compressor_ResponseDirectionConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Compressor_ResponseDirectionConfig>, I>>(
    object: I,
  ): Compressor_ResponseDirectionConfig {
    const message = createBaseCompressor_ResponseDirectionConfig();
    message.common_config = (object.common_config !== undefined && object.common_config !== null)
      ? Compressor_CommonDirectionConfig.fromPartial(object.common_config)
      : undefined;
    message.disable_on_etag_header = object.disable_on_etag_header ?? undefined;
    message.remove_accept_encoding_header = object.remove_accept_encoding_header ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Compressor_ResponseDirectionConfig.$type, Compressor_ResponseDirectionConfig);

function createBaseResponseDirectionOverrides(): ResponseDirectionOverrides {
  return { $type: "envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides" };
}

export const ResponseDirectionOverrides: MessageFns<
  ResponseDirectionOverrides,
  "envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides"
> = {
  $type: "envoy.extensions.filters.http.compressor.v3.ResponseDirectionOverrides" as const,

  encode(message: ResponseDirectionOverrides, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.remove_accept_encoding_header !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.remove_accept_encoding_header! },
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseDirectionOverrides {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseDirectionOverrides();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.remove_accept_encoding_header = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseDirectionOverrides {
    return {
      $type: ResponseDirectionOverrides.$type,
      remove_accept_encoding_header: isSet(object.remove_accept_encoding_header)
        ? Boolean(object.remove_accept_encoding_header)
        : undefined,
    };
  },

  toJSON(message: ResponseDirectionOverrides): unknown {
    const obj: any = {};
    if (message.remove_accept_encoding_header !== undefined) {
      obj.remove_accept_encoding_header = message.remove_accept_encoding_header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseDirectionOverrides>, I>>(base?: I): ResponseDirectionOverrides {
    return ResponseDirectionOverrides.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseDirectionOverrides>, I>>(object: I): ResponseDirectionOverrides {
    const message = createBaseResponseDirectionOverrides();
    message.remove_accept_encoding_header = object.remove_accept_encoding_header ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ResponseDirectionOverrides.$type, ResponseDirectionOverrides);

function createBaseCompressorOverrides(): CompressorOverrides {
  return { $type: "envoy.extensions.filters.http.compressor.v3.CompressorOverrides" };
}

export const CompressorOverrides: MessageFns<
  CompressorOverrides,
  "envoy.extensions.filters.http.compressor.v3.CompressorOverrides"
> = {
  $type: "envoy.extensions.filters.http.compressor.v3.CompressorOverrides" as const,

  encode(message: CompressorOverrides, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response_direction_config !== undefined) {
      ResponseDirectionOverrides.encode(message.response_direction_config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompressorOverrides {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressorOverrides();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.response_direction_config = ResponseDirectionOverrides.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompressorOverrides {
    return {
      $type: CompressorOverrides.$type,
      response_direction_config: isSet(object.response_direction_config)
        ? ResponseDirectionOverrides.fromJSON(object.response_direction_config)
        : undefined,
    };
  },

  toJSON(message: CompressorOverrides): unknown {
    const obj: any = {};
    if (message.response_direction_config !== undefined) {
      obj.response_direction_config = ResponseDirectionOverrides.toJSON(message.response_direction_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompressorOverrides>, I>>(base?: I): CompressorOverrides {
    return CompressorOverrides.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompressorOverrides>, I>>(object: I): CompressorOverrides {
    const message = createBaseCompressorOverrides();
    message.response_direction_config =
      (object.response_direction_config !== undefined && object.response_direction_config !== null)
        ? ResponseDirectionOverrides.fromPartial(object.response_direction_config)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(CompressorOverrides.$type, CompressorOverrides);

function createBaseCompressorPerRoute(): CompressorPerRoute {
  return { $type: "envoy.extensions.filters.http.compressor.v3.CompressorPerRoute", override: undefined };
}

export const CompressorPerRoute: MessageFns<
  CompressorPerRoute,
  "envoy.extensions.filters.http.compressor.v3.CompressorPerRoute"
> = {
  $type: "envoy.extensions.filters.http.compressor.v3.CompressorPerRoute" as const,

  encode(message: CompressorPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.override?.$case) {
      case "disabled":
        writer.uint32(8).bool(message.override.disabled);
        break;
      case "overrides":
        CompressorOverrides.encode(message.override.overrides, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompressorPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompressorPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.override = { $case: "disabled", disabled: reader.bool() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.override = { $case: "overrides", overrides: CompressorOverrides.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompressorPerRoute {
    return {
      $type: CompressorPerRoute.$type,
      override: isSet(object.disabled)
        ? { $case: "disabled", disabled: globalThis.Boolean(object.disabled) }
        : isSet(object.overrides)
        ? { $case: "overrides", overrides: CompressorOverrides.fromJSON(object.overrides) }
        : undefined,
    };
  },

  toJSON(message: CompressorPerRoute): unknown {
    const obj: any = {};
    if (message.override?.$case === "disabled") {
      obj.disabled = message.override.disabled;
    }
    if (message.override?.$case === "overrides") {
      obj.overrides = CompressorOverrides.toJSON(message.override.overrides);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompressorPerRoute>, I>>(base?: I): CompressorPerRoute {
    return CompressorPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompressorPerRoute>, I>>(object: I): CompressorPerRoute {
    const message = createBaseCompressorPerRoute();
    if (
      object.override?.$case === "disabled" &&
      object.override?.disabled !== undefined &&
      object.override?.disabled !== null
    ) {
      message.override = { $case: "disabled", disabled: object.override.disabled };
    }
    if (
      object.override?.$case === "overrides" &&
      object.override?.overrides !== undefined &&
      object.override?.overrides !== null
    ) {
      message.override = { $case: "overrides", overrides: CompressorOverrides.fromPartial(object.override.overrides) };
    }
    return message;
  },
};

messageTypeRegistry.set(CompressorPerRoute.$type, CompressorPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
