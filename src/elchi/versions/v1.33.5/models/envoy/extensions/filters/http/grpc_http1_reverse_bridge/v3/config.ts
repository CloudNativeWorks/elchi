// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/grpc_http1_reverse_bridge/v3/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3";

/** gRPC reverse bridge filter configuration */
export interface FilterConfig {
  $type: "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig";
  /**
   * The content-type to pass to the upstream when the gRPC bridge filter is applied.
   * The filter will also validate that the upstream responds with the same content type.
   */
  content_type?:
    | string
    | undefined;
  /**
   * If true, Envoy will assume that the upstream doesn't understand gRPC frames and
   * strip the gRPC frame from the request, and add it back in to the response. This will
   * hide the gRPC semantics from the upstream, allowing it to receive and respond with a
   * simple binary encoded protobuf. In order to calculate the ``Content-Length`` header value, Envoy
   * will buffer the upstream response unless :ref:`response_size_header
   * <envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.response_size_header>`
   * is set, in which case Envoy will use the value of an upstream header to calculate the content
   * length.
   */
  withhold_grpc_frames?:
    | boolean
    | undefined;
  /**
   * When :ref:`withhold_grpc_frames
   * <envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.withhold_grpc_frames>`
   * is true, this option controls how Envoy calculates the ``Content-Length``. When
   * ``response_size_header`` is empty, Envoy will buffer the upstream response to calculate its
   * size. When ``response_size_header`` is set to a non-empty string, Envoy will stream the response
   * to the downstream and it will use the value of the response header with this name to set the
   * ``Content-Length`` header and gRPC frame size. If the header with this name is repeated, only
   * the first value will be used.
   *
   * Envoy will treat the upstream response as an error if this option is specified and the header
   * is missing or if the value does not match the actual response body size.
   */
  response_size_header?: string | undefined;
}

/** gRPC reverse bridge filter configuration per virtualhost/route/weighted-cluster level. */
export interface FilterConfigPerRoute {
  $type: "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute";
  /**
   * If true, disables gRPC reverse bridge filter for this particular vhost or route.
   * If disabled is specified in multiple per-filter-configs, the most specific one will be used.
   */
  disabled?: boolean | undefined;
}

function createBaseFilterConfig(): FilterConfig {
  return { $type: "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig" };
}

export const FilterConfig: MessageFns<
  FilterConfig,
  "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig"
> = {
  $type: "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig" as const,

  encode(message: FilterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content_type !== undefined && message.content_type !== "") {
      writer.uint32(10).string(message.content_type);
    }
    if (message.withhold_grpc_frames !== undefined && message.withhold_grpc_frames !== false) {
      writer.uint32(16).bool(message.withhold_grpc_frames);
    }
    if (message.response_size_header !== undefined && message.response_size_header !== "") {
      writer.uint32(26).string(message.response_size_header);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content_type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.withhold_grpc_frames = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.response_size_header = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterConfig {
    return {
      $type: FilterConfig.$type,
      content_type: isSet(object.content_type) ? globalThis.String(object.content_type) : undefined,
      withhold_grpc_frames: isSet(object.withhold_grpc_frames)
        ? globalThis.Boolean(object.withhold_grpc_frames)
        : undefined,
      response_size_header: isSet(object.response_size_header)
        ? globalThis.String(object.response_size_header)
        : undefined,
    };
  },

  toJSON(message: FilterConfig): unknown {
    const obj: any = {};
    if (message.content_type !== undefined) {
      obj.content_type = message.content_type;
    }
    if (message.withhold_grpc_frames !== undefined) {
      obj.withhold_grpc_frames = message.withhold_grpc_frames;
    }
    if (message.response_size_header !== undefined) {
      obj.response_size_header = message.response_size_header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterConfig>, I>>(base?: I): FilterConfig {
    return FilterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterConfig>, I>>(object: I): FilterConfig {
    const message = createBaseFilterConfig();
    message.content_type = object.content_type ?? undefined;
    message.withhold_grpc_frames = object.withhold_grpc_frames ?? undefined;
    message.response_size_header = object.response_size_header ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterConfig.$type, FilterConfig);

function createBaseFilterConfigPerRoute(): FilterConfigPerRoute {
  return { $type: "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute" };
}

export const FilterConfigPerRoute: MessageFns<
  FilterConfigPerRoute,
  "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute"
> = {
  $type: "envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfigPerRoute" as const,

  encode(message: FilterConfigPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disabled !== undefined && message.disabled !== false) {
      writer.uint32(8).bool(message.disabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterConfigPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterConfigPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterConfigPerRoute {
    return {
      $type: FilterConfigPerRoute.$type,
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : undefined,
    };
  },

  toJSON(message: FilterConfigPerRoute): unknown {
    const obj: any = {};
    if (message.disabled !== undefined) {
      obj.disabled = message.disabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterConfigPerRoute>, I>>(base?: I): FilterConfigPerRoute {
    return FilterConfigPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterConfigPerRoute>, I>>(object: I): FilterConfigPerRoute {
    const message = createBaseFilterConfigPerRoute();
    message.disabled = object.disabled ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterConfigPerRoute.$type, FilterConfigPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
