// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/cors/v3/cors.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RuntimeFractionalPercent } from "../../../../../config/core/v3/base";
import { StringMatcher } from "../../../../../type/matcher/v3/string";

export const protobufPackage = "envoy.extensions.filters.http.cors.v3";

/**
 * Cors filter config. Set this in
 * ref:`http_filters <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.http_filters>`
 * to enable the CORS filter.
 *
 * Please note that the :ref:`CorsPolicy <envoy_v3_api_msg_extensions.filters.http.cors.v3.CorsPolicy>`
 * must be configured in the ``RouteConfiguration`` as ``typed_per_filter_config`` at some level to make the filter work.
 */
export interface Cors {
  $type: "envoy.extensions.filters.http.cors.v3.Cors";
}

/**
 * Per route configuration for the CORS filter. This configuration should be configured in the ``RouteConfiguration`` as ``typed_per_filter_config`` at some level to
 * make the filter work.
 * [#next-free-field: 11]
 */
export interface CorsPolicy {
  $type: "envoy.extensions.filters.http.cors.v3.CorsPolicy";
  /**
   * Specifies string patterns that match allowed origins. An origin is allowed if any of the
   * string matchers match.
   */
  allow_origin_string_match?:
    | StringMatcher[]
    | undefined;
  /** Specifies the content for the ``access-control-allow-methods`` header. */
  allow_methods?:
    | string
    | undefined;
  /** Specifies the content for the ``access-control-allow-headers`` header. */
  allow_headers?:
    | string
    | undefined;
  /** Specifies the content for the ``access-control-expose-headers`` header. */
  expose_headers?:
    | string
    | undefined;
  /** Specifies the content for the ``access-control-max-age`` header. */
  max_age?:
    | string
    | undefined;
  /** Specifies whether the resource allows credentials. */
  allow_credentials?:
    | boolean
    | undefined;
  /**
   * Specifies the % of requests for which the CORS filter is enabled.
   *
   * If neither ``filter_enabled``, nor ``shadow_enabled`` are specified, the CORS
   * filter will be enabled for 100% of the requests.
   *
   * If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is
   * specified, Envoy will lookup the runtime key to get the percentage of requests to filter.
   */
  filter_enabled?:
    | RuntimeFractionalPercent
    | undefined;
  /**
   * Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not
   * enforced.
   *
   * This field is intended to be used when ``filter_enabled`` is off. That field have to explicitly disable
   * the filter in order for this setting to take effect.
   *
   * If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
   * Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
   * and track the request's ``Origin`` to determine if it's valid but will not enforce any policies.
   */
  shadow_enabled?:
    | RuntimeFractionalPercent
    | undefined;
  /**
   * Specify whether allow requests whose target server's IP address is more private than that from
   * which the request initiator was fetched.
   *
   * More details refer to https://developer.chrome.com/blog/private-network-access-preflight.
   */
  allow_private_network_access?:
    | boolean
    | undefined;
  /**
   * Specifies if preflight requests not matching the configured allowed origin should be forwarded
   * to the upstream. Default is true.
   */
  forward_not_matching_preflights?: boolean | undefined;
}

function createBaseCors(): Cors {
  return { $type: "envoy.extensions.filters.http.cors.v3.Cors" };
}

export const Cors: MessageFns<Cors, "envoy.extensions.filters.http.cors.v3.Cors"> = {
  $type: "envoy.extensions.filters.http.cors.v3.Cors" as const,

  encode(_: Cors, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cors {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCors();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Cors {
    return { $type: Cors.$type };
  },

  toJSON(_: Cors): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Cors>, I>>(base?: I): Cors {
    return Cors.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Cors>, I>>(_: I): Cors {
    const message = createBaseCors();
    return message;
  },
};

messageTypeRegistry.set(Cors.$type, Cors);

function createBaseCorsPolicy(): CorsPolicy {
  return { $type: "envoy.extensions.filters.http.cors.v3.CorsPolicy" };
}

export const CorsPolicy: MessageFns<CorsPolicy, "envoy.extensions.filters.http.cors.v3.CorsPolicy"> = {
  $type: "envoy.extensions.filters.http.cors.v3.CorsPolicy" as const,

  encode(message: CorsPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allow_origin_string_match !== undefined && message.allow_origin_string_match.length !== 0) {
      for (const v of message.allow_origin_string_match) {
        StringMatcher.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.allow_methods !== undefined && message.allow_methods !== "") {
      writer.uint32(18).string(message.allow_methods);
    }
    if (message.allow_headers !== undefined && message.allow_headers !== "") {
      writer.uint32(26).string(message.allow_headers);
    }
    if (message.expose_headers !== undefined && message.expose_headers !== "") {
      writer.uint32(34).string(message.expose_headers);
    }
    if (message.max_age !== undefined && message.max_age !== "") {
      writer.uint32(42).string(message.max_age);
    }
    if (message.allow_credentials !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.allow_credentials! },
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.filter_enabled !== undefined) {
      RuntimeFractionalPercent.encode(message.filter_enabled, writer.uint32(58).fork()).join();
    }
    if (message.shadow_enabled !== undefined) {
      RuntimeFractionalPercent.encode(message.shadow_enabled, writer.uint32(66).fork()).join();
    }
    if (message.allow_private_network_access !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.allow_private_network_access! },
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.forward_not_matching_preflights !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.forward_not_matching_preflights! },
        writer.uint32(82).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CorsPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCorsPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.allow_origin_string_match === undefined) {
            message.allow_origin_string_match = [];
          }
          const el = StringMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.allow_origin_string_match!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.allow_methods = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.allow_headers = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expose_headers = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.max_age = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.allow_credentials = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.filter_enabled = RuntimeFractionalPercent.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.shadow_enabled = RuntimeFractionalPercent.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.allow_private_network_access = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.forward_not_matching_preflights = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CorsPolicy {
    return {
      $type: CorsPolicy.$type,
      allow_origin_string_match: globalThis.Array.isArray(object?.allow_origin_string_match)
        ? object.allow_origin_string_match.map((e: any) => StringMatcher.fromJSON(e))
        : undefined,
      allow_methods: isSet(object.allow_methods) ? globalThis.String(object.allow_methods) : undefined,
      allow_headers: isSet(object.allow_headers) ? globalThis.String(object.allow_headers) : undefined,
      expose_headers: isSet(object.expose_headers) ? globalThis.String(object.expose_headers) : undefined,
      max_age: isSet(object.max_age) ? globalThis.String(object.max_age) : undefined,
      allow_credentials: isSet(object.allow_credentials) ? Boolean(object.allow_credentials) : undefined,
      filter_enabled: isSet(object.filter_enabled)
        ? RuntimeFractionalPercent.fromJSON(object.filter_enabled)
        : undefined,
      shadow_enabled: isSet(object.shadow_enabled)
        ? RuntimeFractionalPercent.fromJSON(object.shadow_enabled)
        : undefined,
      allow_private_network_access: isSet(object.allow_private_network_access)
        ? Boolean(object.allow_private_network_access)
        : undefined,
      forward_not_matching_preflights: isSet(object.forward_not_matching_preflights)
        ? Boolean(object.forward_not_matching_preflights)
        : undefined,
    };
  },

  toJSON(message: CorsPolicy): unknown {
    const obj: any = {};
    if (message.allow_origin_string_match?.length) {
      obj.allow_origin_string_match = message.allow_origin_string_match.map((e) => StringMatcher.toJSON(e));
    }
    if (message.allow_methods !== undefined) {
      obj.allow_methods = message.allow_methods;
    }
    if (message.allow_headers !== undefined) {
      obj.allow_headers = message.allow_headers;
    }
    if (message.expose_headers !== undefined) {
      obj.expose_headers = message.expose_headers;
    }
    if (message.max_age !== undefined) {
      obj.max_age = message.max_age;
    }
    if (message.allow_credentials !== undefined) {
      obj.allow_credentials = message.allow_credentials;
    }
    if (message.filter_enabled !== undefined) {
      obj.filter_enabled = RuntimeFractionalPercent.toJSON(message.filter_enabled);
    }
    if (message.shadow_enabled !== undefined) {
      obj.shadow_enabled = RuntimeFractionalPercent.toJSON(message.shadow_enabled);
    }
    if (message.allow_private_network_access !== undefined) {
      obj.allow_private_network_access = message.allow_private_network_access;
    }
    if (message.forward_not_matching_preflights !== undefined) {
      obj.forward_not_matching_preflights = message.forward_not_matching_preflights;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CorsPolicy>, I>>(base?: I): CorsPolicy {
    return CorsPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CorsPolicy>, I>>(object: I): CorsPolicy {
    const message = createBaseCorsPolicy();
    message.allow_origin_string_match = object.allow_origin_string_match?.map((e) => StringMatcher.fromPartial(e)) ||
      undefined;
    message.allow_methods = object.allow_methods ?? undefined;
    message.allow_headers = object.allow_headers ?? undefined;
    message.expose_headers = object.expose_headers ?? undefined;
    message.max_age = object.max_age ?? undefined;
    message.allow_credentials = object.allow_credentials ?? undefined;
    message.filter_enabled = (object.filter_enabled !== undefined && object.filter_enabled !== null)
      ? RuntimeFractionalPercent.fromPartial(object.filter_enabled)
      : undefined;
    message.shadow_enabled = (object.shadow_enabled !== undefined && object.shadow_enabled !== null)
      ? RuntimeFractionalPercent.fromPartial(object.shadow_enabled)
      : undefined;
    message.allow_private_network_access = object.allow_private_network_access ?? undefined;
    message.forward_not_matching_preflights = object.forward_not_matching_preflights ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CorsPolicy.$type, CorsPolicy);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
