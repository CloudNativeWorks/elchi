// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/kill_request/v3/kill_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { FractionalPercent } from "../../../../../type/v3/percent";

export const protobufPackage = "envoy.extensions.filters.http.kill_request.v3";

/** Configuration for KillRequest filter. */
export interface KillRequest {
  $type: "envoy.extensions.filters.http.kill_request.v3.KillRequest";
  /** The probability that a Kill request will be triggered. */
  probability?:
    | FractionalPercent
    | undefined;
  /** The name of the kill request header. If this field is not empty, it will override the :ref:`default header <config_http_filters_kill_request_http_header>` name. Otherwise the default header name will be used. */
  kill_request_header?: string | undefined;
  direction?: KillRequest_Direction | undefined;
}

/**
 * On which direction should the filter check for the ``kill_request_header``.
 * Default to ``REQUEST`` if unspecified.
 */
export enum KillRequest_Direction {
  REQUEST = "REQUEST",
  RESPONSE = "RESPONSE",
}

export function killRequest_DirectionFromJSON(object: any): KillRequest_Direction {
  switch (object) {
    case 0:
    case "REQUEST":
      return KillRequest_Direction.REQUEST;
    case 1:
    case "RESPONSE":
      return KillRequest_Direction.RESPONSE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum KillRequest_Direction");
  }
}

export function killRequest_DirectionToJSON(object: KillRequest_Direction): string {
  switch (object) {
    case KillRequest_Direction.REQUEST:
      return "REQUEST";
    case KillRequest_Direction.RESPONSE:
      return "RESPONSE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum KillRequest_Direction");
  }
}

export function killRequest_DirectionToNumber(object: KillRequest_Direction): number {
  switch (object) {
    case KillRequest_Direction.REQUEST:
      return 0;
    case KillRequest_Direction.RESPONSE:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum KillRequest_Direction");
  }
}

function createBaseKillRequest(): KillRequest {
  return { $type: "envoy.extensions.filters.http.kill_request.v3.KillRequest" };
}

export const KillRequest: MessageFns<KillRequest, "envoy.extensions.filters.http.kill_request.v3.KillRequest"> = {
  $type: "envoy.extensions.filters.http.kill_request.v3.KillRequest" as const,

  encode(message: KillRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.probability !== undefined) {
      FractionalPercent.encode(message.probability, writer.uint32(10).fork()).join();
    }
    if (message.kill_request_header !== undefined && message.kill_request_header !== "") {
      writer.uint32(18).string(message.kill_request_header);
    }
    if (message.direction !== undefined && message.direction !== KillRequest_Direction.REQUEST) {
      writer.uint32(24).int32(killRequest_DirectionToNumber(message.direction));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KillRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKillRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.probability = FractionalPercent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.kill_request_header = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.direction = killRequest_DirectionFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KillRequest {
    return {
      $type: KillRequest.$type,
      probability: isSet(object.probability) ? FractionalPercent.fromJSON(object.probability) : undefined,
      kill_request_header: isSet(object.kill_request_header)
        ? globalThis.String(object.kill_request_header)
        : undefined,
      direction: isSet(object.direction) ? killRequest_DirectionFromJSON(object.direction) : undefined,
    };
  },

  toJSON(message: KillRequest): unknown {
    const obj: any = {};
    if (message.probability !== undefined) {
      obj.probability = FractionalPercent.toJSON(message.probability);
    }
    if (message.kill_request_header !== undefined) {
      obj.kill_request_header = message.kill_request_header;
    }
    if (message.direction !== undefined) {
      obj.direction = killRequest_DirectionToJSON(message.direction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KillRequest>, I>>(base?: I): KillRequest {
    return KillRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KillRequest>, I>>(object: I): KillRequest {
    const message = createBaseKillRequest();
    message.probability = (object.probability !== undefined && object.probability !== null)
      ? FractionalPercent.fromPartial(object.probability)
      : undefined;
    message.kill_request_header = object.kill_request_header ?? undefined;
    message.direction = object.direction ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(KillRequest.$type, KillRequest);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
