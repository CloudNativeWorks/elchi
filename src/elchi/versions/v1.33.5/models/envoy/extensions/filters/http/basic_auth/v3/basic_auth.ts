// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/basic_auth/v3/basic_auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DataSource } from "../../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.filters.http.basic_auth.v3";

/**
 * Basic HTTP authentication.
 *
 * Example:
 *
 * .. code-block:: yaml
 *
 *   users:
 *     inline_string: |-
 *       user1:{SHA}hashed_user1_password
 *       user2:{SHA}hashed_user2_password
 */
export interface BasicAuth {
  $type: "envoy.extensions.filters.http.basic_auth.v3.BasicAuth";
  /**
   * Username-password pairs used to verify user credentials in the "Authorization" header.
   * The value needs to be the htpasswd format.
   * Reference to https://httpd.apache.org/docs/2.4/programs/htpasswd.html
   */
  users?:
    | DataSource
    | undefined;
  /**
   * This field specifies the header name to forward a successfully authenticated user to
   * the backend. The header will be added to the request with the username as the value.
   *
   * If it is not specified, the username will not be forwarded.
   */
  forward_username_header?:
    | string
    | undefined;
  /**
   * This field specifies the request header to load the basic credential from.
   *
   * If it is not specified, the filter loads the credential from  the "Authorization" header.
   */
  authentication_header?: string | undefined;
}

/**
 * Extra settings that may be added to per-route configuration for
 * a virtual host or a cluster.
 */
export interface BasicAuthPerRoute {
  $type: "envoy.extensions.filters.http.basic_auth.v3.BasicAuthPerRoute";
  /** Username-password pairs for this route. */
  users?: DataSource | undefined;
}

function createBaseBasicAuth(): BasicAuth {
  return { $type: "envoy.extensions.filters.http.basic_auth.v3.BasicAuth" };
}

export const BasicAuth: MessageFns<BasicAuth, "envoy.extensions.filters.http.basic_auth.v3.BasicAuth"> = {
  $type: "envoy.extensions.filters.http.basic_auth.v3.BasicAuth" as const,

  encode(message: BasicAuth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.users !== undefined) {
      DataSource.encode(message.users, writer.uint32(10).fork()).join();
    }
    if (message.forward_username_header !== undefined && message.forward_username_header !== "") {
      writer.uint32(18).string(message.forward_username_header);
    }
    if (message.authentication_header !== undefined && message.authentication_header !== "") {
      writer.uint32(26).string(message.authentication_header);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BasicAuth {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBasicAuth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.forward_username_header = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.authentication_header = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BasicAuth {
    return {
      $type: BasicAuth.$type,
      users: isSet(object.users) ? DataSource.fromJSON(object.users) : undefined,
      forward_username_header: isSet(object.forward_username_header)
        ? globalThis.String(object.forward_username_header)
        : undefined,
      authentication_header: isSet(object.authentication_header)
        ? globalThis.String(object.authentication_header)
        : undefined,
    };
  },

  toJSON(message: BasicAuth): unknown {
    const obj: any = {};
    if (message.users !== undefined) {
      obj.users = DataSource.toJSON(message.users);
    }
    if (message.forward_username_header !== undefined) {
      obj.forward_username_header = message.forward_username_header;
    }
    if (message.authentication_header !== undefined) {
      obj.authentication_header = message.authentication_header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BasicAuth>, I>>(base?: I): BasicAuth {
    return BasicAuth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BasicAuth>, I>>(object: I): BasicAuth {
    const message = createBaseBasicAuth();
    message.users = (object.users !== undefined && object.users !== null)
      ? DataSource.fromPartial(object.users)
      : undefined;
    message.forward_username_header = object.forward_username_header ?? undefined;
    message.authentication_header = object.authentication_header ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(BasicAuth.$type, BasicAuth);

function createBaseBasicAuthPerRoute(): BasicAuthPerRoute {
  return { $type: "envoy.extensions.filters.http.basic_auth.v3.BasicAuthPerRoute" };
}

export const BasicAuthPerRoute: MessageFns<
  BasicAuthPerRoute,
  "envoy.extensions.filters.http.basic_auth.v3.BasicAuthPerRoute"
> = {
  $type: "envoy.extensions.filters.http.basic_auth.v3.BasicAuthPerRoute" as const,

  encode(message: BasicAuthPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.users !== undefined) {
      DataSource.encode(message.users, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BasicAuthPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBasicAuthPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users = DataSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BasicAuthPerRoute {
    return {
      $type: BasicAuthPerRoute.$type,
      users: isSet(object.users) ? DataSource.fromJSON(object.users) : undefined,
    };
  },

  toJSON(message: BasicAuthPerRoute): unknown {
    const obj: any = {};
    if (message.users !== undefined) {
      obj.users = DataSource.toJSON(message.users);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BasicAuthPerRoute>, I>>(base?: I): BasicAuthPerRoute {
    return BasicAuthPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BasicAuthPerRoute>, I>>(object: I): BasicAuthPerRoute {
    const message = createBaseBasicAuthPerRoute();
    message.users = (object.users !== undefined && object.users !== null)
      ? DataSource.fromPartial(object.users)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(BasicAuthPerRoute.$type, BasicAuthPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
