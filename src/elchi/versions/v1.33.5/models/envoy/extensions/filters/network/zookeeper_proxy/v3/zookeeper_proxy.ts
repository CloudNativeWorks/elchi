// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/zookeeper_proxy/v3/zookeeper_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.network.zookeeper_proxy.v3";

/** [#next-free-field: 10] */
export interface ZooKeeperProxy {
  $type: "envoy.extensions.filters.network.zookeeper_proxy.v3.ZooKeeperProxy";
  /**
   * The human readable prefix to use when emitting :ref:`statistics
   * <config_network_filters_zookeeper_proxy_stats>`.
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * [#not-implemented-hide:] The optional path to use for writing ZooKeeper access logs.
   * If the access log field is empty, access logs will not be written.
   */
  access_log?:
    | string
    | undefined;
  /**
   * Messages — requests, responses and events — that are bigger than this value will
   * be ignored. If it is not set, the default value is 1Mb.
   *
   * The value here should match the jute.maxbuffer property in your cluster configuration:
   *
   * https://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html#Unsafe+Options
   *
   * if that is set. If it isn't, ZooKeeper's default is also 1Mb.
   */
  max_packet_bytes?:
    | number
    | undefined;
  /**
   * Whether to emit latency threshold metrics. If not set, it defaults to false.
   * If false, setting ``default_latency_threshold`` and ``latency_threshold_overrides`` will not have effect.
   */
  enable_latency_threshold_metrics?:
    | boolean
    | undefined;
  /**
   * The default latency threshold to decide the fast/slow responses and emit metrics (used for error budget calculation).
   *
   * https://sre.google/workbook/implementing-slos/
   *
   * If it is not set, the default value is 100 milliseconds.
   */
  default_latency_threshold?:
    | Duration
    | undefined;
  /**
   * List of latency threshold overrides for opcodes.
   * If the threshold override of one opcode is not set, it will fallback to the default latency
   * threshold.
   * Specifying latency threshold overrides multiple times for one opcode is not allowed.
   */
  latency_threshold_overrides?:
    | LatencyThresholdOverride[]
    | undefined;
  /** Whether to emit per opcode request bytes metrics. If not set, it defaults to false. */
  enable_per_opcode_request_bytes_metrics?:
    | boolean
    | undefined;
  /** Whether to emit per opcode response bytes metrics. If not set, it defaults to false. */
  enable_per_opcode_response_bytes_metrics?:
    | boolean
    | undefined;
  /** Whether to emit per opcode decoder error metrics. If not set, it defaults to false. */
  enable_per_opcode_decoder_error_metrics?: boolean | undefined;
}

export interface LatencyThresholdOverride {
  $type: "envoy.extensions.filters.network.zookeeper_proxy.v3.LatencyThresholdOverride";
  /**
   * The ZooKeeper opcodes. Can be found as part of the ZooKeeper source code:
   *
   * https://github.com/apache/zookeeper/blob/master/zookeeper-server/src/main/java/org/apache/zookeeper/ZooDefs.java
   */
  opcode?:
    | LatencyThresholdOverride_Opcode
    | undefined;
  /** The latency threshold override of certain opcode. */
  threshold?: Duration | undefined;
}

export enum LatencyThresholdOverride_Opcode {
  Connect = "Connect",
  Create = "Create",
  Delete = "Delete",
  Exists = "Exists",
  GetData = "GetData",
  SetData = "SetData",
  GetAcl = "GetAcl",
  SetAcl = "SetAcl",
  GetChildren = "GetChildren",
  Sync = "Sync",
  Ping = "Ping",
  GetChildren2 = "GetChildren2",
  Check = "Check",
  Multi = "Multi",
  Create2 = "Create2",
  Reconfig = "Reconfig",
  CheckWatches = "CheckWatches",
  RemoveWatches = "RemoveWatches",
  CreateContainer = "CreateContainer",
  CreateTtl = "CreateTtl",
  Close = "Close",
  SetAuth = "SetAuth",
  SetWatches = "SetWatches",
  GetEphemerals = "GetEphemerals",
  GetAllChildrenNumber = "GetAllChildrenNumber",
  SetWatches2 = "SetWatches2",
  AddWatch = "AddWatch",
}

export function latencyThresholdOverride_OpcodeFromJSON(object: any): LatencyThresholdOverride_Opcode {
  switch (object) {
    case 0:
    case "Connect":
      return LatencyThresholdOverride_Opcode.Connect;
    case 1:
    case "Create":
      return LatencyThresholdOverride_Opcode.Create;
    case 2:
    case "Delete":
      return LatencyThresholdOverride_Opcode.Delete;
    case 3:
    case "Exists":
      return LatencyThresholdOverride_Opcode.Exists;
    case 4:
    case "GetData":
      return LatencyThresholdOverride_Opcode.GetData;
    case 5:
    case "SetData":
      return LatencyThresholdOverride_Opcode.SetData;
    case 6:
    case "GetAcl":
      return LatencyThresholdOverride_Opcode.GetAcl;
    case 7:
    case "SetAcl":
      return LatencyThresholdOverride_Opcode.SetAcl;
    case 8:
    case "GetChildren":
      return LatencyThresholdOverride_Opcode.GetChildren;
    case 9:
    case "Sync":
      return LatencyThresholdOverride_Opcode.Sync;
    case 10:
    case "Ping":
      return LatencyThresholdOverride_Opcode.Ping;
    case 11:
    case "GetChildren2":
      return LatencyThresholdOverride_Opcode.GetChildren2;
    case 12:
    case "Check":
      return LatencyThresholdOverride_Opcode.Check;
    case 13:
    case "Multi":
      return LatencyThresholdOverride_Opcode.Multi;
    case 14:
    case "Create2":
      return LatencyThresholdOverride_Opcode.Create2;
    case 15:
    case "Reconfig":
      return LatencyThresholdOverride_Opcode.Reconfig;
    case 16:
    case "CheckWatches":
      return LatencyThresholdOverride_Opcode.CheckWatches;
    case 17:
    case "RemoveWatches":
      return LatencyThresholdOverride_Opcode.RemoveWatches;
    case 18:
    case "CreateContainer":
      return LatencyThresholdOverride_Opcode.CreateContainer;
    case 19:
    case "CreateTtl":
      return LatencyThresholdOverride_Opcode.CreateTtl;
    case 20:
    case "Close":
      return LatencyThresholdOverride_Opcode.Close;
    case 21:
    case "SetAuth":
      return LatencyThresholdOverride_Opcode.SetAuth;
    case 22:
    case "SetWatches":
      return LatencyThresholdOverride_Opcode.SetWatches;
    case 23:
    case "GetEphemerals":
      return LatencyThresholdOverride_Opcode.GetEphemerals;
    case 24:
    case "GetAllChildrenNumber":
      return LatencyThresholdOverride_Opcode.GetAllChildrenNumber;
    case 25:
    case "SetWatches2":
      return LatencyThresholdOverride_Opcode.SetWatches2;
    case 26:
    case "AddWatch":
      return LatencyThresholdOverride_Opcode.AddWatch;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LatencyThresholdOverride_Opcode");
  }
}

export function latencyThresholdOverride_OpcodeToJSON(object: LatencyThresholdOverride_Opcode): string {
  switch (object) {
    case LatencyThresholdOverride_Opcode.Connect:
      return "Connect";
    case LatencyThresholdOverride_Opcode.Create:
      return "Create";
    case LatencyThresholdOverride_Opcode.Delete:
      return "Delete";
    case LatencyThresholdOverride_Opcode.Exists:
      return "Exists";
    case LatencyThresholdOverride_Opcode.GetData:
      return "GetData";
    case LatencyThresholdOverride_Opcode.SetData:
      return "SetData";
    case LatencyThresholdOverride_Opcode.GetAcl:
      return "GetAcl";
    case LatencyThresholdOverride_Opcode.SetAcl:
      return "SetAcl";
    case LatencyThresholdOverride_Opcode.GetChildren:
      return "GetChildren";
    case LatencyThresholdOverride_Opcode.Sync:
      return "Sync";
    case LatencyThresholdOverride_Opcode.Ping:
      return "Ping";
    case LatencyThresholdOverride_Opcode.GetChildren2:
      return "GetChildren2";
    case LatencyThresholdOverride_Opcode.Check:
      return "Check";
    case LatencyThresholdOverride_Opcode.Multi:
      return "Multi";
    case LatencyThresholdOverride_Opcode.Create2:
      return "Create2";
    case LatencyThresholdOverride_Opcode.Reconfig:
      return "Reconfig";
    case LatencyThresholdOverride_Opcode.CheckWatches:
      return "CheckWatches";
    case LatencyThresholdOverride_Opcode.RemoveWatches:
      return "RemoveWatches";
    case LatencyThresholdOverride_Opcode.CreateContainer:
      return "CreateContainer";
    case LatencyThresholdOverride_Opcode.CreateTtl:
      return "CreateTtl";
    case LatencyThresholdOverride_Opcode.Close:
      return "Close";
    case LatencyThresholdOverride_Opcode.SetAuth:
      return "SetAuth";
    case LatencyThresholdOverride_Opcode.SetWatches:
      return "SetWatches";
    case LatencyThresholdOverride_Opcode.GetEphemerals:
      return "GetEphemerals";
    case LatencyThresholdOverride_Opcode.GetAllChildrenNumber:
      return "GetAllChildrenNumber";
    case LatencyThresholdOverride_Opcode.SetWatches2:
      return "SetWatches2";
    case LatencyThresholdOverride_Opcode.AddWatch:
      return "AddWatch";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LatencyThresholdOverride_Opcode");
  }
}

export function latencyThresholdOverride_OpcodeToNumber(object: LatencyThresholdOverride_Opcode): number {
  switch (object) {
    case LatencyThresholdOverride_Opcode.Connect:
      return 0;
    case LatencyThresholdOverride_Opcode.Create:
      return 1;
    case LatencyThresholdOverride_Opcode.Delete:
      return 2;
    case LatencyThresholdOverride_Opcode.Exists:
      return 3;
    case LatencyThresholdOverride_Opcode.GetData:
      return 4;
    case LatencyThresholdOverride_Opcode.SetData:
      return 5;
    case LatencyThresholdOverride_Opcode.GetAcl:
      return 6;
    case LatencyThresholdOverride_Opcode.SetAcl:
      return 7;
    case LatencyThresholdOverride_Opcode.GetChildren:
      return 8;
    case LatencyThresholdOverride_Opcode.Sync:
      return 9;
    case LatencyThresholdOverride_Opcode.Ping:
      return 10;
    case LatencyThresholdOverride_Opcode.GetChildren2:
      return 11;
    case LatencyThresholdOverride_Opcode.Check:
      return 12;
    case LatencyThresholdOverride_Opcode.Multi:
      return 13;
    case LatencyThresholdOverride_Opcode.Create2:
      return 14;
    case LatencyThresholdOverride_Opcode.Reconfig:
      return 15;
    case LatencyThresholdOverride_Opcode.CheckWatches:
      return 16;
    case LatencyThresholdOverride_Opcode.RemoveWatches:
      return 17;
    case LatencyThresholdOverride_Opcode.CreateContainer:
      return 18;
    case LatencyThresholdOverride_Opcode.CreateTtl:
      return 19;
    case LatencyThresholdOverride_Opcode.Close:
      return 20;
    case LatencyThresholdOverride_Opcode.SetAuth:
      return 21;
    case LatencyThresholdOverride_Opcode.SetWatches:
      return 22;
    case LatencyThresholdOverride_Opcode.GetEphemerals:
      return 23;
    case LatencyThresholdOverride_Opcode.GetAllChildrenNumber:
      return 24;
    case LatencyThresholdOverride_Opcode.SetWatches2:
      return 25;
    case LatencyThresholdOverride_Opcode.AddWatch:
      return 26;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum LatencyThresholdOverride_Opcode");
  }
}

function createBaseZooKeeperProxy(): ZooKeeperProxy {
  return { $type: "envoy.extensions.filters.network.zookeeper_proxy.v3.ZooKeeperProxy" };
}

export const ZooKeeperProxy: MessageFns<
  ZooKeeperProxy,
  "envoy.extensions.filters.network.zookeeper_proxy.v3.ZooKeeperProxy"
> = {
  $type: "envoy.extensions.filters.network.zookeeper_proxy.v3.ZooKeeperProxy" as const,

  encode(message: ZooKeeperProxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.access_log !== undefined && message.access_log !== "") {
      writer.uint32(18).string(message.access_log);
    }
    if (message.max_packet_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_packet_bytes! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.enable_latency_threshold_metrics !== undefined && message.enable_latency_threshold_metrics !== false) {
      writer.uint32(32).bool(message.enable_latency_threshold_metrics);
    }
    if (message.default_latency_threshold !== undefined) {
      Duration.encode(message.default_latency_threshold, writer.uint32(42).fork()).join();
    }
    if (message.latency_threshold_overrides !== undefined && message.latency_threshold_overrides.length !== 0) {
      for (const v of message.latency_threshold_overrides) {
        LatencyThresholdOverride.encode(v!, writer.uint32(50).fork()).join();
      }
    }
    if (
      message.enable_per_opcode_request_bytes_metrics !== undefined &&
      message.enable_per_opcode_request_bytes_metrics !== false
    ) {
      writer.uint32(56).bool(message.enable_per_opcode_request_bytes_metrics);
    }
    if (
      message.enable_per_opcode_response_bytes_metrics !== undefined &&
      message.enable_per_opcode_response_bytes_metrics !== false
    ) {
      writer.uint32(64).bool(message.enable_per_opcode_response_bytes_metrics);
    }
    if (
      message.enable_per_opcode_decoder_error_metrics !== undefined &&
      message.enable_per_opcode_decoder_error_metrics !== false
    ) {
      writer.uint32(72).bool(message.enable_per_opcode_decoder_error_metrics);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZooKeeperProxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZooKeeperProxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_log = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.max_packet_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enable_latency_threshold_metrics = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.default_latency_threshold = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          if (message.latency_threshold_overrides === undefined) {
            message.latency_threshold_overrides = [];
          }
          const el = LatencyThresholdOverride.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.latency_threshold_overrides!.push(el);
          }
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.enable_per_opcode_request_bytes_metrics = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.enable_per_opcode_response_bytes_metrics = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.enable_per_opcode_decoder_error_metrics = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZooKeeperProxy {
    return {
      $type: ZooKeeperProxy.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      access_log: isSet(object.access_log) ? globalThis.String(object.access_log) : undefined,
      max_packet_bytes: isSet(object.max_packet_bytes) ? Number(object.max_packet_bytes) : undefined,
      enable_latency_threshold_metrics: isSet(object.enable_latency_threshold_metrics)
        ? globalThis.Boolean(object.enable_latency_threshold_metrics)
        : undefined,
      default_latency_threshold: isSet(object.default_latency_threshold)
        ? Duration.fromJSON(object.default_latency_threshold)
        : undefined,
      latency_threshold_overrides: globalThis.Array.isArray(object?.latency_threshold_overrides)
        ? object.latency_threshold_overrides.map((e: any) => LatencyThresholdOverride.fromJSON(e))
        : undefined,
      enable_per_opcode_request_bytes_metrics: isSet(object.enable_per_opcode_request_bytes_metrics)
        ? globalThis.Boolean(object.enable_per_opcode_request_bytes_metrics)
        : undefined,
      enable_per_opcode_response_bytes_metrics: isSet(object.enable_per_opcode_response_bytes_metrics)
        ? globalThis.Boolean(object.enable_per_opcode_response_bytes_metrics)
        : undefined,
      enable_per_opcode_decoder_error_metrics: isSet(object.enable_per_opcode_decoder_error_metrics)
        ? globalThis.Boolean(object.enable_per_opcode_decoder_error_metrics)
        : undefined,
    };
  },

  toJSON(message: ZooKeeperProxy): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.access_log !== undefined) {
      obj.access_log = message.access_log;
    }
    if (message.max_packet_bytes !== undefined) {
      obj.max_packet_bytes = message.max_packet_bytes;
    }
    if (message.enable_latency_threshold_metrics !== undefined) {
      obj.enable_latency_threshold_metrics = message.enable_latency_threshold_metrics;
    }
    if (message.default_latency_threshold !== undefined) {
      obj.default_latency_threshold = Duration.toJSON(message.default_latency_threshold);
    }
    if (message.latency_threshold_overrides?.length) {
      obj.latency_threshold_overrides = message.latency_threshold_overrides.map((e) =>
        LatencyThresholdOverride.toJSON(e)
      );
    }
    if (message.enable_per_opcode_request_bytes_metrics !== undefined) {
      obj.enable_per_opcode_request_bytes_metrics = message.enable_per_opcode_request_bytes_metrics;
    }
    if (message.enable_per_opcode_response_bytes_metrics !== undefined) {
      obj.enable_per_opcode_response_bytes_metrics = message.enable_per_opcode_response_bytes_metrics;
    }
    if (message.enable_per_opcode_decoder_error_metrics !== undefined) {
      obj.enable_per_opcode_decoder_error_metrics = message.enable_per_opcode_decoder_error_metrics;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZooKeeperProxy>, I>>(base?: I): ZooKeeperProxy {
    return ZooKeeperProxy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZooKeeperProxy>, I>>(object: I): ZooKeeperProxy {
    const message = createBaseZooKeeperProxy();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.access_log = object.access_log ?? undefined;
    message.max_packet_bytes = object.max_packet_bytes ?? undefined;
    message.enable_latency_threshold_metrics = object.enable_latency_threshold_metrics ?? undefined;
    message.default_latency_threshold =
      (object.default_latency_threshold !== undefined && object.default_latency_threshold !== null)
        ? Duration.fromPartial(object.default_latency_threshold)
        : undefined;
    message.latency_threshold_overrides =
      object.latency_threshold_overrides?.map((e) => LatencyThresholdOverride.fromPartial(e)) || undefined;
    message.enable_per_opcode_request_bytes_metrics = object.enable_per_opcode_request_bytes_metrics ?? undefined;
    message.enable_per_opcode_response_bytes_metrics = object.enable_per_opcode_response_bytes_metrics ?? undefined;
    message.enable_per_opcode_decoder_error_metrics = object.enable_per_opcode_decoder_error_metrics ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ZooKeeperProxy.$type, ZooKeeperProxy);

function createBaseLatencyThresholdOverride(): LatencyThresholdOverride {
  return { $type: "envoy.extensions.filters.network.zookeeper_proxy.v3.LatencyThresholdOverride" };
}

export const LatencyThresholdOverride: MessageFns<
  LatencyThresholdOverride,
  "envoy.extensions.filters.network.zookeeper_proxy.v3.LatencyThresholdOverride"
> = {
  $type: "envoy.extensions.filters.network.zookeeper_proxy.v3.LatencyThresholdOverride" as const,

  encode(message: LatencyThresholdOverride, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.opcode !== undefined && message.opcode !== LatencyThresholdOverride_Opcode.Connect) {
      writer.uint32(8).int32(latencyThresholdOverride_OpcodeToNumber(message.opcode));
    }
    if (message.threshold !== undefined) {
      Duration.encode(message.threshold, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LatencyThresholdOverride {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLatencyThresholdOverride();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.opcode = latencyThresholdOverride_OpcodeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.threshold = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LatencyThresholdOverride {
    return {
      $type: LatencyThresholdOverride.$type,
      opcode: isSet(object.opcode) ? latencyThresholdOverride_OpcodeFromJSON(object.opcode) : undefined,
      threshold: isSet(object.threshold) ? Duration.fromJSON(object.threshold) : undefined,
    };
  },

  toJSON(message: LatencyThresholdOverride): unknown {
    const obj: any = {};
    if (message.opcode !== undefined) {
      obj.opcode = latencyThresholdOverride_OpcodeToJSON(message.opcode);
    }
    if (message.threshold !== undefined) {
      obj.threshold = Duration.toJSON(message.threshold);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LatencyThresholdOverride>, I>>(base?: I): LatencyThresholdOverride {
    return LatencyThresholdOverride.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LatencyThresholdOverride>, I>>(object: I): LatencyThresholdOverride {
    const message = createBaseLatencyThresholdOverride();
    message.opcode = object.opcode ?? undefined;
    message.threshold = (object.threshold !== undefined && object.threshold !== null)
      ? Duration.fromPartial(object.threshold)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(LatencyThresholdOverride.$type, LatencyThresholdOverride);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
