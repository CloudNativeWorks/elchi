// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/custom_response/local_response_policy/v3/local_response_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DataSource, HeaderValueOption } from "../../../../../config/core/v3/base";
import { SubstitutionFormatString } from "../../../../../config/core/v3/substitution_format_string";

export const protobufPackage = "envoy.extensions.http.custom_response.local_response_policy.v3";

/**
 * Custom response policy to serve a locally stored response to the
 * downstream.
 */
export interface LocalResponsePolicy {
  $type: "envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy";
  /**
   * Optional new local reply body text. It will be used
   * in the ``%LOCAL_REPLY_BODY%`` command operator in the ``body_format``.
   */
  body?:
    | DataSource
    | undefined;
  /**
   * Optional body format to be used for this response. If ``body_format`` is  not
   * provided, and ``body`` is, the contents of ``body`` will be used to populate
   * the body of the local reply without formatting.
   */
  body_format?:
    | SubstitutionFormatString
    | undefined;
  /** The new response status code if specified. */
  status_code?:
    | number
    | undefined;
  /**
   * HTTP headers to add to the response. This allows the
   * response policy to append, to add or to override headers of
   * the original response for local body, or the custom response from the
   * remote body, before it is sent to a downstream client.
   */
  response_headers_to_add?: HeaderValueOption[] | undefined;
}

function createBaseLocalResponsePolicy(): LocalResponsePolicy {
  return { $type: "envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy" };
}

export const LocalResponsePolicy: MessageFns<
  LocalResponsePolicy,
  "envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy"
> = {
  $type: "envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy" as const,

  encode(message: LocalResponsePolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.body !== undefined) {
      DataSource.encode(message.body, writer.uint32(10).fork()).join();
    }
    if (message.body_format !== undefined) {
      SubstitutionFormatString.encode(message.body_format, writer.uint32(18).fork()).join();
    }
    if (message.status_code !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.status_code! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.response_headers_to_add !== undefined && message.response_headers_to_add.length !== 0) {
      for (const v of message.response_headers_to_add) {
        HeaderValueOption.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocalResponsePolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalResponsePolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.body = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body_format = SubstitutionFormatString.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status_code = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.response_headers_to_add === undefined) {
            message.response_headers_to_add = [];
          }
          const el = HeaderValueOption.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.response_headers_to_add!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocalResponsePolicy {
    return {
      $type: LocalResponsePolicy.$type,
      body: isSet(object.body) ? DataSource.fromJSON(object.body) : undefined,
      body_format: isSet(object.body_format) ? SubstitutionFormatString.fromJSON(object.body_format) : undefined,
      status_code: isSet(object.status_code) ? Number(object.status_code) : undefined,
      response_headers_to_add: globalThis.Array.isArray(object?.response_headers_to_add)
        ? object.response_headers_to_add.map((e: any) => HeaderValueOption.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: LocalResponsePolicy): unknown {
    const obj: any = {};
    if (message.body !== undefined) {
      obj.body = DataSource.toJSON(message.body);
    }
    if (message.body_format !== undefined) {
      obj.body_format = SubstitutionFormatString.toJSON(message.body_format);
    }
    if (message.status_code !== undefined) {
      obj.status_code = message.status_code;
    }
    if (message.response_headers_to_add?.length) {
      obj.response_headers_to_add = message.response_headers_to_add.map((e) => HeaderValueOption.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocalResponsePolicy>, I>>(base?: I): LocalResponsePolicy {
    return LocalResponsePolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocalResponsePolicy>, I>>(object: I): LocalResponsePolicy {
    const message = createBaseLocalResponsePolicy();
    message.body = (object.body !== undefined && object.body !== null)
      ? DataSource.fromPartial(object.body)
      : undefined;
    message.body_format = (object.body_format !== undefined && object.body_format !== null)
      ? SubstitutionFormatString.fromPartial(object.body_format)
      : undefined;
    message.status_code = object.status_code ?? undefined;
    message.response_headers_to_add = object.response_headers_to_add?.map((e) => HeaderValueOption.fromPartial(e)) ||
      undefined;
    return message;
  },
};

messageTypeRegistry.set(LocalResponsePolicy.$type, LocalResponsePolicy);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
