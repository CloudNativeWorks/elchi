// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/compression/gzip/decompressor/v3/gzip.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.compression.gzip.decompressor.v3";

export interface Gzip {
  $type: "envoy.extensions.compression.gzip.decompressor.v3.Gzip";
  /**
   * Value from 9 to 15 that represents the base two logarithmic of the decompressor's window size.
   * The decompression window size needs to be equal or larger than the compression window size.
   * The default window size is 15.
   * This is so that the decompressor can decompress a response compressed by a compressor with any compression window size.
   * For more details about this parameter, please refer to `zlib manual <https://www.zlib.net/manual.html>`_ > inflateInit2.
   */
  window_bits?:
    | number
    | undefined;
  /**
   * Value for zlib's decompressor output buffer. If not set, defaults to 4096.
   * See https://www.zlib.net/manual.html for more details.
   */
  chunk_size?:
    | number
    | undefined;
  /**
   * An upper bound to the number of times the output buffer is allowed to be bigger than the size of
   * the accumulated input. This value is used to prevent decompression bombs. If not set, defaults to 100.
   * [#comment:TODO(rojkov): Re-design the Decompressor interface to handle compression bombs gracefully instead of this quick solution.
   * See https://github.com/envoyproxy/envoy/commit/d4c39e635603e2f23e1e08ddecf5a5fb5a706338 for details.]
   */
  max_inflate_ratio?: number | undefined;
}

function createBaseGzip(): Gzip {
  return { $type: "envoy.extensions.compression.gzip.decompressor.v3.Gzip" };
}

export const Gzip: MessageFns<Gzip, "envoy.extensions.compression.gzip.decompressor.v3.Gzip"> = {
  $type: "envoy.extensions.compression.gzip.decompressor.v3.Gzip" as const,

  encode(message: Gzip, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.window_bits !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.window_bits! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.chunk_size !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.chunk_size! }, writer.uint32(18).fork())
        .join();
    }
    if (message.max_inflate_ratio !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_inflate_ratio! },
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Gzip {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGzip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.window_bits = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chunk_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.max_inflate_ratio = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Gzip {
    return {
      $type: Gzip.$type,
      window_bits: isSet(object.window_bits) ? Number(object.window_bits) : undefined,
      chunk_size: isSet(object.chunk_size) ? Number(object.chunk_size) : undefined,
      max_inflate_ratio: isSet(object.max_inflate_ratio) ? Number(object.max_inflate_ratio) : undefined,
    };
  },

  toJSON(message: Gzip): unknown {
    const obj: any = {};
    if (message.window_bits !== undefined) {
      obj.window_bits = message.window_bits;
    }
    if (message.chunk_size !== undefined) {
      obj.chunk_size = message.chunk_size;
    }
    if (message.max_inflate_ratio !== undefined) {
      obj.max_inflate_ratio = message.max_inflate_ratio;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Gzip>, I>>(base?: I): Gzip {
    return Gzip.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Gzip>, I>>(object: I): Gzip {
    const message = createBaseGzip();
    message.window_bits = object.window_bits ?? undefined;
    message.chunk_size = object.chunk_size ?? undefined;
    message.max_inflate_ratio = object.max_inflate_ratio ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Gzip.$type, Gzip);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
