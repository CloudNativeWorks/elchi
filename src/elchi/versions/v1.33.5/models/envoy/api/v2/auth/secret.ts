// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/auth/secret.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { DataSource } from "../core/base";
import { ConfigSource } from "../core/config_source";
import { CertificateValidationContext, TlsCertificate, TlsSessionTicketKeys } from "./common";

export const protobufPackage = "envoy.api.v2.auth";

export interface GenericSecret {
  $type: "envoy.api.v2.auth.GenericSecret";
  /** Secret of generic type and is available to filters. */
  secret?: DataSource | undefined;
}

export interface SdsSecretConfig {
  $type: "envoy.api.v2.auth.SdsSecretConfig";
  /**
   * Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to.
   * When both name and config are specified, then secret can be fetched and/or reloaded via
   * SDS. When only name is specified, then secret will be loaded from static resources.
   */
  name?: string | undefined;
  sds_config?: ConfigSource | undefined;
}

/** [#next-free-field: 6] */
export interface Secret {
  $type: "envoy.api.v2.auth.Secret";
  /** Name (FQDN, UUID, SPKI, SHA256, etc.) by which the secret can be uniquely referred to. */
  name?: string | undefined;
  type?:
    | //
    { $case: "tls_certificate"; tls_certificate: TlsCertificate }
    | //
    { $case: "session_ticket_keys"; session_ticket_keys: TlsSessionTicketKeys }
    | //
    { $case: "validation_context"; validation_context: CertificateValidationContext }
    | //
    { $case: "generic_secret"; generic_secret: GenericSecret }
    | undefined;
}

function createBaseGenericSecret(): GenericSecret {
  return { $type: "envoy.api.v2.auth.GenericSecret" };
}

export const GenericSecret: MessageFns<GenericSecret, "envoy.api.v2.auth.GenericSecret"> = {
  $type: "envoy.api.v2.auth.GenericSecret" as const,

  encode(message: GenericSecret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secret !== undefined) {
      DataSource.encode(message.secret, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericSecret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericSecret();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secret = DataSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericSecret {
    return {
      $type: GenericSecret.$type,
      secret: isSet(object.secret) ? DataSource.fromJSON(object.secret) : undefined,
    };
  },

  toJSON(message: GenericSecret): unknown {
    const obj: any = {};
    if (message.secret !== undefined) {
      obj.secret = DataSource.toJSON(message.secret);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenericSecret>, I>>(base?: I): GenericSecret {
    return GenericSecret.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenericSecret>, I>>(object: I): GenericSecret {
    const message = createBaseGenericSecret();
    message.secret = (object.secret !== undefined && object.secret !== null)
      ? DataSource.fromPartial(object.secret)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(GenericSecret.$type, GenericSecret);

function createBaseSdsSecretConfig(): SdsSecretConfig {
  return { $type: "envoy.api.v2.auth.SdsSecretConfig" };
}

export const SdsSecretConfig: MessageFns<SdsSecretConfig, "envoy.api.v2.auth.SdsSecretConfig"> = {
  $type: "envoy.api.v2.auth.SdsSecretConfig" as const,

  encode(message: SdsSecretConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.sds_config !== undefined) {
      ConfigSource.encode(message.sds_config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SdsSecretConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSdsSecretConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sds_config = ConfigSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SdsSecretConfig {
    return {
      $type: SdsSecretConfig.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      sds_config: isSet(object.sds_config) ? ConfigSource.fromJSON(object.sds_config) : undefined,
    };
  },

  toJSON(message: SdsSecretConfig): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.sds_config !== undefined) {
      obj.sds_config = ConfigSource.toJSON(message.sds_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SdsSecretConfig>, I>>(base?: I): SdsSecretConfig {
    return SdsSecretConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SdsSecretConfig>, I>>(object: I): SdsSecretConfig {
    const message = createBaseSdsSecretConfig();
    message.name = object.name ?? undefined;
    message.sds_config = (object.sds_config !== undefined && object.sds_config !== null)
      ? ConfigSource.fromPartial(object.sds_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SdsSecretConfig.$type, SdsSecretConfig);

function createBaseSecret(): Secret {
  return { $type: "envoy.api.v2.auth.Secret", type: undefined };
}

export const Secret: MessageFns<Secret, "envoy.api.v2.auth.Secret"> = {
  $type: "envoy.api.v2.auth.Secret" as const,

  encode(message: Secret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    switch (message.type?.$case) {
      case "tls_certificate":
        TlsCertificate.encode(message.type.tls_certificate, writer.uint32(18).fork()).join();
        break;
      case "session_ticket_keys":
        TlsSessionTicketKeys.encode(message.type.session_ticket_keys, writer.uint32(26).fork()).join();
        break;
      case "validation_context":
        CertificateValidationContext.encode(message.type.validation_context, writer.uint32(34).fork()).join();
        break;
      case "generic_secret":
        GenericSecret.encode(message.type.generic_secret, writer.uint32(42).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = { $case: "tls_certificate", tls_certificate: TlsCertificate.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = {
            $case: "session_ticket_keys",
            session_ticket_keys: TlsSessionTicketKeys.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.type = {
            $case: "validation_context",
            validation_context: CertificateValidationContext.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.type = { $case: "generic_secret", generic_secret: GenericSecret.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret {
    return {
      $type: Secret.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      type: isSet(object.tls_certificate)
        ? { $case: "tls_certificate", tls_certificate: TlsCertificate.fromJSON(object.tls_certificate) }
        : isSet(object.session_ticket_keys)
        ? {
          $case: "session_ticket_keys",
          session_ticket_keys: TlsSessionTicketKeys.fromJSON(object.session_ticket_keys),
        }
        : isSet(object.validation_context)
        ? {
          $case: "validation_context",
          validation_context: CertificateValidationContext.fromJSON(object.validation_context),
        }
        : isSet(object.generic_secret)
        ? { $case: "generic_secret", generic_secret: GenericSecret.fromJSON(object.generic_secret) }
        : undefined,
    };
  },

  toJSON(message: Secret): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.type?.$case === "tls_certificate") {
      obj.tls_certificate = TlsCertificate.toJSON(message.type.tls_certificate);
    }
    if (message.type?.$case === "session_ticket_keys") {
      obj.session_ticket_keys = TlsSessionTicketKeys.toJSON(message.type.session_ticket_keys);
    }
    if (message.type?.$case === "validation_context") {
      obj.validation_context = CertificateValidationContext.toJSON(message.type.validation_context);
    }
    if (message.type?.$case === "generic_secret") {
      obj.generic_secret = GenericSecret.toJSON(message.type.generic_secret);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Secret>, I>>(base?: I): Secret {
    return Secret.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Secret>, I>>(object: I): Secret {
    const message = createBaseSecret();
    message.name = object.name ?? undefined;
    if (
      object.type?.$case === "tls_certificate" &&
      object.type?.tls_certificate !== undefined &&
      object.type?.tls_certificate !== null
    ) {
      message.type = {
        $case: "tls_certificate",
        tls_certificate: TlsCertificate.fromPartial(object.type.tls_certificate),
      };
    }
    if (
      object.type?.$case === "session_ticket_keys" &&
      object.type?.session_ticket_keys !== undefined &&
      object.type?.session_ticket_keys !== null
    ) {
      message.type = {
        $case: "session_ticket_keys",
        session_ticket_keys: TlsSessionTicketKeys.fromPartial(object.type.session_ticket_keys),
      };
    }
    if (
      object.type?.$case === "validation_context" &&
      object.type?.validation_context !== undefined &&
      object.type?.validation_context !== null
    ) {
      message.type = {
        $case: "validation_context",
        validation_context: CertificateValidationContext.fromPartial(object.type.validation_context),
      };
    }
    if (
      object.type?.$case === "generic_secret" &&
      object.type?.generic_secret !== undefined &&
      object.type?.generic_secret !== null
    ) {
      message.type = { $case: "generic_secret", generic_secret: GenericSecret.fromPartial(object.type.generic_secret) };
    }
    return message;
  },
};

messageTypeRegistry.set(Secret.$type, Secret);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
