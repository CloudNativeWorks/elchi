// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/v3/hash_policy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.type.v3";

/** Specifies the hash policy */
export interface HashPolicy {
  $type: "envoy.type.v3.HashPolicy";
  policy_specifier?:
    | //
    { $case: "source_ip"; source_ip: HashPolicy_SourceIp }
    | //
    { $case: "filter_state"; filter_state: HashPolicy_FilterState }
    | undefined;
}

/**
 * The source IP will be used to compute the hash used by hash-based load balancing
 * algorithms.
 */
export interface HashPolicy_SourceIp {
  $type: "envoy.type.v3.HashPolicy.SourceIp";
}

/**
 * An Object in the :ref:`filterState <arch_overview_data_sharing_between_filters>` will be used
 * to compute the hash used by hash-based load balancing algorithms.
 */
export interface HashPolicy_FilterState {
  $type: "envoy.type.v3.HashPolicy.FilterState";
  /**
   * The name of the Object in the filterState, which is an Envoy::Hashable object. If there is no
   * data associated with the key, or the stored object is not Envoy::Hashable, no hash will be
   * produced.
   */
  key?: string | undefined;
}

function createBaseHashPolicy(): HashPolicy {
  return { $type: "envoy.type.v3.HashPolicy", policy_specifier: undefined };
}

export const HashPolicy: MessageFns<HashPolicy, "envoy.type.v3.HashPolicy"> = {
  $type: "envoy.type.v3.HashPolicy" as const,

  encode(message: HashPolicy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.policy_specifier?.$case) {
      case "source_ip":
        HashPolicy_SourceIp.encode(message.policy_specifier.source_ip, writer.uint32(10).fork()).join();
        break;
      case "filter_state":
        HashPolicy_FilterState.encode(message.policy_specifier.filter_state, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HashPolicy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHashPolicy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policy_specifier = {
            $case: "source_ip",
            source_ip: HashPolicy_SourceIp.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.policy_specifier = {
            $case: "filter_state",
            filter_state: HashPolicy_FilterState.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HashPolicy {
    return {
      $type: HashPolicy.$type,
      policy_specifier: isSet(object.source_ip)
        ? { $case: "source_ip", source_ip: HashPolicy_SourceIp.fromJSON(object.source_ip) }
        : isSet(object.filter_state)
        ? { $case: "filter_state", filter_state: HashPolicy_FilterState.fromJSON(object.filter_state) }
        : undefined,
    };
  },

  toJSON(message: HashPolicy): unknown {
    const obj: any = {};
    if (message.policy_specifier?.$case === "source_ip") {
      obj.source_ip = HashPolicy_SourceIp.toJSON(message.policy_specifier.source_ip);
    }
    if (message.policy_specifier?.$case === "filter_state") {
      obj.filter_state = HashPolicy_FilterState.toJSON(message.policy_specifier.filter_state);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HashPolicy>, I>>(base?: I): HashPolicy {
    return HashPolicy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HashPolicy>, I>>(object: I): HashPolicy {
    const message = createBaseHashPolicy();
    if (
      object.policy_specifier?.$case === "source_ip" &&
      object.policy_specifier?.source_ip !== undefined &&
      object.policy_specifier?.source_ip !== null
    ) {
      message.policy_specifier = {
        $case: "source_ip",
        source_ip: HashPolicy_SourceIp.fromPartial(object.policy_specifier.source_ip),
      };
    }
    if (
      object.policy_specifier?.$case === "filter_state" &&
      object.policy_specifier?.filter_state !== undefined &&
      object.policy_specifier?.filter_state !== null
    ) {
      message.policy_specifier = {
        $case: "filter_state",
        filter_state: HashPolicy_FilterState.fromPartial(object.policy_specifier.filter_state),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(HashPolicy.$type, HashPolicy);

function createBaseHashPolicy_SourceIp(): HashPolicy_SourceIp {
  return { $type: "envoy.type.v3.HashPolicy.SourceIp" };
}

export const HashPolicy_SourceIp: MessageFns<HashPolicy_SourceIp, "envoy.type.v3.HashPolicy.SourceIp"> = {
  $type: "envoy.type.v3.HashPolicy.SourceIp" as const,

  encode(_: HashPolicy_SourceIp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HashPolicy_SourceIp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHashPolicy_SourceIp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HashPolicy_SourceIp {
    return { $type: HashPolicy_SourceIp.$type };
  },

  toJSON(_: HashPolicy_SourceIp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<HashPolicy_SourceIp>, I>>(base?: I): HashPolicy_SourceIp {
    return HashPolicy_SourceIp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HashPolicy_SourceIp>, I>>(_: I): HashPolicy_SourceIp {
    const message = createBaseHashPolicy_SourceIp();
    return message;
  },
};

messageTypeRegistry.set(HashPolicy_SourceIp.$type, HashPolicy_SourceIp);

function createBaseHashPolicy_FilterState(): HashPolicy_FilterState {
  return { $type: "envoy.type.v3.HashPolicy.FilterState" };
}

export const HashPolicy_FilterState: MessageFns<HashPolicy_FilterState, "envoy.type.v3.HashPolicy.FilterState"> = {
  $type: "envoy.type.v3.HashPolicy.FilterState" as const,

  encode(message: HashPolicy_FilterState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HashPolicy_FilterState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHashPolicy_FilterState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HashPolicy_FilterState {
    return { $type: HashPolicy_FilterState.$type, key: isSet(object.key) ? globalThis.String(object.key) : undefined };
  },

  toJSON(message: HashPolicy_FilterState): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HashPolicy_FilterState>, I>>(base?: I): HashPolicy_FilterState {
    return HashPolicy_FilterState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HashPolicy_FilterState>, I>>(object: I): HashPolicy_FilterState {
    const message = createBaseHashPolicy_FilterState();
    message.key = object.key ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HashPolicy_FilterState.$type, HashPolicy_FilterState);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
