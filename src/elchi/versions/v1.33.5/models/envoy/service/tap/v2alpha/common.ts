// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/tap/v2alpha/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { RuntimeFractionalPercent } from "../../../api/v2/core/base";
import { GrpcService } from "../../../api/v2/core/grpc_service";
import { HeaderMatcher } from "../../../api/v2/route/route_components";

export const protobufPackage = "envoy.service.tap.v2alpha";

/** Tap configuration. */
export interface TapConfig {
  $type: "envoy.service.tap.v2alpha.TapConfig";
  /**
   * The match configuration. If the configuration matches the data source being tapped, a tap will
   * occur, with the result written to the configured output.
   */
  match_config?:
    | MatchPredicate
    | undefined;
  /**
   * The tap output configuration. If a match configuration matches a data source being tapped,
   * a tap will occur and the data will be written to the configured output.
   */
  output_config?:
    | OutputConfig
    | undefined;
  /**
   * [#not-implemented-hide:] Specify if Tap matching is enabled. The % of requests\connections for
   * which the tap matching is enabled. When not enabled, the request\connection will not be
   * recorded.
   *
   * .. note::
   *
   *   This field defaults to 100/:ref:`HUNDRED
   *   <envoy_api_enum_type.FractionalPercent.DenominatorType>`.
   */
  tap_enabled?: RuntimeFractionalPercent | undefined;
}

/**
 * Tap match configuration. This is a recursive structure which allows complex nested match
 * configurations to be built using various logical operators.
 * [#next-free-field: 9]
 */
export interface MatchPredicate {
  $type: "envoy.service.tap.v2alpha.MatchPredicate";
  rule?:
    | //
    /**
     * A set that describes a logical OR. If any member of the set matches, the match configuration
     * matches.
     */
    { $case: "or_match"; or_match: MatchPredicate_MatchSet }
    | //
    /**
     * A set that describes a logical AND. If all members of the set match, the match configuration
     * matches.
     */
    { $case: "and_match"; and_match: MatchPredicate_MatchSet }
    | //
    /** A negation match. The match configuration will match if the negated match condition matches. */
    { $case: "not_match"; not_match: MatchPredicate }
    | //
    /** The match configuration will always match. */
    { $case: "any_match"; any_match: boolean }
    | //
    /** HTTP request headers match configuration. */
    { $case: "http_request_headers_match"; http_request_headers_match: HttpHeadersMatch }
    | //
    /** HTTP request trailers match configuration. */
    { $case: "http_request_trailers_match"; http_request_trailers_match: HttpHeadersMatch }
    | //
    /** HTTP response headers match configuration. */
    { $case: "http_response_headers_match"; http_response_headers_match: HttpHeadersMatch }
    | //
    /** HTTP response trailers match configuration. */
    { $case: "http_response_trailers_match"; http_response_trailers_match: HttpHeadersMatch }
    | undefined;
}

/** A set of match configurations used for logical operations. */
export interface MatchPredicate_MatchSet {
  $type: "envoy.service.tap.v2alpha.MatchPredicate.MatchSet";
  /** The list of rules that make up the set. */
  rules?: MatchPredicate[] | undefined;
}

/** HTTP headers match configuration. */
export interface HttpHeadersMatch {
  $type: "envoy.service.tap.v2alpha.HttpHeadersMatch";
  /** HTTP headers to match. */
  headers?: HeaderMatcher[] | undefined;
}

/** Tap output configuration. */
export interface OutputConfig {
  $type: "envoy.service.tap.v2alpha.OutputConfig";
  /**
   * Output sinks for tap data. Currently a single sink is allowed in the list. Once multiple
   * sink types are supported this constraint will be relaxed.
   */
  sinks?:
    | OutputSink[]
    | undefined;
  /**
   * For buffered tapping, the maximum amount of received body that will be buffered prior to
   * truncation. If truncation occurs, the :ref:`truncated
   * <envoy_api_field_data.tap.v2alpha.Body.truncated>` field will be set. If not specified, the
   * default is 1KiB.
   */
  max_buffered_rx_bytes?:
    | number
    | undefined;
  /**
   * For buffered tapping, the maximum amount of transmitted body that will be buffered prior to
   * truncation. If truncation occurs, the :ref:`truncated
   * <envoy_api_field_data.tap.v2alpha.Body.truncated>` field will be set. If not specified, the
   * default is 1KiB.
   */
  max_buffered_tx_bytes?:
    | number
    | undefined;
  /**
   * Indicates whether taps produce a single buffered message per tap, or multiple streamed
   * messages per tap in the emitted :ref:`TraceWrapper
   * <envoy_api_msg_data.tap.v2alpha.TraceWrapper>` messages. Note that streamed tapping does not
   * mean that no buffering takes place. Buffering may be required if data is processed before a
   * match can be determined. See the HTTP tap filter :ref:`streaming
   * <config_http_filters_tap_streaming>` documentation for more information.
   */
  streaming?: boolean | undefined;
}

/** Tap output sink configuration. */
export interface OutputSink {
  $type: "envoy.service.tap.v2alpha.OutputSink";
  /** Sink output format. */
  format?: OutputSink_Format | undefined;
  output_sink_type?:
    | //
    /**
     * Tap output will be streamed out the :http:post:`/tap` admin endpoint.
     *
     * .. attention::
     *
     *   It is only allowed to specify the streaming admin output sink if the tap is being
     *   configured from the :http:post:`/tap` admin endpoint. Thus, if an extension has
     *   been configured to receive tap configuration from some other source (e.g., static
     *   file, XDS, etc.) configuring the streaming admin output type will fail.
     */
    { $case: "streaming_admin"; streaming_admin: StreamingAdminSink }
    | //
    /** Tap output will be written to a file per tap sink. */
    { $case: "file_per_tap"; file_per_tap: FilePerTapSink }
    | //
    /**
     * [#not-implemented-hide:]
     * GrpcService to stream data to. The format argument must be PROTO_BINARY.
     */
    { $case: "streaming_grpc"; streaming_grpc: StreamingGrpcSink }
    | undefined;
}

/**
 * Output format. All output is in the form of one or more :ref:`TraceWrapper
 * <envoy_api_msg_data.tap.v2alpha.TraceWrapper>` messages. This enumeration indicates
 * how those messages are written. Note that not all sinks support all output formats. See
 * individual sink documentation for more information.
 */
export enum OutputSink_Format {
  /**
   * JSON_BODY_AS_BYTES - Each message will be written as JSON. Any :ref:`body <envoy_api_msg_data.tap.v2alpha.Body>`
   * data will be present in the :ref:`as_bytes
   * <envoy_api_field_data.tap.v2alpha.Body.as_bytes>` field. This means that body data will be
   * base64 encoded as per the `proto3 JSON mappings
   * <https://developers.google.com/protocol-buffers/docs/proto3#json>`_.
   */
  JSON_BODY_AS_BYTES = "JSON_BODY_AS_BYTES",
  /**
   * JSON_BODY_AS_STRING - Each message will be written as JSON. Any :ref:`body <envoy_api_msg_data.tap.v2alpha.Body>`
   * data will be present in the :ref:`as_string
   * <envoy_api_field_data.tap.v2alpha.Body.as_string>` field. This means that body data will be
   * string encoded as per the `proto3 JSON mappings
   * <https://developers.google.com/protocol-buffers/docs/proto3#json>`_. This format type is
   * useful when it is known that that body is human readable (e.g., JSON over HTTP) and the
   * user wishes to view it directly without being forced to base64 decode the body.
   */
  JSON_BODY_AS_STRING = "JSON_BODY_AS_STRING",
  /**
   * PROTO_BINARY - Binary proto format. Note that binary proto is not self-delimiting. If a sink writes
   * multiple binary messages without any length information the data stream will not be
   * useful. However, for certain sinks that are self-delimiting (e.g., one message per file)
   * this output format makes consumption simpler.
   */
  PROTO_BINARY = "PROTO_BINARY",
  /**
   * PROTO_BINARY_LENGTH_DELIMITED - Messages are written as a sequence tuples, where each tuple is the message length encoded
   * as a `protobuf 32-bit varint
   * <https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.io.coded_stream>`_
   * followed by the binary message. The messages can be read back using the language specific
   * protobuf coded stream implementation to obtain the message length and the message.
   */
  PROTO_BINARY_LENGTH_DELIMITED = "PROTO_BINARY_LENGTH_DELIMITED",
  /** PROTO_TEXT - Text proto format. */
  PROTO_TEXT = "PROTO_TEXT",
}

export function outputSink_FormatFromJSON(object: any): OutputSink_Format {
  switch (object) {
    case 0:
    case "JSON_BODY_AS_BYTES":
      return OutputSink_Format.JSON_BODY_AS_BYTES;
    case 1:
    case "JSON_BODY_AS_STRING":
      return OutputSink_Format.JSON_BODY_AS_STRING;
    case 2:
    case "PROTO_BINARY":
      return OutputSink_Format.PROTO_BINARY;
    case 3:
    case "PROTO_BINARY_LENGTH_DELIMITED":
      return OutputSink_Format.PROTO_BINARY_LENGTH_DELIMITED;
    case 4:
    case "PROTO_TEXT":
      return OutputSink_Format.PROTO_TEXT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum OutputSink_Format");
  }
}

export function outputSink_FormatToJSON(object: OutputSink_Format): string {
  switch (object) {
    case OutputSink_Format.JSON_BODY_AS_BYTES:
      return "JSON_BODY_AS_BYTES";
    case OutputSink_Format.JSON_BODY_AS_STRING:
      return "JSON_BODY_AS_STRING";
    case OutputSink_Format.PROTO_BINARY:
      return "PROTO_BINARY";
    case OutputSink_Format.PROTO_BINARY_LENGTH_DELIMITED:
      return "PROTO_BINARY_LENGTH_DELIMITED";
    case OutputSink_Format.PROTO_TEXT:
      return "PROTO_TEXT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum OutputSink_Format");
  }
}

export function outputSink_FormatToNumber(object: OutputSink_Format): number {
  switch (object) {
    case OutputSink_Format.JSON_BODY_AS_BYTES:
      return 0;
    case OutputSink_Format.JSON_BODY_AS_STRING:
      return 1;
    case OutputSink_Format.PROTO_BINARY:
      return 2;
    case OutputSink_Format.PROTO_BINARY_LENGTH_DELIMITED:
      return 3;
    case OutputSink_Format.PROTO_TEXT:
      return 4;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum OutputSink_Format");
  }
}

/** Streaming admin sink configuration. */
export interface StreamingAdminSink {
  $type: "envoy.service.tap.v2alpha.StreamingAdminSink";
}

/** The file per tap sink outputs a discrete file for every tapped stream. */
export interface FilePerTapSink {
  $type: "envoy.service.tap.v2alpha.FilePerTapSink";
  /**
   * Path prefix. The output file will be of the form <path_prefix>_<id>.pb, where <id> is an
   * identifier distinguishing the recorded trace for stream instances (the Envoy
   * connection ID, HTTP stream ID, etc.).
   */
  path_prefix?: string | undefined;
}

/**
 * [#not-implemented-hide:] Streaming gRPC sink configuration sends the taps to an external gRPC
 * server.
 */
export interface StreamingGrpcSink {
  $type: "envoy.service.tap.v2alpha.StreamingGrpcSink";
  /** Opaque identifier, that will be sent back to the streaming grpc server. */
  tap_id?:
    | string
    | undefined;
  /** The gRPC server that hosts the Tap Sink Service. */
  grpc_service?: GrpcService | undefined;
}

function createBaseTapConfig(): TapConfig {
  return { $type: "envoy.service.tap.v2alpha.TapConfig" };
}

export const TapConfig: MessageFns<TapConfig, "envoy.service.tap.v2alpha.TapConfig"> = {
  $type: "envoy.service.tap.v2alpha.TapConfig" as const,

  encode(message: TapConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.match_config !== undefined) {
      MatchPredicate.encode(message.match_config, writer.uint32(10).fork()).join();
    }
    if (message.output_config !== undefined) {
      OutputConfig.encode(message.output_config, writer.uint32(18).fork()).join();
    }
    if (message.tap_enabled !== undefined) {
      RuntimeFractionalPercent.encode(message.tap_enabled, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TapConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTapConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match_config = MatchPredicate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.output_config = OutputConfig.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tap_enabled = RuntimeFractionalPercent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TapConfig {
    return {
      $type: TapConfig.$type,
      match_config: isSet(object.match_config) ? MatchPredicate.fromJSON(object.match_config) : undefined,
      output_config: isSet(object.output_config) ? OutputConfig.fromJSON(object.output_config) : undefined,
      tap_enabled: isSet(object.tap_enabled) ? RuntimeFractionalPercent.fromJSON(object.tap_enabled) : undefined,
    };
  },

  toJSON(message: TapConfig): unknown {
    const obj: any = {};
    if (message.match_config !== undefined) {
      obj.match_config = MatchPredicate.toJSON(message.match_config);
    }
    if (message.output_config !== undefined) {
      obj.output_config = OutputConfig.toJSON(message.output_config);
    }
    if (message.tap_enabled !== undefined) {
      obj.tap_enabled = RuntimeFractionalPercent.toJSON(message.tap_enabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TapConfig>, I>>(base?: I): TapConfig {
    return TapConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TapConfig>, I>>(object: I): TapConfig {
    const message = createBaseTapConfig();
    message.match_config = (object.match_config !== undefined && object.match_config !== null)
      ? MatchPredicate.fromPartial(object.match_config)
      : undefined;
    message.output_config = (object.output_config !== undefined && object.output_config !== null)
      ? OutputConfig.fromPartial(object.output_config)
      : undefined;
    message.tap_enabled = (object.tap_enabled !== undefined && object.tap_enabled !== null)
      ? RuntimeFractionalPercent.fromPartial(object.tap_enabled)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(TapConfig.$type, TapConfig);

function createBaseMatchPredicate(): MatchPredicate {
  return { $type: "envoy.service.tap.v2alpha.MatchPredicate", rule: undefined };
}

export const MatchPredicate: MessageFns<MatchPredicate, "envoy.service.tap.v2alpha.MatchPredicate"> = {
  $type: "envoy.service.tap.v2alpha.MatchPredicate" as const,

  encode(message: MatchPredicate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.rule?.$case) {
      case "or_match":
        MatchPredicate_MatchSet.encode(message.rule.or_match, writer.uint32(10).fork()).join();
        break;
      case "and_match":
        MatchPredicate_MatchSet.encode(message.rule.and_match, writer.uint32(18).fork()).join();
        break;
      case "not_match":
        MatchPredicate.encode(message.rule.not_match, writer.uint32(26).fork()).join();
        break;
      case "any_match":
        writer.uint32(32).bool(message.rule.any_match);
        break;
      case "http_request_headers_match":
        HttpHeadersMatch.encode(message.rule.http_request_headers_match, writer.uint32(42).fork()).join();
        break;
      case "http_request_trailers_match":
        HttpHeadersMatch.encode(message.rule.http_request_trailers_match, writer.uint32(50).fork()).join();
        break;
      case "http_response_headers_match":
        HttpHeadersMatch.encode(message.rule.http_response_headers_match, writer.uint32(58).fork()).join();
        break;
      case "http_response_trailers_match":
        HttpHeadersMatch.encode(message.rule.http_response_trailers_match, writer.uint32(66).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatchPredicate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatchPredicate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rule = { $case: "or_match", or_match: MatchPredicate_MatchSet.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rule = { $case: "and_match", and_match: MatchPredicate_MatchSet.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rule = { $case: "not_match", not_match: MatchPredicate.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.rule = { $case: "any_match", any_match: reader.bool() };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rule = {
            $case: "http_request_headers_match",
            http_request_headers_match: HttpHeadersMatch.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rule = {
            $case: "http_request_trailers_match",
            http_request_trailers_match: HttpHeadersMatch.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rule = {
            $case: "http_response_headers_match",
            http_response_headers_match: HttpHeadersMatch.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.rule = {
            $case: "http_response_trailers_match",
            http_response_trailers_match: HttpHeadersMatch.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatchPredicate {
    return {
      $type: MatchPredicate.$type,
      rule: isSet(object.or_match)
        ? { $case: "or_match", or_match: MatchPredicate_MatchSet.fromJSON(object.or_match) }
        : isSet(object.and_match)
        ? { $case: "and_match", and_match: MatchPredicate_MatchSet.fromJSON(object.and_match) }
        : isSet(object.not_match)
        ? { $case: "not_match", not_match: MatchPredicate.fromJSON(object.not_match) }
        : isSet(object.any_match)
        ? { $case: "any_match", any_match: globalThis.Boolean(object.any_match) }
        : isSet(object.http_request_headers_match)
        ? {
          $case: "http_request_headers_match",
          http_request_headers_match: HttpHeadersMatch.fromJSON(object.http_request_headers_match),
        }
        : isSet(object.http_request_trailers_match)
        ? {
          $case: "http_request_trailers_match",
          http_request_trailers_match: HttpHeadersMatch.fromJSON(object.http_request_trailers_match),
        }
        : isSet(object.http_response_headers_match)
        ? {
          $case: "http_response_headers_match",
          http_response_headers_match: HttpHeadersMatch.fromJSON(object.http_response_headers_match),
        }
        : isSet(object.http_response_trailers_match)
        ? {
          $case: "http_response_trailers_match",
          http_response_trailers_match: HttpHeadersMatch.fromJSON(object.http_response_trailers_match),
        }
        : undefined,
    };
  },

  toJSON(message: MatchPredicate): unknown {
    const obj: any = {};
    if (message.rule?.$case === "or_match") {
      obj.or_match = MatchPredicate_MatchSet.toJSON(message.rule.or_match);
    }
    if (message.rule?.$case === "and_match") {
      obj.and_match = MatchPredicate_MatchSet.toJSON(message.rule.and_match);
    }
    if (message.rule?.$case === "not_match") {
      obj.not_match = MatchPredicate.toJSON(message.rule.not_match);
    }
    if (message.rule?.$case === "any_match") {
      obj.any_match = message.rule.any_match;
    }
    if (message.rule?.$case === "http_request_headers_match") {
      obj.http_request_headers_match = HttpHeadersMatch.toJSON(message.rule.http_request_headers_match);
    }
    if (message.rule?.$case === "http_request_trailers_match") {
      obj.http_request_trailers_match = HttpHeadersMatch.toJSON(message.rule.http_request_trailers_match);
    }
    if (message.rule?.$case === "http_response_headers_match") {
      obj.http_response_headers_match = HttpHeadersMatch.toJSON(message.rule.http_response_headers_match);
    }
    if (message.rule?.$case === "http_response_trailers_match") {
      obj.http_response_trailers_match = HttpHeadersMatch.toJSON(message.rule.http_response_trailers_match);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MatchPredicate>, I>>(base?: I): MatchPredicate {
    return MatchPredicate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MatchPredicate>, I>>(object: I): MatchPredicate {
    const message = createBaseMatchPredicate();
    if (object.rule?.$case === "or_match" && object.rule?.or_match !== undefined && object.rule?.or_match !== null) {
      message.rule = { $case: "or_match", or_match: MatchPredicate_MatchSet.fromPartial(object.rule.or_match) };
    }
    if (object.rule?.$case === "and_match" && object.rule?.and_match !== undefined && object.rule?.and_match !== null) {
      message.rule = { $case: "and_match", and_match: MatchPredicate_MatchSet.fromPartial(object.rule.and_match) };
    }
    if (object.rule?.$case === "not_match" && object.rule?.not_match !== undefined && object.rule?.not_match !== null) {
      message.rule = { $case: "not_match", not_match: MatchPredicate.fromPartial(object.rule.not_match) };
    }
    if (object.rule?.$case === "any_match" && object.rule?.any_match !== undefined && object.rule?.any_match !== null) {
      message.rule = { $case: "any_match", any_match: object.rule.any_match };
    }
    if (
      object.rule?.$case === "http_request_headers_match" &&
      object.rule?.http_request_headers_match !== undefined &&
      object.rule?.http_request_headers_match !== null
    ) {
      message.rule = {
        $case: "http_request_headers_match",
        http_request_headers_match: HttpHeadersMatch.fromPartial(object.rule.http_request_headers_match),
      };
    }
    if (
      object.rule?.$case === "http_request_trailers_match" &&
      object.rule?.http_request_trailers_match !== undefined &&
      object.rule?.http_request_trailers_match !== null
    ) {
      message.rule = {
        $case: "http_request_trailers_match",
        http_request_trailers_match: HttpHeadersMatch.fromPartial(object.rule.http_request_trailers_match),
      };
    }
    if (
      object.rule?.$case === "http_response_headers_match" &&
      object.rule?.http_response_headers_match !== undefined &&
      object.rule?.http_response_headers_match !== null
    ) {
      message.rule = {
        $case: "http_response_headers_match",
        http_response_headers_match: HttpHeadersMatch.fromPartial(object.rule.http_response_headers_match),
      };
    }
    if (
      object.rule?.$case === "http_response_trailers_match" &&
      object.rule?.http_response_trailers_match !== undefined &&
      object.rule?.http_response_trailers_match !== null
    ) {
      message.rule = {
        $case: "http_response_trailers_match",
        http_response_trailers_match: HttpHeadersMatch.fromPartial(object.rule.http_response_trailers_match),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(MatchPredicate.$type, MatchPredicate);

function createBaseMatchPredicate_MatchSet(): MatchPredicate_MatchSet {
  return { $type: "envoy.service.tap.v2alpha.MatchPredicate.MatchSet" };
}

export const MatchPredicate_MatchSet: MessageFns<
  MatchPredicate_MatchSet,
  "envoy.service.tap.v2alpha.MatchPredicate.MatchSet"
> = {
  $type: "envoy.service.tap.v2alpha.MatchPredicate.MatchSet" as const,

  encode(message: MatchPredicate_MatchSet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rules !== undefined && message.rules.length !== 0) {
      for (const v of message.rules) {
        MatchPredicate.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MatchPredicate_MatchSet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMatchPredicate_MatchSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.rules === undefined) {
            message.rules = [];
          }
          const el = MatchPredicate.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.rules!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MatchPredicate_MatchSet {
    return {
      $type: MatchPredicate_MatchSet.$type,
      rules: globalThis.Array.isArray(object?.rules)
        ? object.rules.map((e: any) => MatchPredicate.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: MatchPredicate_MatchSet): unknown {
    const obj: any = {};
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => MatchPredicate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MatchPredicate_MatchSet>, I>>(base?: I): MatchPredicate_MatchSet {
    return MatchPredicate_MatchSet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MatchPredicate_MatchSet>, I>>(object: I): MatchPredicate_MatchSet {
    const message = createBaseMatchPredicate_MatchSet();
    message.rules = object.rules?.map((e) => MatchPredicate.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(MatchPredicate_MatchSet.$type, MatchPredicate_MatchSet);

function createBaseHttpHeadersMatch(): HttpHeadersMatch {
  return { $type: "envoy.service.tap.v2alpha.HttpHeadersMatch" };
}

export const HttpHeadersMatch: MessageFns<HttpHeadersMatch, "envoy.service.tap.v2alpha.HttpHeadersMatch"> = {
  $type: "envoy.service.tap.v2alpha.HttpHeadersMatch" as const,

  encode(message: HttpHeadersMatch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headers !== undefined && message.headers.length !== 0) {
      for (const v of message.headers) {
        HeaderMatcher.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpHeadersMatch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpHeadersMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.headers === undefined) {
            message.headers = [];
          }
          const el = HeaderMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.headers!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpHeadersMatch {
    return {
      $type: HttpHeadersMatch.$type,
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => HeaderMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: HttpHeadersMatch): unknown {
    const obj: any = {};
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => HeaderMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpHeadersMatch>, I>>(base?: I): HttpHeadersMatch {
    return HttpHeadersMatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpHeadersMatch>, I>>(object: I): HttpHeadersMatch {
    const message = createBaseHttpHeadersMatch();
    message.headers = object.headers?.map((e) => HeaderMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpHeadersMatch.$type, HttpHeadersMatch);

function createBaseOutputConfig(): OutputConfig {
  return { $type: "envoy.service.tap.v2alpha.OutputConfig" };
}

export const OutputConfig: MessageFns<OutputConfig, "envoy.service.tap.v2alpha.OutputConfig"> = {
  $type: "envoy.service.tap.v2alpha.OutputConfig" as const,

  encode(message: OutputConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sinks !== undefined && message.sinks.length !== 0) {
      for (const v of message.sinks) {
        OutputSink.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.max_buffered_rx_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_buffered_rx_bytes! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.max_buffered_tx_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_buffered_tx_bytes! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.streaming !== undefined && message.streaming !== false) {
      writer.uint32(32).bool(message.streaming);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.sinks === undefined) {
            message.sinks = [];
          }
          const el = OutputSink.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.sinks!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.max_buffered_rx_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.max_buffered_tx_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.streaming = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputConfig {
    return {
      $type: OutputConfig.$type,
      sinks: globalThis.Array.isArray(object?.sinks) ? object.sinks.map((e: any) => OutputSink.fromJSON(e)) : undefined,
      max_buffered_rx_bytes: isSet(object.max_buffered_rx_bytes) ? Number(object.max_buffered_rx_bytes) : undefined,
      max_buffered_tx_bytes: isSet(object.max_buffered_tx_bytes) ? Number(object.max_buffered_tx_bytes) : undefined,
      streaming: isSet(object.streaming) ? globalThis.Boolean(object.streaming) : undefined,
    };
  },

  toJSON(message: OutputConfig): unknown {
    const obj: any = {};
    if (message.sinks?.length) {
      obj.sinks = message.sinks.map((e) => OutputSink.toJSON(e));
    }
    if (message.max_buffered_rx_bytes !== undefined) {
      obj.max_buffered_rx_bytes = message.max_buffered_rx_bytes;
    }
    if (message.max_buffered_tx_bytes !== undefined) {
      obj.max_buffered_tx_bytes = message.max_buffered_tx_bytes;
    }
    if (message.streaming !== undefined) {
      obj.streaming = message.streaming;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputConfig>, I>>(base?: I): OutputConfig {
    return OutputConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputConfig>, I>>(object: I): OutputConfig {
    const message = createBaseOutputConfig();
    message.sinks = object.sinks?.map((e) => OutputSink.fromPartial(e)) || undefined;
    message.max_buffered_rx_bytes = object.max_buffered_rx_bytes ?? undefined;
    message.max_buffered_tx_bytes = object.max_buffered_tx_bytes ?? undefined;
    message.streaming = object.streaming ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(OutputConfig.$type, OutputConfig);

function createBaseOutputSink(): OutputSink {
  return { $type: "envoy.service.tap.v2alpha.OutputSink", output_sink_type: undefined };
}

export const OutputSink: MessageFns<OutputSink, "envoy.service.tap.v2alpha.OutputSink"> = {
  $type: "envoy.service.tap.v2alpha.OutputSink" as const,

  encode(message: OutputSink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.format !== undefined && message.format !== OutputSink_Format.JSON_BODY_AS_BYTES) {
      writer.uint32(8).int32(outputSink_FormatToNumber(message.format));
    }
    switch (message.output_sink_type?.$case) {
      case "streaming_admin":
        StreamingAdminSink.encode(message.output_sink_type.streaming_admin, writer.uint32(18).fork()).join();
        break;
      case "file_per_tap":
        FilePerTapSink.encode(message.output_sink_type.file_per_tap, writer.uint32(26).fork()).join();
        break;
      case "streaming_grpc":
        StreamingGrpcSink.encode(message.output_sink_type.streaming_grpc, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutputSink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutputSink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.format = outputSink_FormatFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.output_sink_type = {
            $case: "streaming_admin",
            streaming_admin: StreamingAdminSink.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.output_sink_type = {
            $case: "file_per_tap",
            file_per_tap: FilePerTapSink.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output_sink_type = {
            $case: "streaming_grpc",
            streaming_grpc: StreamingGrpcSink.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutputSink {
    return {
      $type: OutputSink.$type,
      format: isSet(object.format) ? outputSink_FormatFromJSON(object.format) : undefined,
      output_sink_type: isSet(object.streaming_admin)
        ? { $case: "streaming_admin", streaming_admin: StreamingAdminSink.fromJSON(object.streaming_admin) }
        : isSet(object.file_per_tap)
        ? { $case: "file_per_tap", file_per_tap: FilePerTapSink.fromJSON(object.file_per_tap) }
        : isSet(object.streaming_grpc)
        ? { $case: "streaming_grpc", streaming_grpc: StreamingGrpcSink.fromJSON(object.streaming_grpc) }
        : undefined,
    };
  },

  toJSON(message: OutputSink): unknown {
    const obj: any = {};
    if (message.format !== undefined) {
      obj.format = outputSink_FormatToJSON(message.format);
    }
    if (message.output_sink_type?.$case === "streaming_admin") {
      obj.streaming_admin = StreamingAdminSink.toJSON(message.output_sink_type.streaming_admin);
    }
    if (message.output_sink_type?.$case === "file_per_tap") {
      obj.file_per_tap = FilePerTapSink.toJSON(message.output_sink_type.file_per_tap);
    }
    if (message.output_sink_type?.$case === "streaming_grpc") {
      obj.streaming_grpc = StreamingGrpcSink.toJSON(message.output_sink_type.streaming_grpc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutputSink>, I>>(base?: I): OutputSink {
    return OutputSink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutputSink>, I>>(object: I): OutputSink {
    const message = createBaseOutputSink();
    message.format = object.format ?? undefined;
    if (
      object.output_sink_type?.$case === "streaming_admin" &&
      object.output_sink_type?.streaming_admin !== undefined &&
      object.output_sink_type?.streaming_admin !== null
    ) {
      message.output_sink_type = {
        $case: "streaming_admin",
        streaming_admin: StreamingAdminSink.fromPartial(object.output_sink_type.streaming_admin),
      };
    }
    if (
      object.output_sink_type?.$case === "file_per_tap" &&
      object.output_sink_type?.file_per_tap !== undefined &&
      object.output_sink_type?.file_per_tap !== null
    ) {
      message.output_sink_type = {
        $case: "file_per_tap",
        file_per_tap: FilePerTapSink.fromPartial(object.output_sink_type.file_per_tap),
      };
    }
    if (
      object.output_sink_type?.$case === "streaming_grpc" &&
      object.output_sink_type?.streaming_grpc !== undefined &&
      object.output_sink_type?.streaming_grpc !== null
    ) {
      message.output_sink_type = {
        $case: "streaming_grpc",
        streaming_grpc: StreamingGrpcSink.fromPartial(object.output_sink_type.streaming_grpc),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(OutputSink.$type, OutputSink);

function createBaseStreamingAdminSink(): StreamingAdminSink {
  return { $type: "envoy.service.tap.v2alpha.StreamingAdminSink" };
}

export const StreamingAdminSink: MessageFns<StreamingAdminSink, "envoy.service.tap.v2alpha.StreamingAdminSink"> = {
  $type: "envoy.service.tap.v2alpha.StreamingAdminSink" as const,

  encode(_: StreamingAdminSink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingAdminSink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingAdminSink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StreamingAdminSink {
    return { $type: StreamingAdminSink.$type };
  },

  toJSON(_: StreamingAdminSink): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingAdminSink>, I>>(base?: I): StreamingAdminSink {
    return StreamingAdminSink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingAdminSink>, I>>(_: I): StreamingAdminSink {
    const message = createBaseStreamingAdminSink();
    return message;
  },
};

messageTypeRegistry.set(StreamingAdminSink.$type, StreamingAdminSink);

function createBaseFilePerTapSink(): FilePerTapSink {
  return { $type: "envoy.service.tap.v2alpha.FilePerTapSink" };
}

export const FilePerTapSink: MessageFns<FilePerTapSink, "envoy.service.tap.v2alpha.FilePerTapSink"> = {
  $type: "envoy.service.tap.v2alpha.FilePerTapSink" as const,

  encode(message: FilePerTapSink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path_prefix !== undefined && message.path_prefix !== "") {
      writer.uint32(10).string(message.path_prefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilePerTapSink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilePerTapSink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path_prefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilePerTapSink {
    return {
      $type: FilePerTapSink.$type,
      path_prefix: isSet(object.path_prefix) ? globalThis.String(object.path_prefix) : undefined,
    };
  },

  toJSON(message: FilePerTapSink): unknown {
    const obj: any = {};
    if (message.path_prefix !== undefined) {
      obj.path_prefix = message.path_prefix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilePerTapSink>, I>>(base?: I): FilePerTapSink {
    return FilePerTapSink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilePerTapSink>, I>>(object: I): FilePerTapSink {
    const message = createBaseFilePerTapSink();
    message.path_prefix = object.path_prefix ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilePerTapSink.$type, FilePerTapSink);

function createBaseStreamingGrpcSink(): StreamingGrpcSink {
  return { $type: "envoy.service.tap.v2alpha.StreamingGrpcSink" };
}

export const StreamingGrpcSink: MessageFns<StreamingGrpcSink, "envoy.service.tap.v2alpha.StreamingGrpcSink"> = {
  $type: "envoy.service.tap.v2alpha.StreamingGrpcSink" as const,

  encode(message: StreamingGrpcSink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tap_id !== undefined && message.tap_id !== "") {
      writer.uint32(10).string(message.tap_id);
    }
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamingGrpcSink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamingGrpcSink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tap_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamingGrpcSink {
    return {
      $type: StreamingGrpcSink.$type,
      tap_id: isSet(object.tap_id) ? globalThis.String(object.tap_id) : undefined,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
    };
  },

  toJSON(message: StreamingGrpcSink): unknown {
    const obj: any = {};
    if (message.tap_id !== undefined) {
      obj.tap_id = message.tap_id;
    }
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamingGrpcSink>, I>>(base?: I): StreamingGrpcSink {
    return StreamingGrpcSink.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamingGrpcSink>, I>>(object: I): StreamingGrpcSink {
    const message = createBaseStreamingGrpcSink();
    message.tap_id = object.tap_id ?? undefined;
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(StreamingGrpcSink.$type, StreamingGrpcSink);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
