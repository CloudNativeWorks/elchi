// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: xds/core/v3/cidr.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value } from "../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xds.core.v3";

/**
 * CidrRange specifies an IP Address and a prefix length to construct
 * the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
 */
export interface CidrRange {
  $type: "xds.core.v3.CidrRange";
  /** IPv4 or IPv6 address, e.g. ``192.0.0.0`` or ``2001:db8::``. */
  address_prefix?:
    | string
    | undefined;
  /** Length of prefix, e.g. 0, 32. Defaults to 0 when unset. */
  prefix_len?: number | undefined;
}

function createBaseCidrRange(): CidrRange {
  return { $type: "xds.core.v3.CidrRange" };
}

export const CidrRange: MessageFns<CidrRange, "xds.core.v3.CidrRange"> = {
  $type: "xds.core.v3.CidrRange" as const,

  encode(message: CidrRange, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address_prefix !== undefined && message.address_prefix !== "") {
      writer.uint32(10).string(message.address_prefix);
    }
    if (message.prefix_len !== undefined) {
      UInt32Value.encode({ $type: "google.protobuf.UInt32Value", value: message.prefix_len! }, writer.uint32(18).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CidrRange {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCidrRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prefix_len = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CidrRange {
    return {
      $type: CidrRange.$type,
      address_prefix: isSet(object.address_prefix) ? globalThis.String(object.address_prefix) : undefined,
      prefix_len: isSet(object.prefix_len) ? Number(object.prefix_len) : undefined,
    };
  },

  toJSON(message: CidrRange): unknown {
    const obj: any = {};
    if (message.address_prefix !== undefined) {
      obj.address_prefix = message.address_prefix;
    }
    if (message.prefix_len !== undefined) {
      obj.prefix_len = message.prefix_len;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CidrRange>, I>>(base?: I): CidrRange {
    return CidrRange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CidrRange>, I>>(object: I): CidrRange {
    const message = createBaseCidrRange();
    message.address_prefix = object.address_prefix ?? undefined;
    message.prefix_len = object.prefix_len ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CidrRange.$type, CidrRange);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
