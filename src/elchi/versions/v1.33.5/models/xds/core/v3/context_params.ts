// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: xds/core/v3/context_params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xds.core.v3";

/**
 * Additional parameters that can be used to select resource variants. These include any
 * global context parameters, per-resource type client feature capabilities and per-resource
 * type functional attributes. All per-resource type attributes will be `xds.resource.`
 * prefixed and some of these are documented below:
 *
 * `xds.resource.listening_address`: The value is "IP:port" (e.g. "10.1.1.3:8080") which is
 *   the listening address of a Listener. Used in a Listener resource query.
 */
export interface ContextParams {
  $type: "xds.core.v3.ContextParams";
  params?: Map<string, string> | undefined;
}

export interface ContextParams_ParamsEntry {
  $type: "xds.core.v3.ContextParams.ParamsEntry";
  key: string;
  value: string;
}

function createBaseContextParams(): ContextParams {
  return { $type: "xds.core.v3.ContextParams" };
}

export const ContextParams: MessageFns<ContextParams, "xds.core.v3.ContextParams"> = {
  $type: "xds.core.v3.ContextParams" as const,

  encode(message: ContextParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.params || new Map()).forEach((value, key) => {
      ContextParams_ParamsEntry.encode(
        { $type: "xds.core.v3.ContextParams.ParamsEntry", key: key as any, value },
        writer.uint32(10).fork(),
      ).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContextParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContextParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ContextParams_ParamsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.params === undefined) {
              message.params = new Map();
            }
            message.params!.set(entry1.key, entry1.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContextParams {
    return {
      $type: ContextParams.$type,
      params: isObject(object.params)
        ? Object.entries(object.params).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: ContextParams): unknown {
    const obj: any = {};
    if (message.params?.size) {
      obj.params = {};
      message.params.forEach((v, k) => {
        obj.params[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContextParams>, I>>(base?: I): ContextParams {
    return ContextParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContextParams>, I>>(object: I): ContextParams {
    const message = createBaseContextParams();
    message.params = (object.params === undefined || object.params === null) ? undefined : (() => {
      const m = new Map();
      (object.params as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(ContextParams.$type, ContextParams);

function createBaseContextParams_ParamsEntry(): ContextParams_ParamsEntry {
  return { $type: "xds.core.v3.ContextParams.ParamsEntry", key: "", value: "" };
}

export const ContextParams_ParamsEntry: MessageFns<ContextParams_ParamsEntry, "xds.core.v3.ContextParams.ParamsEntry"> =
  {
    $type: "xds.core.v3.ContextParams.ParamsEntry" as const,

    encode(message: ContextParams_ParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== "") {
        writer.uint32(18).string(message.value);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ContextParams_ParamsEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseContextParams_ParamsEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): ContextParams_ParamsEntry {
      return {
        $type: ContextParams_ParamsEntry.$type,
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? globalThis.String(object.value) : "",
      };
    },

    toJSON(message: ContextParams_ParamsEntry): unknown {
      const obj: any = {};
      if (message.key !== undefined) {
        obj.key = message.key;
      }
      if (message.value !== undefined) {
        obj.value = message.value;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<ContextParams_ParamsEntry>, I>>(base?: I): ContextParams_ParamsEntry {
      return ContextParams_ParamsEntry.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<ContextParams_ParamsEntry>, I>>(object: I): ContextParams_ParamsEntry {
      const message = createBaseContextParams_ParamsEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? "";
      return message;
    },
  };

messageTypeRegistry.set(ContextParams_ParamsEntry.$type, ContextParams_ParamsEntry);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
