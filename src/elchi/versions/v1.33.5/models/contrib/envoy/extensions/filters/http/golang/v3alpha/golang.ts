// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/http/golang/v3alpha/golang.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../../../../google/protobuf/any";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.golang.v3alpha";

/** [#next-free-field: 6] */
export interface Config {
  $type: "envoy.extensions.filters.http.golang.v3alpha.Config";
  /** Globally unique ID for a dynamic library file. */
  library_id?:
    | string
    | undefined;
  /**
   * Path to a dynamic library implementing the
   * :repo:`StreamFilter API <contrib/golang/common/go/api.StreamFilter>`
   * interface.
   * [#comment:TODO(wangfakang): Support for downloading libraries from remote repositories.]
   */
  library_path?:
    | string
    | undefined;
  /**
   * Globally unique name of the Go plugin.
   *
   * This name **must** be consistent with the name registered in ``http::RegisterHttpFilterConfigFactory``,
   * and can be used to associate :ref:`route and virtualHost plugin configuration
   * <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.ConfigsPerRoute.plugins_config>`.
   */
  plugin_name?:
    | string
    | undefined;
  /**
   * Configuration for the Go plugin.
   *
   * .. note::
   *     This configuration is only parsed in the go plugin, and is therefore not validated
   *     by Envoy.
   *
   *     See the :repo:`StreamFilter API <contrib/golang/common/go/api/filter.go>`
   *     for more information about how the plugin's configuration data can be accessed.
   */
  plugin_config?:
    | Any
    | undefined;
  /**
   * Merge policy for plugin configuration.
   *
   * The Go plugin configuration supports three dimensions:
   *
   * * Virtual host’s :ref:`typed_per_filter_config <envoy_v3_api_field_config.route.v3.VirtualHost.typed_per_filter_config>`
   * * Route’s :ref:`typed_per_filter_config <envoy_v3_api_field_config.route.v3.Route.typed_per_filter_config>`
   * * The filter's :ref:`plugin_config <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.Config.plugin_config>`
   *
   * [#not-implemented-hide:]
   */
  merge_policy?: Config_MergePolicy | undefined;
}

/**
 * The meanings are as follows:
 *
 * :``MERGE_VIRTUALHOST_ROUTER_FILTER``: Pass all configuration into Go plugin.
 * :``MERGE_VIRTUALHOST_ROUTER``: Pass merged Virtual host and Router configuration into Go plugin.
 * :``OVERRIDE``: Pass merged Virtual host, Router, and plugin configuration into Go plugin.
 *
 * [#not-implemented-hide:]
 */
export enum Config_MergePolicy {
  MERGE_VIRTUALHOST_ROUTER_FILTER = "MERGE_VIRTUALHOST_ROUTER_FILTER",
  MERGE_VIRTUALHOST_ROUTER = "MERGE_VIRTUALHOST_ROUTER",
  OVERRIDE = "OVERRIDE",
}

export function config_MergePolicyFromJSON(object: any): Config_MergePolicy {
  switch (object) {
    case 0:
    case "MERGE_VIRTUALHOST_ROUTER_FILTER":
      return Config_MergePolicy.MERGE_VIRTUALHOST_ROUTER_FILTER;
    case 1:
    case "MERGE_VIRTUALHOST_ROUTER":
      return Config_MergePolicy.MERGE_VIRTUALHOST_ROUTER;
    case 3:
    case "OVERRIDE":
      return Config_MergePolicy.OVERRIDE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_MergePolicy");
  }
}

export function config_MergePolicyToJSON(object: Config_MergePolicy): string {
  switch (object) {
    case Config_MergePolicy.MERGE_VIRTUALHOST_ROUTER_FILTER:
      return "MERGE_VIRTUALHOST_ROUTER_FILTER";
    case Config_MergePolicy.MERGE_VIRTUALHOST_ROUTER:
      return "MERGE_VIRTUALHOST_ROUTER";
    case Config_MergePolicy.OVERRIDE:
      return "OVERRIDE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_MergePolicy");
  }
}

export function config_MergePolicyToNumber(object: Config_MergePolicy): number {
  switch (object) {
    case Config_MergePolicy.MERGE_VIRTUALHOST_ROUTER_FILTER:
      return 0;
    case Config_MergePolicy.MERGE_VIRTUALHOST_ROUTER:
      return 1;
    case Config_MergePolicy.OVERRIDE:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_MergePolicy");
  }
}

export interface RouterPlugin {
  $type: "envoy.extensions.filters.http.golang.v3alpha.RouterPlugin";
  override?:
    | //
    /**
     * [#not-implemented-hide:]
     * Disable the filter for this particular vhost or route.
     * If disabled is specified in multiple per-filter-configs, the most specific one will be used.
     */
    { $case: "disabled"; disabled: boolean }
    | //
    /** The config field is used for setting per-route and per-virtualhost plugin config. */
    { $case: "config"; config: Any }
    | undefined;
}

export interface ConfigsPerRoute {
  $type: "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute";
  /**
   * Configuration of the Go plugin at the per-router or per-virtualhost level,
   * keyed on the :ref:`plugin_name <envoy_v3_api_field_extensions.filters.http.golang.v3alpha.Config.plugin_name>`
   * of the Go plugin.
   */
  plugins_config?: Map<string, RouterPlugin> | undefined;
}

export interface ConfigsPerRoute_PluginsConfigEntry {
  $type: "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute.PluginsConfigEntry";
  key: string;
  value?: RouterPlugin | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.filters.http.golang.v3alpha.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.filters.http.golang.v3alpha.Config"> = {
  $type: "envoy.extensions.filters.http.golang.v3alpha.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.library_id !== undefined && message.library_id !== "") {
      writer.uint32(10).string(message.library_id);
    }
    if (message.library_path !== undefined && message.library_path !== "") {
      writer.uint32(18).string(message.library_path);
    }
    if (message.plugin_name !== undefined && message.plugin_name !== "") {
      writer.uint32(26).string(message.plugin_name);
    }
    if (message.plugin_config !== undefined) {
      Any.encode(message.plugin_config, writer.uint32(34).fork()).join();
    }
    if (
      message.merge_policy !== undefined && message.merge_policy !== Config_MergePolicy.MERGE_VIRTUALHOST_ROUTER_FILTER
    ) {
      writer.uint32(40).int32(config_MergePolicyToNumber(message.merge_policy));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.library_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.library_path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.plugin_name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.plugin_config = Any.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.merge_policy = config_MergePolicyFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      library_id: isSet(object.library_id) ? globalThis.String(object.library_id) : undefined,
      library_path: isSet(object.library_path) ? globalThis.String(object.library_path) : undefined,
      plugin_name: isSet(object.plugin_name) ? globalThis.String(object.plugin_name) : undefined,
      plugin_config: isSet(object.plugin_config) ? Any.fromJSON(object.plugin_config) : undefined,
      merge_policy: isSet(object.merge_policy) ? config_MergePolicyFromJSON(object.merge_policy) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.library_id !== undefined) {
      obj.library_id = message.library_id;
    }
    if (message.library_path !== undefined) {
      obj.library_path = message.library_path;
    }
    if (message.plugin_name !== undefined) {
      obj.plugin_name = message.plugin_name;
    }
    if (message.plugin_config !== undefined) {
      obj.plugin_config = Any.toJSON(message.plugin_config);
    }
    if (message.merge_policy !== undefined) {
      obj.merge_policy = config_MergePolicyToJSON(message.merge_policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.library_id = object.library_id ?? undefined;
    message.library_path = object.library_path ?? undefined;
    message.plugin_name = object.plugin_name ?? undefined;
    message.plugin_config = (object.plugin_config !== undefined && object.plugin_config !== null)
      ? Any.fromPartial(object.plugin_config)
      : undefined;
    message.merge_policy = object.merge_policy ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseRouterPlugin(): RouterPlugin {
  return { $type: "envoy.extensions.filters.http.golang.v3alpha.RouterPlugin", override: undefined };
}

export const RouterPlugin: MessageFns<RouterPlugin, "envoy.extensions.filters.http.golang.v3alpha.RouterPlugin"> = {
  $type: "envoy.extensions.filters.http.golang.v3alpha.RouterPlugin" as const,

  encode(message: RouterPlugin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.override?.$case) {
      case "disabled":
        writer.uint32(8).bool(message.override.disabled);
        break;
      case "config":
        Any.encode(message.override.config, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouterPlugin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouterPlugin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.override = { $case: "disabled", disabled: reader.bool() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.override = { $case: "config", config: Any.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouterPlugin {
    return {
      $type: RouterPlugin.$type,
      override: isSet(object.disabled)
        ? { $case: "disabled", disabled: globalThis.Boolean(object.disabled) }
        : isSet(object.config)
        ? { $case: "config", config: Any.fromJSON(object.config) }
        : undefined,
    };
  },

  toJSON(message: RouterPlugin): unknown {
    const obj: any = {};
    if (message.override?.$case === "disabled") {
      obj.disabled = message.override.disabled;
    }
    if (message.override?.$case === "config") {
      obj.config = Any.toJSON(message.override.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouterPlugin>, I>>(base?: I): RouterPlugin {
    return RouterPlugin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouterPlugin>, I>>(object: I): RouterPlugin {
    const message = createBaseRouterPlugin();
    if (
      object.override?.$case === "disabled" &&
      object.override?.disabled !== undefined &&
      object.override?.disabled !== null
    ) {
      message.override = { $case: "disabled", disabled: object.override.disabled };
    }
    if (
      object.override?.$case === "config" && object.override?.config !== undefined && object.override?.config !== null
    ) {
      message.override = { $case: "config", config: Any.fromPartial(object.override.config) };
    }
    return message;
  },
};

messageTypeRegistry.set(RouterPlugin.$type, RouterPlugin);

function createBaseConfigsPerRoute(): ConfigsPerRoute {
  return { $type: "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute" };
}

export const ConfigsPerRoute: MessageFns<
  ConfigsPerRoute,
  "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute"
> = {
  $type: "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute" as const,

  encode(message: ConfigsPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.plugins_config || new Map()).forEach((value, key) => {
      ConfigsPerRoute_PluginsConfigEntry.encode({
        $type: "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute.PluginsConfigEntry",
        key: key as any,
        value,
      }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigsPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigsPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ConfigsPerRoute_PluginsConfigEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.plugins_config === undefined) {
              message.plugins_config = new Map();
            }
            message.plugins_config!.set(entry1.key, entry1.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigsPerRoute {
    return {
      $type: ConfigsPerRoute.$type,
      plugins_config: isObject(object.plugins_config)
        ? Object.entries(object.plugins_config).reduce<Map<string, RouterPlugin>>((acc, [key, value]) => {
          acc.set(key, RouterPlugin.fromJSON(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: ConfigsPerRoute): unknown {
    const obj: any = {};
    if (message.plugins_config?.size) {
      obj.plugins_config = {};
      message.plugins_config.forEach((v, k) => {
        obj.plugins_config[k] = RouterPlugin.toJSON(v);
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigsPerRoute>, I>>(base?: I): ConfigsPerRoute {
    return ConfigsPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigsPerRoute>, I>>(object: I): ConfigsPerRoute {
    const message = createBaseConfigsPerRoute();
    message.plugins_config = (object.plugins_config === undefined || object.plugins_config === null)
      ? undefined
      : (() => {
        const m = new Map();
        (object.plugins_config as Map<string, RouterPlugin> ?? new Map()).forEach((value, key) => {
          if (value !== undefined) {
            m.set(key, RouterPlugin.fromPartial(value));
          }
        });
        return m;
      })();
    return message;
  },
};

messageTypeRegistry.set(ConfigsPerRoute.$type, ConfigsPerRoute);

function createBaseConfigsPerRoute_PluginsConfigEntry(): ConfigsPerRoute_PluginsConfigEntry {
  return { $type: "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute.PluginsConfigEntry", key: "" };
}

export const ConfigsPerRoute_PluginsConfigEntry: MessageFns<
  ConfigsPerRoute_PluginsConfigEntry,
  "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute.PluginsConfigEntry"
> = {
  $type: "envoy.extensions.filters.http.golang.v3alpha.ConfigsPerRoute.PluginsConfigEntry" as const,

  encode(message: ConfigsPerRoute_PluginsConfigEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      RouterPlugin.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigsPerRoute_PluginsConfigEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigsPerRoute_PluginsConfigEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = RouterPlugin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigsPerRoute_PluginsConfigEntry {
    return {
      $type: ConfigsPerRoute_PluginsConfigEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? RouterPlugin.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ConfigsPerRoute_PluginsConfigEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = RouterPlugin.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigsPerRoute_PluginsConfigEntry>, I>>(
    base?: I,
  ): ConfigsPerRoute_PluginsConfigEntry {
    return ConfigsPerRoute_PluginsConfigEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigsPerRoute_PluginsConfigEntry>, I>>(
    object: I,
  ): ConfigsPerRoute_PluginsConfigEntry {
    const message = createBaseConfigsPerRoute_PluginsConfigEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? RouterPlugin.fromPartial(object.value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ConfigsPerRoute_PluginsConfigEntry.$type, ConfigsPerRoute_PluginsConfigEntry);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
