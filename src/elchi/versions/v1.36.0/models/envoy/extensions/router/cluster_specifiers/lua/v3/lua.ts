// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/router/cluster_specifiers/lua/v3/lua.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DataSource } from "../../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.router.cluster_specifiers.lua.v3";

export interface LuaConfig {
  $type: "envoy.extensions.router.cluster_specifiers.lua.v3.LuaConfig";
  /** The lua code that Envoy will execute to select cluster. */
  source_code?:
    | DataSource
    | undefined;
  /** Default cluster. It will be used when the lua code execute failure. */
  default_cluster?: string | undefined;
}

function createBaseLuaConfig(): LuaConfig {
  return { $type: "envoy.extensions.router.cluster_specifiers.lua.v3.LuaConfig" };
}

export const LuaConfig: MessageFns<LuaConfig, "envoy.extensions.router.cluster_specifiers.lua.v3.LuaConfig"> = {
  $type: "envoy.extensions.router.cluster_specifiers.lua.v3.LuaConfig" as const,

  encode(message: LuaConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source_code !== undefined) {
      DataSource.encode(message.source_code, writer.uint32(10).fork()).join();
    }
    if (message.default_cluster !== undefined && message.default_cluster !== "") {
      writer.uint32(18).string(message.default_cluster);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LuaConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLuaConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source_code = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.default_cluster = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LuaConfig {
    return {
      $type: LuaConfig.$type,
      source_code: isSet(object.source_code) ? DataSource.fromJSON(object.source_code) : undefined,
      default_cluster: isSet(object.default_cluster) ? globalThis.String(object.default_cluster) : undefined,
    };
  },

  toJSON(message: LuaConfig): unknown {
    const obj: any = {};
    if (message.source_code !== undefined) {
      obj.source_code = DataSource.toJSON(message.source_code);
    }
    if (message.default_cluster !== undefined) {
      obj.default_cluster = message.default_cluster;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LuaConfig>, I>>(base?: I): LuaConfig {
    return LuaConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LuaConfig>, I>>(object: I): LuaConfig {
    const message = createBaseLuaConfig();
    message.source_code = (object.source_code !== undefined && object.source_code !== null)
      ? DataSource.fromPartial(object.source_code)
      : undefined;
    message.default_cluster = object.default_cluster ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(LuaConfig.$type, LuaConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
