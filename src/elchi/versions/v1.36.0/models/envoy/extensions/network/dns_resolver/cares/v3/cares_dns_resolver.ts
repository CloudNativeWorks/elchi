// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/network/dns_resolver/cares/v3/cares_dns_resolver.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { UInt32Value, UInt64Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Address } from "../../../../../config/core/v3/address";
import { DnsResolverOptions } from "../../../../../config/core/v3/resolver";

export const protobufPackage = "envoy.extensions.network.dns_resolver.cares.v3";

/**
 * Configuration for c-ares DNS resolver.
 * [#next-free-field: 11]
 */
export interface CaresDnsResolverConfig {
  $type: "envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig";
  /**
   * A list of DNS resolver addresses.
   * :ref:`use_resolvers_as_fallback <envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback>`
   * below dictates if the DNS client should override system defaults or only use the provided
   * resolvers if the system defaults are not available, i.e., as a fallback.
   */
  resolvers?:
    | Address[]
    | undefined;
  /**
   * If true use the resolvers listed in the
   * :ref:`resolvers <envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers>`
   * field only if c-ares is unable to obtain a
   * nameserver from the system (e.g., ``/etc/resolv.conf``).
   * Otherwise, the resolvers listed in the resolvers list will override the default system
   * resolvers. Defaults to false.
   */
  use_resolvers_as_fallback?:
    | boolean
    | undefined;
  /**
   * The resolver will query available network interfaces and determine if there are no available
   * interfaces for a given IP family. It will then filter these addresses from the results it
   * presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
   * provide IPv4 addresses.
   */
  filter_unroutable_families?:
    | boolean
    | undefined;
  /** Configuration of DNS resolver option flags which control the behavior of the DNS resolver. */
  dns_resolver_options?:
    | DnsResolverOptions
    | undefined;
  /**
   * This option allows the number of UDP based DNS queries to be capped.
   *
   * .. note::
   *   This is only applicable to c-ares DNS resolver currently.
   */
  udp_max_queries?:
    | number
    | undefined;
  /**
   * The number of seconds each name server is given to respond to a query on the first try of any given server.
   *
   * .. note::
   *   While the c-ares library defaults to 2 seconds, Envoy's default (if this field is unset) is 5 seconds.
   *   This adjustment was made to maintain the previous behavior after users reported an increase in DNS resolution times.
   */
  query_timeout_seconds?:
    | number
    | undefined;
  /**
   * The maximum number of query attempts the resolver will make before giving up.
   * Each attempt may use a different name server.
   *
   * .. note::
   *   While the c-ares library defaults to 3 attempts, Envoy's default (if this field is unset) is 4 attempts.
   *   This adjustment was made to maintain the previous behavior after users reported an increase in DNS resolution times.
   */
  query_tries?:
    | number
    | undefined;
  /**
   * Enable round-robin selection of name servers for DNS resolution. When enabled, the resolver will cycle through the
   * list of name servers for each resolution request. This can help distribute the query load across multiple name
   * servers. If disabled (default), the resolver will try name servers in the order they are configured.
   *
   * .. note::
   *   This setting overrides any system configuration for name server rotation.
   */
  rotate_nameservers?:
    | boolean
    | undefined;
  /**
   * Maximum EDNS0 UDP payload size in bytes.
   * If set, c-ares will include EDNS0 in DNS queries and use this value as the maximum UDP response size.
   *
   * Recommended values:
   *
   * * **1232**: Safe default (avoids fragmentation).
   * * **4096**: Maximum allowed.
   *
   * If unset, c-ares uses its internal default (usually 1232).
   */
  edns0_max_payload_size?:
    | number
    | undefined;
  /**
   * The maximum duration for which a UDP channel will be kept alive before being refreshed.
   *
   * If set, the DNS resolver will periodically reinitialize its c-ares channel after the
   * specified duration. This can help with avoiding stale socket states, and providing
   * better load distribution across UDP ports.
   *
   * If not specified, no periodic refresh will be performed.
   */
  max_udp_channel_duration?: Duration | undefined;
}

function createBaseCaresDnsResolverConfig(): CaresDnsResolverConfig {
  return { $type: "envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig" };
}

export const CaresDnsResolverConfig: MessageFns<
  CaresDnsResolverConfig,
  "envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig"
> = {
  $type: "envoy.extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig" as const,

  encode(message: CaresDnsResolverConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resolvers !== undefined && message.resolvers.length !== 0) {
      for (const v of message.resolvers) {
        Address.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.use_resolvers_as_fallback !== undefined && message.use_resolvers_as_fallback !== false) {
      writer.uint32(24).bool(message.use_resolvers_as_fallback);
    }
    if (message.filter_unroutable_families !== undefined && message.filter_unroutable_families !== false) {
      writer.uint32(32).bool(message.filter_unroutable_families);
    }
    if (message.dns_resolver_options !== undefined) {
      DnsResolverOptions.encode(message.dns_resolver_options, writer.uint32(18).fork()).join();
    }
    if (message.udp_max_queries !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.udp_max_queries! },
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.query_timeout_seconds !== undefined) {
      UInt64Value.encode(
        { $type: "google.protobuf.UInt64Value", value: message.query_timeout_seconds! },
        writer.uint32(50).fork(),
      ).join();
    }
    if (message.query_tries !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.query_tries! },
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.rotate_nameservers !== undefined && message.rotate_nameservers !== false) {
      writer.uint32(64).bool(message.rotate_nameservers);
    }
    if (message.edns0_max_payload_size !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.edns0_max_payload_size! },
        writer.uint32(74).fork(),
      ).join();
    }
    if (message.max_udp_channel_duration !== undefined) {
      Duration.encode(message.max_udp_channel_duration, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CaresDnsResolverConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCaresDnsResolverConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.resolvers === undefined) {
            message.resolvers = [];
          }
          const el = Address.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.resolvers!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.use_resolvers_as_fallback = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.filter_unroutable_families = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dns_resolver_options = DnsResolverOptions.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.udp_max_queries = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.query_timeout_seconds = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.query_tries = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.rotate_nameservers = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.edns0_max_payload_size = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.max_udp_channel_duration = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CaresDnsResolverConfig {
    return {
      $type: CaresDnsResolverConfig.$type,
      resolvers: globalThis.Array.isArray(object?.resolvers)
        ? object.resolvers.map((e: any) => Address.fromJSON(e))
        : undefined,
      use_resolvers_as_fallback: isSet(object.use_resolvers_as_fallback)
        ? globalThis.Boolean(object.use_resolvers_as_fallback)
        : undefined,
      filter_unroutable_families: isSet(object.filter_unroutable_families)
        ? globalThis.Boolean(object.filter_unroutable_families)
        : undefined,
      dns_resolver_options: isSet(object.dns_resolver_options)
        ? DnsResolverOptions.fromJSON(object.dns_resolver_options)
        : undefined,
      udp_max_queries: isSet(object.udp_max_queries) ? Number(object.udp_max_queries) : undefined,
      query_timeout_seconds: isSet(object.query_timeout_seconds) ? Number(object.query_timeout_seconds) : undefined,
      query_tries: isSet(object.query_tries) ? Number(object.query_tries) : undefined,
      rotate_nameservers: isSet(object.rotate_nameservers) ? globalThis.Boolean(object.rotate_nameservers) : undefined,
      edns0_max_payload_size: isSet(object.edns0_max_payload_size) ? Number(object.edns0_max_payload_size) : undefined,
      max_udp_channel_duration: isSet(object.max_udp_channel_duration)
        ? Duration.fromJSON(object.max_udp_channel_duration)
        : undefined,
    };
  },

  toJSON(message: CaresDnsResolverConfig): unknown {
    const obj: any = {};
    if (message.resolvers?.length) {
      obj.resolvers = message.resolvers.map((e) => Address.toJSON(e));
    }
    if (message.use_resolvers_as_fallback !== undefined) {
      obj.use_resolvers_as_fallback = message.use_resolvers_as_fallback;
    }
    if (message.filter_unroutable_families !== undefined) {
      obj.filter_unroutable_families = message.filter_unroutable_families;
    }
    if (message.dns_resolver_options !== undefined) {
      obj.dns_resolver_options = DnsResolverOptions.toJSON(message.dns_resolver_options);
    }
    if (message.udp_max_queries !== undefined) {
      obj.udp_max_queries = message.udp_max_queries;
    }
    if (message.query_timeout_seconds !== undefined) {
      obj.query_timeout_seconds = message.query_timeout_seconds;
    }
    if (message.query_tries !== undefined) {
      obj.query_tries = message.query_tries;
    }
    if (message.rotate_nameservers !== undefined) {
      obj.rotate_nameservers = message.rotate_nameservers;
    }
    if (message.edns0_max_payload_size !== undefined) {
      obj.edns0_max_payload_size = message.edns0_max_payload_size;
    }
    if (message.max_udp_channel_duration !== undefined) {
      obj.max_udp_channel_duration = Duration.toJSON(message.max_udp_channel_duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CaresDnsResolverConfig>, I>>(base?: I): CaresDnsResolverConfig {
    return CaresDnsResolverConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CaresDnsResolverConfig>, I>>(object: I): CaresDnsResolverConfig {
    const message = createBaseCaresDnsResolverConfig();
    message.resolvers = object.resolvers?.map((e) => Address.fromPartial(e)) || undefined;
    message.use_resolvers_as_fallback = object.use_resolvers_as_fallback ?? undefined;
    message.filter_unroutable_families = object.filter_unroutable_families ?? undefined;
    message.dns_resolver_options = (object.dns_resolver_options !== undefined && object.dns_resolver_options !== null)
      ? DnsResolverOptions.fromPartial(object.dns_resolver_options)
      : undefined;
    message.udp_max_queries = object.udp_max_queries ?? undefined;
    message.query_timeout_seconds = object.query_timeout_seconds ?? undefined;
    message.query_tries = object.query_tries ?? undefined;
    message.rotate_nameservers = object.rotate_nameservers ?? undefined;
    message.edns0_max_payload_size = object.edns0_max_payload_size ?? undefined;
    message.max_udp_channel_duration =
      (object.max_udp_channel_duration !== undefined && object.max_udp_channel_duration !== null)
        ? Duration.fromPartial(object.max_udp_channel_duration)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(CaresDnsResolverConfig.$type, CaresDnsResolverConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
