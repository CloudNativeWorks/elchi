// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/load_balancing_policies/ring_hash/v3/ring_hash.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { UInt32Value, UInt64Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { ConsistentHashingLbConfig, LocalityLbConfig_LocalityWeightedLbConfig } from "../../common/v3/common";

export const protobufPackage = "envoy.extensions.load_balancing_policies.ring_hash.v3";

/**
 * This configuration allows the built-in RING_HASH LB policy to be configured via the LB policy
 * extension point. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 * [#next-free-field: 8]
 */
export interface RingHash {
  $type: "envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash";
  /**
   * The hash function used to hash hosts onto the ketama ring. The value defaults to
   * :ref:`XX_HASH<envoy_v3_api_enum_value_config.cluster.v3.Cluster.RingHashLbConfig.HashFunction.XX_HASH>`.
   */
  hash_function?:
    | RingHash_HashFunction
    | undefined;
  /**
   * Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
   * provided host) the better the request distribution will reflect the desired weights. Defaults
   * to 1024 entries, and limited to 8M entries. See also
   * :ref:`maximum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size>`.
   */
  minimum_ring_size?:
    | number
    | undefined;
  /**
   * Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
   * to further constrain resource use. See also
   * :ref:`minimum_ring_size<envoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size>`.
   */
  maximum_ring_size?:
    | number
    | undefined;
  /**
   * If set to ``true``, the cluster will use hostname instead of the resolved
   * address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
   *
   * .. note::
   *   This is deprecated and please use :ref:`consistent_hashing_lb_config
   *   <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.
   *
   * @deprecated
   */
  use_hostname_for_hashing?:
    | boolean
    | undefined;
  /**
   * Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
   * no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
   * If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
   * Minimum is 100.
   *
   * This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
   * ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
   * across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
   * is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
   * the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
   * cascading overflow effect when choosing the next host in the ring/table).
   *
   * If weights are specified on the hosts, they are respected.
   *
   * This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
   * being probed, so use a higher value if you require better performance.
   *
   * .. note::
   *   This is deprecated and please use :ref:`consistent_hashing_lb_config
   *   <envoy_v3_api_field_extensions.load_balancing_policies.ring_hash.v3.RingHash.consistent_hashing_lb_config>` instead.
   *
   * @deprecated
   */
  hash_balance_factor?:
    | number
    | undefined;
  /** Common configuration for hashing-based load balancing policies. */
  consistent_hashing_lb_config?:
    | ConsistentHashingLbConfig
    | undefined;
  /** Enable locality weighted load balancing for ring hash lb explicitly. */
  locality_weighted_lb_config?: LocalityLbConfig_LocalityWeightedLbConfig | undefined;
}

/** The hash function used to hash hosts onto the ketama ring. */
export enum RingHash_HashFunction {
  /** DEFAULT_HASH - Currently defaults to XX_HASH. */
  DEFAULT_HASH = "DEFAULT_HASH",
  /** XX_HASH - Use `xxHash <https://github.com/Cyan4973/xxHash>`_. */
  XX_HASH = "XX_HASH",
  /**
   * MURMUR_HASH_2 - Use `MurmurHash2 <https://sites.google.com/site/murmurhash/>`_, this is compatible with
   * std:hash<string> in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
   * on Linux and not macOS.
   */
  MURMUR_HASH_2 = "MURMUR_HASH_2",
}

export function ringHash_HashFunctionFromJSON(object: any): RingHash_HashFunction {
  switch (object) {
    case 0:
    case "DEFAULT_HASH":
      return RingHash_HashFunction.DEFAULT_HASH;
    case 1:
    case "XX_HASH":
      return RingHash_HashFunction.XX_HASH;
    case 2:
    case "MURMUR_HASH_2":
      return RingHash_HashFunction.MURMUR_HASH_2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RingHash_HashFunction");
  }
}

export function ringHash_HashFunctionToJSON(object: RingHash_HashFunction): string {
  switch (object) {
    case RingHash_HashFunction.DEFAULT_HASH:
      return "DEFAULT_HASH";
    case RingHash_HashFunction.XX_HASH:
      return "XX_HASH";
    case RingHash_HashFunction.MURMUR_HASH_2:
      return "MURMUR_HASH_2";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RingHash_HashFunction");
  }
}

export function ringHash_HashFunctionToNumber(object: RingHash_HashFunction): number {
  switch (object) {
    case RingHash_HashFunction.DEFAULT_HASH:
      return 0;
    case RingHash_HashFunction.XX_HASH:
      return 1;
    case RingHash_HashFunction.MURMUR_HASH_2:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RingHash_HashFunction");
  }
}

function createBaseRingHash(): RingHash {
  return { $type: "envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash" };
}

export const RingHash: MessageFns<RingHash, "envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash"> = {
  $type: "envoy.extensions.load_balancing_policies.ring_hash.v3.RingHash" as const,

  encode(message: RingHash, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hash_function !== undefined && message.hash_function !== RingHash_HashFunction.DEFAULT_HASH) {
      writer.uint32(8).int32(ringHash_HashFunctionToNumber(message.hash_function));
    }
    if (message.minimum_ring_size !== undefined) {
      UInt64Value.encode(
        { $type: "google.protobuf.UInt64Value", value: message.minimum_ring_size! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.maximum_ring_size !== undefined) {
      UInt64Value.encode(
        { $type: "google.protobuf.UInt64Value", value: message.maximum_ring_size! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.use_hostname_for_hashing !== undefined && message.use_hostname_for_hashing !== false) {
      writer.uint32(32).bool(message.use_hostname_for_hashing);
    }
    if (message.hash_balance_factor !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.hash_balance_factor! },
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.consistent_hashing_lb_config !== undefined) {
      ConsistentHashingLbConfig.encode(message.consistent_hashing_lb_config, writer.uint32(50).fork()).join();
    }
    if (message.locality_weighted_lb_config !== undefined) {
      LocalityLbConfig_LocalityWeightedLbConfig.encode(message.locality_weighted_lb_config, writer.uint32(58).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RingHash {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRingHash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hash_function = ringHash_HashFunctionFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.minimum_ring_size = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.maximum_ring_size = UInt64Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.use_hostname_for_hashing = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hash_balance_factor = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.consistent_hashing_lb_config = ConsistentHashingLbConfig.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.locality_weighted_lb_config = LocalityLbConfig_LocalityWeightedLbConfig.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RingHash {
    return {
      $type: RingHash.$type,
      hash_function: isSet(object.hash_function) ? ringHash_HashFunctionFromJSON(object.hash_function) : undefined,
      minimum_ring_size: isSet(object.minimum_ring_size) ? Number(object.minimum_ring_size) : undefined,
      maximum_ring_size: isSet(object.maximum_ring_size) ? Number(object.maximum_ring_size) : undefined,
      use_hostname_for_hashing: isSet(object.use_hostname_for_hashing)
        ? globalThis.Boolean(object.use_hostname_for_hashing)
        : undefined,
      hash_balance_factor: isSet(object.hash_balance_factor) ? Number(object.hash_balance_factor) : undefined,
      consistent_hashing_lb_config: isSet(object.consistent_hashing_lb_config)
        ? ConsistentHashingLbConfig.fromJSON(object.consistent_hashing_lb_config)
        : undefined,
      locality_weighted_lb_config: isSet(object.locality_weighted_lb_config)
        ? LocalityLbConfig_LocalityWeightedLbConfig.fromJSON(object.locality_weighted_lb_config)
        : undefined,
    };
  },

  toJSON(message: RingHash): unknown {
    const obj: any = {};
    if (message.hash_function !== undefined) {
      obj.hash_function = ringHash_HashFunctionToJSON(message.hash_function);
    }
    if (message.minimum_ring_size !== undefined) {
      obj.minimum_ring_size = message.minimum_ring_size;
    }
    if (message.maximum_ring_size !== undefined) {
      obj.maximum_ring_size = message.maximum_ring_size;
    }
    if (message.use_hostname_for_hashing !== undefined) {
      obj.use_hostname_for_hashing = message.use_hostname_for_hashing;
    }
    if (message.hash_balance_factor !== undefined) {
      obj.hash_balance_factor = message.hash_balance_factor;
    }
    if (message.consistent_hashing_lb_config !== undefined) {
      obj.consistent_hashing_lb_config = ConsistentHashingLbConfig.toJSON(message.consistent_hashing_lb_config);
    }
    if (message.locality_weighted_lb_config !== undefined) {
      obj.locality_weighted_lb_config = LocalityLbConfig_LocalityWeightedLbConfig.toJSON(
        message.locality_weighted_lb_config,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RingHash>, I>>(base?: I): RingHash {
    return RingHash.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RingHash>, I>>(object: I): RingHash {
    const message = createBaseRingHash();
    message.hash_function = object.hash_function ?? undefined;
    message.minimum_ring_size = object.minimum_ring_size ?? undefined;
    message.maximum_ring_size = object.maximum_ring_size ?? undefined;
    message.use_hostname_for_hashing = object.use_hostname_for_hashing ?? undefined;
    message.hash_balance_factor = object.hash_balance_factor ?? undefined;
    message.consistent_hashing_lb_config =
      (object.consistent_hashing_lb_config !== undefined && object.consistent_hashing_lb_config !== null)
        ? ConsistentHashingLbConfig.fromPartial(object.consistent_hashing_lb_config)
        : undefined;
    message.locality_weighted_lb_config =
      (object.locality_weighted_lb_config !== undefined && object.locality_weighted_lb_config !== null)
        ? LocalityLbConfig_LocalityWeightedLbConfig.fromPartial(object.locality_weighted_lb_config)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(RingHash.$type, RingHash);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
