// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/load_balancing_policies/pick_first/v3/pick_first.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.load_balancing_policies.pick_first.v3";

/**
 * This configuration allows the built-in PICK_FIRST LB policy to be configured
 * via the LB policy extension point.
 */
export interface PickFirst {
  $type: "envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst";
  /**
   * If set to true, instructs the LB policy to shuffle the list of addresses
   * received from the name resolver before attempting to connect to them.
   */
  shuffle_address_list?: boolean | undefined;
}

function createBasePickFirst(): PickFirst {
  return { $type: "envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst" };
}

export const PickFirst: MessageFns<PickFirst, "envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst"> = {
  $type: "envoy.extensions.load_balancing_policies.pick_first.v3.PickFirst" as const,

  encode(message: PickFirst, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.shuffle_address_list !== undefined && message.shuffle_address_list !== false) {
      writer.uint32(8).bool(message.shuffle_address_list);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PickFirst {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePickFirst();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.shuffle_address_list = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PickFirst {
    return {
      $type: PickFirst.$type,
      shuffle_address_list: isSet(object.shuffle_address_list)
        ? globalThis.Boolean(object.shuffle_address_list)
        : undefined,
    };
  },

  toJSON(message: PickFirst): unknown {
    const obj: any = {};
    if (message.shuffle_address_list !== undefined) {
      obj.shuffle_address_list = message.shuffle_address_list;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PickFirst>, I>>(base?: I): PickFirst {
    return PickFirst.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PickFirst>, I>>(object: I): PickFirst {
    const message = createBasePickFirst();
    message.shuffle_address_list = object.shuffle_address_list ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(PickFirst.$type, PickFirst);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
