// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/dynamic_modules/v3/dynamic_modules.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../../../google/protobuf/any";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { DynamicModuleConfig } from "../../../../dynamic_modules/v3/dynamic_modules";

export const protobufPackage = "envoy.extensions.filters.http.dynamic_modules.v3";

/**
 * Configuration of the HTTP filter for dynamic modules. This filter allows loading shared object files
 * that can be loaded via dlopen by the HTTP filter.
 *
 * A module can be loaded by multiple HTTP filters, hence the program can be structured in a way that
 * the module is loaded only once and shared across multiple filters providing multiple functionalities.
 *
 * A dynamic module HTTP filter can opt into being a terminal filter with no upstream by setting ``terminal_filter`` to
 * true in the configuration. A terminal dynamic module can use ``send_`` ABI methods to send response headers,
 * body and trailers to the downstream.
 */
export interface DynamicModuleFilter {
  $type: "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilter";
  /** Specifies the shared-object level configuration. */
  dynamic_module_config?:
    | DynamicModuleConfig
    | undefined;
  /**
   * The name for this filter configuration. This can be used to distinguish between different filter implementations
   * inside a dynamic module. For example, a module can have completely different filter implementations.
   * When Envoy receives this configuration, it passes the filter_name to the dynamic module's HTTP filter config init function
   * together with the filter_config.
   * That way a module can decide which in-module filter implementation to use based on the name at load time.
   */
  filter_name?:
    | string
    | undefined;
  /**
   * The configuration for the filter chosen by filter_name. This is passed to the module's HTTP filter initialization function.
   * Together with the filter_name, the module can decide which in-module filter implementation to use and
   * fine-tune the behavior of the filter.
   *
   * For example, if a module has two filter implementations, one for logging and one for header manipulation,
   * filter_name is used to choose either logging or header manipulation. The filter_config can be used to
   * configure the logging level or the header manipulation behavior.
   *
   * ``google.protobuf.Struct`` is serialized as JSON before
   * passing it to the plugin. ``google.protobuf.BytesValue`` and
   * ``google.protobuf.StringValue`` are passed directly without the wrapper.
   *
   * .. code-block:: yaml
   *
   *  # Passing in a string
   *  filter_config:
   *    "@type": "type.googleapis.com/google.protobuf.StringValue"
   *    value: hello
   *
   *  # Passing in raw bytes
   *  filter_config:
   *    "@type": "type.googleapis.com/google.protobuf.BytesValue"
   *    value: aGVsbG8= # echo -n "hello" | base64
   */
  filter_config?:
    | Any
    | undefined;
  /**
   * Set true if the dynamic module is a terminal filter to use without an upstream.
   * The dynamic module is responsible for creating and sending the response to downstream.
   */
  terminal_filter?: boolean | undefined;
}

/**
 * Configuration of the HTTP per-route filter for dynamic modules. This filter allows loading shared object files
 * that can be loaded via dlopen by the HTTP filter.
 */
export interface DynamicModuleFilterPerRoute {
  $type: "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilterPerRoute";
  /** Specifies the shared-object level configuration. */
  dynamic_module_config?:
    | DynamicModuleConfig
    | undefined;
  /**
   * The name for this filter configuration. This can be used to distinguish between different filter implementations
   * inside a dynamic module. For example, a module can have completely different filter implementations.
   * When Envoy receives this configuration, it passes the filter_name to the dynamic module's HTTP per-route filter config init function
   * together with the filter_config.
   * That way a module can decide which in-module filter implementation to use based on the name at load time.
   */
  per_route_config_name?:
    | string
    | undefined;
  /**
   * The configuration for the filter chosen by filter_name. This is passed to the module's HTTP per-route filter initialization function.
   * Together with the filter_name, the module can decide which in-module filter implementation to use and
   * fine-tune the behavior of the filter on a specific route.
   *
   * For example, if a module has two filter implementations, one for logging and one for header manipulation,
   * filter_name is used to choose either logging or header manipulation. The filter_config can be used to
   * configure the logging level or the header manipulation behavior.
   *
   * ``google.protobuf.Struct`` is serialized as JSON before
   * passing it to the plugin. ``google.protobuf.BytesValue`` and
   * ``google.protobuf.StringValue`` are passed directly without the wrapper.
   *
   * .. code-block:: yaml
   *
   *  # Passing in a string
   *  filter_config:
   *    "@type": "type.googleapis.com/google.protobuf.StringValue"
   *    value: hello
   *
   *  # Passing in raw bytes
   *  filter_config:
   *    "@type": "type.googleapis.com/google.protobuf.BytesValue"
   *    value: aGVsbG8= # echo -n "hello" | base64
   */
  filter_config?: Any | undefined;
}

function createBaseDynamicModuleFilter(): DynamicModuleFilter {
  return { $type: "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilter" };
}

export const DynamicModuleFilter: MessageFns<
  DynamicModuleFilter,
  "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilter"
> = {
  $type: "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilter" as const,

  encode(message: DynamicModuleFilter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dynamic_module_config !== undefined) {
      DynamicModuleConfig.encode(message.dynamic_module_config, writer.uint32(10).fork()).join();
    }
    if (message.filter_name !== undefined && message.filter_name !== "") {
      writer.uint32(18).string(message.filter_name);
    }
    if (message.filter_config !== undefined) {
      Any.encode(message.filter_config, writer.uint32(26).fork()).join();
    }
    if (message.terminal_filter !== undefined && message.terminal_filter !== false) {
      writer.uint32(32).bool(message.terminal_filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicModuleFilter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicModuleFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dynamic_module_config = DynamicModuleConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filter_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter_config = Any.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.terminal_filter = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicModuleFilter {
    return {
      $type: DynamicModuleFilter.$type,
      dynamic_module_config: isSet(object.dynamic_module_config)
        ? DynamicModuleConfig.fromJSON(object.dynamic_module_config)
        : undefined,
      filter_name: isSet(object.filter_name) ? globalThis.String(object.filter_name) : undefined,
      filter_config: isSet(object.filter_config) ? Any.fromJSON(object.filter_config) : undefined,
      terminal_filter: isSet(object.terminal_filter) ? globalThis.Boolean(object.terminal_filter) : undefined,
    };
  },

  toJSON(message: DynamicModuleFilter): unknown {
    const obj: any = {};
    if (message.dynamic_module_config !== undefined) {
      obj.dynamic_module_config = DynamicModuleConfig.toJSON(message.dynamic_module_config);
    }
    if (message.filter_name !== undefined) {
      obj.filter_name = message.filter_name;
    }
    if (message.filter_config !== undefined) {
      obj.filter_config = Any.toJSON(message.filter_config);
    }
    if (message.terminal_filter !== undefined) {
      obj.terminal_filter = message.terminal_filter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicModuleFilter>, I>>(base?: I): DynamicModuleFilter {
    return DynamicModuleFilter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicModuleFilter>, I>>(object: I): DynamicModuleFilter {
    const message = createBaseDynamicModuleFilter();
    message.dynamic_module_config =
      (object.dynamic_module_config !== undefined && object.dynamic_module_config !== null)
        ? DynamicModuleConfig.fromPartial(object.dynamic_module_config)
        : undefined;
    message.filter_name = object.filter_name ?? undefined;
    message.filter_config = (object.filter_config !== undefined && object.filter_config !== null)
      ? Any.fromPartial(object.filter_config)
      : undefined;
    message.terminal_filter = object.terminal_filter ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DynamicModuleFilter.$type, DynamicModuleFilter);

function createBaseDynamicModuleFilterPerRoute(): DynamicModuleFilterPerRoute {
  return { $type: "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilterPerRoute" };
}

export const DynamicModuleFilterPerRoute: MessageFns<
  DynamicModuleFilterPerRoute,
  "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilterPerRoute"
> = {
  $type: "envoy.extensions.filters.http.dynamic_modules.v3.DynamicModuleFilterPerRoute" as const,

  encode(message: DynamicModuleFilterPerRoute, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dynamic_module_config !== undefined) {
      DynamicModuleConfig.encode(message.dynamic_module_config, writer.uint32(10).fork()).join();
    }
    if (message.per_route_config_name !== undefined && message.per_route_config_name !== "") {
      writer.uint32(18).string(message.per_route_config_name);
    }
    if (message.filter_config !== undefined) {
      Any.encode(message.filter_config, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicModuleFilterPerRoute {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicModuleFilterPerRoute();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dynamic_module_config = DynamicModuleConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.per_route_config_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter_config = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicModuleFilterPerRoute {
    return {
      $type: DynamicModuleFilterPerRoute.$type,
      dynamic_module_config: isSet(object.dynamic_module_config)
        ? DynamicModuleConfig.fromJSON(object.dynamic_module_config)
        : undefined,
      per_route_config_name: isSet(object.per_route_config_name)
        ? globalThis.String(object.per_route_config_name)
        : undefined,
      filter_config: isSet(object.filter_config) ? Any.fromJSON(object.filter_config) : undefined,
    };
  },

  toJSON(message: DynamicModuleFilterPerRoute): unknown {
    const obj: any = {};
    if (message.dynamic_module_config !== undefined) {
      obj.dynamic_module_config = DynamicModuleConfig.toJSON(message.dynamic_module_config);
    }
    if (message.per_route_config_name !== undefined) {
      obj.per_route_config_name = message.per_route_config_name;
    }
    if (message.filter_config !== undefined) {
      obj.filter_config = Any.toJSON(message.filter_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicModuleFilterPerRoute>, I>>(base?: I): DynamicModuleFilterPerRoute {
    return DynamicModuleFilterPerRoute.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicModuleFilterPerRoute>, I>>(object: I): DynamicModuleFilterPerRoute {
    const message = createBaseDynamicModuleFilterPerRoute();
    message.dynamic_module_config =
      (object.dynamic_module_config !== undefined && object.dynamic_module_config !== null)
        ? DynamicModuleConfig.fromPartial(object.dynamic_module_config)
        : undefined;
    message.per_route_config_name = object.per_route_config_name ?? undefined;
    message.filter_config = (object.filter_config !== undefined && object.filter_config !== null)
      ? Any.fromPartial(object.filter_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DynamicModuleFilterPerRoute.$type, DynamicModuleFilterPerRoute);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
