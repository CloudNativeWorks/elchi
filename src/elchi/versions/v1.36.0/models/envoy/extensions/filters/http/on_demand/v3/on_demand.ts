// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/on_demand/v3/on_demand.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { ConfigSource } from "../../../../../config/core/v3/config_source";

export const protobufPackage = "envoy.extensions.filters.http.on_demand.v3";

/** Configuration of on-demand CDS. */
export interface OnDemandCds {
  $type: "envoy.extensions.filters.http.on_demand.v3.OnDemandCds";
  /**
   * A configuration source for the service that will be used for
   * on-demand cluster discovery.
   */
  source?:
    | ConfigSource
    | undefined;
  /** xdstp:// resource locator for on-demand cluster collection. */
  resources_locator?:
    | string
    | undefined;
  /** The timeout for on demand cluster lookup. If not set, defaults to 5 seconds. */
  timeout?: Duration | undefined;
}

/** On Demand Discovery filter config. */
export interface OnDemand {
  $type: "envoy.extensions.filters.http.on_demand.v3.OnDemand";
  /**
   * An optional configuration for on-demand cluster discovery
   * service. If not specified, the on-demand cluster discovery will
   * be disabled. When it's specified, the filter will pause the
   * request to an unknown cluster and will begin a cluster discovery
   * process. When the discovery is finished (successfully or not), the
   * request will be resumed for further processing.
   */
  odcds?: OnDemandCds | undefined;
}

/** Per-route configuration for On Demand Discovery. */
export interface PerRouteConfig {
  $type: "envoy.extensions.filters.http.on_demand.v3.PerRouteConfig";
  /**
   * An optional configuration for on-demand cluster discovery
   * service. If not specified, the on-demand cluster discovery will
   * be disabled. When it's specified, the filter will pause the
   * request to an unknown cluster and will begin a cluster discovery
   * process. When the discovery is finished (successfully or not), the
   * request will be resumed for further processing.
   */
  odcds?: OnDemandCds | undefined;
}

function createBaseOnDemandCds(): OnDemandCds {
  return { $type: "envoy.extensions.filters.http.on_demand.v3.OnDemandCds" };
}

export const OnDemandCds: MessageFns<OnDemandCds, "envoy.extensions.filters.http.on_demand.v3.OnDemandCds"> = {
  $type: "envoy.extensions.filters.http.on_demand.v3.OnDemandCds" as const,

  encode(message: OnDemandCds, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.source !== undefined) {
      ConfigSource.encode(message.source, writer.uint32(10).fork()).join();
    }
    if (message.resources_locator !== undefined && message.resources_locator !== "") {
      writer.uint32(18).string(message.resources_locator);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnDemandCds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnDemandCds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.source = ConfigSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resources_locator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnDemandCds {
    return {
      $type: OnDemandCds.$type,
      source: isSet(object.source) ? ConfigSource.fromJSON(object.source) : undefined,
      resources_locator: isSet(object.resources_locator) ? globalThis.String(object.resources_locator) : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
    };
  },

  toJSON(message: OnDemandCds): unknown {
    const obj: any = {};
    if (message.source !== undefined) {
      obj.source = ConfigSource.toJSON(message.source);
    }
    if (message.resources_locator !== undefined) {
      obj.resources_locator = message.resources_locator;
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnDemandCds>, I>>(base?: I): OnDemandCds {
    return OnDemandCds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnDemandCds>, I>>(object: I): OnDemandCds {
    const message = createBaseOnDemandCds();
    message.source = (object.source !== undefined && object.source !== null)
      ? ConfigSource.fromPartial(object.source)
      : undefined;
    message.resources_locator = object.resources_locator ?? undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(OnDemandCds.$type, OnDemandCds);

function createBaseOnDemand(): OnDemand {
  return { $type: "envoy.extensions.filters.http.on_demand.v3.OnDemand" };
}

export const OnDemand: MessageFns<OnDemand, "envoy.extensions.filters.http.on_demand.v3.OnDemand"> = {
  $type: "envoy.extensions.filters.http.on_demand.v3.OnDemand" as const,

  encode(message: OnDemand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.odcds !== undefined) {
      OnDemandCds.encode(message.odcds, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OnDemand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOnDemand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.odcds = OnDemandCds.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OnDemand {
    return { $type: OnDemand.$type, odcds: isSet(object.odcds) ? OnDemandCds.fromJSON(object.odcds) : undefined };
  },

  toJSON(message: OnDemand): unknown {
    const obj: any = {};
    if (message.odcds !== undefined) {
      obj.odcds = OnDemandCds.toJSON(message.odcds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OnDemand>, I>>(base?: I): OnDemand {
    return OnDemand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OnDemand>, I>>(object: I): OnDemand {
    const message = createBaseOnDemand();
    message.odcds = (object.odcds !== undefined && object.odcds !== null)
      ? OnDemandCds.fromPartial(object.odcds)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(OnDemand.$type, OnDemand);

function createBasePerRouteConfig(): PerRouteConfig {
  return { $type: "envoy.extensions.filters.http.on_demand.v3.PerRouteConfig" };
}

export const PerRouteConfig: MessageFns<PerRouteConfig, "envoy.extensions.filters.http.on_demand.v3.PerRouteConfig"> = {
  $type: "envoy.extensions.filters.http.on_demand.v3.PerRouteConfig" as const,

  encode(message: PerRouteConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.odcds !== undefined) {
      OnDemandCds.encode(message.odcds, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PerRouteConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePerRouteConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.odcds = OnDemandCds.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PerRouteConfig {
    return { $type: PerRouteConfig.$type, odcds: isSet(object.odcds) ? OnDemandCds.fromJSON(object.odcds) : undefined };
  },

  toJSON(message: PerRouteConfig): unknown {
    const obj: any = {};
    if (message.odcds !== undefined) {
      obj.odcds = OnDemandCds.toJSON(message.odcds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PerRouteConfig>, I>>(base?: I): PerRouteConfig {
    return PerRouteConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PerRouteConfig>, I>>(object: I): PerRouteConfig {
    const message = createBasePerRouteConfig();
    message.odcds = (object.odcds !== undefined && object.odcds !== null)
      ? OnDemandCds.fromPartial(object.odcds)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(PerRouteConfig.$type, PerRouteConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
