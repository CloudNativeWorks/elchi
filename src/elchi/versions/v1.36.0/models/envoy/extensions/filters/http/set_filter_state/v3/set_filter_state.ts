// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/set_filter_state/v3/set_filter_state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { FilterStateValue } from "../../../common/set_filter_state/v3/value";

export const protobufPackage = "envoy.extensions.filters.http.set_filter_state.v3";

export interface Config {
  $type: "envoy.extensions.filters.http.set_filter_state.v3.Config";
  /**
   * A sequence of the filter state values to apply in the specified order
   * when a new request is received.
   */
  on_request_headers?: FilterStateValue[] | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.filters.http.set_filter_state.v3.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.filters.http.set_filter_state.v3.Config"> = {
  $type: "envoy.extensions.filters.http.set_filter_state.v3.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.on_request_headers !== undefined && message.on_request_headers.length !== 0) {
      for (const v of message.on_request_headers) {
        FilterStateValue.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.on_request_headers === undefined) {
            message.on_request_headers = [];
          }
          const el = FilterStateValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.on_request_headers!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      on_request_headers: globalThis.Array.isArray(object?.on_request_headers)
        ? object.on_request_headers.map((e: any) => FilterStateValue.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.on_request_headers?.length) {
      obj.on_request_headers = message.on_request_headers.map((e) => FilterStateValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.on_request_headers = object.on_request_headers?.map((e) => FilterStateValue.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
