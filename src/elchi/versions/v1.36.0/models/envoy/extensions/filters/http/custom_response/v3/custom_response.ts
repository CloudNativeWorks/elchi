// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/custom_response/v3/custom_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Matcher } from "../../../../../../xds/type/matcher/v3/matcher";

export const protobufPackage = "envoy.extensions.filters.http.custom_response.v3";

/**
 * The filter configuration is a collection of custom response
 * policies in a matcher tree. The configuration can be defined at the filter,
 * virtual host or route level. The response will be matched against the most
 * specific to the least specific config, till a match is found.
 */
export interface CustomResponse {
  $type: "envoy.extensions.filters.http.custom_response.v3.CustomResponse";
  /**
   * Matcher to match against the original response to select a
   * :ref:`Custom Response Policy <extension_category_envoy.http.custom_response>`
   * that will override the original response. The matching is done by matching
   * against :ref:`response header values<extension_category_envoy.matching.http.input>`
   * Example:
   *
   * .. validated-code-block:: yaml
   *   :type-name: xds.type.matcher.v3.Matcher
   *
   *   matcher_list:
   *     matchers:
   *       # Apply a locally stored custom response to any 4xx response.
   *     - predicate:
   *         single_predicate:
   *           input:
   *             name: 4xx_response
   *             typed_config:
   *               "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeClassMatchInput
   *           value_match:
   *             exact: "4xx"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "@type": type.googleapis.com/envoy.extensions.http.custom_response.local_response_policy.v3.LocalResponsePolicy
   *             status_code: 499
   *             body:
   *               inline_string: "not allowed"
   *             body_format:
   *               json_format:
   *                 status: "%RESPONSE_CODE%"
   *                 message: "%LOCAL_REPLY_BODY%"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo"
   *                 value: "x-bar"
   *       # Redirect to different upstream if the status code is one of 502, 503 or 504.
   *     - predicate:
   *         or_matcher:
   *           predicate:
   *           - single_predicate:
   *               input:
   *                 name: "502_response"
   *                 typed_config:
   *                   "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "502"
   *           - single_predicate:
   *               input:
   *                 name: "503_response"
   *                 typed_config:
   *                   "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "503"
   *           - single_predicate:
   *               input:
   *                 name: "504_response"
   *                 typed_config:
   *                   "@type": type.googleapis.com/envoy.type.matcher.v3.HttpResponseStatusCodeMatchInput
   *               value_match:
   *                 exact: "504"
   *       on_match:
   *         action:
   *           name: action
   *           typed_config:
   *             "@type": type.googleapis.com/envoy.extensions.http.custom_response.redirect_policy.v3.RedirectPolicy
   *             status_code: 299
   *             uri: "https://foo.example/gateway_error"
   *             response_headers_to_add:
   *             - header:
   *                 key: "foo2"
   *                 value: "x-bar2"
   *
   * -- attention::
   *  The first matched policy wins. Once the response is matched, matcher
   *  evaluations end.
   *
   * Refer to :ref:`Unified Matcher API <envoy_v3_api_msg_.xds.type.matcher.v3.Matcher>`
   * documentation for more information on the matcher trees.
   * [#extension-category: envoy.http.custom_response]
   */
  custom_response_matcher?: Matcher | undefined;
}

function createBaseCustomResponse(): CustomResponse {
  return { $type: "envoy.extensions.filters.http.custom_response.v3.CustomResponse" };
}

export const CustomResponse: MessageFns<
  CustomResponse,
  "envoy.extensions.filters.http.custom_response.v3.CustomResponse"
> = {
  $type: "envoy.extensions.filters.http.custom_response.v3.CustomResponse" as const,

  encode(message: CustomResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.custom_response_matcher !== undefined) {
      Matcher.encode(message.custom_response_matcher, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CustomResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCustomResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.custom_response_matcher = Matcher.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CustomResponse {
    return {
      $type: CustomResponse.$type,
      custom_response_matcher: isSet(object.custom_response_matcher)
        ? Matcher.fromJSON(object.custom_response_matcher)
        : undefined,
    };
  },

  toJSON(message: CustomResponse): unknown {
    const obj: any = {};
    if (message.custom_response_matcher !== undefined) {
      obj.custom_response_matcher = Matcher.toJSON(message.custom_response_matcher);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CustomResponse>, I>>(base?: I): CustomResponse {
    return CustomResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CustomResponse>, I>>(object: I): CustomResponse {
    const message = createBaseCustomResponse();
    message.custom_response_matcher =
      (object.custom_response_matcher !== undefined && object.custom_response_matcher !== null)
        ? Matcher.fromPartial(object.custom_response_matcher)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(CustomResponse.$type, CustomResponse);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
