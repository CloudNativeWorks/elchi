// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/grpc_service/call_credentials/google_iam/v3/google_iam_credentials.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.grpc_service.call_credentials.google_iam.v3";

/** [#not-implemented-hide:] */
export interface GoogleIamCredentials {
  $type: "envoy.extensions.grpc_service.call_credentials.google_iam.v3.GoogleIamCredentials";
  /** Authorization token. */
  authorization_token?:
    | string
    | undefined;
  /** Authority selector. */
  authority_selector?: string | undefined;
}

function createBaseGoogleIamCredentials(): GoogleIamCredentials {
  return { $type: "envoy.extensions.grpc_service.call_credentials.google_iam.v3.GoogleIamCredentials" };
}

export const GoogleIamCredentials: MessageFns<
  GoogleIamCredentials,
  "envoy.extensions.grpc_service.call_credentials.google_iam.v3.GoogleIamCredentials"
> = {
  $type: "envoy.extensions.grpc_service.call_credentials.google_iam.v3.GoogleIamCredentials" as const,

  encode(message: GoogleIamCredentials, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorization_token !== undefined && message.authorization_token !== "") {
      writer.uint32(10).string(message.authorization_token);
    }
    if (message.authority_selector !== undefined && message.authority_selector !== "") {
      writer.uint32(18).string(message.authority_selector);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GoogleIamCredentials {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoogleIamCredentials();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorization_token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authority_selector = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoogleIamCredentials {
    return {
      $type: GoogleIamCredentials.$type,
      authorization_token: isSet(object.authorization_token)
        ? globalThis.String(object.authorization_token)
        : undefined,
      authority_selector: isSet(object.authority_selector) ? globalThis.String(object.authority_selector) : undefined,
    };
  },

  toJSON(message: GoogleIamCredentials): unknown {
    const obj: any = {};
    if (message.authorization_token !== undefined) {
      obj.authorization_token = message.authorization_token;
    }
    if (message.authority_selector !== undefined) {
      obj.authority_selector = message.authority_selector;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GoogleIamCredentials>, I>>(base?: I): GoogleIamCredentials {
    return GoogleIamCredentials.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GoogleIamCredentials>, I>>(object: I): GoogleIamCredentials {
    const message = createBaseGoogleIamCredentials();
    message.authorization_token = object.authorization_token ?? undefined;
    message.authority_selector = object.authority_selector ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(GoogleIamCredentials.$type, GoogleIamCredentials);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
