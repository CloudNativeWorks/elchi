// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/clusters/reverse_connection/v3/reverse_connection.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.clusters.reverse_connection.v3";

/** Configuration for a cluster of type REVERSE_CONNECTION. */
export interface ReverseConnectionClusterConfig {
  $type: "envoy.extensions.clusters.reverse_connection.v3.ReverseConnectionClusterConfig";
  /**
   * Time interval after which Envoy removes unused dynamic hosts created for reverse connections.
   * Hosts that are not referenced by any connection pool are deleted during cleanup.
   *
   * If unset, Envoy uses a default of 60s.
   */
  cleanup_interval?:
    | Duration
    | undefined;
  /**
   * Host identifier format string.
   *
   * This format string is evaluated against the downstream request context to compute
   * the host identifier for selecting the reverse connection endpoint. The format string
   * supports Envoy's standard formatter syntax, including:
   *
   * * ``%REQ(header-name)%``: Extract request header value.
   * * ``%DYNAMIC_METADATA(namespace:key)%``: Extract dynamic metadata value.
   * * ``%CEL(expression)%``: Evaluate CEL expression.
   * * ``%DOWNSTREAM_REMOTE_ADDRESS%``: Downstream connection address.
   * * ``%DOWNSTREAM_LOCAL_ADDRESS%``: Downstream local address.
   * * Plain text and combinations of the above.
   *
   * Examples:
   *
   * * ``%REQ(x-remote-node-id)%``: Use the value of the ``x-remote-node-id`` header.
   * * ``%REQ(host):EXTRACT_FIRST_PART%``: Extract the first part of the Host header before a dot.
   * * ``%CEL(request.headers['x-node-id'] | orValue('default'))%``: Use CEL with fallback.
   * * ``node-%REQ(x-tenant-id)%-%REQ(x-region)%``: Combine multiple values.
   *
   * If the format string evaluates to an empty value, the request will not be routed.
   */
  host_id_format?: string | undefined;
}

function createBaseReverseConnectionClusterConfig(): ReverseConnectionClusterConfig {
  return { $type: "envoy.extensions.clusters.reverse_connection.v3.ReverseConnectionClusterConfig" };
}

export const ReverseConnectionClusterConfig: MessageFns<
  ReverseConnectionClusterConfig,
  "envoy.extensions.clusters.reverse_connection.v3.ReverseConnectionClusterConfig"
> = {
  $type: "envoy.extensions.clusters.reverse_connection.v3.ReverseConnectionClusterConfig" as const,

  encode(message: ReverseConnectionClusterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cleanup_interval !== undefined) {
      Duration.encode(message.cleanup_interval, writer.uint32(10).fork()).join();
    }
    if (message.host_id_format !== undefined && message.host_id_format !== "") {
      writer.uint32(18).string(message.host_id_format);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReverseConnectionClusterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReverseConnectionClusterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cleanup_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.host_id_format = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReverseConnectionClusterConfig {
    return {
      $type: ReverseConnectionClusterConfig.$type,
      cleanup_interval: isSet(object.cleanup_interval) ? Duration.fromJSON(object.cleanup_interval) : undefined,
      host_id_format: isSet(object.host_id_format) ? globalThis.String(object.host_id_format) : undefined,
    };
  },

  toJSON(message: ReverseConnectionClusterConfig): unknown {
    const obj: any = {};
    if (message.cleanup_interval !== undefined) {
      obj.cleanup_interval = Duration.toJSON(message.cleanup_interval);
    }
    if (message.host_id_format !== undefined) {
      obj.host_id_format = message.host_id_format;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReverseConnectionClusterConfig>, I>>(base?: I): ReverseConnectionClusterConfig {
    return ReverseConnectionClusterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReverseConnectionClusterConfig>, I>>(
    object: I,
  ): ReverseConnectionClusterConfig {
    const message = createBaseReverseConnectionClusterConfig();
    message.cleanup_interval = (object.cleanup_interval !== undefined && object.cleanup_interval !== null)
      ? Duration.fromPartial(object.cleanup_interval)
      : undefined;
    message.host_id_format = object.host_id_format ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ReverseConnectionClusterConfig.$type, ReverseConnectionClusterConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
