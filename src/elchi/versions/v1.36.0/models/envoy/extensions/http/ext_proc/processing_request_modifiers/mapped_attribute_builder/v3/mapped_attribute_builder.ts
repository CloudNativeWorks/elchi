// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/ext_proc/processing_request_modifiers/mapped_attribute_builder/v3/mapped_attribute_builder.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage =
  "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3";

/**
 * Extension to build custom attributes in the :ref:`request
 * <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>` based on a configurable mapping. The
 * native implementation uses the CEL expression as the key, which is not always desirable. Using this
 * extension, one can re-map a CEL expression that references internal filter state into a more
 * user-friendly key that decouples the value from the underlying filter implementation.
 *
 * If a given CEL expression fails to eval, it will not be present in the attributes struct.
 *
 * If this extension is configured, then the original :ref:`ProcessingRequest
 * <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>`'s ``request_attributes`` are ignored,
 * and all attributes should be explicitly set via this extension.
 *
 * An example configuration may look like so:
 *
 * .. code-block:: yaml
 *
 *    mapped_request_attributes:
 *      "request.path": "request.path"
 *      "source.country": "metadata.filter_metadata['com.example.location_filter']['country_code']"
 *
 * In the above example, the complex filter_metadata expression is evaluated via CEL, and the value
 * is stored under the friendlier ``source.country`` key. ``The ProcessingRequest`` would look like:
 *
 * .. code-block:: text
 *
 *    attributes {
 *      key: "envoy.filters.http.ext_proc"
 *      value {
 *        fields {
 *          key: "request.path"
 *          value {
 *            string_value: "/profile"
 *          }
 *        }
 *        fields {
 *          key: "source.country"
 *          value {
 *            string_value: "US"
 *          }
 *        }
 *      }
 *    }
 *
 * .. note::
 *   Processing request modifiers are currently in alpha.
 */
export interface MappedAttributeBuilder {
  $type:
    "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder";
  /**
   * A map of request attributes to set in the attributes struct.
   * The key is the attribute name, the value is the attribute value,
   * interpretable by CEL. This allows for the re-mapping of attributes, which is not supported
   * by the native attribute building logic.
   */
  mapped_request_attributes?: Map<string, string> | undefined;
}

export interface MappedAttributeBuilder_MappedRequestAttributesEntry {
  $type:
    "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder.MappedRequestAttributesEntry";
  key: string;
  value: string;
}

function createBaseMappedAttributeBuilder(): MappedAttributeBuilder {
  return {
    $type:
      "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder",
  };
}

export const MappedAttributeBuilder: MessageFns<
  MappedAttributeBuilder,
  "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder"
> = {
  $type:
    "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder" as const,

  encode(message: MappedAttributeBuilder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.mapped_request_attributes || new Map()).forEach((value, key) => {
      MappedAttributeBuilder_MappedRequestAttributesEntry.encode({
        $type:
          "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder.MappedRequestAttributesEntry",
        key: key as any,
        value,
      }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MappedAttributeBuilder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMappedAttributeBuilder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = MappedAttributeBuilder_MappedRequestAttributesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.mapped_request_attributes === undefined) {
              message.mapped_request_attributes = new Map();
            }
            message.mapped_request_attributes!.set(entry1.key, entry1.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MappedAttributeBuilder {
    return {
      $type: MappedAttributeBuilder.$type,
      mapped_request_attributes: isObject(object.mapped_request_attributes)
        ? Object.entries(object.mapped_request_attributes).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: MappedAttributeBuilder): unknown {
    const obj: any = {};
    if (message.mapped_request_attributes?.size) {
      obj.mapped_request_attributes = {};
      message.mapped_request_attributes.forEach((v, k) => {
        obj.mapped_request_attributes[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MappedAttributeBuilder>, I>>(base?: I): MappedAttributeBuilder {
    return MappedAttributeBuilder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MappedAttributeBuilder>, I>>(object: I): MappedAttributeBuilder {
    const message = createBaseMappedAttributeBuilder();
    message.mapped_request_attributes =
      (object.mapped_request_attributes === undefined || object.mapped_request_attributes === null)
        ? undefined
        : (() => {
          const m = new Map();
          (object.mapped_request_attributes as Map<string, string> ?? new Map()).forEach((value, key) => {
            if (value !== undefined) {
              m.set(key, globalThis.String(value));
            }
          });
          return m;
        })();
    return message;
  },
};

messageTypeRegistry.set(MappedAttributeBuilder.$type, MappedAttributeBuilder);

function createBaseMappedAttributeBuilder_MappedRequestAttributesEntry(): MappedAttributeBuilder_MappedRequestAttributesEntry {
  return {
    $type:
      "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder.MappedRequestAttributesEntry",
    key: "",
    value: "",
  };
}

export const MappedAttributeBuilder_MappedRequestAttributesEntry: MessageFns<
  MappedAttributeBuilder_MappedRequestAttributesEntry,
  "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder.MappedRequestAttributesEntry"
> = {
  $type:
    "envoy.extensions.http.ext_proc.processing_request_modifiers.mapped_attribute_builder.v3.MappedAttributeBuilder.MappedRequestAttributesEntry" as const,

  encode(
    message: MappedAttributeBuilder_MappedRequestAttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MappedAttributeBuilder_MappedRequestAttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMappedAttributeBuilder_MappedRequestAttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MappedAttributeBuilder_MappedRequestAttributesEntry {
    return {
      $type: MappedAttributeBuilder_MappedRequestAttributesEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MappedAttributeBuilder_MappedRequestAttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MappedAttributeBuilder_MappedRequestAttributesEntry>, I>>(
    base?: I,
  ): MappedAttributeBuilder_MappedRequestAttributesEntry {
    return MappedAttributeBuilder_MappedRequestAttributesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MappedAttributeBuilder_MappedRequestAttributesEntry>, I>>(
    object: I,
  ): MappedAttributeBuilder_MappedRequestAttributesEntry {
    const message = createBaseMappedAttributeBuilder_MappedRequestAttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(
  MappedAttributeBuilder_MappedRequestAttributesEntry.$type,
  MappedAttributeBuilder_MappedRequestAttributesEntry,
);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
