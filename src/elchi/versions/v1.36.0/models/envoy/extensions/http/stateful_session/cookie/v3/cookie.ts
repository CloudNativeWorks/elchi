// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/stateful_session/cookie/v3/cookie.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { Cookie } from "../../../../../type/http/v3/cookie";

export const protobufPackage = "envoy.extensions.http.stateful_session.cookie.v3";

/**
 * This extension allows the session state to be tracked via cookies.
 *
 * This extension first encodes the address of the upstream host selected by the load balancer
 * into a ``set-cookie`` response header with the :ref:`cookie configuration
 * <envoy_v3_api_field_extensions.http.stateful_session.cookie.v3.CookieBasedSessionState.cookie>`.
 * when new requests are incoming, this extension will try to parse the specific upstream host
 * address by the cookie name. If the address parsed from the cookie corresponds to a valid
 * upstream host, this upstream host will be selected first. See :ref:`stateful session filter
 * <envoy_v3_api_msg_extensions.filters.http.stateful_session.v3.StatefulSession>`.
 *
 * For example, if the cookie name is set to ``sticky-host``, envoy will prefer ``1.2.3.4:80``
 * as the upstream host when the request contains the following header:
 *
 * .. code-block:: none
 *
 *     cookie: sticky-host="MS4yLjMuNDo4MA=="
 *
 * When processing the upstream response, if ``1.2.3.4:80`` is indeed the final choice the extension
 * does nothing. If ``1.2.3.4:80`` is not the final choice, the new selected host will be used to
 * update the cookie (via the ``set-cookie`` response header).
 *
 * [#extension: envoy.http.stateful_session.cookie]
 */
export interface CookieBasedSessionState {
  $type: "envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState";
  /** The cookie configuration used to track session state. */
  cookie?: Cookie | undefined;
}

function createBaseCookieBasedSessionState(): CookieBasedSessionState {
  return { $type: "envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState" };
}

export const CookieBasedSessionState: MessageFns<
  CookieBasedSessionState,
  "envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState"
> = {
  $type: "envoy.extensions.http.stateful_session.cookie.v3.CookieBasedSessionState" as const,

  encode(message: CookieBasedSessionState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cookie !== undefined) {
      Cookie.encode(message.cookie, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CookieBasedSessionState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCookieBasedSessionState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cookie = Cookie.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CookieBasedSessionState {
    return {
      $type: CookieBasedSessionState.$type,
      cookie: isSet(object.cookie) ? Cookie.fromJSON(object.cookie) : undefined,
    };
  },

  toJSON(message: CookieBasedSessionState): unknown {
    const obj: any = {};
    if (message.cookie !== undefined) {
      obj.cookie = Cookie.toJSON(message.cookie);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CookieBasedSessionState>, I>>(base?: I): CookieBasedSessionState {
    return CookieBasedSessionState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CookieBasedSessionState>, I>>(object: I): CookieBasedSessionState {
    const message = createBaseCookieBasedSessionState();
    message.cookie = (object.cookie !== undefined && object.cookie !== null)
      ? Cookie.fromPartial(object.cookie)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CookieBasedSessionState.$type, CookieBasedSessionState);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
