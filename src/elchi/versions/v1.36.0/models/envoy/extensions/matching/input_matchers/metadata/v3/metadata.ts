// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/matching/input_matchers/metadata/v3/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { ValueMatcher } from "../../../../../type/matcher/v3/value";

export const protobufPackage = "envoy.extensions.matching.input_matchers.metadata.v3";

/** Metadata matcher for metadata from http matching input data. */
export interface Metadata {
  $type: "envoy.extensions.matching.input_matchers.metadata.v3.Metadata";
  /** The Metadata is matched if the value retrieved by metadata matching input is matched to this value. */
  value?:
    | ValueMatcher
    | undefined;
  /** If true, the match result will be inverted. */
  invert?: boolean | undefined;
}

function createBaseMetadata(): Metadata {
  return { $type: "envoy.extensions.matching.input_matchers.metadata.v3.Metadata" };
}

export const Metadata: MessageFns<Metadata, "envoy.extensions.matching.input_matchers.metadata.v3.Metadata"> = {
  $type: "envoy.extensions.matching.input_matchers.metadata.v3.Metadata" as const,

  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      ValueMatcher.encode(message.value, writer.uint32(10).fork()).join();
    }
    if (message.invert !== undefined && message.invert !== false) {
      writer.uint32(32).bool(message.invert);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = ValueMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.invert = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      $type: Metadata.$type,
      value: isSet(object.value) ? ValueMatcher.fromJSON(object.value) : undefined,
      invert: isSet(object.invert) ? globalThis.Boolean(object.invert) : undefined,
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = ValueMatcher.toJSON(message.value);
    }
    if (message.invert !== undefined) {
      obj.invert = message.invert;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.value = (object.value !== undefined && object.value !== null)
      ? ValueMatcher.fromPartial(object.value)
      : undefined;
    message.invert = object.invert ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Metadata.$type, Metadata);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
