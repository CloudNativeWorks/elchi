// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/rate_limit_descriptors/expr/v3/expr.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Expr } from "../../../../../google/api/expr/v1alpha1/syntax";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.rate_limit_descriptors.expr.v3";

/**
 * The following descriptor entry is appended with a value computed
 * from a symbolic Common Expression Language expression.
 * See :ref:`attributes <arch_overview_attributes>` for the set of
 * available attributes.
 *
 * .. code-block:: cpp
 *
 *   ("<descriptor_key>", "<expression_value>")
 */
export interface Descriptor {
  $type: "envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor";
  /** The key to use in the descriptor entry. */
  descriptor_key?:
    | string
    | undefined;
  /**
   * If set to true, Envoy skips the descriptor if the expression evaluates to an error.
   * By default, the rate limit is not applied when an expression produces an error.
   */
  skip_if_error?: boolean | undefined;
  expr_specifier?:
    | //
    /** Expression in a text form, e.g. "connection.requested_server_name". */
    { $case: "text"; text: string }
    | //
    /** Parsed expression in AST form. */
    { $case: "parsed"; parsed: Expr }
    | undefined;
}

function createBaseDescriptor(): Descriptor {
  return { $type: "envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor", expr_specifier: undefined };
}

export const Descriptor: MessageFns<Descriptor, "envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor"> = {
  $type: "envoy.extensions.rate_limit_descriptors.expr.v3.Descriptor" as const,

  encode(message: Descriptor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.descriptor_key !== undefined && message.descriptor_key !== "") {
      writer.uint32(10).string(message.descriptor_key);
    }
    if (message.skip_if_error !== undefined && message.skip_if_error !== false) {
      writer.uint32(16).bool(message.skip_if_error);
    }
    switch (message.expr_specifier?.$case) {
      case "text":
        writer.uint32(26).string(message.expr_specifier.text);
        break;
      case "parsed":
        Expr.encode(message.expr_specifier.parsed, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Descriptor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDescriptor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.descriptor_key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.skip_if_error = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expr_specifier = { $case: "text", text: reader.string() };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expr_specifier = { $case: "parsed", parsed: Expr.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Descriptor {
    return {
      $type: Descriptor.$type,
      descriptor_key: isSet(object.descriptor_key) ? globalThis.String(object.descriptor_key) : undefined,
      skip_if_error: isSet(object.skip_if_error) ? globalThis.Boolean(object.skip_if_error) : undefined,
      expr_specifier: isSet(object.text)
        ? { $case: "text", text: globalThis.String(object.text) }
        : isSet(object.parsed)
        ? { $case: "parsed", parsed: Expr.fromJSON(object.parsed) }
        : undefined,
    };
  },

  toJSON(message: Descriptor): unknown {
    const obj: any = {};
    if (message.descriptor_key !== undefined) {
      obj.descriptor_key = message.descriptor_key;
    }
    if (message.skip_if_error !== undefined) {
      obj.skip_if_error = message.skip_if_error;
    }
    if (message.expr_specifier?.$case === "text") {
      obj.text = message.expr_specifier.text;
    }
    if (message.expr_specifier?.$case === "parsed") {
      obj.parsed = Expr.toJSON(message.expr_specifier.parsed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Descriptor>, I>>(base?: I): Descriptor {
    return Descriptor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Descriptor>, I>>(object: I): Descriptor {
    const message = createBaseDescriptor();
    message.descriptor_key = object.descriptor_key ?? undefined;
    message.skip_if_error = object.skip_if_error ?? undefined;
    if (
      object.expr_specifier?.$case === "text" &&
      object.expr_specifier?.text !== undefined &&
      object.expr_specifier?.text !== null
    ) {
      message.expr_specifier = { $case: "text", text: object.expr_specifier.text };
    }
    if (
      object.expr_specifier?.$case === "parsed" &&
      object.expr_specifier?.parsed !== undefined &&
      object.expr_specifier?.parsed !== null
    ) {
      message.expr_specifier = { $case: "parsed", parsed: Expr.fromPartial(object.expr_specifier.parsed) };
    }
    return message;
  },
};

messageTypeRegistry.set(Descriptor.$type, Descriptor);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
