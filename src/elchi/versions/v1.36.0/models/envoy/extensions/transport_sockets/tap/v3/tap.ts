// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/transport_sockets/tap/v3/tap.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { TransportSocket } from "../../../../config/core/v3/base";
import { CommonExtensionConfig } from "../../../common/tap/v3/common";

export const protobufPackage = "envoy.extensions.transport_sockets.tap.v3";

/**
 * Configuration for tap transport socket. This wraps another transport socket, providing the
 * ability to interpose and record in plain text any traffic that is surfaced to Envoy.
 */
export interface Tap {
  $type: "envoy.extensions.transport_sockets.tap.v3.Tap";
  /** Common configuration for the tap transport socket. */
  common_config?:
    | CommonExtensionConfig
    | undefined;
  /** The underlying transport socket being wrapped. */
  transport_socket?:
    | TransportSocket
    | undefined;
  /** Additional configurations for the transport socket tap */
  socket_tap_config?: SocketTapConfig | undefined;
}

/** Additional configurations for the transport socket tap */
export interface SocketTapConfig {
  $type: "envoy.extensions.transport_sockets.tap.v3.SocketTapConfig";
  /**
   * Indicates to whether output the connection information per event
   * This is only applicable if the streamed trace is enabled
   */
  set_connection_per_event?:
    | boolean
    | undefined;
  /** The contents of the transport tap's statistics prefix. */
  stats_prefix?: string | undefined;
}

function createBaseTap(): Tap {
  return { $type: "envoy.extensions.transport_sockets.tap.v3.Tap" };
}

export const Tap: MessageFns<Tap, "envoy.extensions.transport_sockets.tap.v3.Tap"> = {
  $type: "envoy.extensions.transport_sockets.tap.v3.Tap" as const,

  encode(message: Tap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_config !== undefined) {
      CommonExtensionConfig.encode(message.common_config, writer.uint32(10).fork()).join();
    }
    if (message.transport_socket !== undefined) {
      TransportSocket.encode(message.transport_socket, writer.uint32(18).fork()).join();
    }
    if (message.socket_tap_config !== undefined) {
      SocketTapConfig.encode(message.socket_tap_config, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_config = CommonExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transport_socket = TransportSocket.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.socket_tap_config = SocketTapConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tap {
    return {
      $type: Tap.$type,
      common_config: isSet(object.common_config) ? CommonExtensionConfig.fromJSON(object.common_config) : undefined,
      transport_socket: isSet(object.transport_socket) ? TransportSocket.fromJSON(object.transport_socket) : undefined,
      socket_tap_config: isSet(object.socket_tap_config)
        ? SocketTapConfig.fromJSON(object.socket_tap_config)
        : undefined,
    };
  },

  toJSON(message: Tap): unknown {
    const obj: any = {};
    if (message.common_config !== undefined) {
      obj.common_config = CommonExtensionConfig.toJSON(message.common_config);
    }
    if (message.transport_socket !== undefined) {
      obj.transport_socket = TransportSocket.toJSON(message.transport_socket);
    }
    if (message.socket_tap_config !== undefined) {
      obj.socket_tap_config = SocketTapConfig.toJSON(message.socket_tap_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tap>, I>>(base?: I): Tap {
    return Tap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tap>, I>>(object: I): Tap {
    const message = createBaseTap();
    message.common_config = (object.common_config !== undefined && object.common_config !== null)
      ? CommonExtensionConfig.fromPartial(object.common_config)
      : undefined;
    message.transport_socket = (object.transport_socket !== undefined && object.transport_socket !== null)
      ? TransportSocket.fromPartial(object.transport_socket)
      : undefined;
    message.socket_tap_config = (object.socket_tap_config !== undefined && object.socket_tap_config !== null)
      ? SocketTapConfig.fromPartial(object.socket_tap_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Tap.$type, Tap);

function createBaseSocketTapConfig(): SocketTapConfig {
  return { $type: "envoy.extensions.transport_sockets.tap.v3.SocketTapConfig" };
}

export const SocketTapConfig: MessageFns<SocketTapConfig, "envoy.extensions.transport_sockets.tap.v3.SocketTapConfig"> =
  {
    $type: "envoy.extensions.transport_sockets.tap.v3.SocketTapConfig" as const,

    encode(message: SocketTapConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.set_connection_per_event !== undefined && message.set_connection_per_event !== false) {
        writer.uint32(8).bool(message.set_connection_per_event);
      }
      if (message.stats_prefix !== undefined && message.stats_prefix !== "") {
        writer.uint32(18).string(message.stats_prefix);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): SocketTapConfig {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseSocketTapConfig();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.set_connection_per_event = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.stats_prefix = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): SocketTapConfig {
      return {
        $type: SocketTapConfig.$type,
        set_connection_per_event: isSet(object.set_connection_per_event)
          ? globalThis.Boolean(object.set_connection_per_event)
          : undefined,
        stats_prefix: isSet(object.stats_prefix) ? globalThis.String(object.stats_prefix) : undefined,
      };
    },

    toJSON(message: SocketTapConfig): unknown {
      const obj: any = {};
      if (message.set_connection_per_event !== undefined) {
        obj.set_connection_per_event = message.set_connection_per_event;
      }
      if (message.stats_prefix !== undefined) {
        obj.stats_prefix = message.stats_prefix;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<SocketTapConfig>, I>>(base?: I): SocketTapConfig {
      return SocketTapConfig.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<SocketTapConfig>, I>>(object: I): SocketTapConfig {
      const message = createBaseSocketTapConfig();
      message.set_connection_per_event = object.set_connection_per_event ?? undefined;
      message.stats_prefix = object.stats_prefix ?? undefined;
      return message;
    },
  };

messageTypeRegistry.set(SocketTapConfig.$type, SocketTapConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
