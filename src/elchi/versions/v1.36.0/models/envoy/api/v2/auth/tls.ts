// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/auth/tls.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";
import { BoolValue, UInt32Value } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { CertificateValidationContext, TlsCertificate, TlsParameters, TlsSessionTicketKeys } from "./common";
import { SdsSecretConfig } from "./secret";

export const protobufPackage = "envoy.api.v2.auth";

export interface UpstreamTlsContext {
  $type: "envoy.api.v2.auth.UpstreamTlsContext";
  /**
   * Common TLS context settings.
   *
   * .. attention::
   *
   *   Server certificate verification is not enabled by default. Configure
   *   :ref:`trusted_ca<envoy_api_field_auth.CertificateValidationContext.trusted_ca>` to enable
   *   verification.
   */
  common_tls_context?:
    | CommonTlsContext
    | undefined;
  /** SNI string to use when creating TLS backend connections. */
  sni?:
    | string
    | undefined;
  /**
   * If true, server-initiated TLS renegotiation will be allowed.
   *
   * .. attention::
   *
   *   TLS renegotiation is considered insecure and shouldn't be used unless absolutely necessary.
   */
  allow_renegotiation?:
    | boolean
    | undefined;
  /**
   * Maximum number of session keys (Pre-Shared Keys for TLSv1.3+, Session IDs and Session Tickets
   * for TLSv1.2 and older) to store for the purpose of session resumption.
   *
   * Defaults to 1, setting this to 0 disables session resumption.
   */
  max_session_keys?: number | undefined;
}

/** [#next-free-field: 8] */
export interface DownstreamTlsContext {
  $type: "envoy.api.v2.auth.DownstreamTlsContext";
  /** Common TLS context settings. */
  common_tls_context?:
    | CommonTlsContext
    | undefined;
  /**
   * If specified, Envoy will reject connections without a valid client
   * certificate.
   */
  require_client_certificate?:
    | boolean
    | undefined;
  /**
   * If specified, Envoy will reject connections without a valid and matching SNI.
   * [#not-implemented-hide:]
   */
  require_sni?: boolean | undefined;
  session_ticket_keys_type?:
    | //
    /** TLS session ticket key settings. */
    { $case: "session_ticket_keys"; session_ticket_keys: TlsSessionTicketKeys }
    | //
    /** Config for fetching TLS session ticket keys via SDS API. */
    { $case: "session_ticket_keys_sds_secret_config"; session_ticket_keys_sds_secret_config: SdsSecretConfig }
    | //
    /**
     * Config for controlling stateless TLS session resumption: setting this to true will cause the TLS
     * server to not issue TLS session tickets for the purposes of stateless TLS session resumption.
     * If set to false, the TLS server will issue TLS session tickets and encrypt/decrypt them using
     * the keys specified through either :ref:`session_ticket_keys <envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys>`
     * or :ref:`session_ticket_keys_sds_secret_config <envoy_api_field_auth.DownstreamTlsContext.session_ticket_keys_sds_secret_config>`.
     * If this config is set to false and no keys are explicitly configured, the TLS server will issue
     * TLS session tickets and encrypt/decrypt them using an internally-generated and managed key, with the
     * implication that sessions cannot be resumed across hot restarts or on different hosts.
     */
    { $case: "disable_stateless_session_resumption"; disable_stateless_session_resumption: boolean }
    | undefined;
  /**
   * If specified, ``session_timeout`` will change the maximum lifetime (in seconds) of the TLS session.
   * Currently this value is used as a hint for the `TLS session ticket lifetime (for TLSv1.2) <https://tools.ietf.org/html/rfc5077#section-5.6>`_.
   * Only seconds can be specified (fractional seconds are ignored).
   */
  session_timeout?: Duration | undefined;
}

/**
 * TLS context shared by both client and server TLS contexts.
 * [#next-free-field: 9]
 */
export interface CommonTlsContext {
  $type: "envoy.api.v2.auth.CommonTlsContext";
  /** TLS protocol versions, cipher suites etc. */
  tls_params?:
    | TlsParameters
    | undefined;
  /**
   * :ref:`Multiple TLS certificates <arch_overview_ssl_cert_select>` can be associated with the
   * same context to allow both RSA and ECDSA certificates.
   *
   * Only a single TLS certificate is supported in client contexts. In server contexts, the first
   * RSA certificate is used for clients that only support RSA and the first ECDSA certificate is
   * used for clients that support ECDSA.
   */
  tls_certificates?:
    | TlsCertificate[]
    | undefined;
  /** Configs for fetching TLS certificates via SDS API. */
  tls_certificate_sds_secret_configs?: SdsSecretConfig[] | undefined;
  validation_context_type?:
    | //
    /** How to validate peer certificates. */
    { $case: "validation_context"; validation_context: CertificateValidationContext }
    | //
    /** Config for fetching validation context via SDS API. */
    { $case: "validation_context_sds_secret_config"; validation_context_sds_secret_config: SdsSecretConfig }
    | //
    /**
     * Combined certificate validation context holds a default CertificateValidationContext
     * and SDS config. When SDS server returns dynamic CertificateValidationContext, both dynamic
     * and default CertificateValidationContext are merged into a new CertificateValidationContext
     * for validation. This merge is done by Message::MergeFrom(), so dynamic
     * CertificateValidationContext overwrites singular fields in default
     * CertificateValidationContext, and concatenates repeated fields to default
     * CertificateValidationContext, and logical OR is applied to boolean fields.
     */
    {
      $case: "combined_validation_context";
      combined_validation_context: CommonTlsContext_CombinedCertificateValidationContext;
    }
    | undefined;
  /**
   * Supplies the list of ALPN protocols that the listener should expose. In
   * practice this is likely to be set to one of two values (see the
   * :ref:`codec_type
   * <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.codec_type>`
   * parameter in the HTTP connection manager for more information):
   *
   * * "h2,http/1.1" If the listener is going to support both HTTP/2 and HTTP/1.1.
   * * "http/1.1" If the listener is only going to support HTTP/1.1.
   *
   * There is no default for this parameter. If empty, Envoy will not expose ALPN.
   */
  alpn_protocols?: string[] | undefined;
}

export interface CommonTlsContext_CombinedCertificateValidationContext {
  $type: "envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext";
  /** How to validate peer certificates. */
  default_validation_context?:
    | CertificateValidationContext
    | undefined;
  /** Config for fetching validation context via SDS API. */
  validation_context_sds_secret_config?: SdsSecretConfig | undefined;
}

function createBaseUpstreamTlsContext(): UpstreamTlsContext {
  return { $type: "envoy.api.v2.auth.UpstreamTlsContext" };
}

export const UpstreamTlsContext: MessageFns<UpstreamTlsContext, "envoy.api.v2.auth.UpstreamTlsContext"> = {
  $type: "envoy.api.v2.auth.UpstreamTlsContext" as const,

  encode(message: UpstreamTlsContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_tls_context !== undefined) {
      CommonTlsContext.encode(message.common_tls_context, writer.uint32(10).fork()).join();
    }
    if (message.sni !== undefined && message.sni !== "") {
      writer.uint32(18).string(message.sni);
    }
    if (message.allow_renegotiation !== undefined && message.allow_renegotiation !== false) {
      writer.uint32(24).bool(message.allow_renegotiation);
    }
    if (message.max_session_keys !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_session_keys! },
        writer.uint32(34).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpstreamTlsContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpstreamTlsContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_tls_context = CommonTlsContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sni = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.allow_renegotiation = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.max_session_keys = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpstreamTlsContext {
    return {
      $type: UpstreamTlsContext.$type,
      common_tls_context: isSet(object.common_tls_context)
        ? CommonTlsContext.fromJSON(object.common_tls_context)
        : undefined,
      sni: isSet(object.sni) ? globalThis.String(object.sni) : undefined,
      allow_renegotiation: isSet(object.allow_renegotiation)
        ? globalThis.Boolean(object.allow_renegotiation)
        : undefined,
      max_session_keys: isSet(object.max_session_keys) ? Number(object.max_session_keys) : undefined,
    };
  },

  toJSON(message: UpstreamTlsContext): unknown {
    const obj: any = {};
    if (message.common_tls_context !== undefined) {
      obj.common_tls_context = CommonTlsContext.toJSON(message.common_tls_context);
    }
    if (message.sni !== undefined) {
      obj.sni = message.sni;
    }
    if (message.allow_renegotiation !== undefined) {
      obj.allow_renegotiation = message.allow_renegotiation;
    }
    if (message.max_session_keys !== undefined) {
      obj.max_session_keys = message.max_session_keys;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpstreamTlsContext>, I>>(base?: I): UpstreamTlsContext {
    return UpstreamTlsContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpstreamTlsContext>, I>>(object: I): UpstreamTlsContext {
    const message = createBaseUpstreamTlsContext();
    message.common_tls_context = (object.common_tls_context !== undefined && object.common_tls_context !== null)
      ? CommonTlsContext.fromPartial(object.common_tls_context)
      : undefined;
    message.sni = object.sni ?? undefined;
    message.allow_renegotiation = object.allow_renegotiation ?? undefined;
    message.max_session_keys = object.max_session_keys ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(UpstreamTlsContext.$type, UpstreamTlsContext);

function createBaseDownstreamTlsContext(): DownstreamTlsContext {
  return { $type: "envoy.api.v2.auth.DownstreamTlsContext", session_ticket_keys_type: undefined };
}

export const DownstreamTlsContext: MessageFns<DownstreamTlsContext, "envoy.api.v2.auth.DownstreamTlsContext"> = {
  $type: "envoy.api.v2.auth.DownstreamTlsContext" as const,

  encode(message: DownstreamTlsContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.common_tls_context !== undefined) {
      CommonTlsContext.encode(message.common_tls_context, writer.uint32(10).fork()).join();
    }
    if (message.require_client_certificate !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.require_client_certificate! },
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.require_sni !== undefined) {
      BoolValue.encode({ $type: "google.protobuf.BoolValue", value: message.require_sni! }, writer.uint32(26).fork())
        .join();
    }
    switch (message.session_ticket_keys_type?.$case) {
      case "session_ticket_keys":
        TlsSessionTicketKeys.encode(message.session_ticket_keys_type.session_ticket_keys, writer.uint32(34).fork())
          .join();
        break;
      case "session_ticket_keys_sds_secret_config":
        SdsSecretConfig.encode(
          message.session_ticket_keys_type.session_ticket_keys_sds_secret_config,
          writer.uint32(42).fork(),
        ).join();
        break;
      case "disable_stateless_session_resumption":
        writer.uint32(56).bool(message.session_ticket_keys_type.disable_stateless_session_resumption);
        break;
    }
    if (message.session_timeout !== undefined) {
      Duration.encode(message.session_timeout, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownstreamTlsContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownstreamTlsContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.common_tls_context = CommonTlsContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.require_client_certificate = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.require_sni = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.session_ticket_keys_type = {
            $case: "session_ticket_keys",
            session_ticket_keys: TlsSessionTicketKeys.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.session_ticket_keys_type = {
            $case: "session_ticket_keys_sds_secret_config",
            session_ticket_keys_sds_secret_config: SdsSecretConfig.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.session_ticket_keys_type = {
            $case: "disable_stateless_session_resumption",
            disable_stateless_session_resumption: reader.bool(),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.session_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownstreamTlsContext {
    return {
      $type: DownstreamTlsContext.$type,
      common_tls_context: isSet(object.common_tls_context)
        ? CommonTlsContext.fromJSON(object.common_tls_context)
        : undefined,
      require_client_certificate: isSet(object.require_client_certificate)
        ? Boolean(object.require_client_certificate)
        : undefined,
      require_sni: isSet(object.require_sni) ? Boolean(object.require_sni) : undefined,
      session_ticket_keys_type: isSet(object.session_ticket_keys)
        ? {
          $case: "session_ticket_keys",
          session_ticket_keys: TlsSessionTicketKeys.fromJSON(object.session_ticket_keys),
        }
        : isSet(object.session_ticket_keys_sds_secret_config)
        ? {
          $case: "session_ticket_keys_sds_secret_config",
          session_ticket_keys_sds_secret_config: SdsSecretConfig.fromJSON(object.session_ticket_keys_sds_secret_config),
        }
        : isSet(object.disable_stateless_session_resumption)
        ? {
          $case: "disable_stateless_session_resumption",
          disable_stateless_session_resumption: globalThis.Boolean(object.disable_stateless_session_resumption),
        }
        : undefined,
      session_timeout: isSet(object.session_timeout) ? Duration.fromJSON(object.session_timeout) : undefined,
    };
  },

  toJSON(message: DownstreamTlsContext): unknown {
    const obj: any = {};
    if (message.common_tls_context !== undefined) {
      obj.common_tls_context = CommonTlsContext.toJSON(message.common_tls_context);
    }
    if (message.require_client_certificate !== undefined) {
      obj.require_client_certificate = message.require_client_certificate;
    }
    if (message.require_sni !== undefined) {
      obj.require_sni = message.require_sni;
    }
    if (message.session_ticket_keys_type?.$case === "session_ticket_keys") {
      obj.session_ticket_keys = TlsSessionTicketKeys.toJSON(message.session_ticket_keys_type.session_ticket_keys);
    }
    if (message.session_ticket_keys_type?.$case === "session_ticket_keys_sds_secret_config") {
      obj.session_ticket_keys_sds_secret_config = SdsSecretConfig.toJSON(
        message.session_ticket_keys_type.session_ticket_keys_sds_secret_config,
      );
    }
    if (message.session_ticket_keys_type?.$case === "disable_stateless_session_resumption") {
      obj.disable_stateless_session_resumption = message.session_ticket_keys_type.disable_stateless_session_resumption;
    }
    if (message.session_timeout !== undefined) {
      obj.session_timeout = Duration.toJSON(message.session_timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DownstreamTlsContext>, I>>(base?: I): DownstreamTlsContext {
    return DownstreamTlsContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DownstreamTlsContext>, I>>(object: I): DownstreamTlsContext {
    const message = createBaseDownstreamTlsContext();
    message.common_tls_context = (object.common_tls_context !== undefined && object.common_tls_context !== null)
      ? CommonTlsContext.fromPartial(object.common_tls_context)
      : undefined;
    message.require_client_certificate = object.require_client_certificate ?? undefined;
    message.require_sni = object.require_sni ?? undefined;
    if (
      object.session_ticket_keys_type?.$case === "session_ticket_keys" &&
      object.session_ticket_keys_type?.session_ticket_keys !== undefined &&
      object.session_ticket_keys_type?.session_ticket_keys !== null
    ) {
      message.session_ticket_keys_type = {
        $case: "session_ticket_keys",
        session_ticket_keys: TlsSessionTicketKeys.fromPartial(object.session_ticket_keys_type.session_ticket_keys),
      };
    }
    if (
      object.session_ticket_keys_type?.$case === "session_ticket_keys_sds_secret_config" &&
      object.session_ticket_keys_type?.session_ticket_keys_sds_secret_config !== undefined &&
      object.session_ticket_keys_type?.session_ticket_keys_sds_secret_config !== null
    ) {
      message.session_ticket_keys_type = {
        $case: "session_ticket_keys_sds_secret_config",
        session_ticket_keys_sds_secret_config: SdsSecretConfig.fromPartial(
          object.session_ticket_keys_type.session_ticket_keys_sds_secret_config,
        ),
      };
    }
    if (
      object.session_ticket_keys_type?.$case === "disable_stateless_session_resumption" &&
      object.session_ticket_keys_type?.disable_stateless_session_resumption !== undefined &&
      object.session_ticket_keys_type?.disable_stateless_session_resumption !== null
    ) {
      message.session_ticket_keys_type = {
        $case: "disable_stateless_session_resumption",
        disable_stateless_session_resumption: object.session_ticket_keys_type.disable_stateless_session_resumption,
      };
    }
    message.session_timeout = (object.session_timeout !== undefined && object.session_timeout !== null)
      ? Duration.fromPartial(object.session_timeout)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(DownstreamTlsContext.$type, DownstreamTlsContext);

function createBaseCommonTlsContext(): CommonTlsContext {
  return { $type: "envoy.api.v2.auth.CommonTlsContext", validation_context_type: undefined };
}

export const CommonTlsContext: MessageFns<CommonTlsContext, "envoy.api.v2.auth.CommonTlsContext"> = {
  $type: "envoy.api.v2.auth.CommonTlsContext" as const,

  encode(message: CommonTlsContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tls_params !== undefined) {
      TlsParameters.encode(message.tls_params, writer.uint32(10).fork()).join();
    }
    if (message.tls_certificates !== undefined && message.tls_certificates.length !== 0) {
      for (const v of message.tls_certificates) {
        TlsCertificate.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (
      message.tls_certificate_sds_secret_configs !== undefined &&
      message.tls_certificate_sds_secret_configs.length !== 0
    ) {
      for (const v of message.tls_certificate_sds_secret_configs) {
        SdsSecretConfig.encode(v!, writer.uint32(50).fork()).join();
      }
    }
    switch (message.validation_context_type?.$case) {
      case "validation_context":
        CertificateValidationContext.encode(
          message.validation_context_type.validation_context,
          writer.uint32(26).fork(),
        ).join();
        break;
      case "validation_context_sds_secret_config":
        SdsSecretConfig.encode(
          message.validation_context_type.validation_context_sds_secret_config,
          writer.uint32(58).fork(),
        ).join();
        break;
      case "combined_validation_context":
        CommonTlsContext_CombinedCertificateValidationContext.encode(
          message.validation_context_type.combined_validation_context,
          writer.uint32(66).fork(),
        ).join();
        break;
    }
    if (message.alpn_protocols !== undefined && message.alpn_protocols.length !== 0) {
      for (const v of message.alpn_protocols) {
        writer.uint32(34).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonTlsContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonTlsContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tls_params = TlsParameters.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.tls_certificates === undefined) {
            message.tls_certificates = [];
          }
          const el = TlsCertificate.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.tls_certificates!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          if (message.tls_certificate_sds_secret_configs === undefined) {
            message.tls_certificate_sds_secret_configs = [];
          }
          const el = SdsSecretConfig.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.tls_certificate_sds_secret_configs!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.validation_context_type = {
            $case: "validation_context",
            validation_context: CertificateValidationContext.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.validation_context_type = {
            $case: "validation_context_sds_secret_config",
            validation_context_sds_secret_config: SdsSecretConfig.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.validation_context_type = {
            $case: "combined_validation_context",
            combined_validation_context: CommonTlsContext_CombinedCertificateValidationContext.decode(
              reader,
              reader.uint32(),
            ),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.alpn_protocols === undefined) {
            message.alpn_protocols = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.alpn_protocols!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonTlsContext {
    return {
      $type: CommonTlsContext.$type,
      tls_params: isSet(object.tls_params) ? TlsParameters.fromJSON(object.tls_params) : undefined,
      tls_certificates: globalThis.Array.isArray(object?.tls_certificates)
        ? object.tls_certificates.map((e: any) => TlsCertificate.fromJSON(e))
        : undefined,
      tls_certificate_sds_secret_configs: globalThis.Array.isArray(object?.tls_certificate_sds_secret_configs)
        ? object.tls_certificate_sds_secret_configs.map((e: any) => SdsSecretConfig.fromJSON(e))
        : undefined,
      validation_context_type: isSet(object.validation_context)
        ? {
          $case: "validation_context",
          validation_context: CertificateValidationContext.fromJSON(object.validation_context),
        }
        : isSet(object.validation_context_sds_secret_config)
        ? {
          $case: "validation_context_sds_secret_config",
          validation_context_sds_secret_config: SdsSecretConfig.fromJSON(object.validation_context_sds_secret_config),
        }
        : isSet(object.combined_validation_context)
        ? {
          $case: "combined_validation_context",
          combined_validation_context: CommonTlsContext_CombinedCertificateValidationContext.fromJSON(
            object.combined_validation_context,
          ),
        }
        : undefined,
      alpn_protocols: globalThis.Array.isArray(object?.alpn_protocols)
        ? object.alpn_protocols.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: CommonTlsContext): unknown {
    const obj: any = {};
    if (message.tls_params !== undefined) {
      obj.tls_params = TlsParameters.toJSON(message.tls_params);
    }
    if (message.tls_certificates?.length) {
      obj.tls_certificates = message.tls_certificates.map((e) => TlsCertificate.toJSON(e));
    }
    if (message.tls_certificate_sds_secret_configs?.length) {
      obj.tls_certificate_sds_secret_configs = message.tls_certificate_sds_secret_configs.map((e) =>
        SdsSecretConfig.toJSON(e)
      );
    }
    if (message.validation_context_type?.$case === "validation_context") {
      obj.validation_context = CertificateValidationContext.toJSON(message.validation_context_type.validation_context);
    }
    if (message.validation_context_type?.$case === "validation_context_sds_secret_config") {
      obj.validation_context_sds_secret_config = SdsSecretConfig.toJSON(
        message.validation_context_type.validation_context_sds_secret_config,
      );
    }
    if (message.validation_context_type?.$case === "combined_validation_context") {
      obj.combined_validation_context = CommonTlsContext_CombinedCertificateValidationContext.toJSON(
        message.validation_context_type.combined_validation_context,
      );
    }
    if (message.alpn_protocols?.length) {
      obj.alpn_protocols = message.alpn_protocols;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonTlsContext>, I>>(base?: I): CommonTlsContext {
    return CommonTlsContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonTlsContext>, I>>(object: I): CommonTlsContext {
    const message = createBaseCommonTlsContext();
    message.tls_params = (object.tls_params !== undefined && object.tls_params !== null)
      ? TlsParameters.fromPartial(object.tls_params)
      : undefined;
    message.tls_certificates = object.tls_certificates?.map((e) => TlsCertificate.fromPartial(e)) || undefined;
    message.tls_certificate_sds_secret_configs =
      object.tls_certificate_sds_secret_configs?.map((e) => SdsSecretConfig.fromPartial(e)) || undefined;
    if (
      object.validation_context_type?.$case === "validation_context" &&
      object.validation_context_type?.validation_context !== undefined &&
      object.validation_context_type?.validation_context !== null
    ) {
      message.validation_context_type = {
        $case: "validation_context",
        validation_context: CertificateValidationContext.fromPartial(object.validation_context_type.validation_context),
      };
    }
    if (
      object.validation_context_type?.$case === "validation_context_sds_secret_config" &&
      object.validation_context_type?.validation_context_sds_secret_config !== undefined &&
      object.validation_context_type?.validation_context_sds_secret_config !== null
    ) {
      message.validation_context_type = {
        $case: "validation_context_sds_secret_config",
        validation_context_sds_secret_config: SdsSecretConfig.fromPartial(
          object.validation_context_type.validation_context_sds_secret_config,
        ),
      };
    }
    if (
      object.validation_context_type?.$case === "combined_validation_context" &&
      object.validation_context_type?.combined_validation_context !== undefined &&
      object.validation_context_type?.combined_validation_context !== null
    ) {
      message.validation_context_type = {
        $case: "combined_validation_context",
        combined_validation_context: CommonTlsContext_CombinedCertificateValidationContext.fromPartial(
          object.validation_context_type.combined_validation_context,
        ),
      };
    }
    message.alpn_protocols = object.alpn_protocols?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(CommonTlsContext.$type, CommonTlsContext);

function createBaseCommonTlsContext_CombinedCertificateValidationContext(): CommonTlsContext_CombinedCertificateValidationContext {
  return { $type: "envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext" };
}

export const CommonTlsContext_CombinedCertificateValidationContext: MessageFns<
  CommonTlsContext_CombinedCertificateValidationContext,
  "envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext"
> = {
  $type: "envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext" as const,

  encode(
    message: CommonTlsContext_CombinedCertificateValidationContext,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.default_validation_context !== undefined) {
      CertificateValidationContext.encode(message.default_validation_context, writer.uint32(10).fork()).join();
    }
    if (message.validation_context_sds_secret_config !== undefined) {
      SdsSecretConfig.encode(message.validation_context_sds_secret_config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommonTlsContext_CombinedCertificateValidationContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommonTlsContext_CombinedCertificateValidationContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.default_validation_context = CertificateValidationContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.validation_context_sds_secret_config = SdsSecretConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommonTlsContext_CombinedCertificateValidationContext {
    return {
      $type: CommonTlsContext_CombinedCertificateValidationContext.$type,
      default_validation_context: isSet(object.default_validation_context)
        ? CertificateValidationContext.fromJSON(object.default_validation_context)
        : undefined,
      validation_context_sds_secret_config: isSet(object.validation_context_sds_secret_config)
        ? SdsSecretConfig.fromJSON(object.validation_context_sds_secret_config)
        : undefined,
    };
  },

  toJSON(message: CommonTlsContext_CombinedCertificateValidationContext): unknown {
    const obj: any = {};
    if (message.default_validation_context !== undefined) {
      obj.default_validation_context = CertificateValidationContext.toJSON(message.default_validation_context);
    }
    if (message.validation_context_sds_secret_config !== undefined) {
      obj.validation_context_sds_secret_config = SdsSecretConfig.toJSON(message.validation_context_sds_secret_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommonTlsContext_CombinedCertificateValidationContext>, I>>(
    base?: I,
  ): CommonTlsContext_CombinedCertificateValidationContext {
    return CommonTlsContext_CombinedCertificateValidationContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommonTlsContext_CombinedCertificateValidationContext>, I>>(
    object: I,
  ): CommonTlsContext_CombinedCertificateValidationContext {
    const message = createBaseCommonTlsContext_CombinedCertificateValidationContext();
    message.default_validation_context =
      (object.default_validation_context !== undefined && object.default_validation_context !== null)
        ? CertificateValidationContext.fromPartial(object.default_validation_context)
        : undefined;
    message.validation_context_sds_secret_config =
      (object.validation_context_sds_secret_config !== undefined &&
          object.validation_context_sds_secret_config !== null)
        ? SdsSecretConfig.fromPartial(object.validation_context_sds_secret_config)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(
  CommonTlsContext_CombinedCertificateValidationContext.$type,
  CommonTlsContext_CombinedCertificateValidationContext,
);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
