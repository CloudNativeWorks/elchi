// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/v3/string.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { TypedExtensionConfig } from "../../../../xds/core/v3/extension";
import { RegexMatcher } from "./regex";

export const protobufPackage = "envoy.type.matcher.v3";

/**
 * Specifies the way to match a string.
 * [#next-free-field: 9]
 */
export interface StringMatcher {
  $type: "envoy.type.matcher.v3.StringMatcher";
  match_pattern?:
    | //
    /**
     * The input string must match exactly the string specified here.
     *
     * Examples:
     *
     * * ``abc`` only matches the value ``abc``.
     */
    { $case: "exact"; exact: string }
    | //
    /**
     * The input string must have the prefix specified here.
     *
     * .. note::
     *
     *  Empty prefix match is not allowed, please use ``safe_regex`` instead.
     *
     * Examples:
     *
     * * ``abc`` matches the value ``abc.xyz``
     */
    { $case: "prefix"; prefix: string }
    | //
    /**
     * The input string must have the suffix specified here.
     *
     * .. note::
     *
     *  Empty suffix match is not allowed, please use ``safe_regex`` instead.
     *
     * Examples:
     *
     * * ``abc`` matches the value ``xyz.abc``
     */
    { $case: "suffix"; suffix: string }
    | //
    /** The input string must match the regular expression specified here. */
    { $case: "safe_regex"; safe_regex: RegexMatcher }
    | //
    /**
     * The input string must have the substring specified here.
     *
     * .. note::
     *
     *  Empty contains match is not allowed, please use ``safe_regex`` instead.
     *
     * Examples:
     *
     * * ``abc`` matches the value ``xyz.abc.def``
     */
    { $case: "contains"; contains: string }
    | //
    /**
     * Use an extension as the matcher type.
     * [#extension-category: envoy.string_matcher]
     */
    { $case: "custom"; custom: TypedExtensionConfig }
    | undefined;
  /**
   * If ``true``, indicates the exact/prefix/suffix/contains matching should be case insensitive. This
   * has no effect for the ``safe_regex`` match.
   * For example, the matcher ``data`` will match both input string ``Data`` and ``data`` if this option
   * is set to ``true``.
   */
  ignore_case?: boolean | undefined;
}

/** Specifies a list of ways to match a string. */
export interface ListStringMatcher {
  $type: "envoy.type.matcher.v3.ListStringMatcher";
  patterns?: StringMatcher[] | undefined;
}

function createBaseStringMatcher(): StringMatcher {
  return { $type: "envoy.type.matcher.v3.StringMatcher", match_pattern: undefined };
}

export const StringMatcher: MessageFns<StringMatcher, "envoy.type.matcher.v3.StringMatcher"> = {
  $type: "envoy.type.matcher.v3.StringMatcher" as const,

  encode(message: StringMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.match_pattern?.$case) {
      case "exact":
        writer.uint32(10).string(message.match_pattern.exact);
        break;
      case "prefix":
        writer.uint32(18).string(message.match_pattern.prefix);
        break;
      case "suffix":
        writer.uint32(26).string(message.match_pattern.suffix);
        break;
      case "safe_regex":
        RegexMatcher.encode(message.match_pattern.safe_regex, writer.uint32(42).fork()).join();
        break;
      case "contains":
        writer.uint32(58).string(message.match_pattern.contains);
        break;
      case "custom":
        TypedExtensionConfig.encode(message.match_pattern.custom, writer.uint32(66).fork()).join();
        break;
    }
    if (message.ignore_case !== undefined && message.ignore_case !== false) {
      writer.uint32(48).bool(message.ignore_case);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.match_pattern = { $case: "exact", exact: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.match_pattern = { $case: "prefix", prefix: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.match_pattern = { $case: "suffix", suffix: reader.string() };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.match_pattern = { $case: "safe_regex", safe_regex: RegexMatcher.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.match_pattern = { $case: "contains", contains: reader.string() };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.match_pattern = { $case: "custom", custom: TypedExtensionConfig.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.ignore_case = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StringMatcher {
    return {
      $type: StringMatcher.$type,
      match_pattern: isSet(object.exact)
        ? { $case: "exact", exact: globalThis.String(object.exact) }
        : isSet(object.prefix)
        ? { $case: "prefix", prefix: globalThis.String(object.prefix) }
        : isSet(object.suffix)
        ? { $case: "suffix", suffix: globalThis.String(object.suffix) }
        : isSet(object.safe_regex)
        ? { $case: "safe_regex", safe_regex: RegexMatcher.fromJSON(object.safe_regex) }
        : isSet(object.contains)
        ? { $case: "contains", contains: globalThis.String(object.contains) }
        : isSet(object.custom)
        ? { $case: "custom", custom: TypedExtensionConfig.fromJSON(object.custom) }
        : undefined,
      ignore_case: isSet(object.ignore_case) ? globalThis.Boolean(object.ignore_case) : undefined,
    };
  },

  toJSON(message: StringMatcher): unknown {
    const obj: any = {};
    if (message.match_pattern?.$case === "exact") {
      obj.exact = message.match_pattern.exact;
    }
    if (message.match_pattern?.$case === "prefix") {
      obj.prefix = message.match_pattern.prefix;
    }
    if (message.match_pattern?.$case === "suffix") {
      obj.suffix = message.match_pattern.suffix;
    }
    if (message.match_pattern?.$case === "safe_regex") {
      obj.safe_regex = RegexMatcher.toJSON(message.match_pattern.safe_regex);
    }
    if (message.match_pattern?.$case === "contains") {
      obj.contains = message.match_pattern.contains;
    }
    if (message.match_pattern?.$case === "custom") {
      obj.custom = TypedExtensionConfig.toJSON(message.match_pattern.custom);
    }
    if (message.ignore_case !== undefined) {
      obj.ignore_case = message.ignore_case;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StringMatcher>, I>>(base?: I): StringMatcher {
    return StringMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StringMatcher>, I>>(object: I): StringMatcher {
    const message = createBaseStringMatcher();
    if (
      object.match_pattern?.$case === "exact" &&
      object.match_pattern?.exact !== undefined &&
      object.match_pattern?.exact !== null
    ) {
      message.match_pattern = { $case: "exact", exact: object.match_pattern.exact };
    }
    if (
      object.match_pattern?.$case === "prefix" &&
      object.match_pattern?.prefix !== undefined &&
      object.match_pattern?.prefix !== null
    ) {
      message.match_pattern = { $case: "prefix", prefix: object.match_pattern.prefix };
    }
    if (
      object.match_pattern?.$case === "suffix" &&
      object.match_pattern?.suffix !== undefined &&
      object.match_pattern?.suffix !== null
    ) {
      message.match_pattern = { $case: "suffix", suffix: object.match_pattern.suffix };
    }
    if (
      object.match_pattern?.$case === "safe_regex" &&
      object.match_pattern?.safe_regex !== undefined &&
      object.match_pattern?.safe_regex !== null
    ) {
      message.match_pattern = {
        $case: "safe_regex",
        safe_regex: RegexMatcher.fromPartial(object.match_pattern.safe_regex),
      };
    }
    if (
      object.match_pattern?.$case === "contains" &&
      object.match_pattern?.contains !== undefined &&
      object.match_pattern?.contains !== null
    ) {
      message.match_pattern = { $case: "contains", contains: object.match_pattern.contains };
    }
    if (
      object.match_pattern?.$case === "custom" &&
      object.match_pattern?.custom !== undefined &&
      object.match_pattern?.custom !== null
    ) {
      message.match_pattern = {
        $case: "custom",
        custom: TypedExtensionConfig.fromPartial(object.match_pattern.custom),
      };
    }
    message.ignore_case = object.ignore_case ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(StringMatcher.$type, StringMatcher);

function createBaseListStringMatcher(): ListStringMatcher {
  return { $type: "envoy.type.matcher.v3.ListStringMatcher" };
}

export const ListStringMatcher: MessageFns<ListStringMatcher, "envoy.type.matcher.v3.ListStringMatcher"> = {
  $type: "envoy.type.matcher.v3.ListStringMatcher" as const,

  encode(message: ListStringMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.patterns !== undefined && message.patterns.length !== 0) {
      for (const v of message.patterns) {
        StringMatcher.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListStringMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListStringMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.patterns === undefined) {
            message.patterns = [];
          }
          const el = StringMatcher.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.patterns!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListStringMatcher {
    return {
      $type: ListStringMatcher.$type,
      patterns: globalThis.Array.isArray(object?.patterns)
        ? object.patterns.map((e: any) => StringMatcher.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: ListStringMatcher): unknown {
    const obj: any = {};
    if (message.patterns?.length) {
      obj.patterns = message.patterns.map((e) => StringMatcher.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListStringMatcher>, I>>(base?: I): ListStringMatcher {
    return ListStringMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListStringMatcher>, I>>(object: I): ListStringMatcher {
    const message = createBaseListStringMatcher();
    message.patterns = object.patterns?.map((e) => StringMatcher.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(ListStringMatcher.$type, ListStringMatcher);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
