// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/auth/v2alpha/external_auth.proto

/* eslint-disable */
import { BinaryReader } from "@bufbuild/protobuf/wire";
import { CheckRequest, CheckResponse } from "../v2/external_auth";

export const protobufPackage = "envoy.service.auth.v2alpha";

/**
 * A generic interface for performing authorization check on incoming
 * requests to a networked service.
 */
export interface Authorization {
  /**
   * Performs authorization check based on the attributes associated with the
   * incoming request, and returns status `OK` or not `OK`.
   */
  Check(request: CheckRequest): Promise<CheckResponse>;
}

export const AuthorizationServiceName = "envoy.service.auth.v2alpha.Authorization";
export class AuthorizationClientImpl implements Authorization {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AuthorizationServiceName;
    this.rpc = rpc;
    this.Check = this.Check.bind(this);
  }
  Check(request: CheckRequest): Promise<CheckResponse> {
    const data = CheckRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Check", data);
    return promise.then((data) => CheckResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
