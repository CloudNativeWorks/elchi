// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/mongo_proxy/v2/mongo_proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { FaultDelay } from "../../../fault/v2/fault";

export const protobufPackage = "envoy.config.filter.network.mongo_proxy.v2";

export interface MongoProxy {
  $type: "envoy.config.filter.network.mongo_proxy.v2.MongoProxy";
  /**
   * The human readable prefix to use when emitting :ref:`statistics
   * <config_network_filters_mongo_proxy_stats>`.
   */
  stat_prefix?:
    | string
    | undefined;
  /**
   * The optional path to use for writing Mongo access logs. If not access log
   * path is specified no access logs will be written. Note that access log is
   * also gated :ref:`runtime <config_network_filters_mongo_proxy_runtime>`.
   */
  access_log?:
    | string
    | undefined;
  /**
   * Inject a fixed delay before proxying a Mongo operation. Delays are
   * applied to the following MongoDB operations: Query, Insert, GetMore,
   * and KillCursors. Once an active delay is in progress, all incoming
   * data up until the timer event fires will be a part of the delay.
   */
  delay?:
    | FaultDelay
    | undefined;
  /**
   * Flag to specify whether :ref:`dynamic metadata
   * <config_network_filters_mongo_proxy_dynamic_metadata>` should be emitted. Defaults to false.
   */
  emit_dynamic_metadata?: boolean | undefined;
}

function createBaseMongoProxy(): MongoProxy {
  return { $type: "envoy.config.filter.network.mongo_proxy.v2.MongoProxy" };
}

export const MongoProxy: MessageFns<MongoProxy, "envoy.config.filter.network.mongo_proxy.v2.MongoProxy"> = {
  $type: "envoy.config.filter.network.mongo_proxy.v2.MongoProxy" as const,

  encode(message: MongoProxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(10).string(message.stat_prefix);
    }
    if (message.access_log !== undefined && message.access_log !== "") {
      writer.uint32(18).string(message.access_log);
    }
    if (message.delay !== undefined) {
      FaultDelay.encode(message.delay, writer.uint32(26).fork()).join();
    }
    if (message.emit_dynamic_metadata !== undefined && message.emit_dynamic_metadata !== false) {
      writer.uint32(32).bool(message.emit_dynamic_metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MongoProxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMongoProxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.access_log = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.delay = FaultDelay.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.emit_dynamic_metadata = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MongoProxy {
    return {
      $type: MongoProxy.$type,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      access_log: isSet(object.access_log) ? globalThis.String(object.access_log) : undefined,
      delay: isSet(object.delay) ? FaultDelay.fromJSON(object.delay) : undefined,
      emit_dynamic_metadata: isSet(object.emit_dynamic_metadata)
        ? globalThis.Boolean(object.emit_dynamic_metadata)
        : undefined,
    };
  },

  toJSON(message: MongoProxy): unknown {
    const obj: any = {};
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.access_log !== undefined) {
      obj.access_log = message.access_log;
    }
    if (message.delay !== undefined) {
      obj.delay = FaultDelay.toJSON(message.delay);
    }
    if (message.emit_dynamic_metadata !== undefined) {
      obj.emit_dynamic_metadata = message.emit_dynamic_metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MongoProxy>, I>>(base?: I): MongoProxy {
    return MongoProxy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MongoProxy>, I>>(object: I): MongoProxy {
    const message = createBaseMongoProxy();
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.access_log = object.access_log ?? undefined;
    message.delay = (object.delay !== undefined && object.delay !== null)
      ? FaultDelay.fromPartial(object.delay)
      : undefined;
    message.emit_dynamic_metadata = object.emit_dynamic_metadata ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(MongoProxy.$type, MongoProxy);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
