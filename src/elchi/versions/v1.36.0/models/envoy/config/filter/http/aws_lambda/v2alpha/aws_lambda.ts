// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/http/aws_lambda/v2alpha/aws_lambda.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.config.filter.http.aws_lambda.v2alpha";

/** AWS Lambda filter config */
export interface Config {
  $type: "envoy.config.filter.http.aws_lambda.v2alpha.Config";
  /**
   * The ARN of the AWS Lambda to invoke when the filter is engaged
   * Must be in the following format:
   * arn:<partition>:lambda:<region>:<account-number>:function:<function-name>
   */
  arn?:
    | string
    | undefined;
  /** Whether to transform the request (headers and body) to a JSON payload or pass it as is. */
  payload_passthrough?:
    | boolean
    | undefined;
  /** Determines the way to invoke the Lambda function. */
  invocation_mode?: Config_InvocationMode | undefined;
}

export enum Config_InvocationMode {
  /**
   * SYNCHRONOUS - This is the more common mode of invocation, in which Lambda responds after it has completed the function. In
   * this mode the output of the Lambda function becomes the response of the HTTP request.
   */
  SYNCHRONOUS = "SYNCHRONOUS",
  /**
   * ASYNCHRONOUS - In this mode Lambda responds immediately but continues to process the function asynchronously. This mode can be
   * used to signal events for example. In this mode, Lambda responds with an acknowledgment that it received the
   * call which is translated to an HTTP 200 OK by the filter.
   */
  ASYNCHRONOUS = "ASYNCHRONOUS",
}

export function config_InvocationModeFromJSON(object: any): Config_InvocationMode {
  switch (object) {
    case 0:
    case "SYNCHRONOUS":
      return Config_InvocationMode.SYNCHRONOUS;
    case 1:
    case "ASYNCHRONOUS":
      return Config_InvocationMode.ASYNCHRONOUS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_InvocationMode");
  }
}

export function config_InvocationModeToJSON(object: Config_InvocationMode): string {
  switch (object) {
    case Config_InvocationMode.SYNCHRONOUS:
      return "SYNCHRONOUS";
    case Config_InvocationMode.ASYNCHRONOUS:
      return "ASYNCHRONOUS";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_InvocationMode");
  }
}

export function config_InvocationModeToNumber(object: Config_InvocationMode): number {
  switch (object) {
    case Config_InvocationMode.SYNCHRONOUS:
      return 0;
    case Config_InvocationMode.ASYNCHRONOUS:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_InvocationMode");
  }
}

/**
 * Per-route configuration for AWS Lambda. This can be useful when invoking a different Lambda function or a different
 * version of the same Lambda depending on the route.
 */
export interface PerRouteConfig {
  $type: "envoy.config.filter.http.aws_lambda.v2alpha.PerRouteConfig";
  invoke_config?: Config | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.config.filter.http.aws_lambda.v2alpha.Config" };
}

export const Config: MessageFns<Config, "envoy.config.filter.http.aws_lambda.v2alpha.Config"> = {
  $type: "envoy.config.filter.http.aws_lambda.v2alpha.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.arn !== undefined && message.arn !== "") {
      writer.uint32(10).string(message.arn);
    }
    if (message.payload_passthrough !== undefined && message.payload_passthrough !== false) {
      writer.uint32(16).bool(message.payload_passthrough);
    }
    if (message.invocation_mode !== undefined && message.invocation_mode !== Config_InvocationMode.SYNCHRONOUS) {
      writer.uint32(24).int32(config_InvocationModeToNumber(message.invocation_mode));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.arn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.payload_passthrough = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.invocation_mode = config_InvocationModeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      arn: isSet(object.arn) ? globalThis.String(object.arn) : undefined,
      payload_passthrough: isSet(object.payload_passthrough)
        ? globalThis.Boolean(object.payload_passthrough)
        : undefined,
      invocation_mode: isSet(object.invocation_mode)
        ? config_InvocationModeFromJSON(object.invocation_mode)
        : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.arn !== undefined) {
      obj.arn = message.arn;
    }
    if (message.payload_passthrough !== undefined) {
      obj.payload_passthrough = message.payload_passthrough;
    }
    if (message.invocation_mode !== undefined) {
      obj.invocation_mode = config_InvocationModeToJSON(message.invocation_mode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.arn = object.arn ?? undefined;
    message.payload_passthrough = object.payload_passthrough ?? undefined;
    message.invocation_mode = object.invocation_mode ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBasePerRouteConfig(): PerRouteConfig {
  return { $type: "envoy.config.filter.http.aws_lambda.v2alpha.PerRouteConfig" };
}

export const PerRouteConfig: MessageFns<PerRouteConfig, "envoy.config.filter.http.aws_lambda.v2alpha.PerRouteConfig"> =
  {
    $type: "envoy.config.filter.http.aws_lambda.v2alpha.PerRouteConfig" as const,

    encode(message: PerRouteConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.invoke_config !== undefined) {
        Config.encode(message.invoke_config, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PerRouteConfig {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBasePerRouteConfig();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.invoke_config = Config.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): PerRouteConfig {
      return {
        $type: PerRouteConfig.$type,
        invoke_config: isSet(object.invoke_config) ? Config.fromJSON(object.invoke_config) : undefined,
      };
    },

    toJSON(message: PerRouteConfig): unknown {
      const obj: any = {};
      if (message.invoke_config !== undefined) {
        obj.invoke_config = Config.toJSON(message.invoke_config);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<PerRouteConfig>, I>>(base?: I): PerRouteConfig {
      return PerRouteConfig.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<PerRouteConfig>, I>>(object: I): PerRouteConfig {
      const message = createBasePerRouteConfig();
      message.invoke_config = (object.invoke_config !== undefined && object.invoke_config !== null)
        ? Config.fromPartial(object.invoke_config)
        : undefined;
      return message;
    },
  };

messageTypeRegistry.set(PerRouteConfig.$type, PerRouteConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
