// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/listener/v3/udp_listener_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { TypedExtensionConfig } from "../../core/v3/extension";
import { UdpSocketConfig } from "../../core/v3/udp_socket_config";
import { QuicProtocolOptions } from "./quic_config";

export const protobufPackage = "envoy.config.listener.v3";

/** [#next-free-field: 9] */
export interface UdpListenerConfig {
  $type: "envoy.config.listener.v3.UdpListenerConfig";
  /**
   * UDP socket configuration for the listener. The default for
   * :ref:`prefer_gro <envoy_v3_api_field_config.core.v3.UdpSocketConfig.prefer_gro>` is false for
   * listener sockets. If receiving a large amount of datagrams from a small number of sources, it
   * may be worthwhile to enable this option after performance testing.
   */
  downstream_socket_config?:
    | UdpSocketConfig
    | undefined;
  /**
   * Configuration for QUIC protocol. If empty, QUIC will not be enabled on this listener. Set
   * to the default object to enable QUIC without modifying any additional options.
   */
  quic_options?:
    | QuicProtocolOptions
    | undefined;
  /**
   * Configuration for the UDP packet writer. If empty, HTTP/3 will use GSO if available
   * (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpGsoBatchWriterFactory>`)
   * or the default kernel sendmsg if not,
   * (:ref:`UdpDefaultWriterFactory <envoy_v3_api_msg_extensions.udp_packet_writer.v3.UdpDefaultWriterFactory>`)
   * and raw UDP will use kernel sendmsg.
   * [#extension-category: envoy.udp_packet_writer]
   */
  udp_packet_packet_writer_config?: TypedExtensionConfig | undefined;
}

export interface ActiveRawUdpListenerConfig {
  $type: "envoy.config.listener.v3.ActiveRawUdpListenerConfig";
}

function createBaseUdpListenerConfig(): UdpListenerConfig {
  return { $type: "envoy.config.listener.v3.UdpListenerConfig" };
}

export const UdpListenerConfig: MessageFns<UdpListenerConfig, "envoy.config.listener.v3.UdpListenerConfig"> = {
  $type: "envoy.config.listener.v3.UdpListenerConfig" as const,

  encode(message: UdpListenerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.downstream_socket_config !== undefined) {
      UdpSocketConfig.encode(message.downstream_socket_config, writer.uint32(42).fork()).join();
    }
    if (message.quic_options !== undefined) {
      QuicProtocolOptions.encode(message.quic_options, writer.uint32(58).fork()).join();
    }
    if (message.udp_packet_packet_writer_config !== undefined) {
      TypedExtensionConfig.encode(message.udp_packet_packet_writer_config, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UdpListenerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUdpListenerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.downstream_socket_config = UdpSocketConfig.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.quic_options = QuicProtocolOptions.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.udp_packet_packet_writer_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UdpListenerConfig {
    return {
      $type: UdpListenerConfig.$type,
      downstream_socket_config: isSet(object.downstream_socket_config)
        ? UdpSocketConfig.fromJSON(object.downstream_socket_config)
        : undefined,
      quic_options: isSet(object.quic_options) ? QuicProtocolOptions.fromJSON(object.quic_options) : undefined,
      udp_packet_packet_writer_config: isSet(object.udp_packet_packet_writer_config)
        ? TypedExtensionConfig.fromJSON(object.udp_packet_packet_writer_config)
        : undefined,
    };
  },

  toJSON(message: UdpListenerConfig): unknown {
    const obj: any = {};
    if (message.downstream_socket_config !== undefined) {
      obj.downstream_socket_config = UdpSocketConfig.toJSON(message.downstream_socket_config);
    }
    if (message.quic_options !== undefined) {
      obj.quic_options = QuicProtocolOptions.toJSON(message.quic_options);
    }
    if (message.udp_packet_packet_writer_config !== undefined) {
      obj.udp_packet_packet_writer_config = TypedExtensionConfig.toJSON(message.udp_packet_packet_writer_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UdpListenerConfig>, I>>(base?: I): UdpListenerConfig {
    return UdpListenerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UdpListenerConfig>, I>>(object: I): UdpListenerConfig {
    const message = createBaseUdpListenerConfig();
    message.downstream_socket_config =
      (object.downstream_socket_config !== undefined && object.downstream_socket_config !== null)
        ? UdpSocketConfig.fromPartial(object.downstream_socket_config)
        : undefined;
    message.quic_options = (object.quic_options !== undefined && object.quic_options !== null)
      ? QuicProtocolOptions.fromPartial(object.quic_options)
      : undefined;
    message.udp_packet_packet_writer_config =
      (object.udp_packet_packet_writer_config !== undefined && object.udp_packet_packet_writer_config !== null)
        ? TypedExtensionConfig.fromPartial(object.udp_packet_packet_writer_config)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(UdpListenerConfig.$type, UdpListenerConfig);

function createBaseActiveRawUdpListenerConfig(): ActiveRawUdpListenerConfig {
  return { $type: "envoy.config.listener.v3.ActiveRawUdpListenerConfig" };
}

export const ActiveRawUdpListenerConfig: MessageFns<
  ActiveRawUdpListenerConfig,
  "envoy.config.listener.v3.ActiveRawUdpListenerConfig"
> = {
  $type: "envoy.config.listener.v3.ActiveRawUdpListenerConfig" as const,

  encode(_: ActiveRawUdpListenerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveRawUdpListenerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveRawUdpListenerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ActiveRawUdpListenerConfig {
    return { $type: ActiveRawUdpListenerConfig.$type };
  },

  toJSON(_: ActiveRawUdpListenerConfig): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ActiveRawUdpListenerConfig>, I>>(base?: I): ActiveRawUdpListenerConfig {
    return ActiveRawUdpListenerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ActiveRawUdpListenerConfig>, I>>(_: I): ActiveRawUdpListenerConfig {
    const message = createBaseActiveRawUdpListenerConfig();
    return message;
  },
};

messageTypeRegistry.set(ActiveRawUdpListenerConfig.$type, ActiveRawUdpListenerConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
