// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/http/checksum/v3alpha/checksum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { StringMatcher } from "../../../../../../../envoy/type/matcher/v3/string";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.checksum.v3alpha";

export interface ChecksumConfig {
  $type: "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig";
  /**
   * A set of matcher and checksum pairs for which, if a path matching ``path_matcher``
   * is requested and the checksum of the response body does not match the ``sha256``, the
   * response will be replaced with a 403 Forbidden status.
   *
   * If multiple matchers match the same path, the first to match takes precedence.
   */
  checksums?:
    | ChecksumConfig_Checksum[]
    | undefined;
  /**
   * If a request doesn't match any of the specified checksum paths and reject_unmatched is
   * true, the request is rejected immediately with 403 Forbidden.
   */
  reject_unmatched?: boolean | undefined;
}

export interface ChecksumConfig_Checksum {
  $type: "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig.Checksum";
  matcher?:
    | //
    /**
     * A matcher for a path that is expected to have a specific checksum, as specified
     * in the ``sha256`` field.
     */
    { $case: "path_matcher"; path_matcher: StringMatcher }
    | undefined;
  /**
   * A hex-encoded sha256 string required to match the sha256sum of the response body
   * of the path specified in the ``path_matcher`` field.
   */
  sha256?: string | undefined;
}

function createBaseChecksumConfig(): ChecksumConfig {
  return { $type: "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig" };
}

export const ChecksumConfig: MessageFns<
  ChecksumConfig,
  "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig"
> = {
  $type: "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig" as const,

  encode(message: ChecksumConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.checksums !== undefined && message.checksums.length !== 0) {
      for (const v of message.checksums) {
        ChecksumConfig_Checksum.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.reject_unmatched !== undefined && message.reject_unmatched !== false) {
      writer.uint32(16).bool(message.reject_unmatched);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChecksumConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChecksumConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.checksums === undefined) {
            message.checksums = [];
          }
          const el = ChecksumConfig_Checksum.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.checksums!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reject_unmatched = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChecksumConfig {
    return {
      $type: ChecksumConfig.$type,
      checksums: globalThis.Array.isArray(object?.checksums)
        ? object.checksums.map((e: any) => ChecksumConfig_Checksum.fromJSON(e))
        : undefined,
      reject_unmatched: isSet(object.reject_unmatched) ? globalThis.Boolean(object.reject_unmatched) : undefined,
    };
  },

  toJSON(message: ChecksumConfig): unknown {
    const obj: any = {};
    if (message.checksums?.length) {
      obj.checksums = message.checksums.map((e) => ChecksumConfig_Checksum.toJSON(e));
    }
    if (message.reject_unmatched !== undefined) {
      obj.reject_unmatched = message.reject_unmatched;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChecksumConfig>, I>>(base?: I): ChecksumConfig {
    return ChecksumConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChecksumConfig>, I>>(object: I): ChecksumConfig {
    const message = createBaseChecksumConfig();
    message.checksums = object.checksums?.map((e) => ChecksumConfig_Checksum.fromPartial(e)) || undefined;
    message.reject_unmatched = object.reject_unmatched ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ChecksumConfig.$type, ChecksumConfig);

function createBaseChecksumConfig_Checksum(): ChecksumConfig_Checksum {
  return { $type: "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig.Checksum", matcher: undefined };
}

export const ChecksumConfig_Checksum: MessageFns<
  ChecksumConfig_Checksum,
  "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig.Checksum"
> = {
  $type: "envoy.extensions.filters.http.checksum.v3alpha.ChecksumConfig.Checksum" as const,

  encode(message: ChecksumConfig_Checksum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.matcher?.$case) {
      case "path_matcher":
        StringMatcher.encode(message.matcher.path_matcher, writer.uint32(10).fork()).join();
        break;
    }
    if (message.sha256 !== undefined && message.sha256 !== "") {
      writer.uint32(18).string(message.sha256);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChecksumConfig_Checksum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChecksumConfig_Checksum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.matcher = { $case: "path_matcher", path_matcher: StringMatcher.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sha256 = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChecksumConfig_Checksum {
    return {
      $type: ChecksumConfig_Checksum.$type,
      matcher: isSet(object.path_matcher)
        ? { $case: "path_matcher", path_matcher: StringMatcher.fromJSON(object.path_matcher) }
        : undefined,
      sha256: isSet(object.sha256) ? globalThis.String(object.sha256) : undefined,
    };
  },

  toJSON(message: ChecksumConfig_Checksum): unknown {
    const obj: any = {};
    if (message.matcher?.$case === "path_matcher") {
      obj.path_matcher = StringMatcher.toJSON(message.matcher.path_matcher);
    }
    if (message.sha256 !== undefined) {
      obj.sha256 = message.sha256;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChecksumConfig_Checksum>, I>>(base?: I): ChecksumConfig_Checksum {
    return ChecksumConfig_Checksum.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChecksumConfig_Checksum>, I>>(object: I): ChecksumConfig_Checksum {
    const message = createBaseChecksumConfig_Checksum();
    if (
      object.matcher?.$case === "path_matcher" &&
      object.matcher?.path_matcher !== undefined &&
      object.matcher?.path_matcher !== null
    ) {
      message.matcher = { $case: "path_matcher", path_matcher: StringMatcher.fromPartial(object.matcher.path_matcher) };
    }
    message.sha256 = object.sha256 ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ChecksumConfig_Checksum.$type, ChecksumConfig_Checksum);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
