// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: opentelemetry/proto/common/v1/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "opentelemetry.proto.common.v1";

/**
 * AnyValue is used to represent any type of attribute value. AnyValue may contain a
 * primitive value such as a string or integer or it may contain an arbitrary nested
 * object containing arrays, key-value lists and primitives.
 */
export interface AnyValue {
  $type: "opentelemetry.proto.common.v1.AnyValue";
  /**
   * The value is one of the listed fields. It is valid for all values to be unspecified
   * in which case this AnyValue is considered to be "empty".
   */
  value?:
    | //
    { $case: "string_value"; string_value: string }
    | //
    { $case: "bool_value"; bool_value: boolean }
    | //
    { $case: "int_value"; int_value: number }
    | //
    { $case: "double_value"; double_value: number }
    | //
    { $case: "array_value"; array_value: ArrayValue }
    | //
    { $case: "kvlist_value"; kvlist_value: KeyValueList }
    | //
    { $case: "bytes_value"; bytes_value: Uint8Array }
    | undefined;
}

/**
 * ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
 * since oneof in AnyValue does not allow repeated fields.
 */
export interface ArrayValue {
  $type: "opentelemetry.proto.common.v1.ArrayValue";
  /** Array of values. The array may be empty (contain 0 elements). */
  values?: AnyValue[] | undefined;
}

/**
 * KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
 * since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
 * a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
 * avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
 * are semantically equivalent.
 */
export interface KeyValueList {
  $type: "opentelemetry.proto.common.v1.KeyValueList";
  /**
   * A collection of key/value pairs of key-value pairs. The list may be empty (may
   * contain 0 elements).
   * The keys MUST be unique (it is not allowed to have more than one
   * value with the same key).
   */
  values?: KeyValue[] | undefined;
}

/**
 * KeyValue is a key-value pair that is used to store Span attributes, Link
 * attributes, etc.
 */
export interface KeyValue {
  $type: "opentelemetry.proto.common.v1.KeyValue";
  key?: string | undefined;
  value?: AnyValue | undefined;
}

/**
 * InstrumentationScope is a message representing the instrumentation scope information
 * such as the fully qualified name and version.
 */
export interface InstrumentationScope {
  $type: "opentelemetry.proto.common.v1.InstrumentationScope";
  /** An empty instrumentation scope name means the name is unknown. */
  name?: string | undefined;
  version?: string | undefined;
  attributes?: KeyValue[] | undefined;
  dropped_attributes_count?: number | undefined;
}

function createBaseAnyValue(): AnyValue {
  return { $type: "opentelemetry.proto.common.v1.AnyValue", value: undefined };
}

export const AnyValue: MessageFns<AnyValue, "opentelemetry.proto.common.v1.AnyValue"> = {
  $type: "opentelemetry.proto.common.v1.AnyValue" as const,

  encode(message: AnyValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.value?.$case) {
      case "string_value":
        writer.uint32(10).string(message.value.string_value);
        break;
      case "bool_value":
        writer.uint32(16).bool(message.value.bool_value);
        break;
      case "int_value":
        writer.uint32(24).int64(message.value.int_value);
        break;
      case "double_value":
        writer.uint32(33).double(message.value.double_value);
        break;
      case "array_value":
        ArrayValue.encode(message.value.array_value, writer.uint32(42).fork()).join();
        break;
      case "kvlist_value":
        KeyValueList.encode(message.value.kvlist_value, writer.uint32(50).fork()).join();
        break;
      case "bytes_value":
        writer.uint32(58).bytes(message.value.bytes_value);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnyValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnyValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = { $case: "string_value", string_value: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = { $case: "bool_value", bool_value: reader.bool() };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.value = { $case: "int_value", int_value: longToNumber(reader.int64()) };
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.value = { $case: "double_value", double_value: reader.double() };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.value = { $case: "array_value", array_value: ArrayValue.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.value = { $case: "kvlist_value", kvlist_value: KeyValueList.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.value = { $case: "bytes_value", bytes_value: reader.bytes() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnyValue {
    return {
      $type: AnyValue.$type,
      value: isSet(object.string_value)
        ? { $case: "string_value", string_value: globalThis.String(object.string_value) }
        : isSet(object.bool_value)
        ? { $case: "bool_value", bool_value: globalThis.Boolean(object.bool_value) }
        : isSet(object.int_value)
        ? { $case: "int_value", int_value: globalThis.Number(object.int_value) }
        : isSet(object.double_value)
        ? { $case: "double_value", double_value: globalThis.Number(object.double_value) }
        : isSet(object.array_value)
        ? { $case: "array_value", array_value: ArrayValue.fromJSON(object.array_value) }
        : isSet(object.kvlist_value)
        ? { $case: "kvlist_value", kvlist_value: KeyValueList.fromJSON(object.kvlist_value) }
        : isSet(object.bytes_value)
        ? { $case: "bytes_value", bytes_value: bytesFromBase64(object.bytes_value) }
        : undefined,
    };
  },

  toJSON(message: AnyValue): unknown {
    const obj: any = {};
    if (message.value?.$case === "string_value") {
      obj.string_value = message.value.string_value;
    }
    if (message.value?.$case === "bool_value") {
      obj.bool_value = message.value.bool_value;
    }
    if (message.value?.$case === "int_value") {
      obj.int_value = Math.round(message.value.int_value);
    }
    if (message.value?.$case === "double_value") {
      obj.double_value = message.value.double_value;
    }
    if (message.value?.$case === "array_value") {
      obj.array_value = ArrayValue.toJSON(message.value.array_value);
    }
    if (message.value?.$case === "kvlist_value") {
      obj.kvlist_value = KeyValueList.toJSON(message.value.kvlist_value);
    }
    if (message.value?.$case === "bytes_value") {
      obj.bytes_value = base64FromBytes(message.value.bytes_value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnyValue>, I>>(base?: I): AnyValue {
    return AnyValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnyValue>, I>>(object: I): AnyValue {
    const message = createBaseAnyValue();
    if (
      object.value?.$case === "string_value" &&
      object.value?.string_value !== undefined &&
      object.value?.string_value !== null
    ) {
      message.value = { $case: "string_value", string_value: object.value.string_value };
    }
    if (
      object.value?.$case === "bool_value" &&
      object.value?.bool_value !== undefined &&
      object.value?.bool_value !== null
    ) {
      message.value = { $case: "bool_value", bool_value: object.value.bool_value };
    }
    if (
      object.value?.$case === "int_value" && object.value?.int_value !== undefined && object.value?.int_value !== null
    ) {
      message.value = { $case: "int_value", int_value: object.value.int_value };
    }
    if (
      object.value?.$case === "double_value" &&
      object.value?.double_value !== undefined &&
      object.value?.double_value !== null
    ) {
      message.value = { $case: "double_value", double_value: object.value.double_value };
    }
    if (
      object.value?.$case === "array_value" &&
      object.value?.array_value !== undefined &&
      object.value?.array_value !== null
    ) {
      message.value = { $case: "array_value", array_value: ArrayValue.fromPartial(object.value.array_value) };
    }
    if (
      object.value?.$case === "kvlist_value" &&
      object.value?.kvlist_value !== undefined &&
      object.value?.kvlist_value !== null
    ) {
      message.value = { $case: "kvlist_value", kvlist_value: KeyValueList.fromPartial(object.value.kvlist_value) };
    }
    if (
      object.value?.$case === "bytes_value" &&
      object.value?.bytes_value !== undefined &&
      object.value?.bytes_value !== null
    ) {
      message.value = { $case: "bytes_value", bytes_value: object.value.bytes_value };
    }
    return message;
  },
};

messageTypeRegistry.set(AnyValue.$type, AnyValue);

function createBaseArrayValue(): ArrayValue {
  return { $type: "opentelemetry.proto.common.v1.ArrayValue" };
}

export const ArrayValue: MessageFns<ArrayValue, "opentelemetry.proto.common.v1.ArrayValue"> = {
  $type: "opentelemetry.proto.common.v1.ArrayValue" as const,

  encode(message: ArrayValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.values !== undefined && message.values.length !== 0) {
      for (const v of message.values) {
        AnyValue.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArrayValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArrayValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.values === undefined) {
            message.values = [];
          }
          const el = AnyValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.values!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArrayValue {
    return {
      $type: ArrayValue.$type,
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) => AnyValue.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: ArrayValue): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => AnyValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArrayValue>, I>>(base?: I): ArrayValue {
    return ArrayValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArrayValue>, I>>(object: I): ArrayValue {
    const message = createBaseArrayValue();
    message.values = object.values?.map((e) => AnyValue.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(ArrayValue.$type, ArrayValue);

function createBaseKeyValueList(): KeyValueList {
  return { $type: "opentelemetry.proto.common.v1.KeyValueList" };
}

export const KeyValueList: MessageFns<KeyValueList, "opentelemetry.proto.common.v1.KeyValueList"> = {
  $type: "opentelemetry.proto.common.v1.KeyValueList" as const,

  encode(message: KeyValueList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.values !== undefined && message.values.length !== 0) {
      for (const v of message.values) {
        KeyValue.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyValueList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyValueList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.values === undefined) {
            message.values = [];
          }
          const el = KeyValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.values!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyValueList {
    return {
      $type: KeyValueList.$type,
      values: globalThis.Array.isArray(object?.values)
        ? object.values.map((e: any) => KeyValue.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: KeyValueList): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values.map((e) => KeyValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyValueList>, I>>(base?: I): KeyValueList {
    return KeyValueList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyValueList>, I>>(object: I): KeyValueList {
    const message = createBaseKeyValueList();
    message.values = object.values?.map((e) => KeyValue.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(KeyValueList.$type, KeyValueList);

function createBaseKeyValue(): KeyValue {
  return { $type: "opentelemetry.proto.common.v1.KeyValue" };
}

export const KeyValue: MessageFns<KeyValue, "opentelemetry.proto.common.v1.KeyValue"> = {
  $type: "opentelemetry.proto.common.v1.KeyValue" as const,

  encode(message: KeyValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      AnyValue.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = AnyValue.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyValue {
    return {
      $type: KeyValue.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      value: isSet(object.value) ? AnyValue.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: KeyValue): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = AnyValue.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyValue>, I>>(base?: I): KeyValue {
    return KeyValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyValue>, I>>(object: I): KeyValue {
    const message = createBaseKeyValue();
    message.key = object.key ?? undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? AnyValue.fromPartial(object.value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(KeyValue.$type, KeyValue);

function createBaseInstrumentationScope(): InstrumentationScope {
  return { $type: "opentelemetry.proto.common.v1.InstrumentationScope" };
}

export const InstrumentationScope: MessageFns<
  InstrumentationScope,
  "opentelemetry.proto.common.v1.InstrumentationScope"
> = {
  $type: "opentelemetry.proto.common.v1.InstrumentationScope" as const,

  encode(message: InstrumentationScope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.version !== undefined && message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.attributes !== undefined && message.attributes.length !== 0) {
      for (const v of message.attributes) {
        KeyValue.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.dropped_attributes_count !== undefined && message.dropped_attributes_count !== 0) {
      writer.uint32(32).uint32(message.dropped_attributes_count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstrumentationScope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstrumentationScope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.attributes === undefined) {
            message.attributes = [];
          }
          const el = KeyValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.attributes!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.dropped_attributes_count = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstrumentationScope {
    return {
      $type: InstrumentationScope.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : undefined,
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => KeyValue.fromJSON(e))
        : undefined,
      dropped_attributes_count: isSet(object.dropped_attributes_count)
        ? globalThis.Number(object.dropped_attributes_count)
        : undefined,
    };
  },

  toJSON(message: InstrumentationScope): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.version !== undefined) {
      obj.version = message.version;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => KeyValue.toJSON(e));
    }
    if (message.dropped_attributes_count !== undefined) {
      obj.dropped_attributes_count = Math.round(message.dropped_attributes_count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InstrumentationScope>, I>>(base?: I): InstrumentationScope {
    return InstrumentationScope.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstrumentationScope>, I>>(object: I): InstrumentationScope {
    const message = createBaseInstrumentationScope();
    message.name = object.name ?? undefined;
    message.version = object.version ?? undefined;
    message.attributes = object.attributes?.map((e) => KeyValue.fromPartial(e)) || undefined;
    message.dropped_attributes_count = object.dropped_attributes_count ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(InstrumentationScope.$type, InstrumentationScope);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
