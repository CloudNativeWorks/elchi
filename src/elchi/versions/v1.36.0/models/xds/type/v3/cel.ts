// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: xds/type/v3/cel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CheckedExpr } from "../../../google/api/expr/v1alpha1/checked";
import { ParsedExpr } from "../../../google/api/expr/v1alpha1/syntax";
import { StringValue } from "../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "xds.type.v3";

/**
 * Either parsed or checked representation of the `Common Expression Language
 * <https://github.com/google/cel-spec>`_ (CEL) program.
 */
export interface CelExpression {
  $type: "xds.type.v3.CelExpression";
  expr_specifier?:
    | //
    /** Parsed expression in abstract syntax tree (AST) form. */
    { $case: "parsed_expr"; parsed_expr: ParsedExpr }
    | //
    /** Parsed expression in abstract syntax tree (AST) form that has been successfully type checked. */
    { $case: "checked_expr"; checked_expr: CheckedExpr }
    | undefined;
}

/**
 * Extracts a string by evaluating a `Common Expression Language
 * <https://github.com/google/cel-spec>`_ (CEL) expression against the standardized set of
 * :ref:`HTTP attributes <arch_overview_attributes>`.
 *
 * .. attention::
 *
 *   Besides CEL evaluation raising an error explicitly, CEL program returning a type other than
 *   the ``string``, or not returning anything, are considered an error as well.
 *
 * [#comment:TODO(sergiitk): When implemented, add the extension tag.]
 */
export interface CelExtractString {
  $type: "xds.type.v3.CelExtractString";
  /**
   * The CEL expression used to extract a string from the CEL environment.
   * the "subject string") that should be replaced.
   */
  expr_extract?:
    | CelExpression
    | undefined;
  /**
   * If CEL expression evaluates to an error, this value is be returned to the caller.
   * If not set, the error is propagated to the caller.
   */
  default_value?: string | undefined;
}

function createBaseCelExpression(): CelExpression {
  return { $type: "xds.type.v3.CelExpression", expr_specifier: undefined };
}

export const CelExpression: MessageFns<CelExpression, "xds.type.v3.CelExpression"> = {
  $type: "xds.type.v3.CelExpression" as const,

  encode(message: CelExpression, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.expr_specifier?.$case) {
      case "parsed_expr":
        ParsedExpr.encode(message.expr_specifier.parsed_expr, writer.uint32(10).fork()).join();
        break;
      case "checked_expr":
        CheckedExpr.encode(message.expr_specifier.checked_expr, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CelExpression {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCelExpression();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.expr_specifier = { $case: "parsed_expr", parsed_expr: ParsedExpr.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expr_specifier = { $case: "checked_expr", checked_expr: CheckedExpr.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CelExpression {
    return {
      $type: CelExpression.$type,
      expr_specifier: isSet(object.parsed_expr)
        ? { $case: "parsed_expr", parsed_expr: ParsedExpr.fromJSON(object.parsed_expr) }
        : isSet(object.checked_expr)
        ? { $case: "checked_expr", checked_expr: CheckedExpr.fromJSON(object.checked_expr) }
        : undefined,
    };
  },

  toJSON(message: CelExpression): unknown {
    const obj: any = {};
    if (message.expr_specifier?.$case === "parsed_expr") {
      obj.parsed_expr = ParsedExpr.toJSON(message.expr_specifier.parsed_expr);
    }
    if (message.expr_specifier?.$case === "checked_expr") {
      obj.checked_expr = CheckedExpr.toJSON(message.expr_specifier.checked_expr);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CelExpression>, I>>(base?: I): CelExpression {
    return CelExpression.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CelExpression>, I>>(object: I): CelExpression {
    const message = createBaseCelExpression();
    if (
      object.expr_specifier?.$case === "parsed_expr" &&
      object.expr_specifier?.parsed_expr !== undefined &&
      object.expr_specifier?.parsed_expr !== null
    ) {
      message.expr_specifier = {
        $case: "parsed_expr",
        parsed_expr: ParsedExpr.fromPartial(object.expr_specifier.parsed_expr),
      };
    }
    if (
      object.expr_specifier?.$case === "checked_expr" &&
      object.expr_specifier?.checked_expr !== undefined &&
      object.expr_specifier?.checked_expr !== null
    ) {
      message.expr_specifier = {
        $case: "checked_expr",
        checked_expr: CheckedExpr.fromPartial(object.expr_specifier.checked_expr),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(CelExpression.$type, CelExpression);

function createBaseCelExtractString(): CelExtractString {
  return { $type: "xds.type.v3.CelExtractString" };
}

export const CelExtractString: MessageFns<CelExtractString, "xds.type.v3.CelExtractString"> = {
  $type: "xds.type.v3.CelExtractString" as const,

  encode(message: CelExtractString, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expr_extract !== undefined) {
      CelExpression.encode(message.expr_extract, writer.uint32(10).fork()).join();
    }
    if (message.default_value !== undefined) {
      StringValue.encode(
        { $type: "google.protobuf.StringValue", value: message.default_value! },
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CelExtractString {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCelExtractString();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.expr_extract = CelExpression.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.default_value = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CelExtractString {
    return {
      $type: CelExtractString.$type,
      expr_extract: isSet(object.expr_extract) ? CelExpression.fromJSON(object.expr_extract) : undefined,
      default_value: isSet(object.default_value) ? String(object.default_value) : undefined,
    };
  },

  toJSON(message: CelExtractString): unknown {
    const obj: any = {};
    if (message.expr_extract !== undefined) {
      obj.expr_extract = CelExpression.toJSON(message.expr_extract);
    }
    if (message.default_value !== undefined) {
      obj.default_value = message.default_value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CelExtractString>, I>>(base?: I): CelExtractString {
    return CelExtractString.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CelExtractString>, I>>(object: I): CelExtractString {
    const message = createBaseCelExtractString();
    message.expr_extract = (object.expr_extract !== undefined && object.expr_extract !== null)
      ? CelExpression.fromPartial(object.expr_extract)
      : undefined;
    message.default_value = object.default_value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CelExtractString.$type, CelExtractString);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
