// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/filters/network/sip_proxy/tra/v3alpha/tra.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import {
  ApiVersion,
  apiVersionFromJSON,
  apiVersionToJSON,
  apiVersionToNumber,
} from "../../../../../../../../envoy/config/core/v3/config_source";
import { GrpcService } from "../../../../../../../../envoy/config/core/v3/grpc_service";
import { Duration } from "../../../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.network.sip_proxy.tra.v3alpha";

export interface TraServiceConfig {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig";
  /**
   * Specifies the gRPC service that hosts the rate limit service. The client
   * will connect to this cluster when it needs to make rate limit service
   * requests.
   */
  grpc_service?:
    | GrpcService
    | undefined;
  /**
   * API version for rate limit transport protocol. This describes the rate limit gRPC endpoint and
   * version of messages used on the wire.
   */
  transport_api_version?: ApiVersion | undefined;
  timeout?: Duration | undefined;
}

/** [#next-free-field: 7] */
export interface TraServiceRequest {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest";
  type?: string | undefined;
  request?:
    | //
    { $case: "create_request"; create_request: CreateRequest }
    | //
    { $case: "update_request"; update_request: UpdateRequest }
    | //
    { $case: "retrieve_request"; retrieve_request: RetrieveRequest }
    | //
    { $case: "delete_request"; delete_request: DeleteRequest }
    | //
    { $case: "subscribe_request"; subscribe_request: SubscribeRequest }
    | undefined;
}

/** [#next-free-field: 9] */
export interface TraServiceResponse {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse";
  type?: string | undefined;
  ret?: number | undefined;
  reason?: string | undefined;
  response?:
    | //
    { $case: "create_response"; create_response: CreateResponse }
    | //
    { $case: "update_response"; update_response: UpdateResponse }
    | //
    { $case: "retrieve_response"; retrieve_response: RetrieveResponse }
    | //
    { $case: "delete_response"; delete_response: DeleteResponse }
    | //
    { $case: "subscribe_response"; subscribe_response: SubscribeResponse }
    | undefined;
}

export interface CreateRequest {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest";
  data?: Map<string, string> | undefined;
  context?: Map<string, string> | undefined;
}

export interface CreateRequest_DataEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.DataEntry";
  key: string;
  value: string;
}

export interface CreateRequest_ContextEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.ContextEntry";
  key: string;
  value: string;
}

export interface CreateResponse {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse";
}

export interface UpdateRequest {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest";
  data?: Map<string, string> | undefined;
  context?: Map<string, string> | undefined;
}

export interface UpdateRequest_DataEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.DataEntry";
  key: string;
  value: string;
}

export interface UpdateRequest_ContextEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.ContextEntry";
  key: string;
  value: string;
}

export interface UpdateResponse {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse";
}

export interface RetrieveRequest {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest";
  key?: string | undefined;
  context?: Map<string, string> | undefined;
}

export interface RetrieveRequest_ContextEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest.ContextEntry";
  key: string;
  value: string;
}

export interface RetrieveResponse {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse";
  data?: Map<string, string> | undefined;
}

export interface RetrieveResponse_DataEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse.DataEntry";
  key: string;
  value: string;
}

export interface DeleteRequest {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest";
  key?: string | undefined;
  context?: Map<string, string> | undefined;
}

export interface DeleteRequest_ContextEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest.ContextEntry";
  key: string;
  value: string;
}

export interface DeleteResponse {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse";
}

export interface SubscribeRequest {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest";
}

export interface SubscribeResponse {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse";
  data?: Map<string, string> | undefined;
}

export interface SubscribeResponse_DataEntry {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse.DataEntry";
  key: string;
  value: string;
}

function createBaseTraServiceConfig(): TraServiceConfig {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig" };
}

export const TraServiceConfig: MessageFns<
  TraServiceConfig,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceConfig" as const,

  encode(message: TraServiceConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.grpc_service !== undefined) {
      GrpcService.encode(message.grpc_service, writer.uint32(10).fork()).join();
    }
    if (message.transport_api_version !== undefined && message.transport_api_version !== ApiVersion.AUTO) {
      writer.uint32(16).int32(apiVersionToNumber(message.transport_api_version));
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraServiceConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraServiceConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.grpc_service = GrpcService.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.transport_api_version = apiVersionFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraServiceConfig {
    return {
      $type: TraServiceConfig.$type,
      grpc_service: isSet(object.grpc_service) ? GrpcService.fromJSON(object.grpc_service) : undefined,
      transport_api_version: isSet(object.transport_api_version)
        ? apiVersionFromJSON(object.transport_api_version)
        : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
    };
  },

  toJSON(message: TraServiceConfig): unknown {
    const obj: any = {};
    if (message.grpc_service !== undefined) {
      obj.grpc_service = GrpcService.toJSON(message.grpc_service);
    }
    if (message.transport_api_version !== undefined) {
      obj.transport_api_version = apiVersionToJSON(message.transport_api_version);
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TraServiceConfig>, I>>(base?: I): TraServiceConfig {
    return TraServiceConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TraServiceConfig>, I>>(object: I): TraServiceConfig {
    const message = createBaseTraServiceConfig();
    message.grpc_service = (object.grpc_service !== undefined && object.grpc_service !== null)
      ? GrpcService.fromPartial(object.grpc_service)
      : undefined;
    message.transport_api_version = object.transport_api_version ?? undefined;
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(TraServiceConfig.$type, TraServiceConfig);

function createBaseTraServiceRequest(): TraServiceRequest {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest", request: undefined };
}

export const TraServiceRequest: MessageFns<
  TraServiceRequest,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceRequest" as const,

  encode(message: TraServiceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    switch (message.request?.$case) {
      case "create_request":
        CreateRequest.encode(message.request.create_request, writer.uint32(18).fork()).join();
        break;
      case "update_request":
        UpdateRequest.encode(message.request.update_request, writer.uint32(26).fork()).join();
        break;
      case "retrieve_request":
        RetrieveRequest.encode(message.request.retrieve_request, writer.uint32(34).fork()).join();
        break;
      case "delete_request":
        DeleteRequest.encode(message.request.delete_request, writer.uint32(42).fork()).join();
        break;
      case "subscribe_request":
        SubscribeRequest.encode(message.request.subscribe_request, writer.uint32(50).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraServiceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraServiceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.request = { $case: "create_request", create_request: CreateRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.request = { $case: "update_request", update_request: UpdateRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.request = {
            $case: "retrieve_request",
            retrieve_request: RetrieveRequest.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.request = { $case: "delete_request", delete_request: DeleteRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.request = {
            $case: "subscribe_request",
            subscribe_request: SubscribeRequest.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraServiceRequest {
    return {
      $type: TraServiceRequest.$type,
      type: isSet(object.type) ? globalThis.String(object.type) : undefined,
      request: isSet(object.create_request)
        ? { $case: "create_request", create_request: CreateRequest.fromJSON(object.create_request) }
        : isSet(object.update_request)
        ? { $case: "update_request", update_request: UpdateRequest.fromJSON(object.update_request) }
        : isSet(object.retrieve_request)
        ? { $case: "retrieve_request", retrieve_request: RetrieveRequest.fromJSON(object.retrieve_request) }
        : isSet(object.delete_request)
        ? { $case: "delete_request", delete_request: DeleteRequest.fromJSON(object.delete_request) }
        : isSet(object.subscribe_request)
        ? { $case: "subscribe_request", subscribe_request: SubscribeRequest.fromJSON(object.subscribe_request) }
        : undefined,
    };
  },

  toJSON(message: TraServiceRequest): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.request?.$case === "create_request") {
      obj.create_request = CreateRequest.toJSON(message.request.create_request);
    }
    if (message.request?.$case === "update_request") {
      obj.update_request = UpdateRequest.toJSON(message.request.update_request);
    }
    if (message.request?.$case === "retrieve_request") {
      obj.retrieve_request = RetrieveRequest.toJSON(message.request.retrieve_request);
    }
    if (message.request?.$case === "delete_request") {
      obj.delete_request = DeleteRequest.toJSON(message.request.delete_request);
    }
    if (message.request?.$case === "subscribe_request") {
      obj.subscribe_request = SubscribeRequest.toJSON(message.request.subscribe_request);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TraServiceRequest>, I>>(base?: I): TraServiceRequest {
    return TraServiceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TraServiceRequest>, I>>(object: I): TraServiceRequest {
    const message = createBaseTraServiceRequest();
    message.type = object.type ?? undefined;
    if (
      object.request?.$case === "create_request" &&
      object.request?.create_request !== undefined &&
      object.request?.create_request !== null
    ) {
      message.request = {
        $case: "create_request",
        create_request: CreateRequest.fromPartial(object.request.create_request),
      };
    }
    if (
      object.request?.$case === "update_request" &&
      object.request?.update_request !== undefined &&
      object.request?.update_request !== null
    ) {
      message.request = {
        $case: "update_request",
        update_request: UpdateRequest.fromPartial(object.request.update_request),
      };
    }
    if (
      object.request?.$case === "retrieve_request" &&
      object.request?.retrieve_request !== undefined &&
      object.request?.retrieve_request !== null
    ) {
      message.request = {
        $case: "retrieve_request",
        retrieve_request: RetrieveRequest.fromPartial(object.request.retrieve_request),
      };
    }
    if (
      object.request?.$case === "delete_request" &&
      object.request?.delete_request !== undefined &&
      object.request?.delete_request !== null
    ) {
      message.request = {
        $case: "delete_request",
        delete_request: DeleteRequest.fromPartial(object.request.delete_request),
      };
    }
    if (
      object.request?.$case === "subscribe_request" &&
      object.request?.subscribe_request !== undefined &&
      object.request?.subscribe_request !== null
    ) {
      message.request = {
        $case: "subscribe_request",
        subscribe_request: SubscribeRequest.fromPartial(object.request.subscribe_request),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(TraServiceRequest.$type, TraServiceRequest);

function createBaseTraServiceResponse(): TraServiceResponse {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse", response: undefined };
}

export const TraServiceResponse: MessageFns<
  TraServiceResponse,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraServiceResponse" as const,

  encode(message: TraServiceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.ret !== undefined && message.ret !== 0) {
      writer.uint32(16).int32(message.ret);
    }
    if (message.reason !== undefined && message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    switch (message.response?.$case) {
      case "create_response":
        CreateResponse.encode(message.response.create_response, writer.uint32(34).fork()).join();
        break;
      case "update_response":
        UpdateResponse.encode(message.response.update_response, writer.uint32(42).fork()).join();
        break;
      case "retrieve_response":
        RetrieveResponse.encode(message.response.retrieve_response, writer.uint32(50).fork()).join();
        break;
      case "delete_response":
        DeleteResponse.encode(message.response.delete_response, writer.uint32(58).fork()).join();
        break;
      case "subscribe_response":
        SubscribeResponse.encode(message.response.subscribe_response, writer.uint32(66).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraServiceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraServiceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ret = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.response = {
            $case: "create_response",
            create_response: CreateResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.response = {
            $case: "update_response",
            update_response: UpdateResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.response = {
            $case: "retrieve_response",
            retrieve_response: RetrieveResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.response = {
            $case: "delete_response",
            delete_response: DeleteResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.response = {
            $case: "subscribe_response",
            subscribe_response: SubscribeResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraServiceResponse {
    return {
      $type: TraServiceResponse.$type,
      type: isSet(object.type) ? globalThis.String(object.type) : undefined,
      ret: isSet(object.ret) ? globalThis.Number(object.ret) : undefined,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : undefined,
      response: isSet(object.create_response)
        ? { $case: "create_response", create_response: CreateResponse.fromJSON(object.create_response) }
        : isSet(object.update_response)
        ? { $case: "update_response", update_response: UpdateResponse.fromJSON(object.update_response) }
        : isSet(object.retrieve_response)
        ? { $case: "retrieve_response", retrieve_response: RetrieveResponse.fromJSON(object.retrieve_response) }
        : isSet(object.delete_response)
        ? { $case: "delete_response", delete_response: DeleteResponse.fromJSON(object.delete_response) }
        : isSet(object.subscribe_response)
        ? { $case: "subscribe_response", subscribe_response: SubscribeResponse.fromJSON(object.subscribe_response) }
        : undefined,
    };
  },

  toJSON(message: TraServiceResponse): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = message.type;
    }
    if (message.ret !== undefined) {
      obj.ret = Math.round(message.ret);
    }
    if (message.reason !== undefined) {
      obj.reason = message.reason;
    }
    if (message.response?.$case === "create_response") {
      obj.create_response = CreateResponse.toJSON(message.response.create_response);
    }
    if (message.response?.$case === "update_response") {
      obj.update_response = UpdateResponse.toJSON(message.response.update_response);
    }
    if (message.response?.$case === "retrieve_response") {
      obj.retrieve_response = RetrieveResponse.toJSON(message.response.retrieve_response);
    }
    if (message.response?.$case === "delete_response") {
      obj.delete_response = DeleteResponse.toJSON(message.response.delete_response);
    }
    if (message.response?.$case === "subscribe_response") {
      obj.subscribe_response = SubscribeResponse.toJSON(message.response.subscribe_response);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TraServiceResponse>, I>>(base?: I): TraServiceResponse {
    return TraServiceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TraServiceResponse>, I>>(object: I): TraServiceResponse {
    const message = createBaseTraServiceResponse();
    message.type = object.type ?? undefined;
    message.ret = object.ret ?? undefined;
    message.reason = object.reason ?? undefined;
    if (
      object.response?.$case === "create_response" &&
      object.response?.create_response !== undefined &&
      object.response?.create_response !== null
    ) {
      message.response = {
        $case: "create_response",
        create_response: CreateResponse.fromPartial(object.response.create_response),
      };
    }
    if (
      object.response?.$case === "update_response" &&
      object.response?.update_response !== undefined &&
      object.response?.update_response !== null
    ) {
      message.response = {
        $case: "update_response",
        update_response: UpdateResponse.fromPartial(object.response.update_response),
      };
    }
    if (
      object.response?.$case === "retrieve_response" &&
      object.response?.retrieve_response !== undefined &&
      object.response?.retrieve_response !== null
    ) {
      message.response = {
        $case: "retrieve_response",
        retrieve_response: RetrieveResponse.fromPartial(object.response.retrieve_response),
      };
    }
    if (
      object.response?.$case === "delete_response" &&
      object.response?.delete_response !== undefined &&
      object.response?.delete_response !== null
    ) {
      message.response = {
        $case: "delete_response",
        delete_response: DeleteResponse.fromPartial(object.response.delete_response),
      };
    }
    if (
      object.response?.$case === "subscribe_response" &&
      object.response?.subscribe_response !== undefined &&
      object.response?.subscribe_response !== null
    ) {
      message.response = {
        $case: "subscribe_response",
        subscribe_response: SubscribeResponse.fromPartial(object.response.subscribe_response),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(TraServiceResponse.$type, TraServiceResponse);

function createBaseCreateRequest(): CreateRequest {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest" };
}

export const CreateRequest: MessageFns<
  CreateRequest,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest" as const,

  encode(message: CreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.data || new Map()).forEach((value, key) => {
      CreateRequest_DataEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.DataEntry",
        key: key as any,
        value,
      }, writer.uint32(10).fork()).join();
    });
    (message.context || new Map()).forEach((value, key) => {
      CreateRequest_ContextEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.ContextEntry",
        key: key as any,
        value,
      }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = CreateRequest_DataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.data === undefined) {
              message.data = new Map();
            }
            message.data!.set(entry1.key, entry1.value);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = CreateRequest_ContextEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            if (message.context === undefined) {
              message.context = new Map();
            }
            message.context!.set(entry2.key, entry2.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequest {
    return {
      $type: CreateRequest.$type,
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
      context: isObject(object.context)
        ? Object.entries(object.context).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: CreateRequest): unknown {
    const obj: any = {};
    if (message.data?.size) {
      obj.data = {};
      message.data.forEach((v, k) => {
        obj.data[k] = v;
      });
    }
    if (message.context?.size) {
      obj.context = {};
      message.context.forEach((v, k) => {
        obj.context[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRequest>, I>>(base?: I): CreateRequest {
    return CreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRequest>, I>>(object: I): CreateRequest {
    const message = createBaseCreateRequest();
    message.data = (object.data === undefined || object.data === null) ? undefined : (() => {
      const m = new Map();
      (object.data as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    message.context = (object.context === undefined || object.context === null) ? undefined : (() => {
      const m = new Map();
      (object.context as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(CreateRequest.$type, CreateRequest);

function createBaseCreateRequest_DataEntry(): CreateRequest_DataEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.DataEntry",
    key: "",
    value: "",
  };
}

export const CreateRequest_DataEntry: MessageFns<
  CreateRequest_DataEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.DataEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.DataEntry" as const,

  encode(message: CreateRequest_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRequest_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequest_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequest_DataEntry {
    return {
      $type: CreateRequest_DataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CreateRequest_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRequest_DataEntry>, I>>(base?: I): CreateRequest_DataEntry {
    return CreateRequest_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRequest_DataEntry>, I>>(object: I): CreateRequest_DataEntry {
    const message = createBaseCreateRequest_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(CreateRequest_DataEntry.$type, CreateRequest_DataEntry);

function createBaseCreateRequest_ContextEntry(): CreateRequest_ContextEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.ContextEntry",
    key: "",
    value: "",
  };
}

export const CreateRequest_ContextEntry: MessageFns<
  CreateRequest_ContextEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.ContextEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateRequest.ContextEntry" as const,

  encode(message: CreateRequest_ContextEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRequest_ContextEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRequest_ContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRequest_ContextEntry {
    return {
      $type: CreateRequest_ContextEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CreateRequest_ContextEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateRequest_ContextEntry>, I>>(base?: I): CreateRequest_ContextEntry {
    return CreateRequest_ContextEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateRequest_ContextEntry>, I>>(object: I): CreateRequest_ContextEntry {
    const message = createBaseCreateRequest_ContextEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(CreateRequest_ContextEntry.$type, CreateRequest_ContextEntry);

function createBaseCreateResponse(): CreateResponse {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse" };
}

export const CreateResponse: MessageFns<
  CreateResponse,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.CreateResponse" as const,

  encode(_: CreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateResponse {
    return { $type: CreateResponse.$type };
  },

  toJSON(_: CreateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateResponse>, I>>(base?: I): CreateResponse {
    return CreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateResponse>, I>>(_: I): CreateResponse {
    const message = createBaseCreateResponse();
    return message;
  },
};

messageTypeRegistry.set(CreateResponse.$type, CreateResponse);

function createBaseUpdateRequest(): UpdateRequest {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest" };
}

export const UpdateRequest: MessageFns<
  UpdateRequest,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest" as const,

  encode(message: UpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.data || new Map()).forEach((value, key) => {
      UpdateRequest_DataEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.DataEntry",
        key: key as any,
        value,
      }, writer.uint32(10).fork()).join();
    });
    (message.context || new Map()).forEach((value, key) => {
      UpdateRequest_ContextEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.ContextEntry",
        key: key as any,
        value,
      }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = UpdateRequest_DataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.data === undefined) {
              message.data = new Map();
            }
            message.data!.set(entry1.key, entry1.value);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = UpdateRequest_ContextEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            if (message.context === undefined) {
              message.context = new Map();
            }
            message.context!.set(entry2.key, entry2.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequest {
    return {
      $type: UpdateRequest.$type,
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
      context: isObject(object.context)
        ? Object.entries(object.context).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: UpdateRequest): unknown {
    const obj: any = {};
    if (message.data?.size) {
      obj.data = {};
      message.data.forEach((v, k) => {
        obj.data[k] = v;
      });
    }
    if (message.context?.size) {
      obj.context = {};
      message.context.forEach((v, k) => {
        obj.context[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRequest>, I>>(base?: I): UpdateRequest {
    return UpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRequest>, I>>(object: I): UpdateRequest {
    const message = createBaseUpdateRequest();
    message.data = (object.data === undefined || object.data === null) ? undefined : (() => {
      const m = new Map();
      (object.data as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    message.context = (object.context === undefined || object.context === null) ? undefined : (() => {
      const m = new Map();
      (object.context as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(UpdateRequest.$type, UpdateRequest);

function createBaseUpdateRequest_DataEntry(): UpdateRequest_DataEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.DataEntry",
    key: "",
    value: "",
  };
}

export const UpdateRequest_DataEntry: MessageFns<
  UpdateRequest_DataEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.DataEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.DataEntry" as const,

  encode(message: UpdateRequest_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequest_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequest_DataEntry {
    return {
      $type: UpdateRequest_DataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: UpdateRequest_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRequest_DataEntry>, I>>(base?: I): UpdateRequest_DataEntry {
    return UpdateRequest_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRequest_DataEntry>, I>>(object: I): UpdateRequest_DataEntry {
    const message = createBaseUpdateRequest_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(UpdateRequest_DataEntry.$type, UpdateRequest_DataEntry);

function createBaseUpdateRequest_ContextEntry(): UpdateRequest_ContextEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.ContextEntry",
    key: "",
    value: "",
  };
}

export const UpdateRequest_ContextEntry: MessageFns<
  UpdateRequest_ContextEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.ContextEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateRequest.ContextEntry" as const,

  encode(message: UpdateRequest_ContextEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest_ContextEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequest_ContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequest_ContextEntry {
    return {
      $type: UpdateRequest_ContextEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: UpdateRequest_ContextEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRequest_ContextEntry>, I>>(base?: I): UpdateRequest_ContextEntry {
    return UpdateRequest_ContextEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRequest_ContextEntry>, I>>(object: I): UpdateRequest_ContextEntry {
    const message = createBaseUpdateRequest_ContextEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(UpdateRequest_ContextEntry.$type, UpdateRequest_ContextEntry);

function createBaseUpdateResponse(): UpdateResponse {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse" };
}

export const UpdateResponse: MessageFns<
  UpdateResponse,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.UpdateResponse" as const,

  encode(_: UpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateResponse {
    return { $type: UpdateResponse.$type };
  },

  toJSON(_: UpdateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateResponse>, I>>(base?: I): UpdateResponse {
    return UpdateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateResponse>, I>>(_: I): UpdateResponse {
    const message = createBaseUpdateResponse();
    return message;
  },
};

messageTypeRegistry.set(UpdateResponse.$type, UpdateResponse);

function createBaseRetrieveRequest(): RetrieveRequest {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest" };
}

export const RetrieveRequest: MessageFns<
  RetrieveRequest,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest" as const,

  encode(message: RetrieveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    (message.context || new Map()).forEach((value, key) => {
      RetrieveRequest_ContextEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest.ContextEntry",
        key: key as any,
        value,
      }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = RetrieveRequest_ContextEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            if (message.context === undefined) {
              message.context = new Map();
            }
            message.context!.set(entry2.key, entry2.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveRequest {
    return {
      $type: RetrieveRequest.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      context: isObject(object.context)
        ? Object.entries(object.context).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: RetrieveRequest): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.context?.size) {
      obj.context = {};
      message.context.forEach((v, k) => {
        obj.context[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RetrieveRequest>, I>>(base?: I): RetrieveRequest {
    return RetrieveRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RetrieveRequest>, I>>(object: I): RetrieveRequest {
    const message = createBaseRetrieveRequest();
    message.key = object.key ?? undefined;
    message.context = (object.context === undefined || object.context === null) ? undefined : (() => {
      const m = new Map();
      (object.context as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(RetrieveRequest.$type, RetrieveRequest);

function createBaseRetrieveRequest_ContextEntry(): RetrieveRequest_ContextEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest.ContextEntry",
    key: "",
    value: "",
  };
}

export const RetrieveRequest_ContextEntry: MessageFns<
  RetrieveRequest_ContextEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest.ContextEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveRequest.ContextEntry" as const,

  encode(message: RetrieveRequest_ContextEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveRequest_ContextEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveRequest_ContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveRequest_ContextEntry {
    return {
      $type: RetrieveRequest_ContextEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RetrieveRequest_ContextEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RetrieveRequest_ContextEntry>, I>>(base?: I): RetrieveRequest_ContextEntry {
    return RetrieveRequest_ContextEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RetrieveRequest_ContextEntry>, I>>(object: I): RetrieveRequest_ContextEntry {
    const message = createBaseRetrieveRequest_ContextEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(RetrieveRequest_ContextEntry.$type, RetrieveRequest_ContextEntry);

function createBaseRetrieveResponse(): RetrieveResponse {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse" };
}

export const RetrieveResponse: MessageFns<
  RetrieveResponse,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse" as const,

  encode(message: RetrieveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.data || new Map()).forEach((value, key) => {
      RetrieveResponse_DataEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse.DataEntry",
        key: key as any,
        value,
      }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = RetrieveResponse_DataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.data === undefined) {
              message.data = new Map();
            }
            message.data!.set(entry1.key, entry1.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveResponse {
    return {
      $type: RetrieveResponse.$type,
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: RetrieveResponse): unknown {
    const obj: any = {};
    if (message.data?.size) {
      obj.data = {};
      message.data.forEach((v, k) => {
        obj.data[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RetrieveResponse>, I>>(base?: I): RetrieveResponse {
    return RetrieveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RetrieveResponse>, I>>(object: I): RetrieveResponse {
    const message = createBaseRetrieveResponse();
    message.data = (object.data === undefined || object.data === null) ? undefined : (() => {
      const m = new Map();
      (object.data as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(RetrieveResponse.$type, RetrieveResponse);

function createBaseRetrieveResponse_DataEntry(): RetrieveResponse_DataEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse.DataEntry",
    key: "",
    value: "",
  };
}

export const RetrieveResponse_DataEntry: MessageFns<
  RetrieveResponse_DataEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse.DataEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.RetrieveResponse.DataEntry" as const,

  encode(message: RetrieveResponse_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetrieveResponse_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetrieveResponse_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetrieveResponse_DataEntry {
    return {
      $type: RetrieveResponse_DataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RetrieveResponse_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RetrieveResponse_DataEntry>, I>>(base?: I): RetrieveResponse_DataEntry {
    return RetrieveResponse_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RetrieveResponse_DataEntry>, I>>(object: I): RetrieveResponse_DataEntry {
    const message = createBaseRetrieveResponse_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(RetrieveResponse_DataEntry.$type, RetrieveResponse_DataEntry);

function createBaseDeleteRequest(): DeleteRequest {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest" };
}

export const DeleteRequest: MessageFns<
  DeleteRequest,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest" as const,

  encode(message: DeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    (message.context || new Map()).forEach((value, key) => {
      DeleteRequest_ContextEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest.ContextEntry",
        key: key as any,
        value,
      }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = DeleteRequest_ContextEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            if (message.context === undefined) {
              message.context = new Map();
            }
            message.context!.set(entry2.key, entry2.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRequest {
    return {
      $type: DeleteRequest.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      context: isObject(object.context)
        ? Object.entries(object.context).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: DeleteRequest): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.context?.size) {
      obj.context = {};
      message.context.forEach((v, k) => {
        obj.context[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteRequest>, I>>(base?: I): DeleteRequest {
    return DeleteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteRequest>, I>>(object: I): DeleteRequest {
    const message = createBaseDeleteRequest();
    message.key = object.key ?? undefined;
    message.context = (object.context === undefined || object.context === null) ? undefined : (() => {
      const m = new Map();
      (object.context as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(DeleteRequest.$type, DeleteRequest);

function createBaseDeleteRequest_ContextEntry(): DeleteRequest_ContextEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest.ContextEntry",
    key: "",
    value: "",
  };
}

export const DeleteRequest_ContextEntry: MessageFns<
  DeleteRequest_ContextEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest.ContextEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteRequest.ContextEntry" as const,

  encode(message: DeleteRequest_ContextEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRequest_ContextEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRequest_ContextEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRequest_ContextEntry {
    return {
      $type: DeleteRequest_ContextEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DeleteRequest_ContextEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteRequest_ContextEntry>, I>>(base?: I): DeleteRequest_ContextEntry {
    return DeleteRequest_ContextEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteRequest_ContextEntry>, I>>(object: I): DeleteRequest_ContextEntry {
    const message = createBaseDeleteRequest_ContextEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(DeleteRequest_ContextEntry.$type, DeleteRequest_ContextEntry);

function createBaseDeleteResponse(): DeleteResponse {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse" };
}

export const DeleteResponse: MessageFns<
  DeleteResponse,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.DeleteResponse" as const,

  encode(_: DeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteResponse {
    return { $type: DeleteResponse.$type };
  },

  toJSON(_: DeleteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteResponse>, I>>(base?: I): DeleteResponse {
    return DeleteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteResponse>, I>>(_: I): DeleteResponse {
    const message = createBaseDeleteResponse();
    return message;
  },
};

messageTypeRegistry.set(DeleteResponse.$type, DeleteResponse);

function createBaseSubscribeRequest(): SubscribeRequest {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest" };
}

export const SubscribeRequest: MessageFns<
  SubscribeRequest,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeRequest" as const,

  encode(_: SubscribeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubscribeRequest {
    return { $type: SubscribeRequest.$type };
  },

  toJSON(_: SubscribeRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeRequest>, I>>(base?: I): SubscribeRequest {
    return SubscribeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeRequest>, I>>(_: I): SubscribeRequest {
    const message = createBaseSubscribeRequest();
    return message;
  },
};

messageTypeRegistry.set(SubscribeRequest.$type, SubscribeRequest);

function createBaseSubscribeResponse(): SubscribeResponse {
  return { $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse" };
}

export const SubscribeResponse: MessageFns<
  SubscribeResponse,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse" as const,

  encode(message: SubscribeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.data || new Map()).forEach((value, key) => {
      SubscribeResponse_DataEntry.encode({
        $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse.DataEntry",
        key: key as any,
        value,
      }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = SubscribeResponse_DataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            if (message.data === undefined) {
              message.data = new Map();
            }
            message.data!.set(entry1.key, entry1.value);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeResponse {
    return {
      $type: SubscribeResponse.$type,
      data: isObject(object.data)
        ? Object.entries(object.data).reduce<Map<string, string>>((acc, [key, value]) => {
          acc.set(key, String(value));
          return acc;
        }, new Map())
        : undefined,
    };
  },

  toJSON(message: SubscribeResponse): unknown {
    const obj: any = {};
    if (message.data?.size) {
      obj.data = {};
      message.data.forEach((v, k) => {
        obj.data[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeResponse>, I>>(base?: I): SubscribeResponse {
    return SubscribeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeResponse>, I>>(object: I): SubscribeResponse {
    const message = createBaseSubscribeResponse();
    message.data = (object.data === undefined || object.data === null) ? undefined : (() => {
      const m = new Map();
      (object.data as Map<string, string> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, globalThis.String(value));
        }
      });
      return m;
    })();
    return message;
  },
};

messageTypeRegistry.set(SubscribeResponse.$type, SubscribeResponse);

function createBaseSubscribeResponse_DataEntry(): SubscribeResponse_DataEntry {
  return {
    $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse.DataEntry",
    key: "",
    value: "",
  };
}

export const SubscribeResponse_DataEntry: MessageFns<
  SubscribeResponse_DataEntry,
  "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse.DataEntry"
> = {
  $type: "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.SubscribeResponse.DataEntry" as const,

  encode(message: SubscribeResponse_DataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeResponse_DataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeResponse_DataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeResponse_DataEntry {
    return {
      $type: SubscribeResponse_DataEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SubscribeResponse_DataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeResponse_DataEntry>, I>>(base?: I): SubscribeResponse_DataEntry {
    return SubscribeResponse_DataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeResponse_DataEntry>, I>>(object: I): SubscribeResponse_DataEntry {
    const message = createBaseSubscribeResponse_DataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(SubscribeResponse_DataEntry.$type, SubscribeResponse_DataEntry);

export interface TraService {
  Create(request: TraServiceRequest): Promise<TraServiceResponse>;
  Update(request: TraServiceRequest): Promise<TraServiceResponse>;
  Retrieve(request: TraServiceRequest): Promise<TraServiceResponse>;
  Delete(request: TraServiceRequest): Promise<TraServiceResponse>;
  Subscribe(request: TraServiceRequest): Observable<TraServiceResponse>;
}

export const TraServiceServiceName = "envoy.extensions.filters.network.sip_proxy.tra.v3alpha.TraService";
export class TraServiceClientImpl implements TraService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TraServiceServiceName;
    this.rpc = rpc;
    this.Create = this.Create.bind(this);
    this.Update = this.Update.bind(this);
    this.Retrieve = this.Retrieve.bind(this);
    this.Delete = this.Delete.bind(this);
    this.Subscribe = this.Subscribe.bind(this);
  }
  Create(request: TraServiceRequest): Promise<TraServiceResponse> {
    const data = TraServiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Create", data);
    return promise.then((data) => TraServiceResponse.decode(new BinaryReader(data)));
  }

  Update(request: TraServiceRequest): Promise<TraServiceResponse> {
    const data = TraServiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => TraServiceResponse.decode(new BinaryReader(data)));
  }

  Retrieve(request: TraServiceRequest): Promise<TraServiceResponse> {
    const data = TraServiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Retrieve", data);
    return promise.then((data) => TraServiceResponse.decode(new BinaryReader(data)));
  }

  Delete(request: TraServiceRequest): Promise<TraServiceResponse> {
    const data = TraServiceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Delete", data);
    return promise.then((data) => TraServiceResponse.decode(new BinaryReader(data)));
  }

  Subscribe(request: TraServiceRequest): Observable<TraServiceResponse> {
    const data = TraServiceRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "Subscribe", data);
    return result.pipe(map((data) => TraServiceResponse.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
