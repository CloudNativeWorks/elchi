// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/private_key_providers/cryptomb/v3alpha/cryptomb.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DataSource } from "../../../../../../envoy/config/core/v3/base";
import { Duration } from "../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.private_key_providers.cryptomb.v3alpha";

/**
 * A CryptoMbPrivateKeyMethodConfig message specifies how the CryptoMb private
 * key provider is configured. The private key provider provides ``SIMD``
 * processing for ECDSA sign operations and RSA sign and decrypt operations.
 * The provider works by gathering the operations into a worker-thread specific
 * queue, and processing the queue using ``ipp-crypto`` library when the queue
 * is full or when a timer expires.
 * [#extension-category: envoy.tls.key_providers]
 */
export interface CryptoMbPrivateKeyMethodConfig {
  $type: "envoy.extensions.private_key_providers.cryptomb.v3alpha.CryptoMbPrivateKeyMethodConfig";
  /**
   * Private key to use in the private key provider. If set to inline_bytes or
   * inline_string, the value needs to be the private key in PEM format.
   */
  private_key?:
    | DataSource
    | undefined;
  /**
   * How long to wait until the per-thread processing queue should be
   * processed. If the processing queue gets full (eight sign or decrypt
   * requests are received) it is processed immediately. However, if the
   * queue is not filled before the delay has expired, the requests
   * already in the queue are processed, even if the queue is not full.
   * In effect, this value controls the balance between latency and
   * throughput. The duration needs to be set to a value greater than or equal to 1 millisecond.
   */
  poll_delay?: Duration | undefined;
}

function createBaseCryptoMbPrivateKeyMethodConfig(): CryptoMbPrivateKeyMethodConfig {
  return { $type: "envoy.extensions.private_key_providers.cryptomb.v3alpha.CryptoMbPrivateKeyMethodConfig" };
}

export const CryptoMbPrivateKeyMethodConfig: MessageFns<
  CryptoMbPrivateKeyMethodConfig,
  "envoy.extensions.private_key_providers.cryptomb.v3alpha.CryptoMbPrivateKeyMethodConfig"
> = {
  $type: "envoy.extensions.private_key_providers.cryptomb.v3alpha.CryptoMbPrivateKeyMethodConfig" as const,

  encode(message: CryptoMbPrivateKeyMethodConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.private_key !== undefined) {
      DataSource.encode(message.private_key, writer.uint32(10).fork()).join();
    }
    if (message.poll_delay !== undefined) {
      Duration.encode(message.poll_delay, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CryptoMbPrivateKeyMethodConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCryptoMbPrivateKeyMethodConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.private_key = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.poll_delay = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CryptoMbPrivateKeyMethodConfig {
    return {
      $type: CryptoMbPrivateKeyMethodConfig.$type,
      private_key: isSet(object.private_key) ? DataSource.fromJSON(object.private_key) : undefined,
      poll_delay: isSet(object.poll_delay) ? Duration.fromJSON(object.poll_delay) : undefined,
    };
  },

  toJSON(message: CryptoMbPrivateKeyMethodConfig): unknown {
    const obj: any = {};
    if (message.private_key !== undefined) {
      obj.private_key = DataSource.toJSON(message.private_key);
    }
    if (message.poll_delay !== undefined) {
      obj.poll_delay = Duration.toJSON(message.poll_delay);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CryptoMbPrivateKeyMethodConfig>, I>>(base?: I): CryptoMbPrivateKeyMethodConfig {
    return CryptoMbPrivateKeyMethodConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CryptoMbPrivateKeyMethodConfig>, I>>(
    object: I,
  ): CryptoMbPrivateKeyMethodConfig {
    const message = createBaseCryptoMbPrivateKeyMethodConfig();
    message.private_key = (object.private_key !== undefined && object.private_key !== null)
      ? DataSource.fromPartial(object.private_key)
      : undefined;
    message.poll_delay = (object.poll_delay !== undefined && object.poll_delay !== null)
      ? Duration.fromPartial(object.poll_delay)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CryptoMbPrivateKeyMethodConfig.$type, CryptoMbPrivateKeyMethodConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
