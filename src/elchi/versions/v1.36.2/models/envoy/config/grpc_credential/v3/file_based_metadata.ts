// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/grpc_credential/v3/file_based_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { DataSource } from "../../core/v3/base";

export const protobufPackage = "envoy.config.grpc_credential.v3";

export interface FileBasedMetadataConfig {
  $type: "envoy.config.grpc_credential.v3.FileBasedMetadataConfig";
  /**
   * Location or inline data of secret to use for authentication of the Google gRPC connection
   * this secret will be attached to a header of the gRPC connection
   */
  secret_data?:
    | DataSource
    | undefined;
  /**
   * Metadata header key to use for sending the secret data
   * if no header key is set, "authorization" header will be used
   */
  header_key?:
    | string
    | undefined;
  /**
   * Prefix to prepend to the secret in the metadata header
   * if no prefix is set, the default is to use no prefix
   */
  header_prefix?: string | undefined;
}

function createBaseFileBasedMetadataConfig(): FileBasedMetadataConfig {
  return { $type: "envoy.config.grpc_credential.v3.FileBasedMetadataConfig" };
}

export const FileBasedMetadataConfig: MessageFns<
  FileBasedMetadataConfig,
  "envoy.config.grpc_credential.v3.FileBasedMetadataConfig"
> = {
  $type: "envoy.config.grpc_credential.v3.FileBasedMetadataConfig" as const,

  encode(message: FileBasedMetadataConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secret_data !== undefined) {
      DataSource.encode(message.secret_data, writer.uint32(10).fork()).join();
    }
    if (message.header_key !== undefined && message.header_key !== "") {
      writer.uint32(18).string(message.header_key);
    }
    if (message.header_prefix !== undefined && message.header_prefix !== "") {
      writer.uint32(26).string(message.header_prefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileBasedMetadataConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileBasedMetadataConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secret_data = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.header_key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.header_prefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileBasedMetadataConfig {
    return {
      $type: FileBasedMetadataConfig.$type,
      secret_data: isSet(object.secret_data) ? DataSource.fromJSON(object.secret_data) : undefined,
      header_key: isSet(object.header_key) ? globalThis.String(object.header_key) : undefined,
      header_prefix: isSet(object.header_prefix) ? globalThis.String(object.header_prefix) : undefined,
    };
  },

  toJSON(message: FileBasedMetadataConfig): unknown {
    const obj: any = {};
    if (message.secret_data !== undefined) {
      obj.secret_data = DataSource.toJSON(message.secret_data);
    }
    if (message.header_key !== undefined) {
      obj.header_key = message.header_key;
    }
    if (message.header_prefix !== undefined) {
      obj.header_prefix = message.header_prefix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileBasedMetadataConfig>, I>>(base?: I): FileBasedMetadataConfig {
    return FileBasedMetadataConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileBasedMetadataConfig>, I>>(object: I): FileBasedMetadataConfig {
    const message = createBaseFileBasedMetadataConfig();
    message.secret_data = (object.secret_data !== undefined && object.secret_data !== null)
      ? DataSource.fromPartial(object.secret_data)
      : undefined;
    message.header_key = object.header_key ?? undefined;
    message.header_prefix = object.header_prefix ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FileBasedMetadataConfig.$type, FileBasedMetadataConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
