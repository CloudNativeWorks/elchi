// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/listener/v3/quic_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";
import { BoolValue, UInt32Value } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { RuntimeFeatureFlag } from "../../core/v3/base";
import { TypedExtensionConfig } from "../../core/v3/extension";
import { QuicProtocolOptions as QuicProtocolOptions1 } from "../../core/v3/protocol";
import { SocketCmsgHeaders } from "../../core/v3/socket_cmsg_headers";

export const protobufPackage = "envoy.config.listener.v3";

/**
 * Configuration specific to the UDP QUIC listener.
 * [#next-free-field: 14]
 */
export interface QuicProtocolOptions {
  $type: "envoy.config.listener.v3.QuicProtocolOptions";
  quic_protocol_options?:
    | QuicProtocolOptions1
    | undefined;
  /**
   * Maximum number of milliseconds that connection will be alive when there is
   * no network activity.
   *
   * If it is less than 1ms, Envoy will use 1ms. 300000ms if not specified.
   */
  idle_timeout?:
    | Duration
    | undefined;
  /**
   * Connection timeout in milliseconds before the crypto handshake is finished.
   *
   * If it is less than 5000ms, Envoy will use 5000ms. 20000ms if not specified.
   */
  crypto_handshake_timeout?:
    | Duration
    | undefined;
  /**
   * Runtime flag that controls whether the listener is enabled or not. If not specified, defaults
   * to enabled.
   */
  enabled?:
    | RuntimeFeatureFlag
    | undefined;
  /**
   * A multiplier to number of connections which is used to determine how many packets to read per
   * event loop. A reasonable number should allow the listener to process enough payload but not
   * starve TCP and other UDP sockets and also prevent long event loop duration.
   * The default value is 32. This means if there are N QUIC connections, the total number of
   * packets to read in each read event will be 32 * N.
   * The actual number of packets to read in total by the UDP listener is also
   * bound by 6000, regardless of this field or how many connections there are.
   */
  packets_to_read_to_connection_count_ratio?:
    | number
    | undefined;
  /**
   * Configure which implementation of ``quic::QuicCryptoClientStreamBase`` to be used for this listener.
   * If not specified the :ref:`QUICHE default one configured by <envoy_v3_api_msg_extensions.quic.crypto_stream.v3.CryptoServerStreamConfig>` will be used.
   * [#extension-category: envoy.quic.server.crypto_stream]
   */
  crypto_stream_config?:
    | TypedExtensionConfig
    | undefined;
  /**
   * Configure which implementation of ``quic::ProofSource`` to be used for this listener.
   * If not specified the :ref:`default one configured by <envoy_v3_api_msg_extensions.quic.proof_source.v3.ProofSourceConfig>` will be used.
   * [#extension-category: envoy.quic.proof_source]
   */
  proof_source_config?:
    | TypedExtensionConfig
    | undefined;
  /**
   * Config which implementation of ``quic::ConnectionIdGeneratorInterface`` to be used for this listener.
   * If not specified the :ref:`default one configured by <envoy_v3_api_msg_extensions.quic.connection_id_generator.v3.DeterministicConnectionIdGeneratorConfig>` will be used.
   * [#extension-category: envoy.quic.connection_id_generator]
   */
  connection_id_generator_config?:
    | TypedExtensionConfig
    | undefined;
  /**
   * Configure the server's preferred address to advertise so that client can migrate to it. See :ref:`example <envoy_v3_api_msg_extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig>` which configures a pair of v4 and v6 preferred addresses.
   * The current QUICHE implementation will advertise only one of the preferred IPv4 and IPv6 addresses based on the address family the client initially connects with.
   * If not specified, Envoy will not advertise any server's preferred address.
   * [#extension-category: envoy.quic.server_preferred_address]
   */
  server_preferred_address_config?:
    | TypedExtensionConfig
    | undefined;
  /**
   * Configure the server to send transport parameter `disable_active_migration <https://www.rfc-editor.org/rfc/rfc9000#section-18.2-4.30.1>`_.
   * Defaults to false (do not send this transport parameter).
   */
  send_disable_active_migration?:
    | boolean
    | undefined;
  /**
   * Configure which implementation of ``quic::QuicConnectionDebugVisitor`` to be used for this listener.
   * If not specified, no debug visitor will be attached to connections.
   * [#extension-category: envoy.quic.connection_debug_visitor]
   */
  connection_debug_visitor_config?:
    | TypedExtensionConfig
    | undefined;
  /**
   * Configure a type of UDP cmsg to pass to listener filters via QuicReceivedPacket.
   * Both level and type must be specified for cmsg to be saved.
   * Cmsg may be truncated or omitted if expected size is not set.
   * If not specified, no cmsg will be saved to QuicReceivedPacket.
   */
  save_cmsg_config?:
    | SocketCmsgHeaders[]
    | undefined;
  /**
   * If true, the listener will reject connection-establishing packets at the
   * QUIC layer by replying with an empty version negotiation packet to the
   * client.
   */
  reject_new_connections?: boolean | undefined;
}

function createBaseQuicProtocolOptions(): QuicProtocolOptions {
  return { $type: "envoy.config.listener.v3.QuicProtocolOptions" };
}

export const QuicProtocolOptions: MessageFns<QuicProtocolOptions, "envoy.config.listener.v3.QuicProtocolOptions"> = {
  $type: "envoy.config.listener.v3.QuicProtocolOptions" as const,

  encode(message: QuicProtocolOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quic_protocol_options !== undefined) {
      QuicProtocolOptions1.encode(message.quic_protocol_options, writer.uint32(10).fork()).join();
    }
    if (message.idle_timeout !== undefined) {
      Duration.encode(message.idle_timeout, writer.uint32(18).fork()).join();
    }
    if (message.crypto_handshake_timeout !== undefined) {
      Duration.encode(message.crypto_handshake_timeout, writer.uint32(26).fork()).join();
    }
    if (message.enabled !== undefined) {
      RuntimeFeatureFlag.encode(message.enabled, writer.uint32(34).fork()).join();
    }
    if (message.packets_to_read_to_connection_count_ratio !== undefined) {
      UInt32Value.encode({
        $type: "google.protobuf.UInt32Value",
        value: message.packets_to_read_to_connection_count_ratio!,
      }, writer.uint32(42).fork()).join();
    }
    if (message.crypto_stream_config !== undefined) {
      TypedExtensionConfig.encode(message.crypto_stream_config, writer.uint32(50).fork()).join();
    }
    if (message.proof_source_config !== undefined) {
      TypedExtensionConfig.encode(message.proof_source_config, writer.uint32(58).fork()).join();
    }
    if (message.connection_id_generator_config !== undefined) {
      TypedExtensionConfig.encode(message.connection_id_generator_config, writer.uint32(66).fork()).join();
    }
    if (message.server_preferred_address_config !== undefined) {
      TypedExtensionConfig.encode(message.server_preferred_address_config, writer.uint32(74).fork()).join();
    }
    if (message.send_disable_active_migration !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.send_disable_active_migration! },
        writer.uint32(82).fork(),
      ).join();
    }
    if (message.connection_debug_visitor_config !== undefined) {
      TypedExtensionConfig.encode(message.connection_debug_visitor_config, writer.uint32(90).fork()).join();
    }
    if (message.save_cmsg_config !== undefined && message.save_cmsg_config.length !== 0) {
      for (const v of message.save_cmsg_config) {
        SocketCmsgHeaders.encode(v!, writer.uint32(98).fork()).join();
      }
    }
    if (message.reject_new_connections !== undefined && message.reject_new_connections !== false) {
      writer.uint32(104).bool(message.reject_new_connections);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuicProtocolOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuicProtocolOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quic_protocol_options = QuicProtocolOptions1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.idle_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.crypto_handshake_timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.enabled = RuntimeFeatureFlag.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.packets_to_read_to_connection_count_ratio = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.crypto_stream_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.proof_source_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.connection_id_generator_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.server_preferred_address_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.send_disable_active_migration = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.connection_debug_visitor_config = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          if (message.save_cmsg_config === undefined) {
            message.save_cmsg_config = [];
          }
          const el = SocketCmsgHeaders.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.save_cmsg_config!.push(el);
          }
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.reject_new_connections = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuicProtocolOptions {
    return {
      $type: QuicProtocolOptions.$type,
      quic_protocol_options: isSet(object.quic_protocol_options)
        ? QuicProtocolOptions1.fromJSON(object.quic_protocol_options)
        : undefined,
      idle_timeout: isSet(object.idle_timeout) ? Duration.fromJSON(object.idle_timeout) : undefined,
      crypto_handshake_timeout: isSet(object.crypto_handshake_timeout)
        ? Duration.fromJSON(object.crypto_handshake_timeout)
        : undefined,
      enabled: isSet(object.enabled) ? RuntimeFeatureFlag.fromJSON(object.enabled) : undefined,
      packets_to_read_to_connection_count_ratio: isSet(object.packets_to_read_to_connection_count_ratio)
        ? Number(object.packets_to_read_to_connection_count_ratio)
        : undefined,
      crypto_stream_config: isSet(object.crypto_stream_config)
        ? TypedExtensionConfig.fromJSON(object.crypto_stream_config)
        : undefined,
      proof_source_config: isSet(object.proof_source_config)
        ? TypedExtensionConfig.fromJSON(object.proof_source_config)
        : undefined,
      connection_id_generator_config: isSet(object.connection_id_generator_config)
        ? TypedExtensionConfig.fromJSON(object.connection_id_generator_config)
        : undefined,
      server_preferred_address_config: isSet(object.server_preferred_address_config)
        ? TypedExtensionConfig.fromJSON(object.server_preferred_address_config)
        : undefined,
      send_disable_active_migration: isSet(object.send_disable_active_migration)
        ? Boolean(object.send_disable_active_migration)
        : undefined,
      connection_debug_visitor_config: isSet(object.connection_debug_visitor_config)
        ? TypedExtensionConfig.fromJSON(object.connection_debug_visitor_config)
        : undefined,
      save_cmsg_config: globalThis.Array.isArray(object?.save_cmsg_config)
        ? object.save_cmsg_config.map((e: any) => SocketCmsgHeaders.fromJSON(e))
        : undefined,
      reject_new_connections: isSet(object.reject_new_connections)
        ? globalThis.Boolean(object.reject_new_connections)
        : undefined,
    };
  },

  toJSON(message: QuicProtocolOptions): unknown {
    const obj: any = {};
    if (message.quic_protocol_options !== undefined) {
      obj.quic_protocol_options = QuicProtocolOptions1.toJSON(message.quic_protocol_options);
    }
    if (message.idle_timeout !== undefined) {
      obj.idle_timeout = Duration.toJSON(message.idle_timeout);
    }
    if (message.crypto_handshake_timeout !== undefined) {
      obj.crypto_handshake_timeout = Duration.toJSON(message.crypto_handshake_timeout);
    }
    if (message.enabled !== undefined) {
      obj.enabled = RuntimeFeatureFlag.toJSON(message.enabled);
    }
    if (message.packets_to_read_to_connection_count_ratio !== undefined) {
      obj.packets_to_read_to_connection_count_ratio = message.packets_to_read_to_connection_count_ratio;
    }
    if (message.crypto_stream_config !== undefined) {
      obj.crypto_stream_config = TypedExtensionConfig.toJSON(message.crypto_stream_config);
    }
    if (message.proof_source_config !== undefined) {
      obj.proof_source_config = TypedExtensionConfig.toJSON(message.proof_source_config);
    }
    if (message.connection_id_generator_config !== undefined) {
      obj.connection_id_generator_config = TypedExtensionConfig.toJSON(message.connection_id_generator_config);
    }
    if (message.server_preferred_address_config !== undefined) {
      obj.server_preferred_address_config = TypedExtensionConfig.toJSON(message.server_preferred_address_config);
    }
    if (message.send_disable_active_migration !== undefined) {
      obj.send_disable_active_migration = message.send_disable_active_migration;
    }
    if (message.connection_debug_visitor_config !== undefined) {
      obj.connection_debug_visitor_config = TypedExtensionConfig.toJSON(message.connection_debug_visitor_config);
    }
    if (message.save_cmsg_config?.length) {
      obj.save_cmsg_config = message.save_cmsg_config.map((e) => SocketCmsgHeaders.toJSON(e));
    }
    if (message.reject_new_connections !== undefined) {
      obj.reject_new_connections = message.reject_new_connections;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuicProtocolOptions>, I>>(base?: I): QuicProtocolOptions {
    return QuicProtocolOptions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuicProtocolOptions>, I>>(object: I): QuicProtocolOptions {
    const message = createBaseQuicProtocolOptions();
    message.quic_protocol_options =
      (object.quic_protocol_options !== undefined && object.quic_protocol_options !== null)
        ? QuicProtocolOptions1.fromPartial(object.quic_protocol_options)
        : undefined;
    message.idle_timeout = (object.idle_timeout !== undefined && object.idle_timeout !== null)
      ? Duration.fromPartial(object.idle_timeout)
      : undefined;
    message.crypto_handshake_timeout =
      (object.crypto_handshake_timeout !== undefined && object.crypto_handshake_timeout !== null)
        ? Duration.fromPartial(object.crypto_handshake_timeout)
        : undefined;
    message.enabled = (object.enabled !== undefined && object.enabled !== null)
      ? RuntimeFeatureFlag.fromPartial(object.enabled)
      : undefined;
    message.packets_to_read_to_connection_count_ratio = object.packets_to_read_to_connection_count_ratio ?? undefined;
    message.crypto_stream_config = (object.crypto_stream_config !== undefined && object.crypto_stream_config !== null)
      ? TypedExtensionConfig.fromPartial(object.crypto_stream_config)
      : undefined;
    message.proof_source_config = (object.proof_source_config !== undefined && object.proof_source_config !== null)
      ? TypedExtensionConfig.fromPartial(object.proof_source_config)
      : undefined;
    message.connection_id_generator_config =
      (object.connection_id_generator_config !== undefined && object.connection_id_generator_config !== null)
        ? TypedExtensionConfig.fromPartial(object.connection_id_generator_config)
        : undefined;
    message.server_preferred_address_config =
      (object.server_preferred_address_config !== undefined && object.server_preferred_address_config !== null)
        ? TypedExtensionConfig.fromPartial(object.server_preferred_address_config)
        : undefined;
    message.send_disable_active_migration = object.send_disable_active_migration ?? undefined;
    message.connection_debug_visitor_config =
      (object.connection_debug_visitor_config !== undefined && object.connection_debug_visitor_config !== null)
        ? TypedExtensionConfig.fromPartial(object.connection_debug_visitor_config)
        : undefined;
    message.save_cmsg_config = object.save_cmsg_config?.map((e) => SocketCmsgHeaders.fromPartial(e)) || undefined;
    message.reject_new_connections = object.reject_new_connections ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(QuicProtocolOptions.$type, QuicProtocolOptions);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
