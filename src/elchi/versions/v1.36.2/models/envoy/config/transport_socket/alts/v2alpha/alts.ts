// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/transport_socket/alts/v2alpha/alts.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.config.transport_socket.alts.v2alpha";

/**
 * Configuration for ALTS transport socket. This provides Google's ALTS protocol to Envoy.
 * https://cloud.google.com/security/encryption-in-transit/application-layer-transport-security/
 */
export interface Alts {
  $type: "envoy.config.transport_socket.alts.v2alpha.Alts";
  /**
   * The location of a handshaker service, this is usually 169.254.169.254:8080
   * on GCE.
   */
  handshaker_service?:
    | string
    | undefined;
  /**
   * The acceptable service accounts from peer, peers not in the list will be rejected in the
   * handshake validation step. If empty, no validation will be performed.
   */
  peer_service_accounts?: string[] | undefined;
}

function createBaseAlts(): Alts {
  return { $type: "envoy.config.transport_socket.alts.v2alpha.Alts" };
}

export const Alts: MessageFns<Alts, "envoy.config.transport_socket.alts.v2alpha.Alts"> = {
  $type: "envoy.config.transport_socket.alts.v2alpha.Alts" as const,

  encode(message: Alts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.handshaker_service !== undefined && message.handshaker_service !== "") {
      writer.uint32(10).string(message.handshaker_service);
    }
    if (message.peer_service_accounts !== undefined && message.peer_service_accounts.length !== 0) {
      for (const v of message.peer_service_accounts) {
        writer.uint32(18).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Alts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlts();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.handshaker_service = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.peer_service_accounts === undefined) {
            message.peer_service_accounts = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.peer_service_accounts!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Alts {
    return {
      $type: Alts.$type,
      handshaker_service: isSet(object.handshaker_service) ? globalThis.String(object.handshaker_service) : undefined,
      peer_service_accounts: globalThis.Array.isArray(object?.peer_service_accounts)
        ? object.peer_service_accounts.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: Alts): unknown {
    const obj: any = {};
    if (message.handshaker_service !== undefined) {
      obj.handshaker_service = message.handshaker_service;
    }
    if (message.peer_service_accounts?.length) {
      obj.peer_service_accounts = message.peer_service_accounts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Alts>, I>>(base?: I): Alts {
    return Alts.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Alts>, I>>(object: I): Alts {
    const message = createBaseAlts();
    message.handshaker_service = object.handshaker_service ?? undefined;
    message.peer_service_accounts = object.peer_service_accounts?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Alts.$type, Alts);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
