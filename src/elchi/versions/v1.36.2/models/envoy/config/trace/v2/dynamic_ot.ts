// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v2/dynamic_ot.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.config.trace.v2";

/**
 * DynamicOtConfig is used to dynamically load a tracer from a shared library
 * that implements the `OpenTracing dynamic loading API
 * <https://github.com/opentracing/opentracing-cpp>`_.
 * [#extension: envoy.tracers.dynamic_ot]
 */
export interface DynamicOtConfig {
  $type: "envoy.config.trace.v2.DynamicOtConfig";
  /**
   * Dynamic library implementing the `OpenTracing API
   * <https://github.com/opentracing/opentracing-cpp>`_.
   */
  library?:
    | string
    | undefined;
  /**
   * The configuration to use when creating a tracer from the given dynamic
   * library.
   */
  config?: { [key: string]: any } | undefined;
}

function createBaseDynamicOtConfig(): DynamicOtConfig {
  return { $type: "envoy.config.trace.v2.DynamicOtConfig" };
}

export const DynamicOtConfig: MessageFns<DynamicOtConfig, "envoy.config.trace.v2.DynamicOtConfig"> = {
  $type: "envoy.config.trace.v2.DynamicOtConfig" as const,

  encode(message: DynamicOtConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.library !== undefined && message.library !== "") {
      writer.uint32(10).string(message.library);
    }
    if (message.config !== undefined) {
      Struct.encode(Struct.wrap(message.config), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DynamicOtConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDynamicOtConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.library = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DynamicOtConfig {
    return {
      $type: DynamicOtConfig.$type,
      library: isSet(object.library) ? globalThis.String(object.library) : undefined,
      config: isObject(object.config) ? object.config : undefined,
    };
  },

  toJSON(message: DynamicOtConfig): unknown {
    const obj: any = {};
    if (message.library !== undefined) {
      obj.library = message.library;
    }
    if (message.config !== undefined) {
      obj.config = message.config;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DynamicOtConfig>, I>>(base?: I): DynamicOtConfig {
    return DynamicOtConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DynamicOtConfig>, I>>(object: I): DynamicOtConfig {
    const message = createBaseDynamicOtConfig();
    message.library = object.library ?? undefined;
    message.config = object.config ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DynamicOtConfig.$type, DynamicOtConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
