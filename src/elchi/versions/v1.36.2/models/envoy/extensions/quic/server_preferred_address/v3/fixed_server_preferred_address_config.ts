// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/quic/server_preferred_address/v3/fixed_server_preferred_address_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { SocketAddress } from "../../../../config/core/v3/address";

export const protobufPackage = "envoy.extensions.quic.server_preferred_address.v3";

/** Configuration for FixedServerPreferredAddressConfig. */
export interface FixedServerPreferredAddressConfig {
  $type: "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig";
  /**
   * String representation of IPv4 address, i.e. "127.0.0.2".
   * If not specified, none will be configured.
   */
  ipv4_address?:
    | string
    | undefined;
  /**
   * The IPv4 address to advertise to clients for Server Preferred Address.
   * This field takes precedence over
   * :ref:`ipv4_address <envoy_v3_api_field_extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig.ipv4_address>`.
   */
  ipv4_config?:
    | FixedServerPreferredAddressConfig_AddressFamilyConfig
    | undefined;
  /**
   * String representation of IPv6 address, i.e. "::1".
   * If not specified, none will be configured.
   */
  ipv6_address?:
    | string
    | undefined;
  /**
   * The IPv6 address to advertise to clients for Server Preferred Address.
   * This field takes precedence over
   * :ref:`ipv6_address <envoy_v3_api_field_extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig.ipv6_address>`.
   */
  ipv6_config?: FixedServerPreferredAddressConfig_AddressFamilyConfig | undefined;
}

/** Addresses for server preferred address for a single address family (IPv4 or IPv6). */
export interface FixedServerPreferredAddressConfig_AddressFamilyConfig {
  $type: "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig.AddressFamilyConfig";
  /**
   * The server preferred address sent to clients.
   *
   * .. note::
   *
   *   Envoy currently requires all packets for a QUIC connection to arrive on the same port. Therefore, unless a
   *   :ref:`dnat_address <envoy_v3_api_field_extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig.AddressFamilyConfig.dnat_address>`
   *   is explicitly configured, the port specified here must be set to zero. In such cases, Envoy will automatically
   *   use the listener's port.
   */
  address?:
    | SocketAddress
    | undefined;
  /**
   * If a DNAT exists between the client and Envoy, this is the address where Envoy will observe incoming server
   * preferred address packets. If unspecified, Envoy assumes there is no DNAT, and packets will be sent directly
   * to the address advertised to clients as the server preferred address.
   *
   * .. note::
   *
   *   Envoy currently requires all packets for a QUIC connection to arrive on the same port. Consequently, the
   *   port for this address must be set to zero, with Envoy defaulting to the listener's port instead.
   */
  dnat_address?: SocketAddress | undefined;
}

function createBaseFixedServerPreferredAddressConfig(): FixedServerPreferredAddressConfig {
  return { $type: "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig" };
}

export const FixedServerPreferredAddressConfig: MessageFns<
  FixedServerPreferredAddressConfig,
  "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig"
> = {
  $type: "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig" as const,

  encode(message: FixedServerPreferredAddressConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ipv4_address !== undefined && message.ipv4_address !== "") {
      writer.uint32(10).string(message.ipv4_address);
    }
    if (message.ipv4_config !== undefined) {
      FixedServerPreferredAddressConfig_AddressFamilyConfig.encode(message.ipv4_config, writer.uint32(26).fork())
        .join();
    }
    if (message.ipv6_address !== undefined && message.ipv6_address !== "") {
      writer.uint32(18).string(message.ipv6_address);
    }
    if (message.ipv6_config !== undefined) {
      FixedServerPreferredAddressConfig_AddressFamilyConfig.encode(message.ipv6_config, writer.uint32(34).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FixedServerPreferredAddressConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFixedServerPreferredAddressConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ipv4_address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipv4_config = FixedServerPreferredAddressConfig_AddressFamilyConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ipv6_address = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ipv6_config = FixedServerPreferredAddressConfig_AddressFamilyConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FixedServerPreferredAddressConfig {
    return {
      $type: FixedServerPreferredAddressConfig.$type,
      ipv4_address: isSet(object.ipv4_address) ? globalThis.String(object.ipv4_address) : undefined,
      ipv4_config: isSet(object.ipv4_config)
        ? FixedServerPreferredAddressConfig_AddressFamilyConfig.fromJSON(object.ipv4_config)
        : undefined,
      ipv6_address: isSet(object.ipv6_address) ? globalThis.String(object.ipv6_address) : undefined,
      ipv6_config: isSet(object.ipv6_config)
        ? FixedServerPreferredAddressConfig_AddressFamilyConfig.fromJSON(object.ipv6_config)
        : undefined,
    };
  },

  toJSON(message: FixedServerPreferredAddressConfig): unknown {
    const obj: any = {};
    if (message.ipv4_address !== undefined) {
      obj.ipv4_address = message.ipv4_address;
    }
    if (message.ipv4_config !== undefined) {
      obj.ipv4_config = FixedServerPreferredAddressConfig_AddressFamilyConfig.toJSON(message.ipv4_config);
    }
    if (message.ipv6_address !== undefined) {
      obj.ipv6_address = message.ipv6_address;
    }
    if (message.ipv6_config !== undefined) {
      obj.ipv6_config = FixedServerPreferredAddressConfig_AddressFamilyConfig.toJSON(message.ipv6_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FixedServerPreferredAddressConfig>, I>>(
    base?: I,
  ): FixedServerPreferredAddressConfig {
    return FixedServerPreferredAddressConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FixedServerPreferredAddressConfig>, I>>(
    object: I,
  ): FixedServerPreferredAddressConfig {
    const message = createBaseFixedServerPreferredAddressConfig();
    message.ipv4_address = object.ipv4_address ?? undefined;
    message.ipv4_config = (object.ipv4_config !== undefined && object.ipv4_config !== null)
      ? FixedServerPreferredAddressConfig_AddressFamilyConfig.fromPartial(object.ipv4_config)
      : undefined;
    message.ipv6_address = object.ipv6_address ?? undefined;
    message.ipv6_config = (object.ipv6_config !== undefined && object.ipv6_config !== null)
      ? FixedServerPreferredAddressConfig_AddressFamilyConfig.fromPartial(object.ipv6_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(FixedServerPreferredAddressConfig.$type, FixedServerPreferredAddressConfig);

function createBaseFixedServerPreferredAddressConfig_AddressFamilyConfig(): FixedServerPreferredAddressConfig_AddressFamilyConfig {
  return {
    $type: "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig.AddressFamilyConfig",
  };
}

export const FixedServerPreferredAddressConfig_AddressFamilyConfig: MessageFns<
  FixedServerPreferredAddressConfig_AddressFamilyConfig,
  "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig.AddressFamilyConfig"
> = {
  $type:
    "envoy.extensions.quic.server_preferred_address.v3.FixedServerPreferredAddressConfig.AddressFamilyConfig" as const,

  encode(
    message: FixedServerPreferredAddressConfig_AddressFamilyConfig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.address !== undefined) {
      SocketAddress.encode(message.address, writer.uint32(10).fork()).join();
    }
    if (message.dnat_address !== undefined) {
      SocketAddress.encode(message.dnat_address, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FixedServerPreferredAddressConfig_AddressFamilyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFixedServerPreferredAddressConfig_AddressFamilyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = SocketAddress.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dnat_address = SocketAddress.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FixedServerPreferredAddressConfig_AddressFamilyConfig {
    return {
      $type: FixedServerPreferredAddressConfig_AddressFamilyConfig.$type,
      address: isSet(object.address) ? SocketAddress.fromJSON(object.address) : undefined,
      dnat_address: isSet(object.dnat_address) ? SocketAddress.fromJSON(object.dnat_address) : undefined,
    };
  },

  toJSON(message: FixedServerPreferredAddressConfig_AddressFamilyConfig): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = SocketAddress.toJSON(message.address);
    }
    if (message.dnat_address !== undefined) {
      obj.dnat_address = SocketAddress.toJSON(message.dnat_address);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FixedServerPreferredAddressConfig_AddressFamilyConfig>, I>>(
    base?: I,
  ): FixedServerPreferredAddressConfig_AddressFamilyConfig {
    return FixedServerPreferredAddressConfig_AddressFamilyConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FixedServerPreferredAddressConfig_AddressFamilyConfig>, I>>(
    object: I,
  ): FixedServerPreferredAddressConfig_AddressFamilyConfig {
    const message = createBaseFixedServerPreferredAddressConfig_AddressFamilyConfig();
    message.address = (object.address !== undefined && object.address !== null)
      ? SocketAddress.fromPartial(object.address)
      : undefined;
    message.dnat_address = (object.dnat_address !== undefined && object.dnat_address !== null)
      ? SocketAddress.fromPartial(object.dnat_address)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(
  FixedServerPreferredAddressConfig_AddressFamilyConfig.$type,
  FixedServerPreferredAddressConfig_AddressFamilyConfig,
);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
