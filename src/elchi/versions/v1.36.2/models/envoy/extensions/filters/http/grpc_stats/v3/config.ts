// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/grpc_stats/v3/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { GrpcMethodList } from "../../../../../config/core/v3/grpc_method_list";

export const protobufPackage = "envoy.extensions.filters.http.grpc_stats.v3";

/**
 * gRPC statistics filter configuration
 * [#next-free-field: 6]
 */
export interface FilterConfig {
  $type: "envoy.extensions.filters.http.grpc_stats.v3.FilterConfig";
  /**
   * If true, the filter maintains a filter state object with the request and response message
   * counts.
   */
  emit_filter_state?: boolean | undefined;
  per_method_stat_specifier?:
    | //
    /**
     * If set, specifies an allowlist of service/methods that will have individual stats
     * emitted for them. Any call that does not match the allowlist will be counted
     * in a stat with no method specifier: ``cluster.<name>.grpc.*``.
     */
    { $case: "individual_method_stats_allowlist"; individual_method_stats_allowlist: GrpcMethodList }
    | //
    /**
     * If set to true, emit stats for all service/method names.
     *
     * If set to false, emit stats for all service/message types to the same stats without including
     * the service/method in the name, with prefix ``cluster.<name>.grpc``. This can be useful if
     * service/method granularity is not needed, or if each cluster only receives a single method.
     *
     * .. attention::
     *   This option is only safe if all clients are trusted. If this option is enabled
     *   with untrusted clients, the clients could cause unbounded growth in the number of stats in
     *   Envoy, using unbounded memory and potentially slowing down stats pipelines.
     *
     * .. attention::
     *   If neither ``individual_method_stats_allowlist`` nor ``stats_for_all_methods`` is set, the
     *   behavior will default to ``stats_for_all_methods=false``.
     */
    { $case: "stats_for_all_methods"; stats_for_all_methods: boolean | undefined }
    | undefined;
  /**
   * If true, the filter will gather a histogram for the request time of the upstream.
   * It works with :ref:`stats_for_all_methods
   * <envoy_v3_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods>`
   * and :ref:`individual_method_stats_allowlist
   * <envoy_v3_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.individual_method_stats_allowlist>` the same way
   * request_message_count and response_message_count works.
   */
  enable_upstream_stats?:
    | boolean
    | undefined;
  /**
   * If true, the filter will replace dots in the grpc_service_name with underscores before emitting
   * the metrics. Only works when :ref:`stats_for_all_methods
   * <envoy_v3_api_field_extensions.filters.http.grpc_stats.v3.FilterConfig.stats_for_all_methods>`
   * is set to true. It could cause metrics to be merged if the edited service name conflicts with
   * an existing service. For example there are both service "foo.bar" & "foo_bar" running.
   * This config can fix incorrect gRPC metrics with dots because the existing stats tag extractor
   * assumes no dots in the gRPC service name. By default this is set as false.
   */
  replace_dots_in_grpc_service_name?: boolean | undefined;
}

/** gRPC statistics filter state object in protobuf form. */
export interface FilterObject {
  $type: "envoy.extensions.filters.http.grpc_stats.v3.FilterObject";
  /** Count of request messages in the request stream. */
  request_message_count?:
    | number
    | undefined;
  /** Count of response messages in the response stream. */
  response_message_count?: number | undefined;
}

function createBaseFilterConfig(): FilterConfig {
  return { $type: "envoy.extensions.filters.http.grpc_stats.v3.FilterConfig", per_method_stat_specifier: undefined };
}

export const FilterConfig: MessageFns<FilterConfig, "envoy.extensions.filters.http.grpc_stats.v3.FilterConfig"> = {
  $type: "envoy.extensions.filters.http.grpc_stats.v3.FilterConfig" as const,

  encode(message: FilterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.emit_filter_state !== undefined && message.emit_filter_state !== false) {
      writer.uint32(8).bool(message.emit_filter_state);
    }
    switch (message.per_method_stat_specifier?.$case) {
      case "individual_method_stats_allowlist":
        GrpcMethodList.encode(
          message.per_method_stat_specifier.individual_method_stats_allowlist,
          writer.uint32(18).fork(),
        ).join();
        break;
      case "stats_for_all_methods":
        BoolValue.encode({
          $type: "google.protobuf.BoolValue",
          value: message.per_method_stat_specifier.stats_for_all_methods!,
        }, writer.uint32(26).fork()).join();
        break;
    }
    if (message.enable_upstream_stats !== undefined && message.enable_upstream_stats !== false) {
      writer.uint32(32).bool(message.enable_upstream_stats);
    }
    if (
      message.replace_dots_in_grpc_service_name !== undefined && message.replace_dots_in_grpc_service_name !== false
    ) {
      writer.uint32(40).bool(message.replace_dots_in_grpc_service_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.emit_filter_state = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.per_method_stat_specifier = {
            $case: "individual_method_stats_allowlist",
            individual_method_stats_allowlist: GrpcMethodList.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.per_method_stat_specifier = {
            $case: "stats_for_all_methods",
            stats_for_all_methods: BoolValue.decode(reader, reader.uint32()).value,
          };
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enable_upstream_stats = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.replace_dots_in_grpc_service_name = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterConfig {
    return {
      $type: FilterConfig.$type,
      emit_filter_state: isSet(object.emit_filter_state) ? globalThis.Boolean(object.emit_filter_state) : undefined,
      per_method_stat_specifier: isSet(object.individual_method_stats_allowlist)
        ? {
          $case: "individual_method_stats_allowlist",
          individual_method_stats_allowlist: GrpcMethodList.fromJSON(object.individual_method_stats_allowlist),
        }
        : isSet(object.stats_for_all_methods)
        ? { $case: "stats_for_all_methods", stats_for_all_methods: Boolean(object.stats_for_all_methods) }
        : undefined,
      enable_upstream_stats: isSet(object.enable_upstream_stats)
        ? globalThis.Boolean(object.enable_upstream_stats)
        : undefined,
      replace_dots_in_grpc_service_name: isSet(object.replace_dots_in_grpc_service_name)
        ? globalThis.Boolean(object.replace_dots_in_grpc_service_name)
        : undefined,
    };
  },

  toJSON(message: FilterConfig): unknown {
    const obj: any = {};
    if (message.emit_filter_state !== undefined) {
      obj.emit_filter_state = message.emit_filter_state;
    }
    if (message.per_method_stat_specifier?.$case === "individual_method_stats_allowlist") {
      obj.individual_method_stats_allowlist = GrpcMethodList.toJSON(
        message.per_method_stat_specifier.individual_method_stats_allowlist,
      );
    }
    if (message.per_method_stat_specifier?.$case === "stats_for_all_methods") {
      obj.stats_for_all_methods = message.per_method_stat_specifier.stats_for_all_methods;
    }
    if (message.enable_upstream_stats !== undefined) {
      obj.enable_upstream_stats = message.enable_upstream_stats;
    }
    if (message.replace_dots_in_grpc_service_name !== undefined) {
      obj.replace_dots_in_grpc_service_name = message.replace_dots_in_grpc_service_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterConfig>, I>>(base?: I): FilterConfig {
    return FilterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterConfig>, I>>(object: I): FilterConfig {
    const message = createBaseFilterConfig();
    message.emit_filter_state = object.emit_filter_state ?? undefined;
    if (
      object.per_method_stat_specifier?.$case === "individual_method_stats_allowlist" &&
      object.per_method_stat_specifier?.individual_method_stats_allowlist !== undefined &&
      object.per_method_stat_specifier?.individual_method_stats_allowlist !== null
    ) {
      message.per_method_stat_specifier = {
        $case: "individual_method_stats_allowlist",
        individual_method_stats_allowlist: GrpcMethodList.fromPartial(
          object.per_method_stat_specifier.individual_method_stats_allowlist,
        ),
      };
    }
    if (
      object.per_method_stat_specifier?.$case === "stats_for_all_methods" &&
      object.per_method_stat_specifier?.stats_for_all_methods !== undefined &&
      object.per_method_stat_specifier?.stats_for_all_methods !== null
    ) {
      message.per_method_stat_specifier = {
        $case: "stats_for_all_methods",
        stats_for_all_methods: object.per_method_stat_specifier.stats_for_all_methods,
      };
    }
    message.enable_upstream_stats = object.enable_upstream_stats ?? undefined;
    message.replace_dots_in_grpc_service_name = object.replace_dots_in_grpc_service_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterConfig.$type, FilterConfig);

function createBaseFilterObject(): FilterObject {
  return { $type: "envoy.extensions.filters.http.grpc_stats.v3.FilterObject" };
}

export const FilterObject: MessageFns<FilterObject, "envoy.extensions.filters.http.grpc_stats.v3.FilterObject"> = {
  $type: "envoy.extensions.filters.http.grpc_stats.v3.FilterObject" as const,

  encode(message: FilterObject, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request_message_count !== undefined && message.request_message_count !== 0) {
      writer.uint32(8).uint64(message.request_message_count);
    }
    if (message.response_message_count !== undefined && message.response_message_count !== 0) {
      writer.uint32(16).uint64(message.response_message_count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterObject {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterObject();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.request_message_count = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.response_message_count = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterObject {
    return {
      $type: FilterObject.$type,
      request_message_count: isSet(object.request_message_count)
        ? globalThis.Number(object.request_message_count)
        : undefined,
      response_message_count: isSet(object.response_message_count)
        ? globalThis.Number(object.response_message_count)
        : undefined,
    };
  },

  toJSON(message: FilterObject): unknown {
    const obj: any = {};
    if (message.request_message_count !== undefined) {
      obj.request_message_count = Math.round(message.request_message_count);
    }
    if (message.response_message_count !== undefined) {
      obj.response_message_count = Math.round(message.response_message_count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterObject>, I>>(base?: I): FilterObject {
    return FilterObject.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterObject>, I>>(object: I): FilterObject {
    const message = createBaseFilterObject();
    message.request_message_count = object.request_message_count ?? undefined;
    message.response_message_count = object.response_message_count ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FilterObject.$type, FilterObject);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
