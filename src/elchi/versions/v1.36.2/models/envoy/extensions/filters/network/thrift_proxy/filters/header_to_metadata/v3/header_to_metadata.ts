// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/thrift_proxy/filters/header_to_metadata/v3/header_to_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../../../typeRegistry";
import { RegexMatchAndSubstitute } from "../../../../../../../type/matcher/v3/regex";

export const protobufPackage = "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3";

export interface HeaderToMetadata {
  $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata";
  /** The list of rules to apply to requests. */
  request_rules?: HeaderToMetadata_Rule[] | undefined;
}

export enum HeaderToMetadata_ValueType {
  STRING = "STRING",
  NUMBER = "NUMBER",
  /**
   * PROTOBUF_VALUE - The value is a serialized `protobuf.Value
   * <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
   */
  PROTOBUF_VALUE = "PROTOBUF_VALUE",
}

export function headerToMetadata_ValueTypeFromJSON(object: any): HeaderToMetadata_ValueType {
  switch (object) {
    case 0:
    case "STRING":
      return HeaderToMetadata_ValueType.STRING;
    case 1:
    case "NUMBER":
      return HeaderToMetadata_ValueType.NUMBER;
    case 2:
    case "PROTOBUF_VALUE":
      return HeaderToMetadata_ValueType.PROTOBUF_VALUE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderToMetadata_ValueType");
  }
}

export function headerToMetadata_ValueTypeToJSON(object: HeaderToMetadata_ValueType): string {
  switch (object) {
    case HeaderToMetadata_ValueType.STRING:
      return "STRING";
    case HeaderToMetadata_ValueType.NUMBER:
      return "NUMBER";
    case HeaderToMetadata_ValueType.PROTOBUF_VALUE:
      return "PROTOBUF_VALUE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderToMetadata_ValueType");
  }
}

export function headerToMetadata_ValueTypeToNumber(object: HeaderToMetadata_ValueType): number {
  switch (object) {
    case HeaderToMetadata_ValueType.STRING:
      return 0;
    case HeaderToMetadata_ValueType.NUMBER:
      return 1;
    case HeaderToMetadata_ValueType.PROTOBUF_VALUE:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderToMetadata_ValueType");
  }
}

/** ValueEncode defines the encoding algorithm. */
export enum HeaderToMetadata_ValueEncode {
  /** NONE - The value is not encoded. */
  NONE = "NONE",
  /**
   * BASE64 - The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
   * Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
   * non-ASCII characters in the header.
   */
  BASE64 = "BASE64",
}

export function headerToMetadata_ValueEncodeFromJSON(object: any): HeaderToMetadata_ValueEncode {
  switch (object) {
    case 0:
    case "NONE":
      return HeaderToMetadata_ValueEncode.NONE;
    case 1:
    case "BASE64":
      return HeaderToMetadata_ValueEncode.BASE64;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderToMetadata_ValueEncode");
  }
}

export function headerToMetadata_ValueEncodeToJSON(object: HeaderToMetadata_ValueEncode): string {
  switch (object) {
    case HeaderToMetadata_ValueEncode.NONE:
      return "NONE";
    case HeaderToMetadata_ValueEncode.BASE64:
      return "BASE64";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderToMetadata_ValueEncode");
  }
}

export function headerToMetadata_ValueEncodeToNumber(object: HeaderToMetadata_ValueEncode): number {
  switch (object) {
    case HeaderToMetadata_ValueEncode.NONE:
      return 0;
    case HeaderToMetadata_ValueEncode.BASE64:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum HeaderToMetadata_ValueEncode");
  }
}

/** [#next-free-field: 7] */
export interface HeaderToMetadata_KeyValuePair {
  $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.KeyValuePair";
  /** The namespace — if this is empty, the filter's namespace will be used. */
  metadata_namespace?:
    | string
    | undefined;
  /** The key to use within the namespace. */
  key?: string | undefined;
  value_type?:
    | //
    /**
     * The value to pair with the given key.
     *
     * When used for on_present case, if value is non-empty it'll be used instead
     * of the header value. If both are empty, the header value is used as-is.
     *
     * When used for on_missing case, a non-empty value must be provided.
     */
    { $case: "value"; value: string }
    | //
    /**
     * If present, the header's value will be matched and substituted with this.
     * If there is no match or substitution, the header value is used as-is.
     *
     * This is only used for on_present.
     */
    { $case: "regex_value_rewrite"; regex_value_rewrite: RegexMatchAndSubstitute }
    | undefined;
  /** The value's type — defaults to string. */
  type?:
    | HeaderToMetadata_ValueType
    | undefined;
  /**
   * How is the value encoded, default is NONE (not encoded).
   * The value will be decoded accordingly before storing to metadata.
   */
  encode?: HeaderToMetadata_ValueEncode | undefined;
}

/** A Rule defines what metadata to apply when a header is present or missing. */
export interface HeaderToMetadata_Rule {
  $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.Rule";
  /**
   * Specifies that a match will be performed on the value of a header.
   *
   * The header to be extracted.
   */
  header?:
    | string
    | undefined;
  /**
   * If the header is present, apply this metadata KeyValuePair.
   *
   * If the value in the KeyValuePair is non-empty, it'll be used instead
   * of the header value.
   */
  on_present?:
    | HeaderToMetadata_KeyValuePair
    | undefined;
  /**
   * If the header is not present, apply this metadata KeyValuePair.
   *
   * The value in the KeyValuePair must be set, since it'll be used in lieu
   * of the missing header value.
   */
  on_missing?:
    | HeaderToMetadata_KeyValuePair
    | undefined;
  /**
   * Whether or not to remove the header after a rule is applied.
   *
   * This prevents headers from leaking.
   */
  remove?: boolean | undefined;
}

function createBaseHeaderToMetadata(): HeaderToMetadata {
  return { $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata" };
}

export const HeaderToMetadata: MessageFns<
  HeaderToMetadata,
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata"
> = {
  $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata" as const,

  encode(message: HeaderToMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request_rules !== undefined && message.request_rules.length !== 0) {
      for (const v of message.request_rules) {
        HeaderToMetadata_Rule.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderToMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderToMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.request_rules === undefined) {
            message.request_rules = [];
          }
          const el = HeaderToMetadata_Rule.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.request_rules!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderToMetadata {
    return {
      $type: HeaderToMetadata.$type,
      request_rules: globalThis.Array.isArray(object?.request_rules)
        ? object.request_rules.map((e: any) => HeaderToMetadata_Rule.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: HeaderToMetadata): unknown {
    const obj: any = {};
    if (message.request_rules?.length) {
      obj.request_rules = message.request_rules.map((e) => HeaderToMetadata_Rule.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderToMetadata>, I>>(base?: I): HeaderToMetadata {
    return HeaderToMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderToMetadata>, I>>(object: I): HeaderToMetadata {
    const message = createBaseHeaderToMetadata();
    message.request_rules = object.request_rules?.map((e) => HeaderToMetadata_Rule.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(HeaderToMetadata.$type, HeaderToMetadata);

function createBaseHeaderToMetadata_KeyValuePair(): HeaderToMetadata_KeyValuePair {
  return {
    $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.KeyValuePair",
    value_type: undefined,
  };
}

export const HeaderToMetadata_KeyValuePair: MessageFns<
  HeaderToMetadata_KeyValuePair,
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.KeyValuePair"
> = {
  $type:
    "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.KeyValuePair" as const,

  encode(message: HeaderToMetadata_KeyValuePair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata_namespace !== undefined && message.metadata_namespace !== "") {
      writer.uint32(10).string(message.metadata_namespace);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    switch (message.value_type?.$case) {
      case "value":
        writer.uint32(26).string(message.value_type.value);
        break;
      case "regex_value_rewrite":
        RegexMatchAndSubstitute.encode(message.value_type.regex_value_rewrite, writer.uint32(34).fork()).join();
        break;
    }
    if (message.type !== undefined && message.type !== HeaderToMetadata_ValueType.STRING) {
      writer.uint32(40).int32(headerToMetadata_ValueTypeToNumber(message.type));
    }
    if (message.encode !== undefined && message.encode !== HeaderToMetadata_ValueEncode.NONE) {
      writer.uint32(48).int32(headerToMetadata_ValueEncodeToNumber(message.encode));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderToMetadata_KeyValuePair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderToMetadata_KeyValuePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata_namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value_type = { $case: "value", value: reader.string() };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value_type = {
            $case: "regex_value_rewrite",
            regex_value_rewrite: RegexMatchAndSubstitute.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = headerToMetadata_ValueTypeFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.encode = headerToMetadata_ValueEncodeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderToMetadata_KeyValuePair {
    return {
      $type: HeaderToMetadata_KeyValuePair.$type,
      metadata_namespace: isSet(object.metadata_namespace) ? globalThis.String(object.metadata_namespace) : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      value_type: isSet(object.value)
        ? { $case: "value", value: globalThis.String(object.value) }
        : isSet(object.regex_value_rewrite)
        ? {
          $case: "regex_value_rewrite",
          regex_value_rewrite: RegexMatchAndSubstitute.fromJSON(object.regex_value_rewrite),
        }
        : undefined,
      type: isSet(object.type) ? headerToMetadata_ValueTypeFromJSON(object.type) : undefined,
      encode: isSet(object.encode) ? headerToMetadata_ValueEncodeFromJSON(object.encode) : undefined,
    };
  },

  toJSON(message: HeaderToMetadata_KeyValuePair): unknown {
    const obj: any = {};
    if (message.metadata_namespace !== undefined) {
      obj.metadata_namespace = message.metadata_namespace;
    }
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value_type?.$case === "value") {
      obj.value = message.value_type.value;
    }
    if (message.value_type?.$case === "regex_value_rewrite") {
      obj.regex_value_rewrite = RegexMatchAndSubstitute.toJSON(message.value_type.regex_value_rewrite);
    }
    if (message.type !== undefined) {
      obj.type = headerToMetadata_ValueTypeToJSON(message.type);
    }
    if (message.encode !== undefined) {
      obj.encode = headerToMetadata_ValueEncodeToJSON(message.encode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderToMetadata_KeyValuePair>, I>>(base?: I): HeaderToMetadata_KeyValuePair {
    return HeaderToMetadata_KeyValuePair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderToMetadata_KeyValuePair>, I>>(
    object: I,
  ): HeaderToMetadata_KeyValuePair {
    const message = createBaseHeaderToMetadata_KeyValuePair();
    message.metadata_namespace = object.metadata_namespace ?? undefined;
    message.key = object.key ?? undefined;
    if (
      object.value_type?.$case === "value" &&
      object.value_type?.value !== undefined &&
      object.value_type?.value !== null
    ) {
      message.value_type = { $case: "value", value: object.value_type.value };
    }
    if (
      object.value_type?.$case === "regex_value_rewrite" &&
      object.value_type?.regex_value_rewrite !== undefined &&
      object.value_type?.regex_value_rewrite !== null
    ) {
      message.value_type = {
        $case: "regex_value_rewrite",
        regex_value_rewrite: RegexMatchAndSubstitute.fromPartial(object.value_type.regex_value_rewrite),
      };
    }
    message.type = object.type ?? undefined;
    message.encode = object.encode ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HeaderToMetadata_KeyValuePair.$type, HeaderToMetadata_KeyValuePair);

function createBaseHeaderToMetadata_Rule(): HeaderToMetadata_Rule {
  return { $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.Rule" };
}

export const HeaderToMetadata_Rule: MessageFns<
  HeaderToMetadata_Rule,
  "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.Rule"
> = {
  $type: "envoy.extensions.filters.network.thrift_proxy.filters.header_to_metadata.v3.HeaderToMetadata.Rule" as const,

  encode(message: HeaderToMetadata_Rule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined && message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.on_present !== undefined) {
      HeaderToMetadata_KeyValuePair.encode(message.on_present, writer.uint32(18).fork()).join();
    }
    if (message.on_missing !== undefined) {
      HeaderToMetadata_KeyValuePair.encode(message.on_missing, writer.uint32(26).fork()).join();
    }
    if (message.remove !== undefined && message.remove !== false) {
      writer.uint32(32).bool(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderToMetadata_Rule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderToMetadata_Rule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.on_present = HeaderToMetadata_KeyValuePair.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.on_missing = HeaderToMetadata_KeyValuePair.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.remove = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderToMetadata_Rule {
    return {
      $type: HeaderToMetadata_Rule.$type,
      header: isSet(object.header) ? globalThis.String(object.header) : undefined,
      on_present: isSet(object.on_present) ? HeaderToMetadata_KeyValuePair.fromJSON(object.on_present) : undefined,
      on_missing: isSet(object.on_missing) ? HeaderToMetadata_KeyValuePair.fromJSON(object.on_missing) : undefined,
      remove: isSet(object.remove) ? globalThis.Boolean(object.remove) : undefined,
    };
  },

  toJSON(message: HeaderToMetadata_Rule): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    if (message.on_present !== undefined) {
      obj.on_present = HeaderToMetadata_KeyValuePair.toJSON(message.on_present);
    }
    if (message.on_missing !== undefined) {
      obj.on_missing = HeaderToMetadata_KeyValuePair.toJSON(message.on_missing);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderToMetadata_Rule>, I>>(base?: I): HeaderToMetadata_Rule {
    return HeaderToMetadata_Rule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderToMetadata_Rule>, I>>(object: I): HeaderToMetadata_Rule {
    const message = createBaseHeaderToMetadata_Rule();
    message.header = object.header ?? undefined;
    message.on_present = (object.on_present !== undefined && object.on_present !== null)
      ? HeaderToMetadata_KeyValuePair.fromPartial(object.on_present)
      : undefined;
    message.on_missing = (object.on_missing !== undefined && object.on_missing !== null)
      ? HeaderToMetadata_KeyValuePair.fromPartial(object.on_missing)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HeaderToMetadata_Rule.$type, HeaderToMetadata_Rule);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
