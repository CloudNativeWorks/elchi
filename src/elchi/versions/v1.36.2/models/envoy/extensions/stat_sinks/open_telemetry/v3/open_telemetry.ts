// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/stat_sinks/open_telemetry/v3/open_telemetry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../google/protobuf/wrappers";
import { KeyValue } from "../../../../../opentelemetry/proto/common/v1/common";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { Matcher } from "../../../../../xds/type/matcher/v3/matcher";
import { TypedExtensionConfig } from "../../../../config/core/v3/extension";
import { GrpcService } from "../../../../config/core/v3/grpc_service";

export const protobufPackage = "envoy.extensions.stat_sinks.open_telemetry.v3";

/** [#next-free-field: 9] */
export interface SinkConfig {
  $type: "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig";
  protocol_specifier?:
    | //
    /** The upstream gRPC cluster that implements the OTLP/gRPC collector. */
    { $case: "grpc_service"; grpc_service: GrpcService }
    | undefined;
  /**
   * Attributes to be associated with the resource in the OTLP message.
   * [#extension-category: envoy.tracers.opentelemetry.resource_detectors]
   */
  resource_detectors?:
    | TypedExtensionConfig[]
    | undefined;
  /**
   * If set to true, counters will be emitted as deltas, and the OTLP message will have
   * ``AGGREGATION_TEMPORALITY_DELTA`` set as AggregationTemporality.
   */
  report_counters_as_deltas?:
    | boolean
    | undefined;
  /**
   * If set to true, histograms will be emitted as deltas, and the OTLP message will have
   * ``AGGREGATION_TEMPORALITY_DELTA`` set as AggregationTemporality.
   */
  report_histograms_as_deltas?:
    | boolean
    | undefined;
  /**
   * If set to true, metrics will have their tags emitted as OTLP attributes, which may
   * contain values used by the tag extractor or additional tags added during stats creation.
   * Otherwise, no attributes will be associated with the export message. Default value is true.
   */
  emit_tags_as_attributes?:
    | boolean
    | undefined;
  /**
   * If set to true, metric names will be represented as the tag extracted name instead
   * of the full metric name. Default value is true.
   */
  use_tag_extracted_name?:
    | boolean
    | undefined;
  /**
   * If set, emitted stats names will be prepended with a prefix, so full stat name will be
   * <prefix>.<stats_name>. For example, if the stat name is "foo.bar" and prefix is
   * "pre", the full stat name will be "pre.foo.bar". If this field is not set, there is no
   * prefix added. According to the example, the full stat name will remain "foo.bar".
   */
  prefix?:
    | string
    | undefined;
  /**
   * The custom conversion from a stat to a metric. Currently, the only supported input is
   * ``envoy.extensions.matching.common_inputs.stats.v3.StatFullNameMatchInput`` and the only support action is
   * ``envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig.ConversionAction``.
   */
  custom_metric_conversions?: Matcher | undefined;
}

/**
 * ConversionAction is used to convert a stat to a metric. If a stat matches,
 * the metric_name and static_metric_labels will be
 * used to create the metric. This can be used to rename a
 * stat, add static labels, and aggregate multiple stats into a single metric.
 */
export interface SinkConfig_ConversionAction {
  $type: "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig.ConversionAction";
  /** The metric name to use for the stat. */
  metric_name?:
    | string
    | undefined;
  /** Static metric labels to use for the metric. */
  static_metric_labels?: KeyValue[] | undefined;
}

function createBaseSinkConfig(): SinkConfig {
  return { $type: "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig", protocol_specifier: undefined };
}

export const SinkConfig: MessageFns<SinkConfig, "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig"> = {
  $type: "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig" as const,

  encode(message: SinkConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.protocol_specifier?.$case) {
      case "grpc_service":
        GrpcService.encode(message.protocol_specifier.grpc_service, writer.uint32(10).fork()).join();
        break;
    }
    if (message.resource_detectors !== undefined && message.resource_detectors.length !== 0) {
      for (const v of message.resource_detectors) {
        TypedExtensionConfig.encode(v!, writer.uint32(58).fork()).join();
      }
    }
    if (message.report_counters_as_deltas !== undefined && message.report_counters_as_deltas !== false) {
      writer.uint32(16).bool(message.report_counters_as_deltas);
    }
    if (message.report_histograms_as_deltas !== undefined && message.report_histograms_as_deltas !== false) {
      writer.uint32(24).bool(message.report_histograms_as_deltas);
    }
    if (message.emit_tags_as_attributes !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.emit_tags_as_attributes! },
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.use_tag_extracted_name !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.use_tag_extracted_name! },
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.prefix !== undefined && message.prefix !== "") {
      writer.uint32(50).string(message.prefix);
    }
    if (message.custom_metric_conversions !== undefined) {
      Matcher.encode(message.custom_metric_conversions, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SinkConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSinkConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.protocol_specifier = {
            $case: "grpc_service",
            grpc_service: GrpcService.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          if (message.resource_detectors === undefined) {
            message.resource_detectors = [];
          }
          const el = TypedExtensionConfig.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.resource_detectors!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.report_counters_as_deltas = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.report_histograms_as_deltas = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.emit_tags_as_attributes = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.use_tag_extracted_name = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.prefix = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.custom_metric_conversions = Matcher.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SinkConfig {
    return {
      $type: SinkConfig.$type,
      protocol_specifier: isSet(object.grpc_service)
        ? { $case: "grpc_service", grpc_service: GrpcService.fromJSON(object.grpc_service) }
        : undefined,
      resource_detectors: globalThis.Array.isArray(object?.resource_detectors)
        ? object.resource_detectors.map((e: any) => TypedExtensionConfig.fromJSON(e))
        : undefined,
      report_counters_as_deltas: isSet(object.report_counters_as_deltas)
        ? globalThis.Boolean(object.report_counters_as_deltas)
        : undefined,
      report_histograms_as_deltas: isSet(object.report_histograms_as_deltas)
        ? globalThis.Boolean(object.report_histograms_as_deltas)
        : undefined,
      emit_tags_as_attributes: isSet(object.emit_tags_as_attributes)
        ? Boolean(object.emit_tags_as_attributes)
        : undefined,
      use_tag_extracted_name: isSet(object.use_tag_extracted_name) ? Boolean(object.use_tag_extracted_name) : undefined,
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : undefined,
      custom_metric_conversions: isSet(object.custom_metric_conversions)
        ? Matcher.fromJSON(object.custom_metric_conversions)
        : undefined,
    };
  },

  toJSON(message: SinkConfig): unknown {
    const obj: any = {};
    if (message.protocol_specifier?.$case === "grpc_service") {
      obj.grpc_service = GrpcService.toJSON(message.protocol_specifier.grpc_service);
    }
    if (message.resource_detectors?.length) {
      obj.resource_detectors = message.resource_detectors.map((e) => TypedExtensionConfig.toJSON(e));
    }
    if (message.report_counters_as_deltas !== undefined) {
      obj.report_counters_as_deltas = message.report_counters_as_deltas;
    }
    if (message.report_histograms_as_deltas !== undefined) {
      obj.report_histograms_as_deltas = message.report_histograms_as_deltas;
    }
    if (message.emit_tags_as_attributes !== undefined) {
      obj.emit_tags_as_attributes = message.emit_tags_as_attributes;
    }
    if (message.use_tag_extracted_name !== undefined) {
      obj.use_tag_extracted_name = message.use_tag_extracted_name;
    }
    if (message.prefix !== undefined) {
      obj.prefix = message.prefix;
    }
    if (message.custom_metric_conversions !== undefined) {
      obj.custom_metric_conversions = Matcher.toJSON(message.custom_metric_conversions);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SinkConfig>, I>>(base?: I): SinkConfig {
    return SinkConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SinkConfig>, I>>(object: I): SinkConfig {
    const message = createBaseSinkConfig();
    if (
      object.protocol_specifier?.$case === "grpc_service" &&
      object.protocol_specifier?.grpc_service !== undefined &&
      object.protocol_specifier?.grpc_service !== null
    ) {
      message.protocol_specifier = {
        $case: "grpc_service",
        grpc_service: GrpcService.fromPartial(object.protocol_specifier.grpc_service),
      };
    }
    message.resource_detectors = object.resource_detectors?.map((e) => TypedExtensionConfig.fromPartial(e)) ||
      undefined;
    message.report_counters_as_deltas = object.report_counters_as_deltas ?? undefined;
    message.report_histograms_as_deltas = object.report_histograms_as_deltas ?? undefined;
    message.emit_tags_as_attributes = object.emit_tags_as_attributes ?? undefined;
    message.use_tag_extracted_name = object.use_tag_extracted_name ?? undefined;
    message.prefix = object.prefix ?? undefined;
    message.custom_metric_conversions =
      (object.custom_metric_conversions !== undefined && object.custom_metric_conversions !== null)
        ? Matcher.fromPartial(object.custom_metric_conversions)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(SinkConfig.$type, SinkConfig);

function createBaseSinkConfig_ConversionAction(): SinkConfig_ConversionAction {
  return { $type: "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig.ConversionAction" };
}

export const SinkConfig_ConversionAction: MessageFns<
  SinkConfig_ConversionAction,
  "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig.ConversionAction"
> = {
  $type: "envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig.ConversionAction" as const,

  encode(message: SinkConfig_ConversionAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metric_name !== undefined && message.metric_name !== "") {
      writer.uint32(18).string(message.metric_name);
    }
    if (message.static_metric_labels !== undefined && message.static_metric_labels.length !== 0) {
      for (const v of message.static_metric_labels) {
        KeyValue.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SinkConfig_ConversionAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSinkConfig_ConversionAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metric_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.static_metric_labels === undefined) {
            message.static_metric_labels = [];
          }
          const el = KeyValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.static_metric_labels!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SinkConfig_ConversionAction {
    return {
      $type: SinkConfig_ConversionAction.$type,
      metric_name: isSet(object.metric_name) ? globalThis.String(object.metric_name) : undefined,
      static_metric_labels: globalThis.Array.isArray(object?.static_metric_labels)
        ? object.static_metric_labels.map((e: any) => KeyValue.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: SinkConfig_ConversionAction): unknown {
    const obj: any = {};
    if (message.metric_name !== undefined) {
      obj.metric_name = message.metric_name;
    }
    if (message.static_metric_labels?.length) {
      obj.static_metric_labels = message.static_metric_labels.map((e) => KeyValue.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SinkConfig_ConversionAction>, I>>(base?: I): SinkConfig_ConversionAction {
    return SinkConfig_ConversionAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SinkConfig_ConversionAction>, I>>(object: I): SinkConfig_ConversionAction {
    const message = createBaseSinkConfig_ConversionAction();
    message.metric_name = object.metric_name ?? undefined;
    message.static_metric_labels = object.static_metric_labels?.map((e) => KeyValue.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(SinkConfig_ConversionAction.$type, SinkConfig_ConversionAction);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
