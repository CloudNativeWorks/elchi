// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/transport_sockets/internal_upstream/v3/internal_upstream.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { TransportSocket } from "../../../../config/core/v3/base";
import { MetadataKind } from "../../../../type/metadata/v3/metadata";

export const protobufPackage = "envoy.extensions.transport_sockets.internal_upstream.v3";

/**
 * Configuration for the internal upstream address. An internal address defines
 * a loopback user space socket residing in the same proxy instance. This
 * extension allows passing additional structured state across the user space
 * socket in addition to the regular byte stream. The purpose is to facilitate
 * communication between filters on the downstream and the upstream internal
 * connections. All filter state objects that are shared with the upstream
 * connection are also shared with the downstream internal connection using
 * this transport socket.
 */
export interface InternalUpstreamTransport {
  $type: "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport";
  /**
   * Specifies the metadata namespaces and values to insert into the downstream
   * internal connection dynamic metadata when an internal address is used as a
   * host. If the destination name is repeated across two metadata source
   * locations, and both locations contain the metadata with the given name,
   * then the latter in the list overrides the former.
   */
  passthrough_metadata?:
    | InternalUpstreamTransport_MetadataValueSource[]
    | undefined;
  /** The underlying transport socket being wrapped. */
  transport_socket?: TransportSocket | undefined;
}

/**
 * Describes the location of the imported metadata value.
 * If the metadata with the given name is not present at the source location,
 * then no metadata is passed through for this particular instance.
 */
export interface InternalUpstreamTransport_MetadataValueSource {
  $type: "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource";
  /** Specifies what kind of metadata. */
  kind?:
    | MetadataKind
    | undefined;
  /** Name is the filter namespace used in the dynamic metadata. */
  name?: string | undefined;
}

function createBaseInternalUpstreamTransport(): InternalUpstreamTransport {
  return { $type: "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport" };
}

export const InternalUpstreamTransport: MessageFns<
  InternalUpstreamTransport,
  "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport"
> = {
  $type: "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport" as const,

  encode(message: InternalUpstreamTransport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.passthrough_metadata !== undefined && message.passthrough_metadata.length !== 0) {
      for (const v of message.passthrough_metadata) {
        InternalUpstreamTransport_MetadataValueSource.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.transport_socket !== undefined) {
      TransportSocket.encode(message.transport_socket, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InternalUpstreamTransport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInternalUpstreamTransport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.passthrough_metadata === undefined) {
            message.passthrough_metadata = [];
          }
          const el = InternalUpstreamTransport_MetadataValueSource.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.passthrough_metadata!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transport_socket = TransportSocket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InternalUpstreamTransport {
    return {
      $type: InternalUpstreamTransport.$type,
      passthrough_metadata: globalThis.Array.isArray(object?.passthrough_metadata)
        ? object.passthrough_metadata.map((e: any) => InternalUpstreamTransport_MetadataValueSource.fromJSON(e))
        : undefined,
      transport_socket: isSet(object.transport_socket) ? TransportSocket.fromJSON(object.transport_socket) : undefined,
    };
  },

  toJSON(message: InternalUpstreamTransport): unknown {
    const obj: any = {};
    if (message.passthrough_metadata?.length) {
      obj.passthrough_metadata = message.passthrough_metadata.map((e) =>
        InternalUpstreamTransport_MetadataValueSource.toJSON(e)
      );
    }
    if (message.transport_socket !== undefined) {
      obj.transport_socket = TransportSocket.toJSON(message.transport_socket);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InternalUpstreamTransport>, I>>(base?: I): InternalUpstreamTransport {
    return InternalUpstreamTransport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InternalUpstreamTransport>, I>>(object: I): InternalUpstreamTransport {
    const message = createBaseInternalUpstreamTransport();
    message.passthrough_metadata =
      object.passthrough_metadata?.map((e) => InternalUpstreamTransport_MetadataValueSource.fromPartial(e)) ||
      undefined;
    message.transport_socket = (object.transport_socket !== undefined && object.transport_socket !== null)
      ? TransportSocket.fromPartial(object.transport_socket)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(InternalUpstreamTransport.$type, InternalUpstreamTransport);

function createBaseInternalUpstreamTransport_MetadataValueSource(): InternalUpstreamTransport_MetadataValueSource {
  return {
    $type: "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource",
  };
}

export const InternalUpstreamTransport_MetadataValueSource: MessageFns<
  InternalUpstreamTransport_MetadataValueSource,
  "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource"
> = {
  $type:
    "envoy.extensions.transport_sockets.internal_upstream.v3.InternalUpstreamTransport.MetadataValueSource" as const,

  encode(
    message: InternalUpstreamTransport_MetadataValueSource,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.kind !== undefined) {
      MetadataKind.encode(message.kind, writer.uint32(10).fork()).join();
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InternalUpstreamTransport_MetadataValueSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInternalUpstreamTransport_MetadataValueSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.kind = MetadataKind.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InternalUpstreamTransport_MetadataValueSource {
    return {
      $type: InternalUpstreamTransport_MetadataValueSource.$type,
      kind: isSet(object.kind) ? MetadataKind.fromJSON(object.kind) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: InternalUpstreamTransport_MetadataValueSource): unknown {
    const obj: any = {};
    if (message.kind !== undefined) {
      obj.kind = MetadataKind.toJSON(message.kind);
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InternalUpstreamTransport_MetadataValueSource>, I>>(
    base?: I,
  ): InternalUpstreamTransport_MetadataValueSource {
    return InternalUpstreamTransport_MetadataValueSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InternalUpstreamTransport_MetadataValueSource>, I>>(
    object: I,
  ): InternalUpstreamTransport_MetadataValueSource {
    const message = createBaseInternalUpstreamTransport_MetadataValueSource();
    message.kind = (object.kind !== undefined && object.kind !== null)
      ? MetadataKind.fromPartial(object.kind)
      : undefined;
    message.name = object.name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(
  InternalUpstreamTransport_MetadataValueSource.$type,
  InternalUpstreamTransport_MetadataValueSource,
);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
