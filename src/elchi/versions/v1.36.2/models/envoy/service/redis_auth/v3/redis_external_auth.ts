// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/redis_auth/v3/redis_external_auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { Status } from "../../../../google/rpc/status";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.service.redis_auth.v3";

export interface RedisProxyExternalAuthRequest {
  $type: "envoy.service.redis_auth.v3.RedisProxyExternalAuthRequest";
  /** Username, if applicable. Otherwise, empty. */
  username?:
    | string
    | undefined;
  /** Password sent with the AUTH command. */
  password?: string | undefined;
}

export interface RedisProxyExternalAuthResponse {
  $type: "envoy.service.redis_auth.v3.RedisProxyExternalAuthResponse";
  /** Status of the authentication check. */
  status?:
    | Status
    | undefined;
  /**
   * Optional expiration time for the authentication.
   * If set, the authentication will be valid until this time.
   * If not set, the authentication will be valid indefinitely.
   */
  expiration?:
    | Date
    | undefined;
  /** Optional message to be sent back to the client. */
  message?: string | undefined;
}

function createBaseRedisProxyExternalAuthRequest(): RedisProxyExternalAuthRequest {
  return { $type: "envoy.service.redis_auth.v3.RedisProxyExternalAuthRequest" };
}

export const RedisProxyExternalAuthRequest: MessageFns<
  RedisProxyExternalAuthRequest,
  "envoy.service.redis_auth.v3.RedisProxyExternalAuthRequest"
> = {
  $type: "envoy.service.redis_auth.v3.RedisProxyExternalAuthRequest" as const,

  encode(message: RedisProxyExternalAuthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== undefined && message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== undefined && message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RedisProxyExternalAuthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedisProxyExternalAuthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedisProxyExternalAuthRequest {
    return {
      $type: RedisProxyExternalAuthRequest.$type,
      username: isSet(object.username) ? globalThis.String(object.username) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : undefined,
    };
  },

  toJSON(message: RedisProxyExternalAuthRequest): unknown {
    const obj: any = {};
    if (message.username !== undefined) {
      obj.username = message.username;
    }
    if (message.password !== undefined) {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedisProxyExternalAuthRequest>, I>>(base?: I): RedisProxyExternalAuthRequest {
    return RedisProxyExternalAuthRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedisProxyExternalAuthRequest>, I>>(
    object: I,
  ): RedisProxyExternalAuthRequest {
    const message = createBaseRedisProxyExternalAuthRequest();
    message.username = object.username ?? undefined;
    message.password = object.password ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RedisProxyExternalAuthRequest.$type, RedisProxyExternalAuthRequest);

function createBaseRedisProxyExternalAuthResponse(): RedisProxyExternalAuthResponse {
  return { $type: "envoy.service.redis_auth.v3.RedisProxyExternalAuthResponse" };
}

export const RedisProxyExternalAuthResponse: MessageFns<
  RedisProxyExternalAuthResponse,
  "envoy.service.redis_auth.v3.RedisProxyExternalAuthResponse"
> = {
  $type: "envoy.service.redis_auth.v3.RedisProxyExternalAuthResponse" as const,

  encode(message: RedisProxyExternalAuthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.expiration !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration), writer.uint32(18).fork()).join();
    }
    if (message.message !== undefined && message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RedisProxyExternalAuthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRedisProxyExternalAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RedisProxyExternalAuthResponse {
    return {
      $type: RedisProxyExternalAuthResponse.$type,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      expiration: isSet(object.expiration) ? fromJsonTimestamp(object.expiration) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: RedisProxyExternalAuthResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.expiration !== undefined) {
      obj.expiration = message.expiration.toISOString();
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RedisProxyExternalAuthResponse>, I>>(base?: I): RedisProxyExternalAuthResponse {
    return RedisProxyExternalAuthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RedisProxyExternalAuthResponse>, I>>(
    object: I,
  ): RedisProxyExternalAuthResponse {
    const message = createBaseRedisProxyExternalAuthResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.expiration = object.expiration ?? undefined;
    message.message = object.message ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RedisProxyExternalAuthResponse.$type, RedisProxyExternalAuthResponse);

/** A generic interface for performing external password authentication on incoming AUTH commands. */
export interface RedisProxyExternalAuth {
  /**
   * Performs authentication check based on the data sent with the AUTH request.
   * Returns either an OK status or an error status.
   */
  Authenticate(request: RedisProxyExternalAuthRequest): Promise<RedisProxyExternalAuthResponse>;
}

export const RedisProxyExternalAuthServiceName = "envoy.service.redis_auth.v3.RedisProxyExternalAuth";
export class RedisProxyExternalAuthClientImpl implements RedisProxyExternalAuth {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || RedisProxyExternalAuthServiceName;
    this.rpc = rpc;
    this.Authenticate = this.Authenticate.bind(this);
  }
  Authenticate(request: RedisProxyExternalAuthRequest): Promise<RedisProxyExternalAuthResponse> {
    const data = RedisProxyExternalAuthRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Authenticate", data);
    return promise.then((data) => RedisProxyExternalAuthResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
