// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/metadata/v2/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.type.metadata.v2";

/**
 * MetadataKey provides a general interface using `key` and `path` to retrieve value from
 * :ref:`Metadata <envoy_api_msg_core.Metadata>`.
 *
 * For example, for the following Metadata:
 *
 * .. code-block:: yaml
 *
 *    filter_metadata:
 *      envoy.xxx:
 *        prop:
 *          foo: bar
 *          xyz:
 *            hello: envoy
 *
 * The following MetadataKey will retrieve a string value "bar" from the Metadata.
 *
 * .. code-block:: yaml
 *
 *    key: envoy.xxx
 *    path:
 *    - key: prop
 *    - key: foo
 */
export interface MetadataKey {
  $type: "envoy.type.metadata.v2.MetadataKey";
  /**
   * The key name of Metadata to retrieve the Struct from the metadata.
   * Typically, it represents a builtin subsystem or custom extension.
   */
  key?:
    | string
    | undefined;
  /**
   * The path to retrieve the Value from the Struct. It can be a prefix or a full path,
   * e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,
   * which depends on the particular scenario.
   *
   * Note: Due to that only the key type segment is supported, the path can not specify a list
   * unless the list is the last segment.
   */
  path?: MetadataKey_PathSegment[] | undefined;
}

/**
 * Specifies the segment in a path to retrieve value from Metadata.
 * Currently it is only supported to specify the key, i.e. field name, as one segment of a path.
 */
export interface MetadataKey_PathSegment {
  $type: "envoy.type.metadata.v2.MetadataKey.PathSegment";
  segment?:
    | //
    /** If specified, use the key to retrieve the value in a Struct. */
    { $case: "key"; key: string }
    | undefined;
}

/** Describes what kind of metadata. */
export interface MetadataKind {
  $type: "envoy.type.metadata.v2.MetadataKind";
  kind?:
    | //
    /** Request kind of metadata. */
    { $case: "request"; request: MetadataKind_Request }
    | //
    /** Route kind of metadata. */
    { $case: "route"; route: MetadataKind_Route }
    | //
    /** Cluster kind of metadata. */
    { $case: "cluster"; cluster: MetadataKind_Cluster }
    | //
    /** Host kind of metadata. */
    { $case: "host"; host: MetadataKind_Host }
    | undefined;
}

/** Represents dynamic metadata associated with the request. */
export interface MetadataKind_Request {
  $type: "envoy.type.metadata.v2.MetadataKind.Request";
}

/** Represents metadata from :ref:`the route<envoy_api_field_route.Route.metadata>`. */
export interface MetadataKind_Route {
  $type: "envoy.type.metadata.v2.MetadataKind.Route";
}

/** Represents metadata from :ref:`the upstream cluster<envoy_api_field_Cluster.metadata>`. */
export interface MetadataKind_Cluster {
  $type: "envoy.type.metadata.v2.MetadataKind.Cluster";
}

/**
 * Represents metadata from :ref:`the upstream
 * host<envoy_api_field_endpoint.LbEndpoint.metadata>`.
 */
export interface MetadataKind_Host {
  $type: "envoy.type.metadata.v2.MetadataKind.Host";
}

function createBaseMetadataKey(): MetadataKey {
  return { $type: "envoy.type.metadata.v2.MetadataKey" };
}

export const MetadataKey: MessageFns<MetadataKey, "envoy.type.metadata.v2.MetadataKey"> = {
  $type: "envoy.type.metadata.v2.MetadataKey" as const,

  encode(message: MetadataKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.path !== undefined && message.path.length !== 0) {
      for (const v of message.path) {
        MetadataKey_PathSegment.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.path === undefined) {
            message.path = [];
          }
          const el = MetadataKey_PathSegment.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.path!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataKey {
    return {
      $type: MetadataKey.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      path: globalThis.Array.isArray(object?.path)
        ? object.path.map((e: any) => MetadataKey_PathSegment.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: MetadataKey): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.path?.length) {
      obj.path = message.path.map((e) => MetadataKey_PathSegment.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataKey>, I>>(base?: I): MetadataKey {
    return MetadataKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataKey>, I>>(object: I): MetadataKey {
    const message = createBaseMetadataKey();
    message.key = object.key ?? undefined;
    message.path = object.path?.map((e) => MetadataKey_PathSegment.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(MetadataKey.$type, MetadataKey);

function createBaseMetadataKey_PathSegment(): MetadataKey_PathSegment {
  return { $type: "envoy.type.metadata.v2.MetadataKey.PathSegment", segment: undefined };
}

export const MetadataKey_PathSegment: MessageFns<
  MetadataKey_PathSegment,
  "envoy.type.metadata.v2.MetadataKey.PathSegment"
> = {
  $type: "envoy.type.metadata.v2.MetadataKey.PathSegment" as const,

  encode(message: MetadataKey_PathSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.segment?.$case) {
      case "key":
        writer.uint32(10).string(message.segment.key);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataKey_PathSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataKey_PathSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.segment = { $case: "key", key: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataKey_PathSegment {
    return {
      $type: MetadataKey_PathSegment.$type,
      segment: isSet(object.key) ? { $case: "key", key: globalThis.String(object.key) } : undefined,
    };
  },

  toJSON(message: MetadataKey_PathSegment): unknown {
    const obj: any = {};
    if (message.segment?.$case === "key") {
      obj.key = message.segment.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataKey_PathSegment>, I>>(base?: I): MetadataKey_PathSegment {
    return MetadataKey_PathSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataKey_PathSegment>, I>>(object: I): MetadataKey_PathSegment {
    const message = createBaseMetadataKey_PathSegment();
    if (object.segment?.$case === "key" && object.segment?.key !== undefined && object.segment?.key !== null) {
      message.segment = { $case: "key", key: object.segment.key };
    }
    return message;
  },
};

messageTypeRegistry.set(MetadataKey_PathSegment.$type, MetadataKey_PathSegment);

function createBaseMetadataKind(): MetadataKind {
  return { $type: "envoy.type.metadata.v2.MetadataKind", kind: undefined };
}

export const MetadataKind: MessageFns<MetadataKind, "envoy.type.metadata.v2.MetadataKind"> = {
  $type: "envoy.type.metadata.v2.MetadataKind" as const,

  encode(message: MetadataKind, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.kind?.$case) {
      case "request":
        MetadataKind_Request.encode(message.kind.request, writer.uint32(10).fork()).join();
        break;
      case "route":
        MetadataKind_Route.encode(message.kind.route, writer.uint32(18).fork()).join();
        break;
      case "cluster":
        MetadataKind_Cluster.encode(message.kind.cluster, writer.uint32(26).fork()).join();
        break;
      case "host":
        MetadataKind_Host.encode(message.kind.host, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataKind {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataKind();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.kind = { $case: "request", request: MetadataKind_Request.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.kind = { $case: "route", route: MetadataKind_Route.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.kind = { $case: "cluster", cluster: MetadataKind_Cluster.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.kind = { $case: "host", host: MetadataKind_Host.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MetadataKind {
    return {
      $type: MetadataKind.$type,
      kind: isSet(object.request)
        ? { $case: "request", request: MetadataKind_Request.fromJSON(object.request) }
        : isSet(object.route)
        ? { $case: "route", route: MetadataKind_Route.fromJSON(object.route) }
        : isSet(object.cluster)
        ? { $case: "cluster", cluster: MetadataKind_Cluster.fromJSON(object.cluster) }
        : isSet(object.host)
        ? { $case: "host", host: MetadataKind_Host.fromJSON(object.host) }
        : undefined,
    };
  },

  toJSON(message: MetadataKind): unknown {
    const obj: any = {};
    if (message.kind?.$case === "request") {
      obj.request = MetadataKind_Request.toJSON(message.kind.request);
    }
    if (message.kind?.$case === "route") {
      obj.route = MetadataKind_Route.toJSON(message.kind.route);
    }
    if (message.kind?.$case === "cluster") {
      obj.cluster = MetadataKind_Cluster.toJSON(message.kind.cluster);
    }
    if (message.kind?.$case === "host") {
      obj.host = MetadataKind_Host.toJSON(message.kind.host);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataKind>, I>>(base?: I): MetadataKind {
    return MetadataKind.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataKind>, I>>(object: I): MetadataKind {
    const message = createBaseMetadataKind();
    if (object.kind?.$case === "request" && object.kind?.request !== undefined && object.kind?.request !== null) {
      message.kind = { $case: "request", request: MetadataKind_Request.fromPartial(object.kind.request) };
    }
    if (object.kind?.$case === "route" && object.kind?.route !== undefined && object.kind?.route !== null) {
      message.kind = { $case: "route", route: MetadataKind_Route.fromPartial(object.kind.route) };
    }
    if (object.kind?.$case === "cluster" && object.kind?.cluster !== undefined && object.kind?.cluster !== null) {
      message.kind = { $case: "cluster", cluster: MetadataKind_Cluster.fromPartial(object.kind.cluster) };
    }
    if (object.kind?.$case === "host" && object.kind?.host !== undefined && object.kind?.host !== null) {
      message.kind = { $case: "host", host: MetadataKind_Host.fromPartial(object.kind.host) };
    }
    return message;
  },
};

messageTypeRegistry.set(MetadataKind.$type, MetadataKind);

function createBaseMetadataKind_Request(): MetadataKind_Request {
  return { $type: "envoy.type.metadata.v2.MetadataKind.Request" };
}

export const MetadataKind_Request: MessageFns<MetadataKind_Request, "envoy.type.metadata.v2.MetadataKind.Request"> = {
  $type: "envoy.type.metadata.v2.MetadataKind.Request" as const,

  encode(_: MetadataKind_Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataKind_Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataKind_Request();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MetadataKind_Request {
    return { $type: MetadataKind_Request.$type };
  },

  toJSON(_: MetadataKind_Request): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataKind_Request>, I>>(base?: I): MetadataKind_Request {
    return MetadataKind_Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataKind_Request>, I>>(_: I): MetadataKind_Request {
    const message = createBaseMetadataKind_Request();
    return message;
  },
};

messageTypeRegistry.set(MetadataKind_Request.$type, MetadataKind_Request);

function createBaseMetadataKind_Route(): MetadataKind_Route {
  return { $type: "envoy.type.metadata.v2.MetadataKind.Route" };
}

export const MetadataKind_Route: MessageFns<MetadataKind_Route, "envoy.type.metadata.v2.MetadataKind.Route"> = {
  $type: "envoy.type.metadata.v2.MetadataKind.Route" as const,

  encode(_: MetadataKind_Route, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataKind_Route {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataKind_Route();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MetadataKind_Route {
    return { $type: MetadataKind_Route.$type };
  },

  toJSON(_: MetadataKind_Route): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataKind_Route>, I>>(base?: I): MetadataKind_Route {
    return MetadataKind_Route.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataKind_Route>, I>>(_: I): MetadataKind_Route {
    const message = createBaseMetadataKind_Route();
    return message;
  },
};

messageTypeRegistry.set(MetadataKind_Route.$type, MetadataKind_Route);

function createBaseMetadataKind_Cluster(): MetadataKind_Cluster {
  return { $type: "envoy.type.metadata.v2.MetadataKind.Cluster" };
}

export const MetadataKind_Cluster: MessageFns<MetadataKind_Cluster, "envoy.type.metadata.v2.MetadataKind.Cluster"> = {
  $type: "envoy.type.metadata.v2.MetadataKind.Cluster" as const,

  encode(_: MetadataKind_Cluster, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataKind_Cluster {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataKind_Cluster();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MetadataKind_Cluster {
    return { $type: MetadataKind_Cluster.$type };
  },

  toJSON(_: MetadataKind_Cluster): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataKind_Cluster>, I>>(base?: I): MetadataKind_Cluster {
    return MetadataKind_Cluster.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataKind_Cluster>, I>>(_: I): MetadataKind_Cluster {
    const message = createBaseMetadataKind_Cluster();
    return message;
  },
};

messageTypeRegistry.set(MetadataKind_Cluster.$type, MetadataKind_Cluster);

function createBaseMetadataKind_Host(): MetadataKind_Host {
  return { $type: "envoy.type.metadata.v2.MetadataKind.Host" };
}

export const MetadataKind_Host: MessageFns<MetadataKind_Host, "envoy.type.metadata.v2.MetadataKind.Host"> = {
  $type: "envoy.type.metadata.v2.MetadataKind.Host" as const,

  encode(_: MetadataKind_Host, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MetadataKind_Host {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadataKind_Host();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MetadataKind_Host {
    return { $type: MetadataKind_Host.$type };
  },

  toJSON(_: MetadataKind_Host): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MetadataKind_Host>, I>>(base?: I): MetadataKind_Host {
    return MetadataKind_Host.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MetadataKind_Host>, I>>(_: I): MetadataKind_Host {
    const message = createBaseMetadataKind_Host();
    return message;
  },
};

messageTypeRegistry.set(MetadataKind_Host.$type, MetadataKind_Host);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
