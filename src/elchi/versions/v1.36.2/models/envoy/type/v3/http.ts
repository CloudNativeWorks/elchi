// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/v3/http.proto

/* eslint-disable */

export const protobufPackage = "envoy.type.v3";

export enum CodecClientType {
  HTTP1 = "HTTP1",
  HTTP2 = "HTTP2",
  /**
   * HTTP3 - [#not-implemented-hide:] QUIC implementation is not production ready yet. Use this enum with
   * caution to prevent accidental execution of QUIC code. I.e. `!= HTTP2` is no longer sufficient
   * to distinguish HTTP1 and HTTP2 traffic.
   */
  HTTP3 = "HTTP3",
}

export function codecClientTypeFromJSON(object: any): CodecClientType {
  switch (object) {
    case 0:
    case "HTTP1":
      return CodecClientType.HTTP1;
    case 1:
    case "HTTP2":
      return CodecClientType.HTTP2;
    case 2:
    case "HTTP3":
      return CodecClientType.HTTP3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CodecClientType");
  }
}

export function codecClientTypeToJSON(object: CodecClientType): string {
  switch (object) {
    case CodecClientType.HTTP1:
      return "HTTP1";
    case CodecClientType.HTTP2:
      return "HTTP2";
    case CodecClientType.HTTP3:
      return "HTTP3";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CodecClientType");
  }
}

export function codecClientTypeToNumber(object: CodecClientType): number {
  switch (object) {
    case CodecClientType.HTTP1:
      return 0;
    case CodecClientType.HTTP2:
      return 1;
    case CodecClientType.HTTP3:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CodecClientType");
  }
}
