// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/service/extension/v3/config_discovery.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { messageTypeRegistry } from "../../../../typeRegistry";
import {
  DeltaDiscoveryRequest,
  DeltaDiscoveryResponse,
  DiscoveryRequest,
  DiscoveryResponse,
} from "../../discovery/v3/discovery";

export const protobufPackage = "envoy.service.extension.v3";

/**
 * [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue
 * with importing services: https://github.com/google/protobuf/issues/4221 and
 * protoxform to upgrade the file.
 */
export interface EcdsDummy {
  $type: "envoy.service.extension.v3.EcdsDummy";
}

function createBaseEcdsDummy(): EcdsDummy {
  return { $type: "envoy.service.extension.v3.EcdsDummy" };
}

export const EcdsDummy: MessageFns<EcdsDummy, "envoy.service.extension.v3.EcdsDummy"> = {
  $type: "envoy.service.extension.v3.EcdsDummy" as const,

  encode(_: EcdsDummy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EcdsDummy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEcdsDummy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EcdsDummy {
    return { $type: EcdsDummy.$type };
  },

  toJSON(_: EcdsDummy): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EcdsDummy>, I>>(base?: I): EcdsDummy {
    return EcdsDummy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EcdsDummy>, I>>(_: I): EcdsDummy {
    const message = createBaseEcdsDummy();
    return message;
  },
};

messageTypeRegistry.set(EcdsDummy.$type, EcdsDummy);

/**
 * A service that supports dynamic configuration updates for a specific filter.
 * Currently, ECDS is supported for network filters, HTTP filters, UDP session filters, and listener filters.
 * Please check :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.
 *
 * The overall extension config discovery service works as follows:
 *
 * #. A filter (:ref:`Downstream Network <envoy_v3_api_field_config.listener.v3.Filter.config_discovery>`,
 *    :ref:`Upstream Network <envoy_v3_api_field_config.cluster.v3.Filter.config_discovery>`,
 *    :ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`,
 *    :ref:`UDP Session <envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.SessionFilter.config_discovery>`,
 *    or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
 *    contains a (:ref:`ExtensionConfigSource config discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`) configuration. This configuration
 *    includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
 *    from which the filter configuration will be fetched.
 * #. The client then registers for a resource using the filter name as the ``resource_name``.
 * #. The xDS server sends back the filter's configuration.
 * #. The client stores the configuration that will be used in the next instantiation of the filter chain,
 *    i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
 *    account in the following instantiation of the filter chain.
 *
 * .. note::
 *   Filters that are configured using ECDS are warmed. For more details see
 *   :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.
 *
 * Return extension configurations.
 */
export interface ExtensionConfigDiscoveryService {
  StreamExtensionConfigs(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse>;
  DeltaExtensionConfigs(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse>;
  FetchExtensionConfigs(request: DiscoveryRequest): Promise<DiscoveryResponse>;
}

export const ExtensionConfigDiscoveryServiceServiceName = "envoy.service.extension.v3.ExtensionConfigDiscoveryService";
export class ExtensionConfigDiscoveryServiceClientImpl implements ExtensionConfigDiscoveryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ExtensionConfigDiscoveryServiceServiceName;
    this.rpc = rpc;
    this.StreamExtensionConfigs = this.StreamExtensionConfigs.bind(this);
    this.DeltaExtensionConfigs = this.DeltaExtensionConfigs.bind(this);
    this.FetchExtensionConfigs = this.FetchExtensionConfigs.bind(this);
  }
  StreamExtensionConfigs(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse> {
    const data = request.pipe(map((request) => DiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamExtensionConfigs", data);
    return result.pipe(map((data) => DiscoveryResponse.decode(new BinaryReader(data))));
  }

  DeltaExtensionConfigs(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse> {
    const data = request.pipe(map((request) => DeltaDiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "DeltaExtensionConfigs", data);
    return result.pipe(map((data) => DeltaDiscoveryResponse.decode(new BinaryReader(data))));
  }

  FetchExtensionConfigs(request: DiscoveryRequest): Promise<DiscoveryResponse> {
    const data = DiscoveryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FetchExtensionConfigs", data);
    return promise.then((data) => DiscoveryResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
