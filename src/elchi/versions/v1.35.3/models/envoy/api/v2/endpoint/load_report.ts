// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/endpoint/load_report.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration";
import { Struct } from "../../../../google/protobuf/struct";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Address } from "../core/address";
import { Locality } from "../core/base";

export const protobufPackage = "envoy.api.v2.endpoint";

/**
 * These are stats Envoy reports to GLB every so often. Report frequency is
 * defined by
 * :ref:`LoadStatsResponse.load_reporting_interval<envoy_api_field_service.load_stats.v2.LoadStatsResponse.load_reporting_interval>`.
 * Stats per upstream region/zone and optionally per subzone.
 * [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
 * [#next-free-field: 9]
 */
export interface UpstreamLocalityStats {
  $type: "envoy.api.v2.endpoint.UpstreamLocalityStats";
  /**
   * Name of zone, region and optionally endpoint group these metrics were
   * collected from. Zone and region names could be empty if unknown.
   */
  locality?:
    | Locality
    | undefined;
  /**
   * The total number of requests successfully completed by the endpoints in the
   * locality.
   */
  total_successful_requests?:
    | number
    | undefined;
  /** The total number of unfinished requests */
  total_requests_in_progress?:
    | number
    | undefined;
  /**
   * The total number of requests that failed due to errors at the endpoint,
   * aggregated over all endpoints in the locality.
   */
  total_error_requests?:
    | number
    | undefined;
  /**
   * The total number of requests that were issued by this Envoy since
   * the last report. This information is aggregated over all the
   * upstream endpoints in the locality.
   */
  total_issued_requests?:
    | number
    | undefined;
  /** Stats for multi-dimensional load balancing. */
  load_metric_stats?:
    | EndpointLoadMetricStats[]
    | undefined;
  /**
   * Endpoint granularity stats information for this locality. This information
   * is populated if the Server requests it by setting
   * :ref:`LoadStatsResponse.report_endpoint_granularity<envoy_api_field_service.load_stats.v2.LoadStatsResponse.report_endpoint_granularity>`.
   */
  upstream_endpoint_stats?:
    | UpstreamEndpointStats[]
    | undefined;
  /**
   * [#not-implemented-hide:] The priority of the endpoint group these metrics
   * were collected from.
   */
  priority?: number | undefined;
}

/**
 * [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
 * [#next-free-field: 8]
 */
export interface UpstreamEndpointStats {
  $type: "envoy.api.v2.endpoint.UpstreamEndpointStats";
  /** Upstream host address. */
  address?:
    | Address
    | undefined;
  /**
   * Opaque and implementation dependent metadata of the
   * endpoint. Envoy will pass this directly to the management server.
   */
  metadata?:
    | { [key: string]: any }
    | undefined;
  /**
   * The total number of requests successfully completed by the endpoints in the
   * locality. These include non-5xx responses for HTTP, where errors
   * originate at the client and the endpoint responded successfully. For gRPC,
   * the grpc-status values are those not covered by total_error_requests below.
   */
  total_successful_requests?:
    | number
    | undefined;
  /** The total number of unfinished requests for this endpoint. */
  total_requests_in_progress?:
    | number
    | undefined;
  /**
   * The total number of requests that failed due to errors at the endpoint.
   * For HTTP these are responses with 5xx status codes and for gRPC the
   * grpc-status values:
   *
   *   - DeadlineExceeded
   *   - Unimplemented
   *   - Internal
   *   - Unavailable
   *   - Unknown
   *   - DataLoss
   */
  total_error_requests?:
    | number
    | undefined;
  /**
   * The total number of requests that were issued to this endpoint
   * since the last report. A single TCP connection, HTTP or gRPC
   * request or stream is counted as one request.
   */
  total_issued_requests?:
    | number
    | undefined;
  /** Stats for multi-dimensional load balancing. */
  load_metric_stats?: EndpointLoadMetricStats[] | undefined;
}

/** [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs. */
export interface EndpointLoadMetricStats {
  $type: "envoy.api.v2.endpoint.EndpointLoadMetricStats";
  /** Name of the metric; may be empty. */
  metric_name?:
    | string
    | undefined;
  /** Number of calls that finished and included this metric. */
  num_requests_finished_with_metric?:
    | number
    | undefined;
  /**
   * Sum of metric values across all calls that finished with this metric for
   * load_reporting_interval.
   */
  total_metric_value?: number | undefined;
}

/**
 * Per cluster load stats. Envoy reports these stats a management server in a
 * :ref:`LoadStatsRequest<envoy_api_msg_service.load_stats.v2.LoadStatsRequest>`
 * [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
 * Next ID: 7
 * [#next-free-field: 7]
 */
export interface ClusterStats {
  $type: "envoy.api.v2.endpoint.ClusterStats";
  /** The name of the cluster. */
  cluster_name?:
    | string
    | undefined;
  /**
   * The eds_cluster_config service_name of the cluster.
   * It's possible that two clusters send the same service_name to EDS,
   * in that case, the management server is supposed to do aggregation on the load reports.
   */
  cluster_service_name?:
    | string
    | undefined;
  /** Need at least one. */
  upstream_locality_stats?:
    | UpstreamLocalityStats[]
    | undefined;
  /**
   * Cluster-level stats such as total_successful_requests may be computed by
   * summing upstream_locality_stats. In addition, below there are additional
   * cluster-wide stats.
   *
   * The total number of dropped requests. This covers requests
   * deliberately dropped by the drop_overload policy and circuit breaking.
   */
  total_dropped_requests?:
    | number
    | undefined;
  /**
   * Information about deliberately dropped requests for each category specified
   * in the DropOverload policy.
   */
  dropped_requests?:
    | ClusterStats_DroppedRequests[]
    | undefined;
  /**
   * Period over which the actual load report occurred. This will be guaranteed to include every
   * request reported. Due to system load and delays between the *LoadStatsRequest* sent from Envoy
   * and the *LoadStatsResponse* message sent from the management server, this may be longer than
   * the requested load reporting interval in the *LoadStatsResponse*.
   */
  load_report_interval?: Duration | undefined;
}

export interface ClusterStats_DroppedRequests {
  $type: "envoy.api.v2.endpoint.ClusterStats.DroppedRequests";
  /** Identifier for the policy specifying the drop. */
  category?:
    | string
    | undefined;
  /** Total number of deliberately dropped requests for the category. */
  dropped_count?: number | undefined;
}

function createBaseUpstreamLocalityStats(): UpstreamLocalityStats {
  return { $type: "envoy.api.v2.endpoint.UpstreamLocalityStats" };
}

export const UpstreamLocalityStats: MessageFns<UpstreamLocalityStats, "envoy.api.v2.endpoint.UpstreamLocalityStats"> = {
  $type: "envoy.api.v2.endpoint.UpstreamLocalityStats" as const,

  encode(message: UpstreamLocalityStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locality !== undefined) {
      Locality.encode(message.locality, writer.uint32(10).fork()).join();
    }
    if (message.total_successful_requests !== undefined && message.total_successful_requests !== 0) {
      writer.uint32(16).uint64(message.total_successful_requests);
    }
    if (message.total_requests_in_progress !== undefined && message.total_requests_in_progress !== 0) {
      writer.uint32(24).uint64(message.total_requests_in_progress);
    }
    if (message.total_error_requests !== undefined && message.total_error_requests !== 0) {
      writer.uint32(32).uint64(message.total_error_requests);
    }
    if (message.total_issued_requests !== undefined && message.total_issued_requests !== 0) {
      writer.uint32(64).uint64(message.total_issued_requests);
    }
    if (message.load_metric_stats !== undefined && message.load_metric_stats.length !== 0) {
      for (const v of message.load_metric_stats) {
        EndpointLoadMetricStats.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    if (message.upstream_endpoint_stats !== undefined && message.upstream_endpoint_stats.length !== 0) {
      for (const v of message.upstream_endpoint_stats) {
        UpstreamEndpointStats.encode(v!, writer.uint32(58).fork()).join();
      }
    }
    if (message.priority !== undefined && message.priority !== 0) {
      writer.uint32(48).uint32(message.priority);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpstreamLocalityStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpstreamLocalityStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locality = Locality.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total_successful_requests = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total_requests_in_progress = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.total_error_requests = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.total_issued_requests = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.load_metric_stats === undefined) {
            message.load_metric_stats = [];
          }
          const el = EndpointLoadMetricStats.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.load_metric_stats!.push(el);
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          if (message.upstream_endpoint_stats === undefined) {
            message.upstream_endpoint_stats = [];
          }
          const el = UpstreamEndpointStats.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.upstream_endpoint_stats!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.priority = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpstreamLocalityStats {
    return {
      $type: UpstreamLocalityStats.$type,
      locality: isSet(object.locality) ? Locality.fromJSON(object.locality) : undefined,
      total_successful_requests: isSet(object.total_successful_requests)
        ? globalThis.Number(object.total_successful_requests)
        : undefined,
      total_requests_in_progress: isSet(object.total_requests_in_progress)
        ? globalThis.Number(object.total_requests_in_progress)
        : undefined,
      total_error_requests: isSet(object.total_error_requests)
        ? globalThis.Number(object.total_error_requests)
        : undefined,
      total_issued_requests: isSet(object.total_issued_requests)
        ? globalThis.Number(object.total_issued_requests)
        : undefined,
      load_metric_stats: globalThis.Array.isArray(object?.load_metric_stats)
        ? object.load_metric_stats.map((e: any) => EndpointLoadMetricStats.fromJSON(e))
        : undefined,
      upstream_endpoint_stats: globalThis.Array.isArray(object?.upstream_endpoint_stats)
        ? object.upstream_endpoint_stats.map((e: any) => UpstreamEndpointStats.fromJSON(e))
        : undefined,
      priority: isSet(object.priority) ? globalThis.Number(object.priority) : undefined,
    };
  },

  toJSON(message: UpstreamLocalityStats): unknown {
    const obj: any = {};
    if (message.locality !== undefined) {
      obj.locality = Locality.toJSON(message.locality);
    }
    if (message.total_successful_requests !== undefined) {
      obj.total_successful_requests = Math.round(message.total_successful_requests);
    }
    if (message.total_requests_in_progress !== undefined) {
      obj.total_requests_in_progress = Math.round(message.total_requests_in_progress);
    }
    if (message.total_error_requests !== undefined) {
      obj.total_error_requests = Math.round(message.total_error_requests);
    }
    if (message.total_issued_requests !== undefined) {
      obj.total_issued_requests = Math.round(message.total_issued_requests);
    }
    if (message.load_metric_stats?.length) {
      obj.load_metric_stats = message.load_metric_stats.map((e) => EndpointLoadMetricStats.toJSON(e));
    }
    if (message.upstream_endpoint_stats?.length) {
      obj.upstream_endpoint_stats = message.upstream_endpoint_stats.map((e) => UpstreamEndpointStats.toJSON(e));
    }
    if (message.priority !== undefined) {
      obj.priority = Math.round(message.priority);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpstreamLocalityStats>, I>>(base?: I): UpstreamLocalityStats {
    return UpstreamLocalityStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpstreamLocalityStats>, I>>(object: I): UpstreamLocalityStats {
    const message = createBaseUpstreamLocalityStats();
    message.locality = (object.locality !== undefined && object.locality !== null)
      ? Locality.fromPartial(object.locality)
      : undefined;
    message.total_successful_requests = object.total_successful_requests ?? undefined;
    message.total_requests_in_progress = object.total_requests_in_progress ?? undefined;
    message.total_error_requests = object.total_error_requests ?? undefined;
    message.total_issued_requests = object.total_issued_requests ?? undefined;
    message.load_metric_stats = object.load_metric_stats?.map((e) => EndpointLoadMetricStats.fromPartial(e)) ||
      undefined;
    message.upstream_endpoint_stats =
      object.upstream_endpoint_stats?.map((e) => UpstreamEndpointStats.fromPartial(e)) || undefined;
    message.priority = object.priority ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(UpstreamLocalityStats.$type, UpstreamLocalityStats);

function createBaseUpstreamEndpointStats(): UpstreamEndpointStats {
  return { $type: "envoy.api.v2.endpoint.UpstreamEndpointStats" };
}

export const UpstreamEndpointStats: MessageFns<UpstreamEndpointStats, "envoy.api.v2.endpoint.UpstreamEndpointStats"> = {
  $type: "envoy.api.v2.endpoint.UpstreamEndpointStats" as const,

  encode(message: UpstreamEndpointStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== undefined) {
      Address.encode(message.address, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      Struct.encode(Struct.wrap(message.metadata), writer.uint32(50).fork()).join();
    }
    if (message.total_successful_requests !== undefined && message.total_successful_requests !== 0) {
      writer.uint32(16).uint64(message.total_successful_requests);
    }
    if (message.total_requests_in_progress !== undefined && message.total_requests_in_progress !== 0) {
      writer.uint32(24).uint64(message.total_requests_in_progress);
    }
    if (message.total_error_requests !== undefined && message.total_error_requests !== 0) {
      writer.uint32(32).uint64(message.total_error_requests);
    }
    if (message.total_issued_requests !== undefined && message.total_issued_requests !== 0) {
      writer.uint32(56).uint64(message.total_issued_requests);
    }
    if (message.load_metric_stats !== undefined && message.load_metric_stats.length !== 0) {
      for (const v of message.load_metric_stats) {
        EndpointLoadMetricStats.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpstreamEndpointStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpstreamEndpointStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = Address.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total_successful_requests = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total_requests_in_progress = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.total_error_requests = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.total_issued_requests = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.load_metric_stats === undefined) {
            message.load_metric_stats = [];
          }
          const el = EndpointLoadMetricStats.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.load_metric_stats!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpstreamEndpointStats {
    return {
      $type: UpstreamEndpointStats.$type,
      address: isSet(object.address) ? Address.fromJSON(object.address) : undefined,
      metadata: isObject(object.metadata) ? object.metadata : undefined,
      total_successful_requests: isSet(object.total_successful_requests)
        ? globalThis.Number(object.total_successful_requests)
        : undefined,
      total_requests_in_progress: isSet(object.total_requests_in_progress)
        ? globalThis.Number(object.total_requests_in_progress)
        : undefined,
      total_error_requests: isSet(object.total_error_requests)
        ? globalThis.Number(object.total_error_requests)
        : undefined,
      total_issued_requests: isSet(object.total_issued_requests)
        ? globalThis.Number(object.total_issued_requests)
        : undefined,
      load_metric_stats: globalThis.Array.isArray(object?.load_metric_stats)
        ? object.load_metric_stats.map((e: any) => EndpointLoadMetricStats.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: UpstreamEndpointStats): unknown {
    const obj: any = {};
    if (message.address !== undefined) {
      obj.address = Address.toJSON(message.address);
    }
    if (message.metadata !== undefined) {
      obj.metadata = message.metadata;
    }
    if (message.total_successful_requests !== undefined) {
      obj.total_successful_requests = Math.round(message.total_successful_requests);
    }
    if (message.total_requests_in_progress !== undefined) {
      obj.total_requests_in_progress = Math.round(message.total_requests_in_progress);
    }
    if (message.total_error_requests !== undefined) {
      obj.total_error_requests = Math.round(message.total_error_requests);
    }
    if (message.total_issued_requests !== undefined) {
      obj.total_issued_requests = Math.round(message.total_issued_requests);
    }
    if (message.load_metric_stats?.length) {
      obj.load_metric_stats = message.load_metric_stats.map((e) => EndpointLoadMetricStats.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpstreamEndpointStats>, I>>(base?: I): UpstreamEndpointStats {
    return UpstreamEndpointStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpstreamEndpointStats>, I>>(object: I): UpstreamEndpointStats {
    const message = createBaseUpstreamEndpointStats();
    message.address = (object.address !== undefined && object.address !== null)
      ? Address.fromPartial(object.address)
      : undefined;
    message.metadata = object.metadata ?? undefined;
    message.total_successful_requests = object.total_successful_requests ?? undefined;
    message.total_requests_in_progress = object.total_requests_in_progress ?? undefined;
    message.total_error_requests = object.total_error_requests ?? undefined;
    message.total_issued_requests = object.total_issued_requests ?? undefined;
    message.load_metric_stats = object.load_metric_stats?.map((e) => EndpointLoadMetricStats.fromPartial(e)) ||
      undefined;
    return message;
  },
};

messageTypeRegistry.set(UpstreamEndpointStats.$type, UpstreamEndpointStats);

function createBaseEndpointLoadMetricStats(): EndpointLoadMetricStats {
  return { $type: "envoy.api.v2.endpoint.EndpointLoadMetricStats" };
}

export const EndpointLoadMetricStats: MessageFns<
  EndpointLoadMetricStats,
  "envoy.api.v2.endpoint.EndpointLoadMetricStats"
> = {
  $type: "envoy.api.v2.endpoint.EndpointLoadMetricStats" as const,

  encode(message: EndpointLoadMetricStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metric_name !== undefined && message.metric_name !== "") {
      writer.uint32(10).string(message.metric_name);
    }
    if (message.num_requests_finished_with_metric !== undefined && message.num_requests_finished_with_metric !== 0) {
      writer.uint32(16).uint64(message.num_requests_finished_with_metric);
    }
    if (message.total_metric_value !== undefined && message.total_metric_value !== 0) {
      writer.uint32(25).double(message.total_metric_value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EndpointLoadMetricStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpointLoadMetricStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metric_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.num_requests_finished_with_metric = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.total_metric_value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EndpointLoadMetricStats {
    return {
      $type: EndpointLoadMetricStats.$type,
      metric_name: isSet(object.metric_name) ? globalThis.String(object.metric_name) : undefined,
      num_requests_finished_with_metric: isSet(object.num_requests_finished_with_metric)
        ? globalThis.Number(object.num_requests_finished_with_metric)
        : undefined,
      total_metric_value: isSet(object.total_metric_value) ? globalThis.Number(object.total_metric_value) : undefined,
    };
  },

  toJSON(message: EndpointLoadMetricStats): unknown {
    const obj: any = {};
    if (message.metric_name !== undefined) {
      obj.metric_name = message.metric_name;
    }
    if (message.num_requests_finished_with_metric !== undefined) {
      obj.num_requests_finished_with_metric = Math.round(message.num_requests_finished_with_metric);
    }
    if (message.total_metric_value !== undefined) {
      obj.total_metric_value = message.total_metric_value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EndpointLoadMetricStats>, I>>(base?: I): EndpointLoadMetricStats {
    return EndpointLoadMetricStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EndpointLoadMetricStats>, I>>(object: I): EndpointLoadMetricStats {
    const message = createBaseEndpointLoadMetricStats();
    message.metric_name = object.metric_name ?? undefined;
    message.num_requests_finished_with_metric = object.num_requests_finished_with_metric ?? undefined;
    message.total_metric_value = object.total_metric_value ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(EndpointLoadMetricStats.$type, EndpointLoadMetricStats);

function createBaseClusterStats(): ClusterStats {
  return { $type: "envoy.api.v2.endpoint.ClusterStats" };
}

export const ClusterStats: MessageFns<ClusterStats, "envoy.api.v2.endpoint.ClusterStats"> = {
  $type: "envoy.api.v2.endpoint.ClusterStats" as const,

  encode(message: ClusterStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster_name !== undefined && message.cluster_name !== "") {
      writer.uint32(10).string(message.cluster_name);
    }
    if (message.cluster_service_name !== undefined && message.cluster_service_name !== "") {
      writer.uint32(50).string(message.cluster_service_name);
    }
    if (message.upstream_locality_stats !== undefined && message.upstream_locality_stats.length !== 0) {
      for (const v of message.upstream_locality_stats) {
        UpstreamLocalityStats.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.total_dropped_requests !== undefined && message.total_dropped_requests !== 0) {
      writer.uint32(24).uint64(message.total_dropped_requests);
    }
    if (message.dropped_requests !== undefined && message.dropped_requests.length !== 0) {
      for (const v of message.dropped_requests) {
        ClusterStats_DroppedRequests.encode(v!, writer.uint32(42).fork()).join();
      }
    }
    if (message.load_report_interval !== undefined) {
      Duration.encode(message.load_report_interval, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster_name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.cluster_service_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.upstream_locality_stats === undefined) {
            message.upstream_locality_stats = [];
          }
          const el = UpstreamLocalityStats.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.upstream_locality_stats!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.total_dropped_requests = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.dropped_requests === undefined) {
            message.dropped_requests = [];
          }
          const el = ClusterStats_DroppedRequests.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.dropped_requests!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.load_report_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterStats {
    return {
      $type: ClusterStats.$type,
      cluster_name: isSet(object.cluster_name) ? globalThis.String(object.cluster_name) : undefined,
      cluster_service_name: isSet(object.cluster_service_name)
        ? globalThis.String(object.cluster_service_name)
        : undefined,
      upstream_locality_stats: globalThis.Array.isArray(object?.upstream_locality_stats)
        ? object.upstream_locality_stats.map((e: any) => UpstreamLocalityStats.fromJSON(e))
        : undefined,
      total_dropped_requests: isSet(object.total_dropped_requests)
        ? globalThis.Number(object.total_dropped_requests)
        : undefined,
      dropped_requests: globalThis.Array.isArray(object?.dropped_requests)
        ? object.dropped_requests.map((e: any) => ClusterStats_DroppedRequests.fromJSON(e))
        : undefined,
      load_report_interval: isSet(object.load_report_interval)
        ? Duration.fromJSON(object.load_report_interval)
        : undefined,
    };
  },

  toJSON(message: ClusterStats): unknown {
    const obj: any = {};
    if (message.cluster_name !== undefined) {
      obj.cluster_name = message.cluster_name;
    }
    if (message.cluster_service_name !== undefined) {
      obj.cluster_service_name = message.cluster_service_name;
    }
    if (message.upstream_locality_stats?.length) {
      obj.upstream_locality_stats = message.upstream_locality_stats.map((e) => UpstreamLocalityStats.toJSON(e));
    }
    if (message.total_dropped_requests !== undefined) {
      obj.total_dropped_requests = Math.round(message.total_dropped_requests);
    }
    if (message.dropped_requests?.length) {
      obj.dropped_requests = message.dropped_requests.map((e) => ClusterStats_DroppedRequests.toJSON(e));
    }
    if (message.load_report_interval !== undefined) {
      obj.load_report_interval = Duration.toJSON(message.load_report_interval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterStats>, I>>(base?: I): ClusterStats {
    return ClusterStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterStats>, I>>(object: I): ClusterStats {
    const message = createBaseClusterStats();
    message.cluster_name = object.cluster_name ?? undefined;
    message.cluster_service_name = object.cluster_service_name ?? undefined;
    message.upstream_locality_stats =
      object.upstream_locality_stats?.map((e) => UpstreamLocalityStats.fromPartial(e)) || undefined;
    message.total_dropped_requests = object.total_dropped_requests ?? undefined;
    message.dropped_requests = object.dropped_requests?.map((e) => ClusterStats_DroppedRequests.fromPartial(e)) ||
      undefined;
    message.load_report_interval = (object.load_report_interval !== undefined && object.load_report_interval !== null)
      ? Duration.fromPartial(object.load_report_interval)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(ClusterStats.$type, ClusterStats);

function createBaseClusterStats_DroppedRequests(): ClusterStats_DroppedRequests {
  return { $type: "envoy.api.v2.endpoint.ClusterStats.DroppedRequests" };
}

export const ClusterStats_DroppedRequests: MessageFns<
  ClusterStats_DroppedRequests,
  "envoy.api.v2.endpoint.ClusterStats.DroppedRequests"
> = {
  $type: "envoy.api.v2.endpoint.ClusterStats.DroppedRequests" as const,

  encode(message: ClusterStats_DroppedRequests, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== undefined && message.category !== "") {
      writer.uint32(10).string(message.category);
    }
    if (message.dropped_count !== undefined && message.dropped_count !== 0) {
      writer.uint32(16).uint64(message.dropped_count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterStats_DroppedRequests {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterStats_DroppedRequests();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.dropped_count = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterStats_DroppedRequests {
    return {
      $type: ClusterStats_DroppedRequests.$type,
      category: isSet(object.category) ? globalThis.String(object.category) : undefined,
      dropped_count: isSet(object.dropped_count) ? globalThis.Number(object.dropped_count) : undefined,
    };
  },

  toJSON(message: ClusterStats_DroppedRequests): unknown {
    const obj: any = {};
    if (message.category !== undefined) {
      obj.category = message.category;
    }
    if (message.dropped_count !== undefined) {
      obj.dropped_count = Math.round(message.dropped_count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterStats_DroppedRequests>, I>>(base?: I): ClusterStats_DroppedRequests {
    return ClusterStats_DroppedRequests.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterStats_DroppedRequests>, I>>(object: I): ClusterStats_DroppedRequests {
    const message = createBaseClusterStats_DroppedRequests();
    message.category = object.category ?? undefined;
    message.dropped_count = object.dropped_count ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(ClusterStats_DroppedRequests.$type, ClusterStats_DroppedRequests);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
