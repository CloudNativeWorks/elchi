// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/api/v2/srds.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { messageTypeRegistry } from "../../../typeRegistry";
import { DeltaDiscoveryRequest, DeltaDiscoveryResponse, DiscoveryRequest, DiscoveryResponse } from "./discovery";

export const protobufPackage = "envoy.api.v2";

/**
 * [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
 * services: https://github.com/google/protobuf/issues/4221 and protoxform to upgrade the file.
 */
export interface SrdsDummy {
  $type: "envoy.api.v2.SrdsDummy";
}

function createBaseSrdsDummy(): SrdsDummy {
  return { $type: "envoy.api.v2.SrdsDummy" };
}

export const SrdsDummy: MessageFns<SrdsDummy, "envoy.api.v2.SrdsDummy"> = {
  $type: "envoy.api.v2.SrdsDummy" as const,

  encode(_: SrdsDummy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SrdsDummy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSrdsDummy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SrdsDummy {
    return { $type: SrdsDummy.$type };
  },

  toJSON(_: SrdsDummy): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SrdsDummy>, I>>(base?: I): SrdsDummy {
    return SrdsDummy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SrdsDummy>, I>>(_: I): SrdsDummy {
    const message = createBaseSrdsDummy();
    return message;
  },
};

messageTypeRegistry.set(SrdsDummy.$type, SrdsDummy);

/**
 * The Scoped Routes Discovery Service (SRDS) API distributes
 * :ref:`ScopedRouteConfiguration<envoy_api_msg.ScopedRouteConfiguration>`
 * resources. Each ScopedRouteConfiguration resource represents a "routing
 * scope" containing a mapping that allows the HTTP connection manager to
 * dynamically assign a routing table (specified via a
 * :ref:`RouteConfiguration<envoy_api_msg_RouteConfiguration>` message) to each
 * HTTP request.
 */
export interface ScopedRoutesDiscoveryService {
  StreamScopedRoutes(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse>;
  DeltaScopedRoutes(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse>;
  FetchScopedRoutes(request: DiscoveryRequest): Promise<DiscoveryResponse>;
}

export const ScopedRoutesDiscoveryServiceServiceName = "envoy.api.v2.ScopedRoutesDiscoveryService";
export class ScopedRoutesDiscoveryServiceClientImpl implements ScopedRoutesDiscoveryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ScopedRoutesDiscoveryServiceServiceName;
    this.rpc = rpc;
    this.StreamScopedRoutes = this.StreamScopedRoutes.bind(this);
    this.DeltaScopedRoutes = this.DeltaScopedRoutes.bind(this);
    this.FetchScopedRoutes = this.FetchScopedRoutes.bind(this);
  }
  StreamScopedRoutes(request: Observable<DiscoveryRequest>): Observable<DiscoveryResponse> {
    const data = request.pipe(map((request) => DiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "StreamScopedRoutes", data);
    return result.pipe(map((data) => DiscoveryResponse.decode(new BinaryReader(data))));
  }

  DeltaScopedRoutes(request: Observable<DeltaDiscoveryRequest>): Observable<DeltaDiscoveryResponse> {
    const data = request.pipe(map((request) => DeltaDiscoveryRequest.encode(request).finish()));
    const result = this.rpc.bidirectionalStreamingRequest(this.service, "DeltaScopedRoutes", data);
    return result.pipe(map((data) => DeltaDiscoveryResponse.decode(new BinaryReader(data))));
  }

  FetchScopedRoutes(request: DiscoveryRequest): Promise<DiscoveryResponse> {
    const data = DiscoveryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FetchScopedRoutes", data);
    return promise.then((data) => DiscoveryResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
