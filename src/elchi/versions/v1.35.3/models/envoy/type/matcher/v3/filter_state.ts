// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/v3/filter_state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { AddressMatcher } from "./address";
import { StringMatcher } from "./string";

export const protobufPackage = "envoy.type.matcher.v3";

/** FilterStateMatcher provides a general interface for matching the filter state objects. */
export interface FilterStateMatcher {
  $type: "envoy.type.matcher.v3.FilterStateMatcher";
  /** The filter state key to retrieve the object. */
  key?: string | undefined;
  matcher?:
    | //
    /** Matches the filter state object as a string value. */
    { $case: "string_match"; string_match: StringMatcher }
    | //
    /** Matches the filter state object as a ip Instance. */
    { $case: "address_match"; address_match: AddressMatcher }
    | undefined;
}

function createBaseFilterStateMatcher(): FilterStateMatcher {
  return { $type: "envoy.type.matcher.v3.FilterStateMatcher", matcher: undefined };
}

export const FilterStateMatcher: MessageFns<FilterStateMatcher, "envoy.type.matcher.v3.FilterStateMatcher"> = {
  $type: "envoy.type.matcher.v3.FilterStateMatcher" as const,

  encode(message: FilterStateMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    switch (message.matcher?.$case) {
      case "string_match":
        StringMatcher.encode(message.matcher.string_match, writer.uint32(18).fork()).join();
        break;
      case "address_match":
        AddressMatcher.encode(message.matcher.address_match, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilterStateMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterStateMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.matcher = { $case: "string_match", string_match: StringMatcher.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.matcher = { $case: "address_match", address_match: AddressMatcher.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterStateMatcher {
    return {
      $type: FilterStateMatcher.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      matcher: isSet(object.string_match)
        ? { $case: "string_match", string_match: StringMatcher.fromJSON(object.string_match) }
        : isSet(object.address_match)
        ? { $case: "address_match", address_match: AddressMatcher.fromJSON(object.address_match) }
        : undefined,
    };
  },

  toJSON(message: FilterStateMatcher): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.matcher?.$case === "string_match") {
      obj.string_match = StringMatcher.toJSON(message.matcher.string_match);
    }
    if (message.matcher?.$case === "address_match") {
      obj.address_match = AddressMatcher.toJSON(message.matcher.address_match);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilterStateMatcher>, I>>(base?: I): FilterStateMatcher {
    return FilterStateMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilterStateMatcher>, I>>(object: I): FilterStateMatcher {
    const message = createBaseFilterStateMatcher();
    message.key = object.key ?? undefined;
    if (
      object.matcher?.$case === "string_match" &&
      object.matcher?.string_match !== undefined &&
      object.matcher?.string_match !== null
    ) {
      message.matcher = { $case: "string_match", string_match: StringMatcher.fromPartial(object.matcher.string_match) };
    }
    if (
      object.matcher?.$case === "address_match" &&
      object.matcher?.address_match !== undefined &&
      object.matcher?.address_match !== null
    ) {
      message.matcher = {
        $case: "address_match",
        address_match: AddressMatcher.fromPartial(object.matcher.address_match),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(FilterStateMatcher.$type, FilterStateMatcher);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
