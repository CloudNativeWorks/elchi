// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/type/matcher/struct.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";
import { ValueMatcher } from "./value";

export const protobufPackage = "envoy.type.matcher";

/**
 * StructMatcher provides a general interface to check if a given value is matched in
 * google.protobuf.Struct. It uses `path` to retrieve the value
 * from the struct and then check if it's matched to the specified value.
 *
 * For example, for the following Struct:
 *
 * .. code-block:: yaml
 *
 *        fields:
 *          a:
 *            struct_value:
 *              fields:
 *                b:
 *                  struct_value:
 *                    fields:
 *                      c:
 *                        string_value: pro
 *                t:
 *                  list_value:
 *                    values:
 *                      - string_value: m
 *                      - string_value: n
 *
 * The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro"
 * from the Metadata which is matched to the specified prefix match.
 *
 * .. code-block:: yaml
 *
 *    path:
 *    - key: a
 *    - key: b
 *    - key: c
 *    value:
 *      string_match:
 *        prefix: pr
 *
 * The following StructMatcher is matched as the code will match one of the string values in the
 * list at the path [a, t].
 *
 * .. code-block:: yaml
 *
 *    path:
 *    - key: a
 *    - key: t
 *    value:
 *      list_match:
 *        one_of:
 *          string_match:
 *            exact: m
 *
 * An example use of StructMatcher is to match metadata in envoy.v*.core.Node.
 */
export interface StructMatcher {
  $type: "envoy.type.matcher.StructMatcher";
  /** The path to retrieve the Value from the Struct. */
  path?:
    | StructMatcher_PathSegment[]
    | undefined;
  /** The StructMatcher is matched if the value retrieved by path is matched to this value. */
  value?: ValueMatcher | undefined;
}

/** Specifies the segment in a path to retrieve value from Struct. */
export interface StructMatcher_PathSegment {
  $type: "envoy.type.matcher.StructMatcher.PathSegment";
  segment?:
    | //
    /** If specified, use the key to retrieve the value in a Struct. */
    { $case: "key"; key: string }
    | undefined;
}

function createBaseStructMatcher(): StructMatcher {
  return { $type: "envoy.type.matcher.StructMatcher" };
}

export const StructMatcher: MessageFns<StructMatcher, "envoy.type.matcher.StructMatcher"> = {
  $type: "envoy.type.matcher.StructMatcher" as const,

  encode(message: StructMatcher, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== undefined && message.path.length !== 0) {
      for (const v of message.path) {
        StructMatcher_PathSegment.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.value !== undefined) {
      ValueMatcher.encode(message.value, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructMatcher {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructMatcher();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.path === undefined) {
            message.path = [];
          }
          const el = StructMatcher_PathSegment.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.path!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = ValueMatcher.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructMatcher {
    return {
      $type: StructMatcher.$type,
      path: globalThis.Array.isArray(object?.path)
        ? object.path.map((e: any) => StructMatcher_PathSegment.fromJSON(e))
        : undefined,
      value: isSet(object.value) ? ValueMatcher.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: StructMatcher): unknown {
    const obj: any = {};
    if (message.path?.length) {
      obj.path = message.path.map((e) => StructMatcher_PathSegment.toJSON(e));
    }
    if (message.value !== undefined) {
      obj.value = ValueMatcher.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StructMatcher>, I>>(base?: I): StructMatcher {
    return StructMatcher.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StructMatcher>, I>>(object: I): StructMatcher {
    const message = createBaseStructMatcher();
    message.path = object.path?.map((e) => StructMatcher_PathSegment.fromPartial(e)) || undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? ValueMatcher.fromPartial(object.value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(StructMatcher.$type, StructMatcher);

function createBaseStructMatcher_PathSegment(): StructMatcher_PathSegment {
  return { $type: "envoy.type.matcher.StructMatcher.PathSegment", segment: undefined };
}

export const StructMatcher_PathSegment: MessageFns<
  StructMatcher_PathSegment,
  "envoy.type.matcher.StructMatcher.PathSegment"
> = {
  $type: "envoy.type.matcher.StructMatcher.PathSegment" as const,

  encode(message: StructMatcher_PathSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.segment?.$case) {
      case "key":
        writer.uint32(10).string(message.segment.key);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StructMatcher_PathSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStructMatcher_PathSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.segment = { $case: "key", key: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StructMatcher_PathSegment {
    return {
      $type: StructMatcher_PathSegment.$type,
      segment: isSet(object.key) ? { $case: "key", key: globalThis.String(object.key) } : undefined,
    };
  },

  toJSON(message: StructMatcher_PathSegment): unknown {
    const obj: any = {};
    if (message.segment?.$case === "key") {
      obj.key = message.segment.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StructMatcher_PathSegment>, I>>(base?: I): StructMatcher_PathSegment {
    return StructMatcher_PathSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StructMatcher_PathSegment>, I>>(object: I): StructMatcher_PathSegment {
    const message = createBaseStructMatcher_PathSegment();
    if (object.segment?.$case === "key" && object.segment?.key !== undefined && object.segment?.key !== null) {
      message.segment = { $case: "key", key: object.segment.key };
    }
    return message;
  },
};

messageTypeRegistry.set(StructMatcher_PathSegment.$type, StructMatcher_PathSegment);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
