// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/admin/v2alpha/certs.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.admin.v2alpha";

/**
 * Proto representation of certificate details. Admin endpoint uses this wrapper for `/certs` to
 * display certificate information. See :ref:`/certs <operations_admin_interface_certs>` for more
 * information.
 */
export interface Certificates {
  $type: "envoy.admin.v2alpha.Certificates";
  /** List of certificates known to an Envoy. */
  certificates?: Certificate[] | undefined;
}

export interface Certificate {
  $type: "envoy.admin.v2alpha.Certificate";
  /** Details of CA certificate. */
  ca_cert?:
    | CertificateDetails[]
    | undefined;
  /** Details of Certificate Chain */
  cert_chain?: CertificateDetails[] | undefined;
}

/** [#next-free-field: 7] */
export interface CertificateDetails {
  $type: "envoy.admin.v2alpha.CertificateDetails";
  /** Path of the certificate. */
  path?:
    | string
    | undefined;
  /** Certificate Serial Number. */
  serial_number?:
    | string
    | undefined;
  /** List of Subject Alternate names. */
  subject_alt_names?:
    | SubjectAlternateName[]
    | undefined;
  /** Minimum of days until expiration of certificate and it's chain. */
  days_until_expiration?:
    | number
    | undefined;
  /** Indicates the time from which the certificate is valid. */
  valid_from?:
    | Date
    | undefined;
  /** Indicates the time at which the certificate expires. */
  expiration_time?: Date | undefined;
}

export interface SubjectAlternateName {
  $type: "envoy.admin.v2alpha.SubjectAlternateName";
  /** Subject Alternate Name. */
  name?:
    | //
    { $case: "dns"; dns: string }
    | //
    { $case: "uri"; uri: string }
    | //
    { $case: "ip_address"; ip_address: string }
    | undefined;
}

function createBaseCertificates(): Certificates {
  return { $type: "envoy.admin.v2alpha.Certificates" };
}

export const Certificates: MessageFns<Certificates, "envoy.admin.v2alpha.Certificates"> = {
  $type: "envoy.admin.v2alpha.Certificates" as const,

  encode(message: Certificates, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.certificates !== undefined && message.certificates.length !== 0) {
      for (const v of message.certificates) {
        Certificate.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Certificates {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.certificates === undefined) {
            message.certificates = [];
          }
          const el = Certificate.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.certificates!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Certificates {
    return {
      $type: Certificates.$type,
      certificates: globalThis.Array.isArray(object?.certificates)
        ? object.certificates.map((e: any) => Certificate.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Certificates): unknown {
    const obj: any = {};
    if (message.certificates?.length) {
      obj.certificates = message.certificates.map((e) => Certificate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Certificates>, I>>(base?: I): Certificates {
    return Certificates.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Certificates>, I>>(object: I): Certificates {
    const message = createBaseCertificates();
    message.certificates = object.certificates?.map((e) => Certificate.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Certificates.$type, Certificates);

function createBaseCertificate(): Certificate {
  return { $type: "envoy.admin.v2alpha.Certificate" };
}

export const Certificate: MessageFns<Certificate, "envoy.admin.v2alpha.Certificate"> = {
  $type: "envoy.admin.v2alpha.Certificate" as const,

  encode(message: Certificate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ca_cert !== undefined && message.ca_cert.length !== 0) {
      for (const v of message.ca_cert) {
        CertificateDetails.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.cert_chain !== undefined && message.cert_chain.length !== 0) {
      for (const v of message.cert_chain) {
        CertificateDetails.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Certificate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.ca_cert === undefined) {
            message.ca_cert = [];
          }
          const el = CertificateDetails.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.ca_cert!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.cert_chain === undefined) {
            message.cert_chain = [];
          }
          const el = CertificateDetails.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.cert_chain!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Certificate {
    return {
      $type: Certificate.$type,
      ca_cert: globalThis.Array.isArray(object?.ca_cert)
        ? object.ca_cert.map((e: any) => CertificateDetails.fromJSON(e))
        : undefined,
      cert_chain: globalThis.Array.isArray(object?.cert_chain)
        ? object.cert_chain.map((e: any) => CertificateDetails.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Certificate): unknown {
    const obj: any = {};
    if (message.ca_cert?.length) {
      obj.ca_cert = message.ca_cert.map((e) => CertificateDetails.toJSON(e));
    }
    if (message.cert_chain?.length) {
      obj.cert_chain = message.cert_chain.map((e) => CertificateDetails.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Certificate>, I>>(base?: I): Certificate {
    return Certificate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Certificate>, I>>(object: I): Certificate {
    const message = createBaseCertificate();
    message.ca_cert = object.ca_cert?.map((e) => CertificateDetails.fromPartial(e)) || undefined;
    message.cert_chain = object.cert_chain?.map((e) => CertificateDetails.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Certificate.$type, Certificate);

function createBaseCertificateDetails(): CertificateDetails {
  return { $type: "envoy.admin.v2alpha.CertificateDetails" };
}

export const CertificateDetails: MessageFns<CertificateDetails, "envoy.admin.v2alpha.CertificateDetails"> = {
  $type: "envoy.admin.v2alpha.CertificateDetails" as const,

  encode(message: CertificateDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== undefined && message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.serial_number !== undefined && message.serial_number !== "") {
      writer.uint32(18).string(message.serial_number);
    }
    if (message.subject_alt_names !== undefined && message.subject_alt_names.length !== 0) {
      for (const v of message.subject_alt_names) {
        SubjectAlternateName.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.days_until_expiration !== undefined && message.days_until_expiration !== 0) {
      writer.uint32(32).uint64(message.days_until_expiration);
    }
    if (message.valid_from !== undefined) {
      Timestamp.encode(toTimestamp(message.valid_from), writer.uint32(42).fork()).join();
    }
    if (message.expiration_time !== undefined) {
      Timestamp.encode(toTimestamp(message.expiration_time), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CertificateDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCertificateDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serial_number = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.subject_alt_names === undefined) {
            message.subject_alt_names = [];
          }
          const el = SubjectAlternateName.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.subject_alt_names!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.days_until_expiration = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.valid_from = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expiration_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CertificateDetails {
    return {
      $type: CertificateDetails.$type,
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
      serial_number: isSet(object.serial_number) ? globalThis.String(object.serial_number) : undefined,
      subject_alt_names: globalThis.Array.isArray(object?.subject_alt_names)
        ? object.subject_alt_names.map((e: any) => SubjectAlternateName.fromJSON(e))
        : undefined,
      days_until_expiration: isSet(object.days_until_expiration)
        ? globalThis.Number(object.days_until_expiration)
        : undefined,
      valid_from: isSet(object.valid_from) ? fromJsonTimestamp(object.valid_from) : undefined,
      expiration_time: isSet(object.expiration_time) ? fromJsonTimestamp(object.expiration_time) : undefined,
    };
  },

  toJSON(message: CertificateDetails): unknown {
    const obj: any = {};
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.serial_number !== undefined) {
      obj.serial_number = message.serial_number;
    }
    if (message.subject_alt_names?.length) {
      obj.subject_alt_names = message.subject_alt_names.map((e) => SubjectAlternateName.toJSON(e));
    }
    if (message.days_until_expiration !== undefined) {
      obj.days_until_expiration = Math.round(message.days_until_expiration);
    }
    if (message.valid_from !== undefined) {
      obj.valid_from = message.valid_from.toISOString();
    }
    if (message.expiration_time !== undefined) {
      obj.expiration_time = message.expiration_time.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CertificateDetails>, I>>(base?: I): CertificateDetails {
    return CertificateDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CertificateDetails>, I>>(object: I): CertificateDetails {
    const message = createBaseCertificateDetails();
    message.path = object.path ?? undefined;
    message.serial_number = object.serial_number ?? undefined;
    message.subject_alt_names = object.subject_alt_names?.map((e) => SubjectAlternateName.fromPartial(e)) || undefined;
    message.days_until_expiration = object.days_until_expiration ?? undefined;
    message.valid_from = object.valid_from ?? undefined;
    message.expiration_time = object.expiration_time ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CertificateDetails.$type, CertificateDetails);

function createBaseSubjectAlternateName(): SubjectAlternateName {
  return { $type: "envoy.admin.v2alpha.SubjectAlternateName", name: undefined };
}

export const SubjectAlternateName: MessageFns<SubjectAlternateName, "envoy.admin.v2alpha.SubjectAlternateName"> = {
  $type: "envoy.admin.v2alpha.SubjectAlternateName" as const,

  encode(message: SubjectAlternateName, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.name?.$case) {
      case "dns":
        writer.uint32(10).string(message.name.dns);
        break;
      case "uri":
        writer.uint32(18).string(message.name.uri);
        break;
      case "ip_address":
        writer.uint32(26).string(message.name.ip_address);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubjectAlternateName {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubjectAlternateName();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = { $case: "dns", dns: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = { $case: "uri", uri: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = { $case: "ip_address", ip_address: reader.string() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubjectAlternateName {
    return {
      $type: SubjectAlternateName.$type,
      name: isSet(object.dns)
        ? { $case: "dns", dns: globalThis.String(object.dns) }
        : isSet(object.uri)
        ? { $case: "uri", uri: globalThis.String(object.uri) }
        : isSet(object.ip_address)
        ? { $case: "ip_address", ip_address: globalThis.String(object.ip_address) }
        : undefined,
    };
  },

  toJSON(message: SubjectAlternateName): unknown {
    const obj: any = {};
    if (message.name?.$case === "dns") {
      obj.dns = message.name.dns;
    }
    if (message.name?.$case === "uri") {
      obj.uri = message.name.uri;
    }
    if (message.name?.$case === "ip_address") {
      obj.ip_address = message.name.ip_address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubjectAlternateName>, I>>(base?: I): SubjectAlternateName {
    return SubjectAlternateName.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubjectAlternateName>, I>>(object: I): SubjectAlternateName {
    const message = createBaseSubjectAlternateName();
    if (object.name?.$case === "dns" && object.name?.dns !== undefined && object.name?.dns !== null) {
      message.name = { $case: "dns", dns: object.name.dns };
    }
    if (object.name?.$case === "uri" && object.name?.uri !== undefined && object.name?.uri !== null) {
      message.name = { $case: "uri", uri: object.name.uri };
    }
    if (
      object.name?.$case === "ip_address" && object.name?.ip_address !== undefined && object.name?.ip_address !== null
    ) {
      message.name = { $case: "ip_address", ip_address: object.name.ip_address };
    }
    return message;
  },
};

messageTypeRegistry.set(SubjectAlternateName.$type, SubjectAlternateName);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
