// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/admin/v3/init_dump.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../typeRegistry";

export const protobufPackage = "envoy.admin.v3";

/**
 * Dumps of unready targets of envoy init managers. Envoy's admin fills this message with init managers,
 * which provides the information of their unready targets.
 * The :ref:`/init_dump <operations_admin_interface_init_dump>` will dump all unready targets information.
 */
export interface UnreadyTargetsDumps {
  $type: "envoy.admin.v3.UnreadyTargetsDumps";
  /**
   * You can choose specific component to dump unready targets with mask query parameter.
   * See :ref:`/init_dump?mask={} <operations_admin_interface_init_dump_by_mask>` for more information.
   * The dumps of unready targets of all init managers.
   */
  unready_targets_dumps?: UnreadyTargetsDumps_UnreadyTargetsDump[] | undefined;
}

/** Message of unready targets information of an init manager. */
export interface UnreadyTargetsDumps_UnreadyTargetsDump {
  $type: "envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump";
  /** Name of the init manager. Example: "init_manager_xxx". */
  name?:
    | string
    | undefined;
  /** Names of unready targets of the init manager. Example: "target_xxx". */
  target_names?: string[] | undefined;
}

function createBaseUnreadyTargetsDumps(): UnreadyTargetsDumps {
  return { $type: "envoy.admin.v3.UnreadyTargetsDumps" };
}

export const UnreadyTargetsDumps: MessageFns<UnreadyTargetsDumps, "envoy.admin.v3.UnreadyTargetsDumps"> = {
  $type: "envoy.admin.v3.UnreadyTargetsDumps" as const,

  encode(message: UnreadyTargetsDumps, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unready_targets_dumps !== undefined && message.unready_targets_dumps.length !== 0) {
      for (const v of message.unready_targets_dumps) {
        UnreadyTargetsDumps_UnreadyTargetsDump.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnreadyTargetsDumps {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnreadyTargetsDumps();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.unready_targets_dumps === undefined) {
            message.unready_targets_dumps = [];
          }
          const el = UnreadyTargetsDumps_UnreadyTargetsDump.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.unready_targets_dumps!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnreadyTargetsDumps {
    return {
      $type: UnreadyTargetsDumps.$type,
      unready_targets_dumps: globalThis.Array.isArray(object?.unready_targets_dumps)
        ? object.unready_targets_dumps.map((e: any) => UnreadyTargetsDumps_UnreadyTargetsDump.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: UnreadyTargetsDumps): unknown {
    const obj: any = {};
    if (message.unready_targets_dumps?.length) {
      obj.unready_targets_dumps = message.unready_targets_dumps.map((e) =>
        UnreadyTargetsDumps_UnreadyTargetsDump.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnreadyTargetsDumps>, I>>(base?: I): UnreadyTargetsDumps {
    return UnreadyTargetsDumps.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnreadyTargetsDumps>, I>>(object: I): UnreadyTargetsDumps {
    const message = createBaseUnreadyTargetsDumps();
    message.unready_targets_dumps =
      object.unready_targets_dumps?.map((e) => UnreadyTargetsDumps_UnreadyTargetsDump.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(UnreadyTargetsDumps.$type, UnreadyTargetsDumps);

function createBaseUnreadyTargetsDumps_UnreadyTargetsDump(): UnreadyTargetsDumps_UnreadyTargetsDump {
  return { $type: "envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump" };
}

export const UnreadyTargetsDumps_UnreadyTargetsDump: MessageFns<
  UnreadyTargetsDumps_UnreadyTargetsDump,
  "envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump"
> = {
  $type: "envoy.admin.v3.UnreadyTargetsDumps.UnreadyTargetsDump" as const,

  encode(message: UnreadyTargetsDumps_UnreadyTargetsDump, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.target_names !== undefined && message.target_names.length !== 0) {
      for (const v of message.target_names) {
        writer.uint32(18).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UnreadyTargetsDumps_UnreadyTargetsDump {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnreadyTargetsDumps_UnreadyTargetsDump();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.target_names === undefined) {
            message.target_names = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.target_names!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UnreadyTargetsDumps_UnreadyTargetsDump {
    return {
      $type: UnreadyTargetsDumps_UnreadyTargetsDump.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      target_names: globalThis.Array.isArray(object?.target_names)
        ? object.target_names.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: UnreadyTargetsDumps_UnreadyTargetsDump): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.target_names?.length) {
      obj.target_names = message.target_names;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UnreadyTargetsDumps_UnreadyTargetsDump>, I>>(
    base?: I,
  ): UnreadyTargetsDumps_UnreadyTargetsDump {
    return UnreadyTargetsDumps_UnreadyTargetsDump.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UnreadyTargetsDumps_UnreadyTargetsDump>, I>>(
    object: I,
  ): UnreadyTargetsDumps_UnreadyTargetsDump {
    const message = createBaseUnreadyTargetsDumps_UnreadyTargetsDump();
    message.name = object.name ?? undefined;
    message.target_names = object.target_names?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(UnreadyTargetsDumps_UnreadyTargetsDump.$type, UnreadyTargetsDumps_UnreadyTargetsDump);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
