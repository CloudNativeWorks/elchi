// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/tap/v3/http.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { HeaderMap, HeaderValue } from "../../../config/core/v3/base";
import { Body, Connection } from "./common";

export const protobufPackage = "envoy.data.tap.v3";

/** A fully buffered HTTP trace message. */
export interface HttpBufferedTrace {
  $type: "envoy.data.tap.v3.HttpBufferedTrace";
  /** Request message. */
  request?:
    | HttpBufferedTrace_Message
    | undefined;
  /** Response message. */
  response?:
    | HttpBufferedTrace_Message
    | undefined;
  /** downstream connection */
  downstream_connection?: Connection | undefined;
}

/** HTTP message wrapper. */
export interface HttpBufferedTrace_Message {
  $type: "envoy.data.tap.v3.HttpBufferedTrace.Message";
  /** Message headers. */
  headers?:
    | HeaderValue[]
    | undefined;
  /** Message body. */
  body?:
    | Body
    | undefined;
  /** Message trailers. */
  trailers?:
    | HeaderValue[]
    | undefined;
  /** The timestamp after receiving the message headers. */
  headers_received_time?: Date | undefined;
}

/**
 * A streamed HTTP trace segment. Multiple segments make up a full trace.
 * [#next-free-field: 8]
 */
export interface HttpStreamedTraceSegment {
  $type: "envoy.data.tap.v3.HttpStreamedTraceSegment";
  /**
   * Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
   * for long term stable uniqueness.
   */
  trace_id?: number | undefined;
  message_piece?:
    | //
    /** Request headers. */
    { $case: "request_headers"; request_headers: HeaderMap }
    | //
    /** Request body chunk. */
    { $case: "request_body_chunk"; request_body_chunk: Body }
    | //
    /** Request trailers. */
    { $case: "request_trailers"; request_trailers: HeaderMap }
    | //
    /** Response headers. */
    { $case: "response_headers"; response_headers: HeaderMap }
    | //
    /** Response body chunk. */
    { $case: "response_body_chunk"; response_body_chunk: Body }
    | //
    /** Response trailers. */
    { $case: "response_trailers"; response_trailers: HeaderMap }
    | undefined;
}

function createBaseHttpBufferedTrace(): HttpBufferedTrace {
  return { $type: "envoy.data.tap.v3.HttpBufferedTrace" };
}

export const HttpBufferedTrace: MessageFns<HttpBufferedTrace, "envoy.data.tap.v3.HttpBufferedTrace"> = {
  $type: "envoy.data.tap.v3.HttpBufferedTrace" as const,

  encode(message: HttpBufferedTrace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request !== undefined) {
      HttpBufferedTrace_Message.encode(message.request, writer.uint32(10).fork()).join();
    }
    if (message.response !== undefined) {
      HttpBufferedTrace_Message.encode(message.response, writer.uint32(18).fork()).join();
    }
    if (message.downstream_connection !== undefined) {
      Connection.encode(message.downstream_connection, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpBufferedTrace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpBufferedTrace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.request = HttpBufferedTrace_Message.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = HttpBufferedTrace_Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.downstream_connection = Connection.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpBufferedTrace {
    return {
      $type: HttpBufferedTrace.$type,
      request: isSet(object.request) ? HttpBufferedTrace_Message.fromJSON(object.request) : undefined,
      response: isSet(object.response) ? HttpBufferedTrace_Message.fromJSON(object.response) : undefined,
      downstream_connection: isSet(object.downstream_connection)
        ? Connection.fromJSON(object.downstream_connection)
        : undefined,
    };
  },

  toJSON(message: HttpBufferedTrace): unknown {
    const obj: any = {};
    if (message.request !== undefined) {
      obj.request = HttpBufferedTrace_Message.toJSON(message.request);
    }
    if (message.response !== undefined) {
      obj.response = HttpBufferedTrace_Message.toJSON(message.response);
    }
    if (message.downstream_connection !== undefined) {
      obj.downstream_connection = Connection.toJSON(message.downstream_connection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpBufferedTrace>, I>>(base?: I): HttpBufferedTrace {
    return HttpBufferedTrace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpBufferedTrace>, I>>(object: I): HttpBufferedTrace {
    const message = createBaseHttpBufferedTrace();
    message.request = (object.request !== undefined && object.request !== null)
      ? HttpBufferedTrace_Message.fromPartial(object.request)
      : undefined;
    message.response = (object.response !== undefined && object.response !== null)
      ? HttpBufferedTrace_Message.fromPartial(object.response)
      : undefined;
    message.downstream_connection =
      (object.downstream_connection !== undefined && object.downstream_connection !== null)
        ? Connection.fromPartial(object.downstream_connection)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpBufferedTrace.$type, HttpBufferedTrace);

function createBaseHttpBufferedTrace_Message(): HttpBufferedTrace_Message {
  return { $type: "envoy.data.tap.v3.HttpBufferedTrace.Message" };
}

export const HttpBufferedTrace_Message: MessageFns<
  HttpBufferedTrace_Message,
  "envoy.data.tap.v3.HttpBufferedTrace.Message"
> = {
  $type: "envoy.data.tap.v3.HttpBufferedTrace.Message" as const,

  encode(message: HttpBufferedTrace_Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.headers !== undefined && message.headers.length !== 0) {
      for (const v of message.headers) {
        HeaderValue.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.body !== undefined) {
      Body.encode(message.body, writer.uint32(18).fork()).join();
    }
    if (message.trailers !== undefined && message.trailers.length !== 0) {
      for (const v of message.trailers) {
        HeaderValue.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.headers_received_time !== undefined) {
      Timestamp.encode(toTimestamp(message.headers_received_time), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpBufferedTrace_Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpBufferedTrace_Message();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.headers === undefined) {
            message.headers = [];
          }
          const el = HeaderValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.headers!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body = Body.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.trailers === undefined) {
            message.trailers = [];
          }
          const el = HeaderValue.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.trailers!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.headers_received_time = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpBufferedTrace_Message {
    return {
      $type: HttpBufferedTrace_Message.$type,
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => HeaderValue.fromJSON(e))
        : undefined,
      body: isSet(object.body) ? Body.fromJSON(object.body) : undefined,
      trailers: globalThis.Array.isArray(object?.trailers)
        ? object.trailers.map((e: any) => HeaderValue.fromJSON(e))
        : undefined,
      headers_received_time: isSet(object.headers_received_time)
        ? fromJsonTimestamp(object.headers_received_time)
        : undefined,
    };
  },

  toJSON(message: HttpBufferedTrace_Message): unknown {
    const obj: any = {};
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => HeaderValue.toJSON(e));
    }
    if (message.body !== undefined) {
      obj.body = Body.toJSON(message.body);
    }
    if (message.trailers?.length) {
      obj.trailers = message.trailers.map((e) => HeaderValue.toJSON(e));
    }
    if (message.headers_received_time !== undefined) {
      obj.headers_received_time = message.headers_received_time.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpBufferedTrace_Message>, I>>(base?: I): HttpBufferedTrace_Message {
    return HttpBufferedTrace_Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpBufferedTrace_Message>, I>>(object: I): HttpBufferedTrace_Message {
    const message = createBaseHttpBufferedTrace_Message();
    message.headers = object.headers?.map((e) => HeaderValue.fromPartial(e)) || undefined;
    message.body = (object.body !== undefined && object.body !== null) ? Body.fromPartial(object.body) : undefined;
    message.trailers = object.trailers?.map((e) => HeaderValue.fromPartial(e)) || undefined;
    message.headers_received_time = object.headers_received_time ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HttpBufferedTrace_Message.$type, HttpBufferedTrace_Message);

function createBaseHttpStreamedTraceSegment(): HttpStreamedTraceSegment {
  return { $type: "envoy.data.tap.v3.HttpStreamedTraceSegment", message_piece: undefined };
}

export const HttpStreamedTraceSegment: MessageFns<
  HttpStreamedTraceSegment,
  "envoy.data.tap.v3.HttpStreamedTraceSegment"
> = {
  $type: "envoy.data.tap.v3.HttpStreamedTraceSegment" as const,

  encode(message: HttpStreamedTraceSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trace_id !== undefined && message.trace_id !== 0) {
      writer.uint32(8).uint64(message.trace_id);
    }
    switch (message.message_piece?.$case) {
      case "request_headers":
        HeaderMap.encode(message.message_piece.request_headers, writer.uint32(18).fork()).join();
        break;
      case "request_body_chunk":
        Body.encode(message.message_piece.request_body_chunk, writer.uint32(26).fork()).join();
        break;
      case "request_trailers":
        HeaderMap.encode(message.message_piece.request_trailers, writer.uint32(34).fork()).join();
        break;
      case "response_headers":
        HeaderMap.encode(message.message_piece.response_headers, writer.uint32(42).fork()).join();
        break;
      case "response_body_chunk":
        Body.encode(message.message_piece.response_body_chunk, writer.uint32(50).fork()).join();
        break;
      case "response_trailers":
        HeaderMap.encode(message.message_piece.response_trailers, writer.uint32(58).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HttpStreamedTraceSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpStreamedTraceSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.trace_id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message_piece = {
            $case: "request_headers",
            request_headers: HeaderMap.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message_piece = {
            $case: "request_body_chunk",
            request_body_chunk: Body.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message_piece = {
            $case: "request_trailers",
            request_trailers: HeaderMap.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.message_piece = {
            $case: "response_headers",
            response_headers: HeaderMap.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message_piece = {
            $case: "response_body_chunk",
            response_body_chunk: Body.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.message_piece = {
            $case: "response_trailers",
            response_trailers: HeaderMap.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpStreamedTraceSegment {
    return {
      $type: HttpStreamedTraceSegment.$type,
      trace_id: isSet(object.trace_id) ? globalThis.Number(object.trace_id) : undefined,
      message_piece: isSet(object.request_headers)
        ? { $case: "request_headers", request_headers: HeaderMap.fromJSON(object.request_headers) }
        : isSet(object.request_body_chunk)
        ? { $case: "request_body_chunk", request_body_chunk: Body.fromJSON(object.request_body_chunk) }
        : isSet(object.request_trailers)
        ? { $case: "request_trailers", request_trailers: HeaderMap.fromJSON(object.request_trailers) }
        : isSet(object.response_headers)
        ? { $case: "response_headers", response_headers: HeaderMap.fromJSON(object.response_headers) }
        : isSet(object.response_body_chunk)
        ? { $case: "response_body_chunk", response_body_chunk: Body.fromJSON(object.response_body_chunk) }
        : isSet(object.response_trailers)
        ? { $case: "response_trailers", response_trailers: HeaderMap.fromJSON(object.response_trailers) }
        : undefined,
    };
  },

  toJSON(message: HttpStreamedTraceSegment): unknown {
    const obj: any = {};
    if (message.trace_id !== undefined) {
      obj.trace_id = Math.round(message.trace_id);
    }
    if (message.message_piece?.$case === "request_headers") {
      obj.request_headers = HeaderMap.toJSON(message.message_piece.request_headers);
    }
    if (message.message_piece?.$case === "request_body_chunk") {
      obj.request_body_chunk = Body.toJSON(message.message_piece.request_body_chunk);
    }
    if (message.message_piece?.$case === "request_trailers") {
      obj.request_trailers = HeaderMap.toJSON(message.message_piece.request_trailers);
    }
    if (message.message_piece?.$case === "response_headers") {
      obj.response_headers = HeaderMap.toJSON(message.message_piece.response_headers);
    }
    if (message.message_piece?.$case === "response_body_chunk") {
      obj.response_body_chunk = Body.toJSON(message.message_piece.response_body_chunk);
    }
    if (message.message_piece?.$case === "response_trailers") {
      obj.response_trailers = HeaderMap.toJSON(message.message_piece.response_trailers);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HttpStreamedTraceSegment>, I>>(base?: I): HttpStreamedTraceSegment {
    return HttpStreamedTraceSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HttpStreamedTraceSegment>, I>>(object: I): HttpStreamedTraceSegment {
    const message = createBaseHttpStreamedTraceSegment();
    message.trace_id = object.trace_id ?? undefined;
    if (
      object.message_piece?.$case === "request_headers" &&
      object.message_piece?.request_headers !== undefined &&
      object.message_piece?.request_headers !== null
    ) {
      message.message_piece = {
        $case: "request_headers",
        request_headers: HeaderMap.fromPartial(object.message_piece.request_headers),
      };
    }
    if (
      object.message_piece?.$case === "request_body_chunk" &&
      object.message_piece?.request_body_chunk !== undefined &&
      object.message_piece?.request_body_chunk !== null
    ) {
      message.message_piece = {
        $case: "request_body_chunk",
        request_body_chunk: Body.fromPartial(object.message_piece.request_body_chunk),
      };
    }
    if (
      object.message_piece?.$case === "request_trailers" &&
      object.message_piece?.request_trailers !== undefined &&
      object.message_piece?.request_trailers !== null
    ) {
      message.message_piece = {
        $case: "request_trailers",
        request_trailers: HeaderMap.fromPartial(object.message_piece.request_trailers),
      };
    }
    if (
      object.message_piece?.$case === "response_headers" &&
      object.message_piece?.response_headers !== undefined &&
      object.message_piece?.response_headers !== null
    ) {
      message.message_piece = {
        $case: "response_headers",
        response_headers: HeaderMap.fromPartial(object.message_piece.response_headers),
      };
    }
    if (
      object.message_piece?.$case === "response_body_chunk" &&
      object.message_piece?.response_body_chunk !== undefined &&
      object.message_piece?.response_body_chunk !== null
    ) {
      message.message_piece = {
        $case: "response_body_chunk",
        response_body_chunk: Body.fromPartial(object.message_piece.response_body_chunk),
      };
    }
    if (
      object.message_piece?.$case === "response_trailers" &&
      object.message_piece?.response_trailers !== undefined &&
      object.message_piece?.response_trailers !== null
    ) {
      message.message_piece = {
        $case: "response_trailers",
        response_trailers: HeaderMap.fromPartial(object.message_piece.response_trailers),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(HttpStreamedTraceSegment.$type, HttpStreamedTraceSegment);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
