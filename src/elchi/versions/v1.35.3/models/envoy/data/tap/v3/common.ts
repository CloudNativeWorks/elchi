// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/tap/v3/common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Address } from "../../../config/core/v3/address";

export const protobufPackage = "envoy.data.tap.v3";

/**
 * Wrapper for tapped body data. This includes HTTP request/response body, transport socket received
 * and transmitted data, etc.
 */
export interface Body {
  $type: "envoy.data.tap.v3.Body";
  body_type?:
    | //
    /**
     * Body data as bytes. By default, tap body data will be present in this field, as the proto
     * ``bytes`` type can contain any valid byte.
     */
    { $case: "as_bytes"; as_bytes: Uint8Array }
    | //
    /**
     * Body data as string. This field is only used when the :ref:`JSON_BODY_AS_STRING
     * <envoy_v3_api_enum_value_config.tap.v3.OutputSink.Format.JSON_BODY_AS_STRING>` sink
     * format type is selected. See the documentation for that option for why this is useful.
     */
    { $case: "as_string"; as_string: string }
    | undefined;
  /**
   * Specifies whether body data has been truncated to fit within the specified
   * :ref:`max_buffered_rx_bytes
   * <envoy_v3_api_field_config.tap.v3.OutputConfig.max_buffered_rx_bytes>` and
   * :ref:`max_buffered_tx_bytes
   * <envoy_v3_api_field_config.tap.v3.OutputConfig.max_buffered_tx_bytes>` settings.
   */
  truncated?: boolean | undefined;
}

/** Connection properties. */
export interface Connection {
  $type: "envoy.data.tap.v3.Connection";
  /** Local address. */
  local_address?:
    | Address
    | undefined;
  /** Remote address. */
  remote_address?: Address | undefined;
}

function createBaseBody(): Body {
  return { $type: "envoy.data.tap.v3.Body", body_type: undefined };
}

export const Body: MessageFns<Body, "envoy.data.tap.v3.Body"> = {
  $type: "envoy.data.tap.v3.Body" as const,

  encode(message: Body, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.body_type?.$case) {
      case "as_bytes":
        writer.uint32(10).bytes(message.body_type.as_bytes);
        break;
      case "as_string":
        writer.uint32(18).string(message.body_type.as_string);
        break;
    }
    if (message.truncated !== undefined && message.truncated !== false) {
      writer.uint32(24).bool(message.truncated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Body {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBody();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.body_type = { $case: "as_bytes", as_bytes: reader.bytes() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.body_type = { $case: "as_string", as_string: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.truncated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Body {
    return {
      $type: Body.$type,
      body_type: isSet(object.as_bytes)
        ? { $case: "as_bytes", as_bytes: bytesFromBase64(object.as_bytes) }
        : isSet(object.as_string)
        ? { $case: "as_string", as_string: globalThis.String(object.as_string) }
        : undefined,
      truncated: isSet(object.truncated) ? globalThis.Boolean(object.truncated) : undefined,
    };
  },

  toJSON(message: Body): unknown {
    const obj: any = {};
    if (message.body_type?.$case === "as_bytes") {
      obj.as_bytes = base64FromBytes(message.body_type.as_bytes);
    }
    if (message.body_type?.$case === "as_string") {
      obj.as_string = message.body_type.as_string;
    }
    if (message.truncated !== undefined) {
      obj.truncated = message.truncated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Body>, I>>(base?: I): Body {
    return Body.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Body>, I>>(object: I): Body {
    const message = createBaseBody();
    if (
      object.body_type?.$case === "as_bytes" &&
      object.body_type?.as_bytes !== undefined &&
      object.body_type?.as_bytes !== null
    ) {
      message.body_type = { $case: "as_bytes", as_bytes: object.body_type.as_bytes };
    }
    if (
      object.body_type?.$case === "as_string" &&
      object.body_type?.as_string !== undefined &&
      object.body_type?.as_string !== null
    ) {
      message.body_type = { $case: "as_string", as_string: object.body_type.as_string };
    }
    message.truncated = object.truncated ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Body.$type, Body);

function createBaseConnection(): Connection {
  return { $type: "envoy.data.tap.v3.Connection" };
}

export const Connection: MessageFns<Connection, "envoy.data.tap.v3.Connection"> = {
  $type: "envoy.data.tap.v3.Connection" as const,

  encode(message: Connection, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.local_address !== undefined) {
      Address.encode(message.local_address, writer.uint32(10).fork()).join();
    }
    if (message.remote_address !== undefined) {
      Address.encode(message.remote_address, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Connection {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConnection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.local_address = Address.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.remote_address = Address.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Connection {
    return {
      $type: Connection.$type,
      local_address: isSet(object.local_address) ? Address.fromJSON(object.local_address) : undefined,
      remote_address: isSet(object.remote_address) ? Address.fromJSON(object.remote_address) : undefined,
    };
  },

  toJSON(message: Connection): unknown {
    const obj: any = {};
    if (message.local_address !== undefined) {
      obj.local_address = Address.toJSON(message.local_address);
    }
    if (message.remote_address !== undefined) {
      obj.remote_address = Address.toJSON(message.remote_address);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Connection>, I>>(base?: I): Connection {
    return Connection.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Connection>, I>>(object: I): Connection {
    const message = createBaseConnection();
    message.local_address = (object.local_address !== undefined && object.local_address !== null)
      ? Address.fromPartial(object.local_address)
      : undefined;
    message.remote_address = (object.remote_address !== undefined && object.remote_address !== null)
      ? Address.fromPartial(object.remote_address)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Connection.$type, Connection);

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
