// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/data/tap/v3/transport.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Body, Connection } from "./common";

export const protobufPackage = "envoy.data.tap.v3";

/**
 * Event in a socket trace.
 * [#next-free-field: 6]
 */
export interface SocketEvent {
  $type: "envoy.data.tap.v3.SocketEvent";
  /** Timestamp for event. */
  timestamp?:
    | Date
    | undefined;
  /** Read or write with content as bytes string. */
  event_selector?:
    | //
    { $case: "read"; read: SocketEvent_Read }
    | //
    { $case: "write"; write: SocketEvent_Write }
    | //
    { $case: "closed"; closed: SocketEvent_Closed }
    | undefined;
  /** Connection information per event */
  connection?: Connection | undefined;
}

/** Data read by Envoy from the transport socket. */
export interface SocketEvent_Read {
  $type: "envoy.data.tap.v3.SocketEvent.Read";
  /** Binary data read. */
  data?: Body | undefined;
}

/** Data written by Envoy to the transport socket. */
export interface SocketEvent_Write {
  $type: "envoy.data.tap.v3.SocketEvent.Write";
  /** Binary data written. */
  data?:
    | Body
    | undefined;
  /** Stream was half closed after this write. */
  end_stream?: boolean | undefined;
}

/** The connection was closed. */
export interface SocketEvent_Closed {
  $type: "envoy.data.tap.v3.SocketEvent.Closed";
}

/**
 * Sequence of read/write events that constitute a buffered trace on a socket.
 * [#next-free-field: 6]
 */
export interface SocketBufferedTrace {
  $type: "envoy.data.tap.v3.SocketBufferedTrace";
  /**
   * Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
   * for long term stable uniqueness. Matches connection IDs used in Envoy logs.
   */
  trace_id?:
    | number
    | undefined;
  /** Connection properties. */
  connection?:
    | Connection
    | undefined;
  /** Sequence of observed events. */
  events?:
    | SocketEvent[]
    | undefined;
  /**
   * Set to true if read events were truncated due to the :ref:`max_buffered_rx_bytes
   * <envoy_v3_api_field_config.tap.v3.OutputConfig.max_buffered_rx_bytes>` setting.
   */
  read_truncated?:
    | boolean
    | undefined;
  /**
   * Set to true if write events were truncated due to the :ref:`max_buffered_tx_bytes
   * <envoy_v3_api_field_config.tap.v3.OutputConfig.max_buffered_tx_bytes>` setting.
   */
  write_truncated?: boolean | undefined;
}

/** A message for the sequence of observed events */
export interface SocketEvents {
  $type: "envoy.data.tap.v3.SocketEvents";
  events?: SocketEvent[] | undefined;
}

/** A streamed socket trace segment. Multiple segments make up a full trace. */
export interface SocketStreamedTraceSegment {
  $type: "envoy.data.tap.v3.SocketStreamedTraceSegment";
  /**
   * Trace ID unique to the originating Envoy only. Trace IDs can repeat and should not be used
   * for long term stable uniqueness. Matches connection IDs used in Envoy logs.
   */
  trace_id?: number | undefined;
  message_piece?:
    | //
    /** Connection properties. */
    { $case: "connection"; connection: Connection }
    | //
    /** Socket event. */
    { $case: "event"; event: SocketEvent }
    | //
    /** Sequence of observed events. */
    { $case: "events"; events: SocketEvents }
    | undefined;
}

function createBaseSocketEvent(): SocketEvent {
  return { $type: "envoy.data.tap.v3.SocketEvent", event_selector: undefined };
}

export const SocketEvent: MessageFns<SocketEvent, "envoy.data.tap.v3.SocketEvent"> = {
  $type: "envoy.data.tap.v3.SocketEvent" as const,

  encode(message: SocketEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    switch (message.event_selector?.$case) {
      case "read":
        SocketEvent_Read.encode(message.event_selector.read, writer.uint32(18).fork()).join();
        break;
      case "write":
        SocketEvent_Write.encode(message.event_selector.write, writer.uint32(26).fork()).join();
        break;
      case "closed":
        SocketEvent_Closed.encode(message.event_selector.closed, writer.uint32(34).fork()).join();
        break;
    }
    if (message.connection !== undefined) {
      Connection.encode(message.connection, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.event_selector = { $case: "read", read: SocketEvent_Read.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.event_selector = { $case: "write", write: SocketEvent_Write.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.event_selector = { $case: "closed", closed: SocketEvent_Closed.decode(reader, reader.uint32()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.connection = Connection.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketEvent {
    return {
      $type: SocketEvent.$type,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      event_selector: isSet(object.read)
        ? { $case: "read", read: SocketEvent_Read.fromJSON(object.read) }
        : isSet(object.write)
        ? { $case: "write", write: SocketEvent_Write.fromJSON(object.write) }
        : isSet(object.closed)
        ? { $case: "closed", closed: SocketEvent_Closed.fromJSON(object.closed) }
        : undefined,
      connection: isSet(object.connection) ? Connection.fromJSON(object.connection) : undefined,
    };
  },

  toJSON(message: SocketEvent): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.event_selector?.$case === "read") {
      obj.read = SocketEvent_Read.toJSON(message.event_selector.read);
    }
    if (message.event_selector?.$case === "write") {
      obj.write = SocketEvent_Write.toJSON(message.event_selector.write);
    }
    if (message.event_selector?.$case === "closed") {
      obj.closed = SocketEvent_Closed.toJSON(message.event_selector.closed);
    }
    if (message.connection !== undefined) {
      obj.connection = Connection.toJSON(message.connection);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketEvent>, I>>(base?: I): SocketEvent {
    return SocketEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketEvent>, I>>(object: I): SocketEvent {
    const message = createBaseSocketEvent();
    message.timestamp = object.timestamp ?? undefined;
    if (
      object.event_selector?.$case === "read" &&
      object.event_selector?.read !== undefined &&
      object.event_selector?.read !== null
    ) {
      message.event_selector = { $case: "read", read: SocketEvent_Read.fromPartial(object.event_selector.read) };
    }
    if (
      object.event_selector?.$case === "write" &&
      object.event_selector?.write !== undefined &&
      object.event_selector?.write !== null
    ) {
      message.event_selector = { $case: "write", write: SocketEvent_Write.fromPartial(object.event_selector.write) };
    }
    if (
      object.event_selector?.$case === "closed" &&
      object.event_selector?.closed !== undefined &&
      object.event_selector?.closed !== null
    ) {
      message.event_selector = {
        $case: "closed",
        closed: SocketEvent_Closed.fromPartial(object.event_selector.closed),
      };
    }
    message.connection = (object.connection !== undefined && object.connection !== null)
      ? Connection.fromPartial(object.connection)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketEvent.$type, SocketEvent);

function createBaseSocketEvent_Read(): SocketEvent_Read {
  return { $type: "envoy.data.tap.v3.SocketEvent.Read" };
}

export const SocketEvent_Read: MessageFns<SocketEvent_Read, "envoy.data.tap.v3.SocketEvent.Read"> = {
  $type: "envoy.data.tap.v3.SocketEvent.Read" as const,

  encode(message: SocketEvent_Read, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Body.encode(message.data, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketEvent_Read {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketEvent_Read();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Body.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketEvent_Read {
    return { $type: SocketEvent_Read.$type, data: isSet(object.data) ? Body.fromJSON(object.data) : undefined };
  },

  toJSON(message: SocketEvent_Read): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Body.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketEvent_Read>, I>>(base?: I): SocketEvent_Read {
    return SocketEvent_Read.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketEvent_Read>, I>>(object: I): SocketEvent_Read {
    const message = createBaseSocketEvent_Read();
    message.data = (object.data !== undefined && object.data !== null) ? Body.fromPartial(object.data) : undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketEvent_Read.$type, SocketEvent_Read);

function createBaseSocketEvent_Write(): SocketEvent_Write {
  return { $type: "envoy.data.tap.v3.SocketEvent.Write" };
}

export const SocketEvent_Write: MessageFns<SocketEvent_Write, "envoy.data.tap.v3.SocketEvent.Write"> = {
  $type: "envoy.data.tap.v3.SocketEvent.Write" as const,

  encode(message: SocketEvent_Write, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      Body.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.end_stream !== undefined && message.end_stream !== false) {
      writer.uint32(16).bool(message.end_stream);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketEvent_Write {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketEvent_Write();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = Body.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.end_stream = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketEvent_Write {
    return {
      $type: SocketEvent_Write.$type,
      data: isSet(object.data) ? Body.fromJSON(object.data) : undefined,
      end_stream: isSet(object.end_stream) ? globalThis.Boolean(object.end_stream) : undefined,
    };
  },

  toJSON(message: SocketEvent_Write): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = Body.toJSON(message.data);
    }
    if (message.end_stream !== undefined) {
      obj.end_stream = message.end_stream;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketEvent_Write>, I>>(base?: I): SocketEvent_Write {
    return SocketEvent_Write.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketEvent_Write>, I>>(object: I): SocketEvent_Write {
    const message = createBaseSocketEvent_Write();
    message.data = (object.data !== undefined && object.data !== null) ? Body.fromPartial(object.data) : undefined;
    message.end_stream = object.end_stream ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketEvent_Write.$type, SocketEvent_Write);

function createBaseSocketEvent_Closed(): SocketEvent_Closed {
  return { $type: "envoy.data.tap.v3.SocketEvent.Closed" };
}

export const SocketEvent_Closed: MessageFns<SocketEvent_Closed, "envoy.data.tap.v3.SocketEvent.Closed"> = {
  $type: "envoy.data.tap.v3.SocketEvent.Closed" as const,

  encode(_: SocketEvent_Closed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketEvent_Closed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketEvent_Closed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SocketEvent_Closed {
    return { $type: SocketEvent_Closed.$type };
  },

  toJSON(_: SocketEvent_Closed): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketEvent_Closed>, I>>(base?: I): SocketEvent_Closed {
    return SocketEvent_Closed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketEvent_Closed>, I>>(_: I): SocketEvent_Closed {
    const message = createBaseSocketEvent_Closed();
    return message;
  },
};

messageTypeRegistry.set(SocketEvent_Closed.$type, SocketEvent_Closed);

function createBaseSocketBufferedTrace(): SocketBufferedTrace {
  return { $type: "envoy.data.tap.v3.SocketBufferedTrace" };
}

export const SocketBufferedTrace: MessageFns<SocketBufferedTrace, "envoy.data.tap.v3.SocketBufferedTrace"> = {
  $type: "envoy.data.tap.v3.SocketBufferedTrace" as const,

  encode(message: SocketBufferedTrace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trace_id !== undefined && message.trace_id !== 0) {
      writer.uint32(8).uint64(message.trace_id);
    }
    if (message.connection !== undefined) {
      Connection.encode(message.connection, writer.uint32(18).fork()).join();
    }
    if (message.events !== undefined && message.events.length !== 0) {
      for (const v of message.events) {
        SocketEvent.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    if (message.read_truncated !== undefined && message.read_truncated !== false) {
      writer.uint32(32).bool(message.read_truncated);
    }
    if (message.write_truncated !== undefined && message.write_truncated !== false) {
      writer.uint32(40).bool(message.write_truncated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketBufferedTrace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketBufferedTrace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.trace_id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.connection = Connection.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.events === undefined) {
            message.events = [];
          }
          const el = SocketEvent.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.events!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.read_truncated = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.write_truncated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketBufferedTrace {
    return {
      $type: SocketBufferedTrace.$type,
      trace_id: isSet(object.trace_id) ? globalThis.Number(object.trace_id) : undefined,
      connection: isSet(object.connection) ? Connection.fromJSON(object.connection) : undefined,
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => SocketEvent.fromJSON(e))
        : undefined,
      read_truncated: isSet(object.read_truncated) ? globalThis.Boolean(object.read_truncated) : undefined,
      write_truncated: isSet(object.write_truncated) ? globalThis.Boolean(object.write_truncated) : undefined,
    };
  },

  toJSON(message: SocketBufferedTrace): unknown {
    const obj: any = {};
    if (message.trace_id !== undefined) {
      obj.trace_id = Math.round(message.trace_id);
    }
    if (message.connection !== undefined) {
      obj.connection = Connection.toJSON(message.connection);
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => SocketEvent.toJSON(e));
    }
    if (message.read_truncated !== undefined) {
      obj.read_truncated = message.read_truncated;
    }
    if (message.write_truncated !== undefined) {
      obj.write_truncated = message.write_truncated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketBufferedTrace>, I>>(base?: I): SocketBufferedTrace {
    return SocketBufferedTrace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketBufferedTrace>, I>>(object: I): SocketBufferedTrace {
    const message = createBaseSocketBufferedTrace();
    message.trace_id = object.trace_id ?? undefined;
    message.connection = (object.connection !== undefined && object.connection !== null)
      ? Connection.fromPartial(object.connection)
      : undefined;
    message.events = object.events?.map((e) => SocketEvent.fromPartial(e)) || undefined;
    message.read_truncated = object.read_truncated ?? undefined;
    message.write_truncated = object.write_truncated ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketBufferedTrace.$type, SocketBufferedTrace);

function createBaseSocketEvents(): SocketEvents {
  return { $type: "envoy.data.tap.v3.SocketEvents" };
}

export const SocketEvents: MessageFns<SocketEvents, "envoy.data.tap.v3.SocketEvents"> = {
  $type: "envoy.data.tap.v3.SocketEvents" as const,

  encode(message: SocketEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.events !== undefined && message.events.length !== 0) {
      for (const v of message.events) {
        SocketEvent.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.events === undefined) {
            message.events = [];
          }
          const el = SocketEvent.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.events!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketEvents {
    return {
      $type: SocketEvents.$type,
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => SocketEvent.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: SocketEvents): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => SocketEvent.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketEvents>, I>>(base?: I): SocketEvents {
    return SocketEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketEvents>, I>>(object: I): SocketEvents {
    const message = createBaseSocketEvents();
    message.events = object.events?.map((e) => SocketEvent.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(SocketEvents.$type, SocketEvents);

function createBaseSocketStreamedTraceSegment(): SocketStreamedTraceSegment {
  return { $type: "envoy.data.tap.v3.SocketStreamedTraceSegment", message_piece: undefined };
}

export const SocketStreamedTraceSegment: MessageFns<
  SocketStreamedTraceSegment,
  "envoy.data.tap.v3.SocketStreamedTraceSegment"
> = {
  $type: "envoy.data.tap.v3.SocketStreamedTraceSegment" as const,

  encode(message: SocketStreamedTraceSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trace_id !== undefined && message.trace_id !== 0) {
      writer.uint32(8).uint64(message.trace_id);
    }
    switch (message.message_piece?.$case) {
      case "connection":
        Connection.encode(message.message_piece.connection, writer.uint32(18).fork()).join();
        break;
      case "event":
        SocketEvent.encode(message.message_piece.event, writer.uint32(26).fork()).join();
        break;
      case "events":
        SocketEvents.encode(message.message_piece.events, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SocketStreamedTraceSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSocketStreamedTraceSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.trace_id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message_piece = { $case: "connection", connection: Connection.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message_piece = { $case: "event", event: SocketEvent.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message_piece = { $case: "events", events: SocketEvents.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SocketStreamedTraceSegment {
    return {
      $type: SocketStreamedTraceSegment.$type,
      trace_id: isSet(object.trace_id) ? globalThis.Number(object.trace_id) : undefined,
      message_piece: isSet(object.connection)
        ? { $case: "connection", connection: Connection.fromJSON(object.connection) }
        : isSet(object.event)
        ? { $case: "event", event: SocketEvent.fromJSON(object.event) }
        : isSet(object.events)
        ? { $case: "events", events: SocketEvents.fromJSON(object.events) }
        : undefined,
    };
  },

  toJSON(message: SocketStreamedTraceSegment): unknown {
    const obj: any = {};
    if (message.trace_id !== undefined) {
      obj.trace_id = Math.round(message.trace_id);
    }
    if (message.message_piece?.$case === "connection") {
      obj.connection = Connection.toJSON(message.message_piece.connection);
    }
    if (message.message_piece?.$case === "event") {
      obj.event = SocketEvent.toJSON(message.message_piece.event);
    }
    if (message.message_piece?.$case === "events") {
      obj.events = SocketEvents.toJSON(message.message_piece.events);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SocketStreamedTraceSegment>, I>>(base?: I): SocketStreamedTraceSegment {
    return SocketStreamedTraceSegment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SocketStreamedTraceSegment>, I>>(object: I): SocketStreamedTraceSegment {
    const message = createBaseSocketStreamedTraceSegment();
    message.trace_id = object.trace_id ?? undefined;
    if (
      object.message_piece?.$case === "connection" &&
      object.message_piece?.connection !== undefined &&
      object.message_piece?.connection !== null
    ) {
      message.message_piece = {
        $case: "connection",
        connection: Connection.fromPartial(object.message_piece.connection),
      };
    }
    if (
      object.message_piece?.$case === "event" &&
      object.message_piece?.event !== undefined &&
      object.message_piece?.event !== null
    ) {
      message.message_piece = { $case: "event", event: SocketEvent.fromPartial(object.message_piece.event) };
    }
    if (
      object.message_piece?.$case === "events" &&
      object.message_piece?.events !== undefined &&
      object.message_piece?.events !== null
    ) {
      message.message_piece = { $case: "events", events: SocketEvents.fromPartial(object.message_piece.events) };
    }
    return message;
  },
};

messageTypeRegistry.set(SocketStreamedTraceSegment.$type, SocketStreamedTraceSegment);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
