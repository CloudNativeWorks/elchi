// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/stateful_session/envelope/v3/envelope.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.http.stateful_session.envelope.v3";

/**
 * The extension allows the session state is tracked via existing session context that initialized
 * by the upstream server. It assumes that the upstream server will generate the session context
 * (like session id header or cookie) in the initial response of the session and the client will use
 * the same session context in the subsequent requests without any modification.
 *
 * When processing the response from the upstream, Envoy will check if the response contains the
 * session context. If the response contains the session context, no matter if it's a new session
 * context or an existing one, Envoy will join it and the upstream host as new session context.
 *
 * When processing the request from the downstream, Envoy will check if the request contains the
 * session context. If the request contains the session context, Envoy will strip the
 * upstream host from the session context.
 *
 * [#extension: envoy.http.stateful_session.envelope]
 */
export interface EnvelopeSessionState {
  $type: "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState";
  /** Set the header config to track the session state. */
  header?: EnvelopeSessionState_Header | undefined;
}

export interface EnvelopeSessionState_Header {
  $type: "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.Header";
  /**
   * Iff the header specified by the ``name`` field is present in the response (assume the ``name``
   * is set to ``session-header`` and original header value is ``xxxxxx``), then the upstream host
   * address and value of ``name`` field specified header will be encoded in following format and
   * the output will be used to update the ``name`` field specified header in the response:
   *
   * .. code-block:: none
   *
   *   session-header: "MS4yLjMuNDo4MAo=;UV:eHh4eHh4Cg==" # base64(1.2.3.4:80);UV:base64(xxxxxx)
   *
   * The ``UV`` (upstream value) part is used to store the original upstream header value of
   * ``name`` field specified header.
   *
   * If this mode is used then Envoy will assume that the header in the request will also be in the
   * same format and will contain the ``UV`` part. This extension will parse the upstream host
   * address and update the ``name`` field specified header in the request to the ``UV`` part.
   */
  name?: string | undefined;
}

function createBaseEnvelopeSessionState(): EnvelopeSessionState {
  return { $type: "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState" };
}

export const EnvelopeSessionState: MessageFns<
  EnvelopeSessionState,
  "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState"
> = {
  $type: "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState" as const,

  encode(message: EnvelopeSessionState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined) {
      EnvelopeSessionState_Header.encode(message.header, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvelopeSessionState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvelopeSessionState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = EnvelopeSessionState_Header.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvelopeSessionState {
    return {
      $type: EnvelopeSessionState.$type,
      header: isSet(object.header) ? EnvelopeSessionState_Header.fromJSON(object.header) : undefined,
    };
  },

  toJSON(message: EnvelopeSessionState): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = EnvelopeSessionState_Header.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvelopeSessionState>, I>>(base?: I): EnvelopeSessionState {
    return EnvelopeSessionState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvelopeSessionState>, I>>(object: I): EnvelopeSessionState {
    const message = createBaseEnvelopeSessionState();
    message.header = (object.header !== undefined && object.header !== null)
      ? EnvelopeSessionState_Header.fromPartial(object.header)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(EnvelopeSessionState.$type, EnvelopeSessionState);

function createBaseEnvelopeSessionState_Header(): EnvelopeSessionState_Header {
  return { $type: "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.Header" };
}

export const EnvelopeSessionState_Header: MessageFns<
  EnvelopeSessionState_Header,
  "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.Header"
> = {
  $type: "envoy.extensions.http.stateful_session.envelope.v3.EnvelopeSessionState.Header" as const,

  encode(message: EnvelopeSessionState_Header, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvelopeSessionState_Header {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvelopeSessionState_Header();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnvelopeSessionState_Header {
    return {
      $type: EnvelopeSessionState_Header.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
    };
  },

  toJSON(message: EnvelopeSessionState_Header): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvelopeSessionState_Header>, I>>(base?: I): EnvelopeSessionState_Header {
    return EnvelopeSessionState_Header.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvelopeSessionState_Header>, I>>(object: I): EnvelopeSessionState_Header {
    const message = createBaseEnvelopeSessionState_Header();
    message.name = object.name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(EnvelopeSessionState_Header.$type, EnvelopeSessionState_Header);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
