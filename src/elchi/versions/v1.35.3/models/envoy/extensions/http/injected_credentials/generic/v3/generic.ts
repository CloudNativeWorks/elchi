// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/http/injected_credentials/generic/v3/generic.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { SdsSecretConfig } from "../../../../transport_sockets/tls/v3/secret";

export const protobufPackage = "envoy.extensions.http.injected_credentials.generic.v3";

/**
 * Generic extension can be used to inject HTTP Basic Auth, Bearer Token, or any arbitrary credential
 * into the proxied requests.
 * The credential will be injected into the specified HTTP request header.
 * Refer to [RFC 6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage](https://www.rfc-editor.org/rfc/rfc6750) for details.
 */
export interface Generic {
  $type: "envoy.extensions.http.injected_credentials.generic.v3.Generic";
  /**
   * The SDS configuration for the credential that will be injected to the specified HTTP request header.
   * It must be a generic secret.
   */
  credential?:
    | SdsSecretConfig
    | undefined;
  /**
   * The header that will be injected to the HTTP request with the provided credential.
   * If not set, filter will default to: ``Authorization``
   */
  header?: string | undefined;
}

function createBaseGeneric(): Generic {
  return { $type: "envoy.extensions.http.injected_credentials.generic.v3.Generic" };
}

export const Generic: MessageFns<Generic, "envoy.extensions.http.injected_credentials.generic.v3.Generic"> = {
  $type: "envoy.extensions.http.injected_credentials.generic.v3.Generic" as const,

  encode(message: Generic, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credential !== undefined) {
      SdsSecretConfig.encode(message.credential, writer.uint32(10).fork()).join();
    }
    if (message.header !== undefined && message.header !== "") {
      writer.uint32(18).string(message.header);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Generic {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneric();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credential = SdsSecretConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.header = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Generic {
    return {
      $type: Generic.$type,
      credential: isSet(object.credential) ? SdsSecretConfig.fromJSON(object.credential) : undefined,
      header: isSet(object.header) ? globalThis.String(object.header) : undefined,
    };
  },

  toJSON(message: Generic): unknown {
    const obj: any = {};
    if (message.credential !== undefined) {
      obj.credential = SdsSecretConfig.toJSON(message.credential);
    }
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Generic>, I>>(base?: I): Generic {
    return Generic.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Generic>, I>>(object: I): Generic {
    const message = createBaseGeneric();
    message.credential = (object.credential !== undefined && object.credential !== null)
      ? SdsSecretConfig.fromPartial(object.credential)
      : undefined;
    message.header = object.header ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Generic.$type, Generic);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
