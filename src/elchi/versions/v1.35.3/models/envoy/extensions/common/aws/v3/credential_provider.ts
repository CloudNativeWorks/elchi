// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/common/aws/v3/credential_provider.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { DataSource } from "../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.common.aws.v3";

/**
 * Configuration for AWS credential provider. This is optional and the credentials are normally
 * retrieved from the environment or AWS configuration files by following the default credential
 * provider chain. However, this configuration can be used to override the default behavior.
 * [#next-free-field: 11]
 */
export interface AwsCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.AwsCredentialProvider";
  /** The option to use `AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`_. */
  assume_role_with_web_identity_provider?:
    | AssumeRoleWithWebIdentityCredentialProvider
    | undefined;
  /** The option to use an inline credential. If inline credential is provided, no chain will be created and only the inline credential will be used. */
  inline_credential?:
    | InlineCredentialProvider
    | undefined;
  /** The option to specify parameters for credential retrieval from an envoy data source, such as a file in AWS credential format. */
  credentials_file_provider?:
    | CredentialsFileCredentialProvider
    | undefined;
  /**
   * Create a custom credential provider chain instead of the default credential provider chain.
   * If set to TRUE, the credential provider chain that is created contains only those set in this credential provider message.
   * If set to FALSE, the settings provided here will act as modifiers to the default credential provider chain.
   * Defaults to FALSE.
   *
   * This has no effect if inline_credential is provided.
   */
  custom_credential_provider_chain?:
    | boolean
    | undefined;
  /** The option to use `IAM Roles Anywhere <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html>`_. */
  iam_roles_anywhere_credential_provider?:
    | IAMRolesAnywhereCredentialProvider
    | undefined;
  /** The option to use credentials sourced from standard `AWS configuration files <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html>`_. */
  config_credential_provider?:
    | ConfigCredentialProvider
    | undefined;
  /** The option to use credentials sourced from `container environment variables <https://docs.aws.amazon.com/sdkref/latest/guide/feature-container-credentials.html>`_. */
  container_credential_provider?:
    | ContainerCredentialProvider
    | undefined;
  /** The option to use credentials sourced from `environment variables <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html>`_. */
  environment_credential_provider?:
    | EnvironmentCredentialProvider
    | undefined;
  /** The option to use credentials sourced from an EC2 `Instance Profile <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html>`_. */
  instance_profile_credential_provider?:
    | InstanceProfileCredentialProvider
    | undefined;
  /** The option to use `STS:AssumeRole aka Role Chaining <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`_. */
  assume_role_credential_provider?: AssumeRoleCredentialProvider | undefined;
}

/**
 * Configuration to use an inline AWS credential. This is an equivalent to setting the well-known
 * environment variables ``AWS_ACCESS_KEY_ID``, ``AWS_SECRET_ACCESS_KEY``, and the optional ``AWS_SESSION_TOKEN``.
 */
export interface InlineCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.InlineCredentialProvider";
  /** The AWS access key ID. */
  access_key_id?:
    | string
    | undefined;
  /** The AWS secret access key. */
  secret_access_key?:
    | string
    | undefined;
  /** The AWS session token. This is optional. */
  session_token?: string | undefined;
}

/**
 * Configuration to use `AssumeRoleWithWebIdentity <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html>`_
 * to retrieve AWS credentials.
 */
export interface AssumeRoleWithWebIdentityCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.AssumeRoleWithWebIdentityCredentialProvider";
  /**
   * Data source for a web identity token that is provided by the identity provider to assume the role.
   * When using this data source, even if a ``watched_directory`` is provided, the token file will only be re-read when the credentials
   * returned from AssumeRoleWithWebIdentity expire.
   */
  web_identity_token_data_source?:
    | DataSource
    | undefined;
  /** The ARN of the role to assume. */
  role_arn?:
    | string
    | undefined;
  /** Optional role session name to use in AssumeRoleWithWebIdentity API call. */
  role_session_name?: string | undefined;
}

export interface CredentialsFileCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.CredentialsFileCredentialProvider";
  /**
   * Data source from which to retrieve AWS credentials
   * When using this data source, if a ``watched_directory`` is provided, the credential file will be re-read when a file move is detected.
   * See :ref:`watched_directory <envoy_v3_api_msg_config.core.v3.DataSource>` for more information about the ``watched_directory`` field.
   */
  credentials_data_source?:
    | DataSource
    | undefined;
  /** The profile within the credentials_file data source. If not provided, the default profile will be used. */
  profile?: string | undefined;
}

/**
 * Configuration to use `IAM Roles Anywhere <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/introduction.html>`_
 * to retrieve AWS credentials.
 * [#next-free-field: 9]
 */
export interface IAMRolesAnywhereCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.IAMRolesAnywhereCredentialProvider";
  /** The ARN of the role to assume via the IAM Roles Anywhere sessions API. See `Configure Roles <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/getting-started.html#getting-started-step2>`_ for more details. */
  role_arn?:
    | string
    | undefined;
  /**
   * The certificate used for authenticating to the IAM Roles Anywhere service.
   * This certificate must match one configured in the IAM Roles Anywhere profile. See `Configure Roles <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/getting-started.html#getting-started-step2>`_ for more details.
   */
  certificate?:
    | DataSource
    | undefined;
  /**
   * The optional certificate chain, required when you are using a subordinate certificate authority for certificate issuance.
   * A certificate chain can contain a maximum of 5 elements, see `The IAM Roles Anywhere authentication process <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/authentication.html>`_ for more details.
   */
  certificate_chain?:
    | DataSource
    | undefined;
  /** The TLS private key matching the certificate provided. */
  private_key?:
    | DataSource
    | undefined;
  /**
   * The arn of the IAM Roles Anywhere trust anchor configured in your AWS account. A trust anchor in IAM Roles anywhere establishes
   * trust between your certificate authority (CA) and AWS. See `Establish trust <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/getting-started.html#getting-started-step1>`_ for more details.
   */
  trust_anchor_arn?:
    | string
    | undefined;
  /** The IAM Roles Anywhere profile ARN configured in your AWS account. */
  profile_arn?:
    | string
    | undefined;
  /** An optional role session name, used when identifying the role in subsequent AWS API calls. */
  role_session_name?:
    | string
    | undefined;
  /**
   * An optional session duration, used when calculating the maximum time before vended credentials expire. This value cannot exceed the value configured
   * in the IAM Roles Anywhere profile and the resultant session duration is calculate by the formula `here <https://docs.aws.amazon.com/rolesanywhere/latest/userguide/authentication-create-session.html#credentials-object>`_.
   * If no session duration is provided here, the session duration is sourced from the IAM Roles Anywhere profile.
   */
  session_duration?: Duration | undefined;
}

/**
 * The Config Credential Provider has no configurable parameters, but listing it in a custom credential provider chain will enable this
 * credential provider.
 */
export interface ConfigCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.ConfigCredentialProvider";
}

/**
 * The Container Credential Provider has no configurable parameters, but listing it in a custom credential provider chain will enable this
 * credential provider.
 */
export interface ContainerCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.ContainerCredentialProvider";
}

/**
 * The Environment Credential Provider has no configurable parameters, but listing it in a custom credential provider chain will enable this
 * credential provider.
 */
export interface EnvironmentCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.EnvironmentCredentialProvider";
}

/**
 * The Instance Profile Credential Provider has no configurable parameters, but listing it in a custom credential provider chain will enable this
 * credential provider.
 */
export interface InstanceProfileCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.InstanceProfileCredentialProvider";
}

/**
 * Configuration to use `AssumeRole <https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html>`_ for retrieving new credentials, via role chaining.
 * [#next-free-field: 6]
 */
export interface AssumeRoleCredentialProvider {
  $type: "envoy.extensions.common.aws.v3.AssumeRoleCredentialProvider";
  /** The ARN of the role to assume. */
  role_arn?:
    | string
    | undefined;
  /** Optional string value to use as the role session name */
  role_session_name?:
    | string
    | undefined;
  /** Optional string value to use as the externalId */
  external_id?:
    | string
    | undefined;
  /**
   * An optional duration, in seconds, of the role session. Minimum role duration is 900s (5 minutes) and maximum is 43200s (12 hours).
   * If the session duration is not provided, the default will be determined using the `table described here <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage-assume.html>`_.
   */
  session_duration?:
    | Duration
    | undefined;
  /**
   * The credential provider for signing the AssumeRole request. This is optional and if not set,
   * it will be retrieved from the procedure described in :ref:`config_http_filters_aws_request_signing`.
   * This list of credential providers cannot include an AssumeRole credential provider and if one is provided
   * it will be ignored.
   */
  credential_provider?: AwsCredentialProvider | undefined;
}

function createBaseAwsCredentialProvider(): AwsCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.AwsCredentialProvider" };
}

export const AwsCredentialProvider: MessageFns<
  AwsCredentialProvider,
  "envoy.extensions.common.aws.v3.AwsCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.AwsCredentialProvider" as const,

  encode(message: AwsCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.assume_role_with_web_identity_provider !== undefined) {
      AssumeRoleWithWebIdentityCredentialProvider.encode(
        message.assume_role_with_web_identity_provider,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.inline_credential !== undefined) {
      InlineCredentialProvider.encode(message.inline_credential, writer.uint32(18).fork()).join();
    }
    if (message.credentials_file_provider !== undefined) {
      CredentialsFileCredentialProvider.encode(message.credentials_file_provider, writer.uint32(26).fork()).join();
    }
    if (message.custom_credential_provider_chain !== undefined && message.custom_credential_provider_chain !== false) {
      writer.uint32(32).bool(message.custom_credential_provider_chain);
    }
    if (message.iam_roles_anywhere_credential_provider !== undefined) {
      IAMRolesAnywhereCredentialProvider.encode(
        message.iam_roles_anywhere_credential_provider,
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.config_credential_provider !== undefined) {
      ConfigCredentialProvider.encode(message.config_credential_provider, writer.uint32(50).fork()).join();
    }
    if (message.container_credential_provider !== undefined) {
      ContainerCredentialProvider.encode(message.container_credential_provider, writer.uint32(58).fork()).join();
    }
    if (message.environment_credential_provider !== undefined) {
      EnvironmentCredentialProvider.encode(message.environment_credential_provider, writer.uint32(66).fork()).join();
    }
    if (message.instance_profile_credential_provider !== undefined) {
      InstanceProfileCredentialProvider.encode(message.instance_profile_credential_provider, writer.uint32(74).fork())
        .join();
    }
    if (message.assume_role_credential_provider !== undefined) {
      AssumeRoleCredentialProvider.encode(message.assume_role_credential_provider, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AwsCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAwsCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.assume_role_with_web_identity_provider = AssumeRoleWithWebIdentityCredentialProvider.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inline_credential = InlineCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.credentials_file_provider = CredentialsFileCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.custom_credential_provider_chain = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.iam_roles_anywhere_credential_provider = IAMRolesAnywhereCredentialProvider.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.config_credential_provider = ConfigCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.container_credential_provider = ContainerCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.environment_credential_provider = EnvironmentCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.instance_profile_credential_provider = InstanceProfileCredentialProvider.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.assume_role_credential_provider = AssumeRoleCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AwsCredentialProvider {
    return {
      $type: AwsCredentialProvider.$type,
      assume_role_with_web_identity_provider: isSet(object.assume_role_with_web_identity_provider)
        ? AssumeRoleWithWebIdentityCredentialProvider.fromJSON(object.assume_role_with_web_identity_provider)
        : undefined,
      inline_credential: isSet(object.inline_credential)
        ? InlineCredentialProvider.fromJSON(object.inline_credential)
        : undefined,
      credentials_file_provider: isSet(object.credentials_file_provider)
        ? CredentialsFileCredentialProvider.fromJSON(object.credentials_file_provider)
        : undefined,
      custom_credential_provider_chain: isSet(object.custom_credential_provider_chain)
        ? globalThis.Boolean(object.custom_credential_provider_chain)
        : undefined,
      iam_roles_anywhere_credential_provider: isSet(object.iam_roles_anywhere_credential_provider)
        ? IAMRolesAnywhereCredentialProvider.fromJSON(object.iam_roles_anywhere_credential_provider)
        : undefined,
      config_credential_provider: isSet(object.config_credential_provider)
        ? ConfigCredentialProvider.fromJSON(object.config_credential_provider)
        : undefined,
      container_credential_provider: isSet(object.container_credential_provider)
        ? ContainerCredentialProvider.fromJSON(object.container_credential_provider)
        : undefined,
      environment_credential_provider: isSet(object.environment_credential_provider)
        ? EnvironmentCredentialProvider.fromJSON(object.environment_credential_provider)
        : undefined,
      instance_profile_credential_provider: isSet(object.instance_profile_credential_provider)
        ? InstanceProfileCredentialProvider.fromJSON(object.instance_profile_credential_provider)
        : undefined,
      assume_role_credential_provider: isSet(object.assume_role_credential_provider)
        ? AssumeRoleCredentialProvider.fromJSON(object.assume_role_credential_provider)
        : undefined,
    };
  },

  toJSON(message: AwsCredentialProvider): unknown {
    const obj: any = {};
    if (message.assume_role_with_web_identity_provider !== undefined) {
      obj.assume_role_with_web_identity_provider = AssumeRoleWithWebIdentityCredentialProvider.toJSON(
        message.assume_role_with_web_identity_provider,
      );
    }
    if (message.inline_credential !== undefined) {
      obj.inline_credential = InlineCredentialProvider.toJSON(message.inline_credential);
    }
    if (message.credentials_file_provider !== undefined) {
      obj.credentials_file_provider = CredentialsFileCredentialProvider.toJSON(message.credentials_file_provider);
    }
    if (message.custom_credential_provider_chain !== undefined) {
      obj.custom_credential_provider_chain = message.custom_credential_provider_chain;
    }
    if (message.iam_roles_anywhere_credential_provider !== undefined) {
      obj.iam_roles_anywhere_credential_provider = IAMRolesAnywhereCredentialProvider.toJSON(
        message.iam_roles_anywhere_credential_provider,
      );
    }
    if (message.config_credential_provider !== undefined) {
      obj.config_credential_provider = ConfigCredentialProvider.toJSON(message.config_credential_provider);
    }
    if (message.container_credential_provider !== undefined) {
      obj.container_credential_provider = ContainerCredentialProvider.toJSON(message.container_credential_provider);
    }
    if (message.environment_credential_provider !== undefined) {
      obj.environment_credential_provider = EnvironmentCredentialProvider.toJSON(
        message.environment_credential_provider,
      );
    }
    if (message.instance_profile_credential_provider !== undefined) {
      obj.instance_profile_credential_provider = InstanceProfileCredentialProvider.toJSON(
        message.instance_profile_credential_provider,
      );
    }
    if (message.assume_role_credential_provider !== undefined) {
      obj.assume_role_credential_provider = AssumeRoleCredentialProvider.toJSON(
        message.assume_role_credential_provider,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AwsCredentialProvider>, I>>(base?: I): AwsCredentialProvider {
    return AwsCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AwsCredentialProvider>, I>>(object: I): AwsCredentialProvider {
    const message = createBaseAwsCredentialProvider();
    message.assume_role_with_web_identity_provider =
      (object.assume_role_with_web_identity_provider !== undefined &&
          object.assume_role_with_web_identity_provider !== null)
        ? AssumeRoleWithWebIdentityCredentialProvider.fromPartial(object.assume_role_with_web_identity_provider)
        : undefined;
    message.inline_credential = (object.inline_credential !== undefined && object.inline_credential !== null)
      ? InlineCredentialProvider.fromPartial(object.inline_credential)
      : undefined;
    message.credentials_file_provider =
      (object.credentials_file_provider !== undefined && object.credentials_file_provider !== null)
        ? CredentialsFileCredentialProvider.fromPartial(object.credentials_file_provider)
        : undefined;
    message.custom_credential_provider_chain = object.custom_credential_provider_chain ?? undefined;
    message.iam_roles_anywhere_credential_provider =
      (object.iam_roles_anywhere_credential_provider !== undefined &&
          object.iam_roles_anywhere_credential_provider !== null)
        ? IAMRolesAnywhereCredentialProvider.fromPartial(object.iam_roles_anywhere_credential_provider)
        : undefined;
    message.config_credential_provider =
      (object.config_credential_provider !== undefined && object.config_credential_provider !== null)
        ? ConfigCredentialProvider.fromPartial(object.config_credential_provider)
        : undefined;
    message.container_credential_provider =
      (object.container_credential_provider !== undefined && object.container_credential_provider !== null)
        ? ContainerCredentialProvider.fromPartial(object.container_credential_provider)
        : undefined;
    message.environment_credential_provider =
      (object.environment_credential_provider !== undefined && object.environment_credential_provider !== null)
        ? EnvironmentCredentialProvider.fromPartial(object.environment_credential_provider)
        : undefined;
    message.instance_profile_credential_provider =
      (object.instance_profile_credential_provider !== undefined &&
          object.instance_profile_credential_provider !== null)
        ? InstanceProfileCredentialProvider.fromPartial(object.instance_profile_credential_provider)
        : undefined;
    message.assume_role_credential_provider =
      (object.assume_role_credential_provider !== undefined && object.assume_role_credential_provider !== null)
        ? AssumeRoleCredentialProvider.fromPartial(object.assume_role_credential_provider)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(AwsCredentialProvider.$type, AwsCredentialProvider);

function createBaseInlineCredentialProvider(): InlineCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.InlineCredentialProvider" };
}

export const InlineCredentialProvider: MessageFns<
  InlineCredentialProvider,
  "envoy.extensions.common.aws.v3.InlineCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.InlineCredentialProvider" as const,

  encode(message: InlineCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access_key_id !== undefined && message.access_key_id !== "") {
      writer.uint32(10).string(message.access_key_id);
    }
    if (message.secret_access_key !== undefined && message.secret_access_key !== "") {
      writer.uint32(18).string(message.secret_access_key);
    }
    if (message.session_token !== undefined && message.session_token !== "") {
      writer.uint32(26).string(message.session_token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InlineCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInlineCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access_key_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret_access_key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.session_token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InlineCredentialProvider {
    return {
      $type: InlineCredentialProvider.$type,
      access_key_id: isSet(object.access_key_id) ? globalThis.String(object.access_key_id) : undefined,
      secret_access_key: isSet(object.secret_access_key) ? globalThis.String(object.secret_access_key) : undefined,
      session_token: isSet(object.session_token) ? globalThis.String(object.session_token) : undefined,
    };
  },

  toJSON(message: InlineCredentialProvider): unknown {
    const obj: any = {};
    if (message.access_key_id !== undefined) {
      obj.access_key_id = message.access_key_id;
    }
    if (message.secret_access_key !== undefined) {
      obj.secret_access_key = message.secret_access_key;
    }
    if (message.session_token !== undefined) {
      obj.session_token = message.session_token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InlineCredentialProvider>, I>>(base?: I): InlineCredentialProvider {
    return InlineCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InlineCredentialProvider>, I>>(object: I): InlineCredentialProvider {
    const message = createBaseInlineCredentialProvider();
    message.access_key_id = object.access_key_id ?? undefined;
    message.secret_access_key = object.secret_access_key ?? undefined;
    message.session_token = object.session_token ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(InlineCredentialProvider.$type, InlineCredentialProvider);

function createBaseAssumeRoleWithWebIdentityCredentialProvider(): AssumeRoleWithWebIdentityCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.AssumeRoleWithWebIdentityCredentialProvider" };
}

export const AssumeRoleWithWebIdentityCredentialProvider: MessageFns<
  AssumeRoleWithWebIdentityCredentialProvider,
  "envoy.extensions.common.aws.v3.AssumeRoleWithWebIdentityCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.AssumeRoleWithWebIdentityCredentialProvider" as const,

  encode(
    message: AssumeRoleWithWebIdentityCredentialProvider,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.web_identity_token_data_source !== undefined) {
      DataSource.encode(message.web_identity_token_data_source, writer.uint32(10).fork()).join();
    }
    if (message.role_arn !== undefined && message.role_arn !== "") {
      writer.uint32(18).string(message.role_arn);
    }
    if (message.role_session_name !== undefined && message.role_session_name !== "") {
      writer.uint32(26).string(message.role_session_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssumeRoleWithWebIdentityCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssumeRoleWithWebIdentityCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.web_identity_token_data_source = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.role_arn = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role_session_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssumeRoleWithWebIdentityCredentialProvider {
    return {
      $type: AssumeRoleWithWebIdentityCredentialProvider.$type,
      web_identity_token_data_source: isSet(object.web_identity_token_data_source)
        ? DataSource.fromJSON(object.web_identity_token_data_source)
        : undefined,
      role_arn: isSet(object.role_arn) ? globalThis.String(object.role_arn) : undefined,
      role_session_name: isSet(object.role_session_name) ? globalThis.String(object.role_session_name) : undefined,
    };
  },

  toJSON(message: AssumeRoleWithWebIdentityCredentialProvider): unknown {
    const obj: any = {};
    if (message.web_identity_token_data_source !== undefined) {
      obj.web_identity_token_data_source = DataSource.toJSON(message.web_identity_token_data_source);
    }
    if (message.role_arn !== undefined) {
      obj.role_arn = message.role_arn;
    }
    if (message.role_session_name !== undefined) {
      obj.role_session_name = message.role_session_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssumeRoleWithWebIdentityCredentialProvider>, I>>(
    base?: I,
  ): AssumeRoleWithWebIdentityCredentialProvider {
    return AssumeRoleWithWebIdentityCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssumeRoleWithWebIdentityCredentialProvider>, I>>(
    object: I,
  ): AssumeRoleWithWebIdentityCredentialProvider {
    const message = createBaseAssumeRoleWithWebIdentityCredentialProvider();
    message.web_identity_token_data_source =
      (object.web_identity_token_data_source !== undefined && object.web_identity_token_data_source !== null)
        ? DataSource.fromPartial(object.web_identity_token_data_source)
        : undefined;
    message.role_arn = object.role_arn ?? undefined;
    message.role_session_name = object.role_session_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(AssumeRoleWithWebIdentityCredentialProvider.$type, AssumeRoleWithWebIdentityCredentialProvider);

function createBaseCredentialsFileCredentialProvider(): CredentialsFileCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.CredentialsFileCredentialProvider" };
}

export const CredentialsFileCredentialProvider: MessageFns<
  CredentialsFileCredentialProvider,
  "envoy.extensions.common.aws.v3.CredentialsFileCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.CredentialsFileCredentialProvider" as const,

  encode(message: CredentialsFileCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credentials_data_source !== undefined) {
      DataSource.encode(message.credentials_data_source, writer.uint32(10).fork()).join();
    }
    if (message.profile !== undefined && message.profile !== "") {
      writer.uint32(18).string(message.profile);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CredentialsFileCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCredentialsFileCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credentials_data_source = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.profile = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CredentialsFileCredentialProvider {
    return {
      $type: CredentialsFileCredentialProvider.$type,
      credentials_data_source: isSet(object.credentials_data_source)
        ? DataSource.fromJSON(object.credentials_data_source)
        : undefined,
      profile: isSet(object.profile) ? globalThis.String(object.profile) : undefined,
    };
  },

  toJSON(message: CredentialsFileCredentialProvider): unknown {
    const obj: any = {};
    if (message.credentials_data_source !== undefined) {
      obj.credentials_data_source = DataSource.toJSON(message.credentials_data_source);
    }
    if (message.profile !== undefined) {
      obj.profile = message.profile;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CredentialsFileCredentialProvider>, I>>(
    base?: I,
  ): CredentialsFileCredentialProvider {
    return CredentialsFileCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CredentialsFileCredentialProvider>, I>>(
    object: I,
  ): CredentialsFileCredentialProvider {
    const message = createBaseCredentialsFileCredentialProvider();
    message.credentials_data_source =
      (object.credentials_data_source !== undefined && object.credentials_data_source !== null)
        ? DataSource.fromPartial(object.credentials_data_source)
        : undefined;
    message.profile = object.profile ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(CredentialsFileCredentialProvider.$type, CredentialsFileCredentialProvider);

function createBaseIAMRolesAnywhereCredentialProvider(): IAMRolesAnywhereCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.IAMRolesAnywhereCredentialProvider" };
}

export const IAMRolesAnywhereCredentialProvider: MessageFns<
  IAMRolesAnywhereCredentialProvider,
  "envoy.extensions.common.aws.v3.IAMRolesAnywhereCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.IAMRolesAnywhereCredentialProvider" as const,

  encode(message: IAMRolesAnywhereCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role_arn !== undefined && message.role_arn !== "") {
      writer.uint32(10).string(message.role_arn);
    }
    if (message.certificate !== undefined) {
      DataSource.encode(message.certificate, writer.uint32(18).fork()).join();
    }
    if (message.certificate_chain !== undefined) {
      DataSource.encode(message.certificate_chain, writer.uint32(26).fork()).join();
    }
    if (message.private_key !== undefined) {
      DataSource.encode(message.private_key, writer.uint32(34).fork()).join();
    }
    if (message.trust_anchor_arn !== undefined && message.trust_anchor_arn !== "") {
      writer.uint32(42).string(message.trust_anchor_arn);
    }
    if (message.profile_arn !== undefined && message.profile_arn !== "") {
      writer.uint32(50).string(message.profile_arn);
    }
    if (message.role_session_name !== undefined && message.role_session_name !== "") {
      writer.uint32(58).string(message.role_session_name);
    }
    if (message.session_duration !== undefined) {
      Duration.encode(message.session_duration, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IAMRolesAnywhereCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIAMRolesAnywhereCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role_arn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.certificate = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.certificate_chain = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.private_key = DataSource.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.trust_anchor_arn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.profile_arn = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.role_session_name = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.session_duration = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IAMRolesAnywhereCredentialProvider {
    return {
      $type: IAMRolesAnywhereCredentialProvider.$type,
      role_arn: isSet(object.role_arn) ? globalThis.String(object.role_arn) : undefined,
      certificate: isSet(object.certificate) ? DataSource.fromJSON(object.certificate) : undefined,
      certificate_chain: isSet(object.certificate_chain) ? DataSource.fromJSON(object.certificate_chain) : undefined,
      private_key: isSet(object.private_key) ? DataSource.fromJSON(object.private_key) : undefined,
      trust_anchor_arn: isSet(object.trust_anchor_arn) ? globalThis.String(object.trust_anchor_arn) : undefined,
      profile_arn: isSet(object.profile_arn) ? globalThis.String(object.profile_arn) : undefined,
      role_session_name: isSet(object.role_session_name) ? globalThis.String(object.role_session_name) : undefined,
      session_duration: isSet(object.session_duration) ? Duration.fromJSON(object.session_duration) : undefined,
    };
  },

  toJSON(message: IAMRolesAnywhereCredentialProvider): unknown {
    const obj: any = {};
    if (message.role_arn !== undefined) {
      obj.role_arn = message.role_arn;
    }
    if (message.certificate !== undefined) {
      obj.certificate = DataSource.toJSON(message.certificate);
    }
    if (message.certificate_chain !== undefined) {
      obj.certificate_chain = DataSource.toJSON(message.certificate_chain);
    }
    if (message.private_key !== undefined) {
      obj.private_key = DataSource.toJSON(message.private_key);
    }
    if (message.trust_anchor_arn !== undefined) {
      obj.trust_anchor_arn = message.trust_anchor_arn;
    }
    if (message.profile_arn !== undefined) {
      obj.profile_arn = message.profile_arn;
    }
    if (message.role_session_name !== undefined) {
      obj.role_session_name = message.role_session_name;
    }
    if (message.session_duration !== undefined) {
      obj.session_duration = Duration.toJSON(message.session_duration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IAMRolesAnywhereCredentialProvider>, I>>(
    base?: I,
  ): IAMRolesAnywhereCredentialProvider {
    return IAMRolesAnywhereCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IAMRolesAnywhereCredentialProvider>, I>>(
    object: I,
  ): IAMRolesAnywhereCredentialProvider {
    const message = createBaseIAMRolesAnywhereCredentialProvider();
    message.role_arn = object.role_arn ?? undefined;
    message.certificate = (object.certificate !== undefined && object.certificate !== null)
      ? DataSource.fromPartial(object.certificate)
      : undefined;
    message.certificate_chain = (object.certificate_chain !== undefined && object.certificate_chain !== null)
      ? DataSource.fromPartial(object.certificate_chain)
      : undefined;
    message.private_key = (object.private_key !== undefined && object.private_key !== null)
      ? DataSource.fromPartial(object.private_key)
      : undefined;
    message.trust_anchor_arn = object.trust_anchor_arn ?? undefined;
    message.profile_arn = object.profile_arn ?? undefined;
    message.role_session_name = object.role_session_name ?? undefined;
    message.session_duration = (object.session_duration !== undefined && object.session_duration !== null)
      ? Duration.fromPartial(object.session_duration)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(IAMRolesAnywhereCredentialProvider.$type, IAMRolesAnywhereCredentialProvider);

function createBaseConfigCredentialProvider(): ConfigCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.ConfigCredentialProvider" };
}

export const ConfigCredentialProvider: MessageFns<
  ConfigCredentialProvider,
  "envoy.extensions.common.aws.v3.ConfigCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.ConfigCredentialProvider" as const,

  encode(_: ConfigCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ConfigCredentialProvider {
    return { $type: ConfigCredentialProvider.$type };
  },

  toJSON(_: ConfigCredentialProvider): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigCredentialProvider>, I>>(base?: I): ConfigCredentialProvider {
    return ConfigCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigCredentialProvider>, I>>(_: I): ConfigCredentialProvider {
    const message = createBaseConfigCredentialProvider();
    return message;
  },
};

messageTypeRegistry.set(ConfigCredentialProvider.$type, ConfigCredentialProvider);

function createBaseContainerCredentialProvider(): ContainerCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.ContainerCredentialProvider" };
}

export const ContainerCredentialProvider: MessageFns<
  ContainerCredentialProvider,
  "envoy.extensions.common.aws.v3.ContainerCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.ContainerCredentialProvider" as const,

  encode(_: ContainerCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContainerCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContainerCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ContainerCredentialProvider {
    return { $type: ContainerCredentialProvider.$type };
  },

  toJSON(_: ContainerCredentialProvider): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ContainerCredentialProvider>, I>>(base?: I): ContainerCredentialProvider {
    return ContainerCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContainerCredentialProvider>, I>>(_: I): ContainerCredentialProvider {
    const message = createBaseContainerCredentialProvider();
    return message;
  },
};

messageTypeRegistry.set(ContainerCredentialProvider.$type, ContainerCredentialProvider);

function createBaseEnvironmentCredentialProvider(): EnvironmentCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.EnvironmentCredentialProvider" };
}

export const EnvironmentCredentialProvider: MessageFns<
  EnvironmentCredentialProvider,
  "envoy.extensions.common.aws.v3.EnvironmentCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.EnvironmentCredentialProvider" as const,

  encode(_: EnvironmentCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnvironmentCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnvironmentCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EnvironmentCredentialProvider {
    return { $type: EnvironmentCredentialProvider.$type };
  },

  toJSON(_: EnvironmentCredentialProvider): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EnvironmentCredentialProvider>, I>>(base?: I): EnvironmentCredentialProvider {
    return EnvironmentCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EnvironmentCredentialProvider>, I>>(_: I): EnvironmentCredentialProvider {
    const message = createBaseEnvironmentCredentialProvider();
    return message;
  },
};

messageTypeRegistry.set(EnvironmentCredentialProvider.$type, EnvironmentCredentialProvider);

function createBaseInstanceProfileCredentialProvider(): InstanceProfileCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.InstanceProfileCredentialProvider" };
}

export const InstanceProfileCredentialProvider: MessageFns<
  InstanceProfileCredentialProvider,
  "envoy.extensions.common.aws.v3.InstanceProfileCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.InstanceProfileCredentialProvider" as const,

  encode(_: InstanceProfileCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceProfileCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceProfileCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): InstanceProfileCredentialProvider {
    return { $type: InstanceProfileCredentialProvider.$type };
  },

  toJSON(_: InstanceProfileCredentialProvider): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<InstanceProfileCredentialProvider>, I>>(
    base?: I,
  ): InstanceProfileCredentialProvider {
    return InstanceProfileCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InstanceProfileCredentialProvider>, I>>(
    _: I,
  ): InstanceProfileCredentialProvider {
    const message = createBaseInstanceProfileCredentialProvider();
    return message;
  },
};

messageTypeRegistry.set(InstanceProfileCredentialProvider.$type, InstanceProfileCredentialProvider);

function createBaseAssumeRoleCredentialProvider(): AssumeRoleCredentialProvider {
  return { $type: "envoy.extensions.common.aws.v3.AssumeRoleCredentialProvider" };
}

export const AssumeRoleCredentialProvider: MessageFns<
  AssumeRoleCredentialProvider,
  "envoy.extensions.common.aws.v3.AssumeRoleCredentialProvider"
> = {
  $type: "envoy.extensions.common.aws.v3.AssumeRoleCredentialProvider" as const,

  encode(message: AssumeRoleCredentialProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role_arn !== undefined && message.role_arn !== "") {
      writer.uint32(10).string(message.role_arn);
    }
    if (message.role_session_name !== undefined && message.role_session_name !== "") {
      writer.uint32(18).string(message.role_session_name);
    }
    if (message.external_id !== undefined && message.external_id !== "") {
      writer.uint32(26).string(message.external_id);
    }
    if (message.session_duration !== undefined) {
      Duration.encode(message.session_duration, writer.uint32(34).fork()).join();
    }
    if (message.credential_provider !== undefined) {
      AwsCredentialProvider.encode(message.credential_provider, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AssumeRoleCredentialProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAssumeRoleCredentialProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role_arn = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.role_session_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.external_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.session_duration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.credential_provider = AwsCredentialProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AssumeRoleCredentialProvider {
    return {
      $type: AssumeRoleCredentialProvider.$type,
      role_arn: isSet(object.role_arn) ? globalThis.String(object.role_arn) : undefined,
      role_session_name: isSet(object.role_session_name) ? globalThis.String(object.role_session_name) : undefined,
      external_id: isSet(object.external_id) ? globalThis.String(object.external_id) : undefined,
      session_duration: isSet(object.session_duration) ? Duration.fromJSON(object.session_duration) : undefined,
      credential_provider: isSet(object.credential_provider)
        ? AwsCredentialProvider.fromJSON(object.credential_provider)
        : undefined,
    };
  },

  toJSON(message: AssumeRoleCredentialProvider): unknown {
    const obj: any = {};
    if (message.role_arn !== undefined) {
      obj.role_arn = message.role_arn;
    }
    if (message.role_session_name !== undefined) {
      obj.role_session_name = message.role_session_name;
    }
    if (message.external_id !== undefined) {
      obj.external_id = message.external_id;
    }
    if (message.session_duration !== undefined) {
      obj.session_duration = Duration.toJSON(message.session_duration);
    }
    if (message.credential_provider !== undefined) {
      obj.credential_provider = AwsCredentialProvider.toJSON(message.credential_provider);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AssumeRoleCredentialProvider>, I>>(base?: I): AssumeRoleCredentialProvider {
    return AssumeRoleCredentialProvider.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AssumeRoleCredentialProvider>, I>>(object: I): AssumeRoleCredentialProvider {
    const message = createBaseAssumeRoleCredentialProvider();
    message.role_arn = object.role_arn ?? undefined;
    message.role_session_name = object.role_session_name ?? undefined;
    message.external_id = object.external_id ?? undefined;
    message.session_duration = (object.session_duration !== undefined && object.session_duration !== null)
      ? Duration.fromPartial(object.session_duration)
      : undefined;
    message.credential_provider = (object.credential_provider !== undefined && object.credential_provider !== null)
      ? AwsCredentialProvider.fromPartial(object.credential_provider)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(AssumeRoleCredentialProvider.$type, AssumeRoleCredentialProvider);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
