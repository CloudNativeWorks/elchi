// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/clusters/aggregate/v3/cluster.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { ConfigSource } from "../../../../config/core/v3/config_source";

export const protobufPackage = "envoy.extensions.clusters.aggregate.v3";

/**
 * Configuration for the aggregate cluster. See the :ref:`architecture overview
 * <arch_overview_aggregate_cluster>` for more information.
 * [#extension: envoy.clusters.aggregate]
 */
export interface ClusterConfig {
  $type: "envoy.extensions.clusters.aggregate.v3.ClusterConfig";
  /**
   * Load balancing clusters in aggregate cluster. Clusters are prioritized based on the order they
   * appear in this list.
   */
  clusters?: string[] | undefined;
}

/**
 * Configures an aggregate cluster whose
 * :ref:`ClusterConfig <envoy_v3_api_msg_extensions.clusters.aggregate.v3.ClusterConfig>`
 * is to be fetched from a separate xDS resource.
 * [#extension: envoy.clusters.aggregate_resource]
 * [#not-implemented-hide:]
 */
export interface AggregateClusterResource {
  $type: "envoy.extensions.clusters.aggregate.v3.AggregateClusterResource";
  /**
   * Configuration source specifier for the ClusterConfig resource.
   * Only the aggregated protocol variants are supported; if configured
   * otherwise, the cluster resource will be NACKed.
   */
  config_source?:
    | ConfigSource
    | undefined;
  /** The name of the ClusterConfig resource to subscribe to. */
  resource_name?: string | undefined;
}

function createBaseClusterConfig(): ClusterConfig {
  return { $type: "envoy.extensions.clusters.aggregate.v3.ClusterConfig" };
}

export const ClusterConfig: MessageFns<ClusterConfig, "envoy.extensions.clusters.aggregate.v3.ClusterConfig"> = {
  $type: "envoy.extensions.clusters.aggregate.v3.ClusterConfig" as const,

  encode(message: ClusterConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clusters !== undefined && message.clusters.length !== 0) {
      for (const v of message.clusters) {
        writer.uint32(10).string(v!);
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClusterConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClusterConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.clusters === undefined) {
            message.clusters = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.clusters!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClusterConfig {
    return {
      $type: ClusterConfig.$type,
      clusters: globalThis.Array.isArray(object?.clusters)
        ? object.clusters.map((e: any) => globalThis.String(e))
        : undefined,
    };
  },

  toJSON(message: ClusterConfig): unknown {
    const obj: any = {};
    if (message.clusters?.length) {
      obj.clusters = message.clusters;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClusterConfig>, I>>(base?: I): ClusterConfig {
    return ClusterConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClusterConfig>, I>>(object: I): ClusterConfig {
    const message = createBaseClusterConfig();
    message.clusters = object.clusters?.map((e) => e) || undefined;
    return message;
  },
};

messageTypeRegistry.set(ClusterConfig.$type, ClusterConfig);

function createBaseAggregateClusterResource(): AggregateClusterResource {
  return { $type: "envoy.extensions.clusters.aggregate.v3.AggregateClusterResource" };
}

export const AggregateClusterResource: MessageFns<
  AggregateClusterResource,
  "envoy.extensions.clusters.aggregate.v3.AggregateClusterResource"
> = {
  $type: "envoy.extensions.clusters.aggregate.v3.AggregateClusterResource" as const,

  encode(message: AggregateClusterResource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config_source !== undefined) {
      ConfigSource.encode(message.config_source, writer.uint32(10).fork()).join();
    }
    if (message.resource_name !== undefined && message.resource_name !== "") {
      writer.uint32(18).string(message.resource_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AggregateClusterResource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAggregateClusterResource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config_source = ConfigSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resource_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AggregateClusterResource {
    return {
      $type: AggregateClusterResource.$type,
      config_source: isSet(object.config_source) ? ConfigSource.fromJSON(object.config_source) : undefined,
      resource_name: isSet(object.resource_name) ? globalThis.String(object.resource_name) : undefined,
    };
  },

  toJSON(message: AggregateClusterResource): unknown {
    const obj: any = {};
    if (message.config_source !== undefined) {
      obj.config_source = ConfigSource.toJSON(message.config_source);
    }
    if (message.resource_name !== undefined) {
      obj.resource_name = message.resource_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AggregateClusterResource>, I>>(base?: I): AggregateClusterResource {
    return AggregateClusterResource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AggregateClusterResource>, I>>(object: I): AggregateClusterResource {
    const message = createBaseAggregateClusterResource();
    message.config_source = (object.config_source !== undefined && object.config_source !== null)
      ? ConfigSource.fromPartial(object.config_source)
      : undefined;
    message.resource_name = object.resource_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(AggregateClusterResource.$type, AggregateClusterResource);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
