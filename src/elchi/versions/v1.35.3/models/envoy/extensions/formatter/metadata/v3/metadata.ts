// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/formatter/metadata/v3/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.formatter.metadata.v3";

/**
 * %METADATA(TYPE:NAMESPACE:KEY):Z%
 *    :ref:`Metadata <envoy_v3_api_msg_config.core.v3.Metadata>` info,
 *    where TYPE is type of metadata (see above for supported types),
 *    NAMESPACE is the filter namespace used when setting the metadata, KEY is an optional
 *    lookup key in the namespace with the option of specifying nested keys separated by ':',
 *    and Z is an optional parameter denoting string truncation up to Z characters long.
 *    The data will be logged as a JSON string. For example, for the following ROUTE metadata:
 *
 *    ``com.test.my_filter: {"test_key": "foo", "test_object": {"inner_key": "bar"}}``
 *
 *    * %METADATA(ROUTE:com.test.my_filter)% will log: ``{"test_key": "foo", "test_object": {"inner_key": "bar"}}``
 *    * %METADATA(ROUTE:com.test.my_filter:test_key)% will log: ``foo``
 *    * %METADATA(ROUTE:com.test.my_filter:test_object)% will log: ``{"inner_key": "bar"}``
 *    * %METADATA(ROUTE:com.test.my_filter:test_object:inner_key)% will log: ``bar``
 *    * %METADATA(ROUTE:com.unknown_filter)% will log: ``-``
 *    * %METADATA(ROUTE:com.test.my_filter:unknown_key)% will log: ``-``
 *    * %METADATA(ROUTE:com.test.my_filter):25% will log (truncation at 25 characters): ``{"test_key": "foo", "test``
 *
 *  .. note::
 *
 *    For typed JSON logs, this operator renders a single value with string, numeric, or boolean type
 *    when the referenced key is a simple value. If the referenced key is a struct or list value, a
 *    JSON struct or list is rendered. Structs and lists may be nested. In any event, the maximum
 *    length is ignored.
 *
 *  .. note::
 *
 *    METADATA(DYNAMIC:NAMESPACE:KEY):Z is equivalent to :ref:`DYNAMIC_METADATA(NAMESPACE:KEY):Z<config_access_log_format_dynamic_metadata>`
 *    METADATA(CLUSTER:NAMESPACE:KEY):Z is equivalent to :ref:`CLUSTER_METADATA(NAMESPACE:KEY):Z<config_access_log_format_cluster_metadata>`
 *    METADATA(UPSTREAM_HOST:NAMESPACE:KEY):Z is equivalent to :ref:`UPSTREAM_METADATA(NAMESPACE:KEY):Z<config_access_log_format_upstream_host_metadata>`
 *
 * .. warning::
 *   This extension is treated as built-in extension and will be enabled by default now.
 *   It is unnecessary to configure this extension.
 */
export interface Metadata {
  $type: "envoy.extensions.formatter.metadata.v3.Metadata";
}

function createBaseMetadata(): Metadata {
  return { $type: "envoy.extensions.formatter.metadata.v3.Metadata" };
}

export const Metadata: MessageFns<Metadata, "envoy.extensions.formatter.metadata.v3.Metadata"> = {
  $type: "envoy.extensions.formatter.metadata.v3.Metadata" as const,

  encode(_: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Metadata {
    return { $type: Metadata.$type };
  },

  toJSON(_: Metadata): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(_: I): Metadata {
    const message = createBaseMetadata();
    return message;
  },
};

messageTypeRegistry.set(Metadata.$type, Metadata);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
