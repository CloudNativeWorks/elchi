// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/health_checkers/thrift/v3/thrift.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import {
  ProtocolType,
  protocolTypeFromJSON,
  protocolTypeToJSON,
  protocolTypeToNumber,
  TransportType,
  transportTypeFromJSON,
  transportTypeToJSON,
  transportTypeToNumber,
} from "../../../filters/network/thrift_proxy/v3/thrift_proxy";

export const protobufPackage = "envoy.extensions.health_checkers.thrift.v3";

export interface Thrift {
  $type: "envoy.extensions.health_checkers.thrift.v3.Thrift";
  /**
   * Specifies the method name that will be set on each health check request dispatched to an upstream host.
   * Note that method name is case sensitive.
   */
  method_name?:
    | string
    | undefined;
  /**
   * Configures the transport type to be used with the health checks. Note that
   * :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`
   * is not supported, and we don't honor :ref:`ThriftProtocolOptions<envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.ThriftProtocolOptions>`
   * since it's possible to set to :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`.
   * [#extension-category: envoy.filters.network]
   */
  transport?:
    | TransportType
    | undefined;
  /**
   * Configures the protocol type to be used with the health checks. Note that
   * :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`
   * and :ref:`TWITTER<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.TWITTER>`
   * are not supported, and we don't honor :ref:`ThriftProtocolOptions<envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.ThriftProtocolOptions>`
   * since it's possible to set to :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`
   * or :ref:`TWITTER<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.TWITTER>`.
   */
  protocol?: ProtocolType | undefined;
}

function createBaseThrift(): Thrift {
  return { $type: "envoy.extensions.health_checkers.thrift.v3.Thrift" };
}

export const Thrift: MessageFns<Thrift, "envoy.extensions.health_checkers.thrift.v3.Thrift"> = {
  $type: "envoy.extensions.health_checkers.thrift.v3.Thrift" as const,

  encode(message: Thrift, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.method_name !== undefined && message.method_name !== "") {
      writer.uint32(10).string(message.method_name);
    }
    if (message.transport !== undefined && message.transport !== TransportType.AUTO_TRANSPORT) {
      writer.uint32(16).int32(transportTypeToNumber(message.transport));
    }
    if (message.protocol !== undefined && message.protocol !== ProtocolType.AUTO_PROTOCOL) {
      writer.uint32(24).int32(protocolTypeToNumber(message.protocol));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Thrift {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThrift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.method_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.transport = transportTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.protocol = protocolTypeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Thrift {
    return {
      $type: Thrift.$type,
      method_name: isSet(object.method_name) ? globalThis.String(object.method_name) : undefined,
      transport: isSet(object.transport) ? transportTypeFromJSON(object.transport) : undefined,
      protocol: isSet(object.protocol) ? protocolTypeFromJSON(object.protocol) : undefined,
    };
  },

  toJSON(message: Thrift): unknown {
    const obj: any = {};
    if (message.method_name !== undefined) {
      obj.method_name = message.method_name;
    }
    if (message.transport !== undefined) {
      obj.transport = transportTypeToJSON(message.transport);
    }
    if (message.protocol !== undefined) {
      obj.protocol = protocolTypeToJSON(message.protocol);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Thrift>, I>>(base?: I): Thrift {
    return Thrift.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Thrift>, I>>(object: I): Thrift {
    const message = createBaseThrift();
    message.method_name = object.method_name ?? undefined;
    message.transport = object.transport ?? undefined;
    message.protocol = object.protocol ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Thrift.$type, Thrift);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
