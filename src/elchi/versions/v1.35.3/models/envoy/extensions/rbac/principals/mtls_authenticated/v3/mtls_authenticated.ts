// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/rbac/principals/mtls_authenticated/v3/mtls_authenticated.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { SubjectAltNameMatcher } from "../../../../transport_sockets/tls/v3/common";

export const protobufPackage = "envoy.extensions.rbac.principals.mtls_authenticated.v3";

/**
 * Authentication attributes for a downstream mTLS connection. All modes require that a peer certificate
 * was presented and validated using the ValidationContext in the DownstreamTlsContext configuration.
 *
 * If neither field is set, a configuration loading error will be generated. This is so that
 * not validating SANs requires an affirmative configuration to disable, to prevent accidentally
 * not configuring SAN validation.
 *
 * If ``any_validated_client_certificate`` is set in addition to ``san_matcher`` or a future field
 * which specifies additional validation, the other field always takes precedence over
 * ``any_validated_client_certificate`` and all specified validation is performed.
 */
export interface Config {
  $type: "envoy.extensions.rbac.principals.mtls_authenticated.v3.Config";
  /** Specifies a SAN that must be present in the validated peer certificate. */
  san_matcher?:
    | SubjectAltNameMatcher
    | undefined;
  /** Only require that the peer certificate is present and valid. */
  any_validated_client_certificate?: boolean | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.rbac.principals.mtls_authenticated.v3.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.rbac.principals.mtls_authenticated.v3.Config"> = {
  $type: "envoy.extensions.rbac.principals.mtls_authenticated.v3.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.san_matcher !== undefined) {
      SubjectAltNameMatcher.encode(message.san_matcher, writer.uint32(10).fork()).join();
    }
    if (message.any_validated_client_certificate !== undefined && message.any_validated_client_certificate !== false) {
      writer.uint32(16).bool(message.any_validated_client_certificate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.san_matcher = SubjectAltNameMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.any_validated_client_certificate = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      san_matcher: isSet(object.san_matcher) ? SubjectAltNameMatcher.fromJSON(object.san_matcher) : undefined,
      any_validated_client_certificate: isSet(object.any_validated_client_certificate)
        ? globalThis.Boolean(object.any_validated_client_certificate)
        : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.san_matcher !== undefined) {
      obj.san_matcher = SubjectAltNameMatcher.toJSON(message.san_matcher);
    }
    if (message.any_validated_client_certificate !== undefined) {
      obj.any_validated_client_certificate = message.any_validated_client_certificate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.san_matcher = (object.san_matcher !== undefined && object.san_matcher !== null)
      ? SubjectAltNameMatcher.fromPartial(object.san_matcher)
      : undefined;
    message.any_validated_client_certificate = object.any_validated_client_certificate ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
