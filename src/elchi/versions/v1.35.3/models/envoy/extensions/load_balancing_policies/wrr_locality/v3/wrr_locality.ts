// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/load_balancing_policies/wrr_locality/v3/wrr_locality.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { LoadBalancingPolicy } from "../../../../config/cluster/v3/cluster";

export const protobufPackage = "envoy.extensions.load_balancing_policies.wrr_locality.v3";

/**
 * Configuration for the wrr_locality LB policy. See the :ref:`load balancing architecture overview
 * <arch_overview_load_balancing_types>` for more information.
 */
export interface WrrLocality {
  $type: "envoy.extensions.load_balancing_policies.wrr_locality.v3.WrrLocality";
  /** The child LB policy to create for endpoint-picking within the chosen locality. */
  endpoint_picking_policy?: LoadBalancingPolicy | undefined;
}

function createBaseWrrLocality(): WrrLocality {
  return { $type: "envoy.extensions.load_balancing_policies.wrr_locality.v3.WrrLocality" };
}

export const WrrLocality: MessageFns<
  WrrLocality,
  "envoy.extensions.load_balancing_policies.wrr_locality.v3.WrrLocality"
> = {
  $type: "envoy.extensions.load_balancing_policies.wrr_locality.v3.WrrLocality" as const,

  encode(message: WrrLocality, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint_picking_policy !== undefined) {
      LoadBalancingPolicy.encode(message.endpoint_picking_policy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WrrLocality {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrrLocality();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpoint_picking_policy = LoadBalancingPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WrrLocality {
    return {
      $type: WrrLocality.$type,
      endpoint_picking_policy: isSet(object.endpoint_picking_policy)
        ? LoadBalancingPolicy.fromJSON(object.endpoint_picking_policy)
        : undefined,
    };
  },

  toJSON(message: WrrLocality): unknown {
    const obj: any = {};
    if (message.endpoint_picking_policy !== undefined) {
      obj.endpoint_picking_policy = LoadBalancingPolicy.toJSON(message.endpoint_picking_policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WrrLocality>, I>>(base?: I): WrrLocality {
    return WrrLocality.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WrrLocality>, I>>(object: I): WrrLocality {
    const message = createBaseWrrLocality();
    message.endpoint_picking_policy =
      (object.endpoint_picking_policy !== undefined && object.endpoint_picking_policy !== null)
        ? LoadBalancingPolicy.fromPartial(object.endpoint_picking_policy)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(WrrLocality.$type, WrrLocality);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
