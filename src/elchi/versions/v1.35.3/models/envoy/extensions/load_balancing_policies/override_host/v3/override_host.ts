// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/load_balancing_policies/override_host/v3/override_host.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { LoadBalancingPolicy } from "../../../../config/cluster/v3/cluster";
import { MetadataKey } from "../../../../type/metadata/v3/metadata";

export const protobufPackage = "envoy.extensions.load_balancing_policies.override_host.v3";

/**
 * Configuration for the Override Host Load Balancing policy.
 *
 * This policy allows endpoint picking to be implemented in downstream HTTP filters. For example an ext_proc RPC to a service
 * that implements k8s proposal for AI gateway inferences extensions
 * https://github.com/kubernetes-sigs/gateway-api-inference-extension/tree/main/docs/proposals/004-endpoint-picker-protocol
 * can provide hosts for serving a request using Override Host load balancing policy.
 *
 * This policy extracts selected override hosts from a list of ``OverrideHostSource`` (request headers, metadata, etc.).
 *
 * The override host source must specify at least one host in ``IP:Port`` format or multiple hosts in ``IP:Port,IP:Port,...``
 * format. For example ``10.0.0.5:8080`` or ``[2600:4040:5204::1574:24ae]:80``. The IPv6 address is enclosed in square brackets.
 *
 * For specific example, to support k8s gateway inference extensions, which uses the ``x-gateway-destination-endpoint``
 * header or metadata value under the "envoy.lb" key for selected hosts, the Override Host load balancing policy should be
 * configured in the following way:
 *
 * .. code-block:: yaml
 *
 *    override_host_sources:
 *      - header: "x-gateway-destination-endpoint"
 *      - metadata:
 *          key: "envoy.lb"
 *          path:
 *          - key: "x-gateway-destination-endpoint"
 *
 * If no valid host in the override host list, then the specified fallback load balancing policy is used. This allows load
 * balancing to degrade to a a built in policy (i.e. Round Robin) in case external endpoint picker fails.
 *
 * See the :ref:`load balancing architecture
 * overview<arch_overview_load_balancing_types>` for more information.
 */
export interface OverrideHost {
  $type: "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost";
  /**
   * A list of sources to get host addresses from. The host sources are searched in the order
   * specified. The request is forwarded to the first address and subsequent addresses are used
   * for request retries or hedging.
   * Note that if an overridden host address is not present in the current endpoint set, it is
   * skipped and the next found address is used. If there are not enough overridden addresses to
   * satisfy all retry attempts the fallback load balancing policy is used to pick a host.
   */
  override_host_sources?:
    | OverrideHost_OverrideHostSource[]
    | undefined;
  /**
   * The child LB policy to use in case neither header nor metadata with selected
   * hosts is present.
   */
  fallback_policy?: LoadBalancingPolicy | undefined;
}

export interface OverrideHost_OverrideHostSource {
  $type: "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource";
  /**
   * The header to get the override host addresses.
   *
   * Only one of the header or metadata field could be set.
   */
  header?:
    | string
    | undefined;
  /**
   * The metadata key to get the override host addresses from the request dynamic metadata. If
   * set this field then it will take precedence over the header field.
   *
   * Only one of the header or metadata field could be set.
   */
  metadata?: MetadataKey | undefined;
}

function createBaseOverrideHost(): OverrideHost {
  return { $type: "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost" };
}

export const OverrideHost: MessageFns<
  OverrideHost,
  "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost"
> = {
  $type: "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost" as const,

  encode(message: OverrideHost, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.override_host_sources !== undefined && message.override_host_sources.length !== 0) {
      for (const v of message.override_host_sources) {
        OverrideHost_OverrideHostSource.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.fallback_policy !== undefined) {
      LoadBalancingPolicy.encode(message.fallback_policy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverrideHost {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverrideHost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.override_host_sources === undefined) {
            message.override_host_sources = [];
          }
          const el = OverrideHost_OverrideHostSource.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.override_host_sources!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fallback_policy = LoadBalancingPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OverrideHost {
    return {
      $type: OverrideHost.$type,
      override_host_sources: globalThis.Array.isArray(object?.override_host_sources)
        ? object.override_host_sources.map((e: any) => OverrideHost_OverrideHostSource.fromJSON(e))
        : undefined,
      fallback_policy: isSet(object.fallback_policy) ? LoadBalancingPolicy.fromJSON(object.fallback_policy) : undefined,
    };
  },

  toJSON(message: OverrideHost): unknown {
    const obj: any = {};
    if (message.override_host_sources?.length) {
      obj.override_host_sources = message.override_host_sources.map((e) => OverrideHost_OverrideHostSource.toJSON(e));
    }
    if (message.fallback_policy !== undefined) {
      obj.fallback_policy = LoadBalancingPolicy.toJSON(message.fallback_policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OverrideHost>, I>>(base?: I): OverrideHost {
    return OverrideHost.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverrideHost>, I>>(object: I): OverrideHost {
    const message = createBaseOverrideHost();
    message.override_host_sources =
      object.override_host_sources?.map((e) => OverrideHost_OverrideHostSource.fromPartial(e)) || undefined;
    message.fallback_policy = (object.fallback_policy !== undefined && object.fallback_policy !== null)
      ? LoadBalancingPolicy.fromPartial(object.fallback_policy)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(OverrideHost.$type, OverrideHost);

function createBaseOverrideHost_OverrideHostSource(): OverrideHost_OverrideHostSource {
  return { $type: "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource" };
}

export const OverrideHost_OverrideHostSource: MessageFns<
  OverrideHost_OverrideHostSource,
  "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource"
> = {
  $type: "envoy.extensions.load_balancing_policies.override_host.v3.OverrideHost.OverrideHostSource" as const,

  encode(message: OverrideHost_OverrideHostSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined && message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.metadata !== undefined) {
      MetadataKey.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OverrideHost_OverrideHostSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOverrideHost_OverrideHostSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = MetadataKey.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OverrideHost_OverrideHostSource {
    return {
      $type: OverrideHost_OverrideHostSource.$type,
      header: isSet(object.header) ? globalThis.String(object.header) : undefined,
      metadata: isSet(object.metadata) ? MetadataKey.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: OverrideHost_OverrideHostSource): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    if (message.metadata !== undefined) {
      obj.metadata = MetadataKey.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OverrideHost_OverrideHostSource>, I>>(base?: I): OverrideHost_OverrideHostSource {
    return OverrideHost_OverrideHostSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OverrideHost_OverrideHostSource>, I>>(
    object: I,
  ): OverrideHost_OverrideHostSource {
    const message = createBaseOverrideHost_OverrideHostSource();
    message.header = object.header ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? MetadataKey.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(OverrideHost_OverrideHostSource.$type, OverrideHost_OverrideHostSource);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
