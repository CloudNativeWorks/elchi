// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/tracers/fluentd/v3/fluentd.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { UInt32Value } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { RetryPolicy } from "../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.tracers.fluentd.v3";

/**
 * Configuration for the Fluentd tracer.
 * This tracer extension will send the emitted traces over a TCP connection to an upstream that is accepting
 * the Fluentd Forward Protocol as described in: `Fluentd Forward Protocol Specification
 * <https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1>`_.
 * [#extension: envoy.tracers.fluentd]
 * [#next-free-field: 7]
 */
export interface FluentdConfig {
  $type: "envoy.extensions.tracers.fluentd.v3.FluentdConfig";
  /** The upstream cluster to connect to for streaming the Fluentd messages. */
  cluster?:
    | string
    | undefined;
  /**
   * A tag is a string separated with ``.`` (e.g. ``log.type``) to categorize events.
   * See: https://github.com/fluent/fluentd/wiki/Forward-Protocol-Specification-v1#message-modes
   */
  tag?:
    | string
    | undefined;
  /** The prefix to use when emitting tracer stats. */
  stat_prefix?:
    | string
    | undefined;
  /**
   * Interval for flushing traces to the TCP stream. Tracer will flush requests every time
   * this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
   * 1 second.
   */
  buffer_flush_interval?:
    | Duration
    | undefined;
  /**
   * Soft size limit in bytes for access log entries buffer. The logger will buffer requests until
   * this limit it hit, or every time flush interval is elapsed, whichever comes first. When the buffer
   * limit is hit, the logger will immediately flush the buffer contents. Setting it to zero effectively
   * disables the batching. Defaults to 16384.
   */
  buffer_size_bytes?:
    | number
    | undefined;
  /** Optional retry, in case upstream connection has failed. If this field is not set, the default values will be applied. */
  retry_policy?: RetryPolicy | undefined;
}

function createBaseFluentdConfig(): FluentdConfig {
  return { $type: "envoy.extensions.tracers.fluentd.v3.FluentdConfig" };
}

export const FluentdConfig: MessageFns<FluentdConfig, "envoy.extensions.tracers.fluentd.v3.FluentdConfig"> = {
  $type: "envoy.extensions.tracers.fluentd.v3.FluentdConfig" as const,

  encode(message: FluentdConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cluster !== undefined && message.cluster !== "") {
      writer.uint32(10).string(message.cluster);
    }
    if (message.tag !== undefined && message.tag !== "") {
      writer.uint32(18).string(message.tag);
    }
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(26).string(message.stat_prefix);
    }
    if (message.buffer_flush_interval !== undefined) {
      Duration.encode(message.buffer_flush_interval, writer.uint32(34).fork()).join();
    }
    if (message.buffer_size_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.buffer_size_bytes! },
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.retry_policy !== undefined) {
      RetryPolicy.encode(message.retry_policy, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FluentdConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFluentdConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.buffer_flush_interval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.buffer_size_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.retry_policy = RetryPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FluentdConfig {
    return {
      $type: FluentdConfig.$type,
      cluster: isSet(object.cluster) ? globalThis.String(object.cluster) : undefined,
      tag: isSet(object.tag) ? globalThis.String(object.tag) : undefined,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      buffer_flush_interval: isSet(object.buffer_flush_interval)
        ? Duration.fromJSON(object.buffer_flush_interval)
        : undefined,
      buffer_size_bytes: isSet(object.buffer_size_bytes) ? Number(object.buffer_size_bytes) : undefined,
      retry_policy: isSet(object.retry_policy) ? RetryPolicy.fromJSON(object.retry_policy) : undefined,
    };
  },

  toJSON(message: FluentdConfig): unknown {
    const obj: any = {};
    if (message.cluster !== undefined) {
      obj.cluster = message.cluster;
    }
    if (message.tag !== undefined) {
      obj.tag = message.tag;
    }
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.buffer_flush_interval !== undefined) {
      obj.buffer_flush_interval = Duration.toJSON(message.buffer_flush_interval);
    }
    if (message.buffer_size_bytes !== undefined) {
      obj.buffer_size_bytes = message.buffer_size_bytes;
    }
    if (message.retry_policy !== undefined) {
      obj.retry_policy = RetryPolicy.toJSON(message.retry_policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FluentdConfig>, I>>(base?: I): FluentdConfig {
    return FluentdConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FluentdConfig>, I>>(object: I): FluentdConfig {
    const message = createBaseFluentdConfig();
    message.cluster = object.cluster ?? undefined;
    message.tag = object.tag ?? undefined;
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.buffer_flush_interval =
      (object.buffer_flush_interval !== undefined && object.buffer_flush_interval !== null)
        ? Duration.fromPartial(object.buffer_flush_interval)
        : undefined;
    message.buffer_size_bytes = object.buffer_size_bytes ?? undefined;
    message.retry_policy = (object.retry_policy !== undefined && object.retry_policy !== null)
      ? RetryPolicy.fromPartial(object.retry_policy)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(FluentdConfig.$type, FluentdConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
