// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/request_id/uuid/v3/uuid.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.request_id.uuid.v3";

/**
 * Configuration for the default UUID request ID extension which has the following behavior:
 *
 * 1. Request ID is propagated using the :ref:`x-request-id
 *    <config_http_conn_man_headers_x-request-id>` header.
 *
 * 2. Request ID is a universally unique identifier `(UUID4)
 *    <https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)>`_.
 *
 * 3. Tracing decision (sampled, forced, etc) is set in 14th nibble of the UUID. By default this will
 *    overwrite existing UUIDs received in the ``x-request-id`` header if the trace sampling decision
 *    is changed. The 14th nibble of the UUID4 has been chosen because it is fixed to '4' by the
 *    standard. Thus, '4' indicates a default UUID and no trace status. This nibble is swapped to:
 *
 *      a. '9': Sampled.
 *      b. 'a': Force traced due to server-side override.
 *      c. 'b': Force traced due to client-side request ID joining.
 *
 *    See the :ref:`x-request-id <config_http_conn_man_headers_x-request-id>` documentation for
 *    more information.
 */
export interface UuidRequestIdConfig {
  $type: "envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig";
  /**
   * Whether the implementation alters the UUID to contain the trace sampling decision as per the
   * ``UuidRequestIdConfig`` message documentation. This defaults to true. If disabled no
   * modification to the UUID will be performed. It is important to note that if disabled,
   * stable sampling of traces, access logs, etc. will no longer work and only random sampling will
   * be possible.
   */
  pack_trace_reason?:
    | boolean
    | undefined;
  /**
   * Set whether to use :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` for sampling or not.
   * This defaults to true. See the :ref:`context propagation <arch_overview_tracing_context_propagation>`
   * overview for more information.
   */
  use_request_id_for_trace_sampling?: boolean | undefined;
}

function createBaseUuidRequestIdConfig(): UuidRequestIdConfig {
  return { $type: "envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig" };
}

export const UuidRequestIdConfig: MessageFns<
  UuidRequestIdConfig,
  "envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig"
> = {
  $type: "envoy.extensions.request_id.uuid.v3.UuidRequestIdConfig" as const,

  encode(message: UuidRequestIdConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pack_trace_reason !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.pack_trace_reason! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.use_request_id_for_trace_sampling !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.use_request_id_for_trace_sampling! },
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UuidRequestIdConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUuidRequestIdConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pack_trace_reason = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.use_request_id_for_trace_sampling = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UuidRequestIdConfig {
    return {
      $type: UuidRequestIdConfig.$type,
      pack_trace_reason: isSet(object.pack_trace_reason) ? Boolean(object.pack_trace_reason) : undefined,
      use_request_id_for_trace_sampling: isSet(object.use_request_id_for_trace_sampling)
        ? Boolean(object.use_request_id_for_trace_sampling)
        : undefined,
    };
  },

  toJSON(message: UuidRequestIdConfig): unknown {
    const obj: any = {};
    if (message.pack_trace_reason !== undefined) {
      obj.pack_trace_reason = message.pack_trace_reason;
    }
    if (message.use_request_id_for_trace_sampling !== undefined) {
      obj.use_request_id_for_trace_sampling = message.use_request_id_for_trace_sampling;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UuidRequestIdConfig>, I>>(base?: I): UuidRequestIdConfig {
    return UuidRequestIdConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UuidRequestIdConfig>, I>>(object: I): UuidRequestIdConfig {
    const message = createBaseUuidRequestIdConfig();
    message.pack_trace_reason = object.pack_trace_reason ?? undefined;
    message.use_request_id_for_trace_sampling = object.use_request_id_for_trace_sampling ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(UuidRequestIdConfig.$type, UuidRequestIdConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
