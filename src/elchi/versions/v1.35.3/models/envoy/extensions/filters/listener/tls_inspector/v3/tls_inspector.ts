// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/listener/tls_inspector/v3/tls_inspector.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue, UInt32Value } from "../../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.listener.tls_inspector.v3";

export interface TlsInspector {
  $type: "envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector";
  /** Populate ``JA3`` fingerprint hash using data from the TLS Client Hello packet. Default is false. */
  enable_ja3_fingerprinting?:
    | boolean
    | undefined;
  /**
   * Populate ``JA4`` fingerprint hash using data from the TLS Client Hello packet.
   * ``JA4`` is an improved version of ``JA3`` that includes TLS version, ciphers, extensions,
   * and ALPN information in a hex format. Default is false.
   */
  enable_ja4_fingerprinting?:
    | boolean
    | undefined;
  /**
   * The size in bytes of the initial buffer requested by the tls_inspector.
   * If the filter needs to read additional bytes from the socket, the
   * filter will double the buffer up to it's default maximum of 64KiB.
   * If this size is not defined, defaults to maximum 64KiB that the
   * tls inspector will consume.
   */
  initial_read_buffer_size?: number | undefined;
}

function createBaseTlsInspector(): TlsInspector {
  return { $type: "envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector" };
}

export const TlsInspector: MessageFns<TlsInspector, "envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector"> =
  {
    $type: "envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector" as const,

    encode(message: TlsInspector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.enable_ja3_fingerprinting !== undefined) {
        BoolValue.encode(
          { $type: "google.protobuf.BoolValue", value: message.enable_ja3_fingerprinting! },
          writer.uint32(10).fork(),
        ).join();
      }
      if (message.enable_ja4_fingerprinting !== undefined) {
        BoolValue.encode(
          { $type: "google.protobuf.BoolValue", value: message.enable_ja4_fingerprinting! },
          writer.uint32(26).fork(),
        ).join();
      }
      if (message.initial_read_buffer_size !== undefined) {
        UInt32Value.encode(
          { $type: "google.protobuf.UInt32Value", value: message.initial_read_buffer_size! },
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): TlsInspector {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseTlsInspector();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.enable_ja3_fingerprinting = BoolValue.decode(reader, reader.uint32()).value;
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.enable_ja4_fingerprinting = BoolValue.decode(reader, reader.uint32()).value;
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.initial_read_buffer_size = UInt32Value.decode(reader, reader.uint32()).value;
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): TlsInspector {
      return {
        $type: TlsInspector.$type,
        enable_ja3_fingerprinting: isSet(object.enable_ja3_fingerprinting)
          ? Boolean(object.enable_ja3_fingerprinting)
          : undefined,
        enable_ja4_fingerprinting: isSet(object.enable_ja4_fingerprinting)
          ? Boolean(object.enable_ja4_fingerprinting)
          : undefined,
        initial_read_buffer_size: isSet(object.initial_read_buffer_size)
          ? Number(object.initial_read_buffer_size)
          : undefined,
      };
    },

    toJSON(message: TlsInspector): unknown {
      const obj: any = {};
      if (message.enable_ja3_fingerprinting !== undefined) {
        obj.enable_ja3_fingerprinting = message.enable_ja3_fingerprinting;
      }
      if (message.enable_ja4_fingerprinting !== undefined) {
        obj.enable_ja4_fingerprinting = message.enable_ja4_fingerprinting;
      }
      if (message.initial_read_buffer_size !== undefined) {
        obj.initial_read_buffer_size = message.initial_read_buffer_size;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<TlsInspector>, I>>(base?: I): TlsInspector {
      return TlsInspector.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<TlsInspector>, I>>(object: I): TlsInspector {
      const message = createBaseTlsInspector();
      message.enable_ja3_fingerprinting = object.enable_ja3_fingerprinting ?? undefined;
      message.enable_ja4_fingerprinting = object.enable_ja4_fingerprinting ?? undefined;
      message.initial_read_buffer_size = object.initial_read_buffer_size ?? undefined;
      return message;
    },
  };

messageTypeRegistry.set(TlsInspector.$type, TlsInspector);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
