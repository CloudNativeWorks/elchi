// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/network/generic_proxy/action/v3/action.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../../../../google/protobuf/any";
import { Duration } from "../../../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../../../typeRegistry";
import { Metadata, RetryPolicy } from "../../../../../../config/core/v3/base";
import { WeightedCluster } from "../../../../../../config/route/v3/route_components";

export const protobufPackage = "envoy.extensions.filters.network.generic_proxy.action.v3";

/**
 * Configuration for the route match action.
 * [#next-free-field: 8]
 */
export interface RouteAction {
  $type: "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction";
  /** The name of the route action. This should be unique across all route actions. */
  name?: string | undefined;
  cluster_specifier?:
    | //
    /** Indicates the upstream cluster to which the request should be routed. */
    { $case: "cluster"; cluster: string }
    | //
    /**
     * [#not-implemented-hide:]
     * Multiple upstream clusters can be specified for a given route. The request is routed to one
     * of the upstream clusters based on weights assigned to each cluster.
     * Currently ClusterWeight only supports the name and weight fields.
     */
    { $case: "weighted_clusters"; weighted_clusters: WeightedCluster }
    | undefined;
  /** Route metadata. */
  metadata?:
    | Metadata
    | undefined;
  /**
   * Route level config for L7 generic filters. The key should be the related :ref:`extension name
   * <envoy_v3_api_field_config.core.v3.TypedExtensionConfig.name>` in the :ref:`generic filters
   * <envoy_v3_api_field_extensions.filters.network.generic_proxy.v3.GenericProxy.filters>`.
   */
  per_filter_config?:
    | Map<string, Any>
    | undefined;
  /**
   * Specifies the upstream timeout for the route. If not specified, the default is 15s. This
   * spans between the point at which the entire downstream request (i.e. end-of-stream) has been
   * processed and when the upstream response has been completely processed. A value of 0 will
   * disable the route's timeout.
   */
  timeout?:
    | Duration
    | undefined;
  /**
   * Specifies the retry policy for the route. If not specified, then no retries will be performed.
   *
   * .. note::
   *   Only simplest retry policy is supported and only ``num_retries`` field is used for generic
   *   proxy. The default value for ``num_retries`` is 1 means that the request will be tried once
   *   and no additional retries will be performed.
   */
  retry_policy?: RetryPolicy | undefined;
}

export interface RouteAction_PerFilterConfigEntry {
  $type: "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction.PerFilterConfigEntry";
  key: string;
  value?: Any | undefined;
}

function createBaseRouteAction(): RouteAction {
  return {
    $type: "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction",
    cluster_specifier: undefined,
  };
}

export const RouteAction: MessageFns<
  RouteAction,
  "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction"
> = {
  $type: "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction" as const,

  encode(message: RouteAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    switch (message.cluster_specifier?.$case) {
      case "cluster":
        writer.uint32(10).string(message.cluster_specifier.cluster);
        break;
      case "weighted_clusters":
        WeightedCluster.encode(message.cluster_specifier.weighted_clusters, writer.uint32(18).fork()).join();
        break;
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    (message.per_filter_config || new Map()).forEach((value, key) => {
      RouteAction_PerFilterConfigEntry.encode({
        $type: "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction.PerFilterConfigEntry",
        key: key as any,
        value,
      }, writer.uint32(34).fork()).join();
    });
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(50).fork()).join();
    }
    if (message.retry_policy !== undefined) {
      RetryPolicy.encode(message.retry_policy, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cluster_specifier = { $case: "cluster", cluster: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cluster_specifier = {
            $case: "weighted_clusters",
            weighted_clusters: WeightedCluster.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = RouteAction_PerFilterConfigEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            if (message.per_filter_config === undefined) {
              message.per_filter_config = new Map();
            }
            message.per_filter_config!.set(entry4.key, entry4.value);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.retry_policy = RetryPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteAction {
    return {
      $type: RouteAction.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      cluster_specifier: isSet(object.cluster)
        ? { $case: "cluster", cluster: globalThis.String(object.cluster) }
        : isSet(object.weighted_clusters)
        ? { $case: "weighted_clusters", weighted_clusters: WeightedCluster.fromJSON(object.weighted_clusters) }
        : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      per_filter_config: isObject(object.per_filter_config)
        ? Object.entries(object.per_filter_config).reduce<Map<string, Any>>((acc, [key, value]) => {
          acc.set(key, Any.fromJSON(value));
          return acc;
        }, new Map())
        : undefined,
      timeout: isSet(object.timeout) ? Duration.fromJSON(object.timeout) : undefined,
      retry_policy: isSet(object.retry_policy) ? RetryPolicy.fromJSON(object.retry_policy) : undefined,
    };
  },

  toJSON(message: RouteAction): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.cluster_specifier?.$case === "cluster") {
      obj.cluster = message.cluster_specifier.cluster;
    }
    if (message.cluster_specifier?.$case === "weighted_clusters") {
      obj.weighted_clusters = WeightedCluster.toJSON(message.cluster_specifier.weighted_clusters);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.per_filter_config?.size) {
      obj.per_filter_config = {};
      message.per_filter_config.forEach((v, k) => {
        obj.per_filter_config[k] = Any.toJSON(v);
      });
    }
    if (message.timeout !== undefined) {
      obj.timeout = Duration.toJSON(message.timeout);
    }
    if (message.retry_policy !== undefined) {
      obj.retry_policy = RetryPolicy.toJSON(message.retry_policy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteAction>, I>>(base?: I): RouteAction {
    return RouteAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteAction>, I>>(object: I): RouteAction {
    const message = createBaseRouteAction();
    message.name = object.name ?? undefined;
    if (
      object.cluster_specifier?.$case === "cluster" &&
      object.cluster_specifier?.cluster !== undefined &&
      object.cluster_specifier?.cluster !== null
    ) {
      message.cluster_specifier = { $case: "cluster", cluster: object.cluster_specifier.cluster };
    }
    if (
      object.cluster_specifier?.$case === "weighted_clusters" &&
      object.cluster_specifier?.weighted_clusters !== undefined &&
      object.cluster_specifier?.weighted_clusters !== null
    ) {
      message.cluster_specifier = {
        $case: "weighted_clusters",
        weighted_clusters: WeightedCluster.fromPartial(object.cluster_specifier.weighted_clusters),
      };
    }
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.per_filter_config = (object.per_filter_config === undefined || object.per_filter_config === null)
      ? undefined
      : (() => {
        const m = new Map();
        (object.per_filter_config as Map<string, Any> ?? new Map()).forEach((value, key) => {
          if (value !== undefined) {
            m.set(key, Any.fromPartial(value));
          }
        });
        return m;
      })();
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.retry_policy = (object.retry_policy !== undefined && object.retry_policy !== null)
      ? RetryPolicy.fromPartial(object.retry_policy)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteAction.$type, RouteAction);

function createBaseRouteAction_PerFilterConfigEntry(): RouteAction_PerFilterConfigEntry {
  return {
    $type: "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction.PerFilterConfigEntry",
    key: "",
  };
}

export const RouteAction_PerFilterConfigEntry: MessageFns<
  RouteAction_PerFilterConfigEntry,
  "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction.PerFilterConfigEntry"
> = {
  $type: "envoy.extensions.filters.network.generic_proxy.action.v3.RouteAction.PerFilterConfigEntry" as const,

  encode(message: RouteAction_PerFilterConfigEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Any.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteAction_PerFilterConfigEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteAction_PerFilterConfigEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteAction_PerFilterConfigEntry {
    return {
      $type: RouteAction_PerFilterConfigEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Any.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RouteAction_PerFilterConfigEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Any.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteAction_PerFilterConfigEntry>, I>>(
    base?: I,
  ): RouteAction_PerFilterConfigEntry {
    return RouteAction_PerFilterConfigEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteAction_PerFilterConfigEntry>, I>>(
    object: I,
  ): RouteAction_PerFilterConfigEntry {
    const message = createBaseRouteAction_PerFilterConfigEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Any.fromPartial(object.value) : undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteAction_PerFilterConfigEntry.$type, RouteAction_PerFilterConfigEntry);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
