// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RegexMatchAndSubstitute } from "../../../../../type/matcher/v3/regex";

export const protobufPackage = "envoy.extensions.filters.http.header_to_metadata.v3";

export interface Config {
  $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config";
  /** The list of rules to apply to requests. */
  request_rules?:
    | Config_Rule[]
    | undefined;
  /** The list of rules to apply to responses. */
  response_rules?: Config_Rule[] | undefined;
}

export enum Config_ValueType {
  STRING = "STRING",
  NUMBER = "NUMBER",
  /**
   * PROTOBUF_VALUE - The value is a serialized `protobuf.Value
   * <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
   */
  PROTOBUF_VALUE = "PROTOBUF_VALUE",
}

export function config_ValueTypeFromJSON(object: any): Config_ValueType {
  switch (object) {
    case 0:
    case "STRING":
      return Config_ValueType.STRING;
    case 1:
    case "NUMBER":
      return Config_ValueType.NUMBER;
    case 2:
    case "PROTOBUF_VALUE":
      return Config_ValueType.PROTOBUF_VALUE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_ValueType");
  }
}

export function config_ValueTypeToJSON(object: Config_ValueType): string {
  switch (object) {
    case Config_ValueType.STRING:
      return "STRING";
    case Config_ValueType.NUMBER:
      return "NUMBER";
    case Config_ValueType.PROTOBUF_VALUE:
      return "PROTOBUF_VALUE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_ValueType");
  }
}

export function config_ValueTypeToNumber(object: Config_ValueType): number {
  switch (object) {
    case Config_ValueType.STRING:
      return 0;
    case Config_ValueType.NUMBER:
      return 1;
    case Config_ValueType.PROTOBUF_VALUE:
      return 2;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_ValueType");
  }
}

/** ValueEncode defines the encoding algorithm. */
export enum Config_ValueEncode {
  /** NONE - The value is not encoded. */
  NONE = "NONE",
  /**
   * BASE64 - The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
   * Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
   * non-ASCII characters in the header.
   */
  BASE64 = "BASE64",
}

export function config_ValueEncodeFromJSON(object: any): Config_ValueEncode {
  switch (object) {
    case 0:
    case "NONE":
      return Config_ValueEncode.NONE;
    case 1:
    case "BASE64":
      return Config_ValueEncode.BASE64;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_ValueEncode");
  }
}

export function config_ValueEncodeToJSON(object: Config_ValueEncode): string {
  switch (object) {
    case Config_ValueEncode.NONE:
      return "NONE";
    case Config_ValueEncode.BASE64:
      return "BASE64";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_ValueEncode");
  }
}

export function config_ValueEncodeToNumber(object: Config_ValueEncode): number {
  switch (object) {
    case Config_ValueEncode.NONE:
      return 0;
    case Config_ValueEncode.BASE64:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Config_ValueEncode");
  }
}

/** [#next-free-field: 7] */
export interface Config_KeyValuePair {
  $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair";
  /** The namespace — if this is empty, the filter's namespace will be used. */
  metadata_namespace?:
    | string
    | undefined;
  /** The key to use within the namespace. */
  key?:
    | string
    | undefined;
  /**
   * The value to pair with the given key.
   *
   * When used for a
   * :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`
   * case, if value is non-empty it'll be used instead of the header value. If both are empty, no metadata is added.
   *
   * When used for a :ref:`on_header_missing <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_missing>`
   * case, a non-empty value must be provided otherwise no metadata is added.
   */
  value?:
    | string
    | undefined;
  /**
   * If present, the header's value will be matched and substituted with this. If there is no match or substitution, the header value
   * is used as-is.
   *
   * This is only used for :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`.
   *
   * Note: if the ``value`` field is non-empty this field should be empty.
   */
  regex_value_rewrite?:
    | RegexMatchAndSubstitute
    | undefined;
  /** The value's type — defaults to string. */
  type?:
    | Config_ValueType
    | undefined;
  /**
   * How is the value encoded, default is NONE (not encoded).
   * The value will be decoded accordingly before storing to metadata.
   */
  encode?: Config_ValueEncode | undefined;
}

/**
 * A Rule defines what metadata to apply when a header is present or missing.
 * [#next-free-field: 6]
 */
export interface Config_Rule {
  $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule";
  /**
   * Specifies that a match will be performed on the value of a header or a cookie.
   *
   * The header to be extracted.
   */
  header?:
    | string
    | undefined;
  /** The cookie to be extracted. */
  cookie?:
    | string
    | undefined;
  /**
   * If the header or cookie is present, apply this metadata KeyValuePair.
   *
   * If the value in the KeyValuePair is non-empty, it'll be used instead
   * of the header or cookie value.
   */
  on_header_present?:
    | Config_KeyValuePair
    | undefined;
  /**
   * If the header or cookie is not present, apply this metadata KeyValuePair.
   *
   * The value in the KeyValuePair must be set, since it'll be used in lieu
   * of the missing header or cookie value.
   */
  on_header_missing?:
    | Config_KeyValuePair
    | undefined;
  /**
   * Whether or not to remove the header after a rule is applied.
   *
   * This prevents headers from leaking.
   * This field is not supported in case of a cookie.
   */
  remove?: boolean | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.filters.http.header_to_metadata.v3.Config"> = {
  $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.request_rules !== undefined && message.request_rules.length !== 0) {
      for (const v of message.request_rules) {
        Config_Rule.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.response_rules !== undefined && message.response_rules.length !== 0) {
      for (const v of message.response_rules) {
        Config_Rule.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.request_rules === undefined) {
            message.request_rules = [];
          }
          const el = Config_Rule.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.request_rules!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.response_rules === undefined) {
            message.response_rules = [];
          }
          const el = Config_Rule.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.response_rules!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      request_rules: globalThis.Array.isArray(object?.request_rules)
        ? object.request_rules.map((e: any) => Config_Rule.fromJSON(e))
        : undefined,
      response_rules: globalThis.Array.isArray(object?.response_rules)
        ? object.response_rules.map((e: any) => Config_Rule.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.request_rules?.length) {
      obj.request_rules = message.request_rules.map((e) => Config_Rule.toJSON(e));
    }
    if (message.response_rules?.length) {
      obj.response_rules = message.response_rules.map((e) => Config_Rule.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.request_rules = object.request_rules?.map((e) => Config_Rule.fromPartial(e)) || undefined;
    message.response_rules = object.response_rules?.map((e) => Config_Rule.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

function createBaseConfig_KeyValuePair(): Config_KeyValuePair {
  return { $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair" };
}

export const Config_KeyValuePair: MessageFns<
  Config_KeyValuePair,
  "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair"
> = {
  $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config.KeyValuePair" as const,

  encode(message: Config_KeyValuePair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata_namespace !== undefined && message.metadata_namespace !== "") {
      writer.uint32(10).string(message.metadata_namespace);
    }
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.value !== undefined && message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.regex_value_rewrite !== undefined) {
      RegexMatchAndSubstitute.encode(message.regex_value_rewrite, writer.uint32(50).fork()).join();
    }
    if (message.type !== undefined && message.type !== Config_ValueType.STRING) {
      writer.uint32(32).int32(config_ValueTypeToNumber(message.type));
    }
    if (message.encode !== undefined && message.encode !== Config_ValueEncode.NONE) {
      writer.uint32(40).int32(config_ValueEncodeToNumber(message.encode));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config_KeyValuePair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_KeyValuePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata_namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.regex_value_rewrite = RegexMatchAndSubstitute.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = config_ValueTypeFromJSON(reader.int32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.encode = config_ValueEncodeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_KeyValuePair {
    return {
      $type: Config_KeyValuePair.$type,
      metadata_namespace: isSet(object.metadata_namespace) ? globalThis.String(object.metadata_namespace) : undefined,
      key: isSet(object.key) ? globalThis.String(object.key) : undefined,
      value: isSet(object.value) ? globalThis.String(object.value) : undefined,
      regex_value_rewrite: isSet(object.regex_value_rewrite)
        ? RegexMatchAndSubstitute.fromJSON(object.regex_value_rewrite)
        : undefined,
      type: isSet(object.type) ? config_ValueTypeFromJSON(object.type) : undefined,
      encode: isSet(object.encode) ? config_ValueEncodeFromJSON(object.encode) : undefined,
    };
  },

  toJSON(message: Config_KeyValuePair): unknown {
    const obj: any = {};
    if (message.metadata_namespace !== undefined) {
      obj.metadata_namespace = message.metadata_namespace;
    }
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    if (message.regex_value_rewrite !== undefined) {
      obj.regex_value_rewrite = RegexMatchAndSubstitute.toJSON(message.regex_value_rewrite);
    }
    if (message.type !== undefined) {
      obj.type = config_ValueTypeToJSON(message.type);
    }
    if (message.encode !== undefined) {
      obj.encode = config_ValueEncodeToJSON(message.encode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config_KeyValuePair>, I>>(base?: I): Config_KeyValuePair {
    return Config_KeyValuePair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config_KeyValuePair>, I>>(object: I): Config_KeyValuePair {
    const message = createBaseConfig_KeyValuePair();
    message.metadata_namespace = object.metadata_namespace ?? undefined;
    message.key = object.key ?? undefined;
    message.value = object.value ?? undefined;
    message.regex_value_rewrite = (object.regex_value_rewrite !== undefined && object.regex_value_rewrite !== null)
      ? RegexMatchAndSubstitute.fromPartial(object.regex_value_rewrite)
      : undefined;
    message.type = object.type ?? undefined;
    message.encode = object.encode ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Config_KeyValuePair.$type, Config_KeyValuePair);

function createBaseConfig_Rule(): Config_Rule {
  return { $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule" };
}

export const Config_Rule: MessageFns<Config_Rule, "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule"> = {
  $type: "envoy.extensions.filters.http.header_to_metadata.v3.Config.Rule" as const,

  encode(message: Config_Rule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.header !== undefined && message.header !== "") {
      writer.uint32(10).string(message.header);
    }
    if (message.cookie !== undefined && message.cookie !== "") {
      writer.uint32(42).string(message.cookie);
    }
    if (message.on_header_present !== undefined) {
      Config_KeyValuePair.encode(message.on_header_present, writer.uint32(18).fork()).join();
    }
    if (message.on_header_missing !== undefined) {
      Config_KeyValuePair.encode(message.on_header_missing, writer.uint32(26).fork()).join();
    }
    if (message.remove !== undefined && message.remove !== false) {
      writer.uint32(32).bool(message.remove);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config_Rule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig_Rule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.header = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cookie = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.on_header_present = Config_KeyValuePair.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.on_header_missing = Config_KeyValuePair.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.remove = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config_Rule {
    return {
      $type: Config_Rule.$type,
      header: isSet(object.header) ? globalThis.String(object.header) : undefined,
      cookie: isSet(object.cookie) ? globalThis.String(object.cookie) : undefined,
      on_header_present: isSet(object.on_header_present)
        ? Config_KeyValuePair.fromJSON(object.on_header_present)
        : undefined,
      on_header_missing: isSet(object.on_header_missing)
        ? Config_KeyValuePair.fromJSON(object.on_header_missing)
        : undefined,
      remove: isSet(object.remove) ? globalThis.Boolean(object.remove) : undefined,
    };
  },

  toJSON(message: Config_Rule): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = message.header;
    }
    if (message.cookie !== undefined) {
      obj.cookie = message.cookie;
    }
    if (message.on_header_present !== undefined) {
      obj.on_header_present = Config_KeyValuePair.toJSON(message.on_header_present);
    }
    if (message.on_header_missing !== undefined) {
      obj.on_header_missing = Config_KeyValuePair.toJSON(message.on_header_missing);
    }
    if (message.remove !== undefined) {
      obj.remove = message.remove;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config_Rule>, I>>(base?: I): Config_Rule {
    return Config_Rule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config_Rule>, I>>(object: I): Config_Rule {
    const message = createBaseConfig_Rule();
    message.header = object.header ?? undefined;
    message.cookie = object.cookie ?? undefined;
    message.on_header_present = (object.on_header_present !== undefined && object.on_header_present !== null)
      ? Config_KeyValuePair.fromPartial(object.on_header_present)
      : undefined;
    message.on_header_missing = (object.on_header_missing !== undefined && object.on_header_missing !== null)
      ? Config_KeyValuePair.fromPartial(object.on_header_missing)
      : undefined;
    message.remove = object.remove ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Config_Rule.$type, Config_Rule);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
