// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/credential_injector/v3/credential_injector.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { TypedExtensionConfig } from "../../../../../config/core/v3/extension";

export const protobufPackage = "envoy.extensions.filters.http.credential_injector.v3";

/**
 * Credential Injector injects credentials into outgoing HTTP requests. The filter configuration is used to retrieve the credentials, or
 * they can be requested through the OAuth2 client credential grant. The credentials obtained are then injected into the Authorization header
 * of the proxied HTTP requests, utilizing either the Basic or Bearer scheme.
 *
 * If the credential is not present or there was a failure injecting the credential, the request will fail with ``401 Unauthorized`` unless
 * ``allow_request_without_credential`` is set to ``true``.
 *
 * Notice: This filter is intended to be used for workload authentication, which means that the identity associated with the inserted credential
 * is considered as the identity of the workload behind the envoy proxy(in this case, envoy is typically deployed as a sidecar alongside that
 * workload). Please note that this filter does not handle end user authentication. Its purpose is solely to authenticate the workload itself.
 *
 * Here is an example of CredentialInjector configuration with Generic credential, which injects an HTTP Basic Auth credential into the proxied requests.
 *
 * .. code-block:: yaml
 *
 *  overwrite: true
 *  credential:
 *    name: generic_credential
 *    typed_config:
 *      "@type": type.googleapis.com/envoy.extensions.http.injected_credentials.generic.v3.Generic
 *      credential:
 *        name: credential
 *        sds_config:
 *          path_config_source:
 *            path: credential.yaml
 *      header: Authorization
 *
 * credential.yaml for Basic Auth:
 *
 * .. code-block:: yaml
 *
 *  resources:
 *  - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
 *    name: credential
 *    generic_secret:
 *      secret:
 *        inline_string: "Basic base64EncodedUsernamePassword"
 *
 * It can also be configured to inject a Bearer token into the proxied requests.
 *
 * credential.yaml for Bearer Token:
 *
 * .. code-block:: yaml
 *
 *  resources:
 *  - "@type": "type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret"
 *    name: credential
 *    generic_secret:
 *      secret:
 *        inline_string: "Bearer myToken"
 */
export interface CredentialInjector {
  $type: "envoy.extensions.filters.http.credential_injector.v3.CredentialInjector";
  /**
   * Whether to overwrite the value or not if the injected headers already exist.
   * Value defaults to false.
   */
  overwrite?:
    | boolean
    | undefined;
  /**
   * Whether to send the request to upstream if the credential is not present or if the credential injection
   * to the request fails.
   *
   * By default, a request will fail with ``401 Unauthorized`` if the
   * credential is not present or the injection of the credential to the request fails.
   * If set to true, the request will be sent to upstream without the credential.
   */
  allow_request_without_credential?:
    | boolean
    | undefined;
  /**
   * The credential to inject into the proxied requests
   * [#extension-category: envoy.http.injected_credentials]
   */
  credential?: TypedExtensionConfig | undefined;
}

function createBaseCredentialInjector(): CredentialInjector {
  return { $type: "envoy.extensions.filters.http.credential_injector.v3.CredentialInjector" };
}

export const CredentialInjector: MessageFns<
  CredentialInjector,
  "envoy.extensions.filters.http.credential_injector.v3.CredentialInjector"
> = {
  $type: "envoy.extensions.filters.http.credential_injector.v3.CredentialInjector" as const,

  encode(message: CredentialInjector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.overwrite !== undefined && message.overwrite !== false) {
      writer.uint32(8).bool(message.overwrite);
    }
    if (message.allow_request_without_credential !== undefined && message.allow_request_without_credential !== false) {
      writer.uint32(16).bool(message.allow_request_without_credential);
    }
    if (message.credential !== undefined) {
      TypedExtensionConfig.encode(message.credential, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CredentialInjector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCredentialInjector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.overwrite = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.allow_request_without_credential = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.credential = TypedExtensionConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CredentialInjector {
    return {
      $type: CredentialInjector.$type,
      overwrite: isSet(object.overwrite) ? globalThis.Boolean(object.overwrite) : undefined,
      allow_request_without_credential: isSet(object.allow_request_without_credential)
        ? globalThis.Boolean(object.allow_request_without_credential)
        : undefined,
      credential: isSet(object.credential) ? TypedExtensionConfig.fromJSON(object.credential) : undefined,
    };
  },

  toJSON(message: CredentialInjector): unknown {
    const obj: any = {};
    if (message.overwrite !== undefined) {
      obj.overwrite = message.overwrite;
    }
    if (message.allow_request_without_credential !== undefined) {
      obj.allow_request_without_credential = message.allow_request_without_credential;
    }
    if (message.credential !== undefined) {
      obj.credential = TypedExtensionConfig.toJSON(message.credential);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CredentialInjector>, I>>(base?: I): CredentialInjector {
    return CredentialInjector.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CredentialInjector>, I>>(object: I): CredentialInjector {
    const message = createBaseCredentialInjector();
    message.overwrite = object.overwrite ?? undefined;
    message.allow_request_without_credential = object.allow_request_without_credential ?? undefined;
    message.credential = (object.credential !== undefined && object.credential !== null)
      ? TypedExtensionConfig.fromPartial(object.credential)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CredentialInjector.$type, CredentialInjector);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
