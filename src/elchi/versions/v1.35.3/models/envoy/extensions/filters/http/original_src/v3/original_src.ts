// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/filters/http/original_src/v3/original_src.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.filters.http.original_src.v3";

/**
 * The Original Src filter binds upstream connections to the original source address determined
 * for the request. This address could come from something like the Proxy Protocol filter, or it
 * could come from trusted http headers.
 * [#extension: envoy.filters.http.original_src]
 */
export interface OriginalSrc {
  $type: "envoy.extensions.filters.http.original_src.v3.OriginalSrc";
  /**
   * Sets the SO_MARK option on the upstream connection's socket to the provided value. Used to
   * ensure that non-local addresses may be routed back through envoy when binding to the original
   * source address. The option will not be applied if the mark is 0.
   */
  mark?: number | undefined;
}

function createBaseOriginalSrc(): OriginalSrc {
  return { $type: "envoy.extensions.filters.http.original_src.v3.OriginalSrc" };
}

export const OriginalSrc: MessageFns<OriginalSrc, "envoy.extensions.filters.http.original_src.v3.OriginalSrc"> = {
  $type: "envoy.extensions.filters.http.original_src.v3.OriginalSrc" as const,

  encode(message: OriginalSrc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mark !== undefined && message.mark !== 0) {
      writer.uint32(8).uint32(message.mark);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OriginalSrc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOriginalSrc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mark = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OriginalSrc {
    return { $type: OriginalSrc.$type, mark: isSet(object.mark) ? globalThis.Number(object.mark) : undefined };
  },

  toJSON(message: OriginalSrc): unknown {
    const obj: any = {};
    if (message.mark !== undefined) {
      obj.mark = Math.round(message.mark);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OriginalSrc>, I>>(base?: I): OriginalSrc {
    return OriginalSrc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OriginalSrc>, I>>(object: I): OriginalSrc {
    const message = createBaseOriginalSrc();
    message.mark = object.mark ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(OriginalSrc.$type, OriginalSrc);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
