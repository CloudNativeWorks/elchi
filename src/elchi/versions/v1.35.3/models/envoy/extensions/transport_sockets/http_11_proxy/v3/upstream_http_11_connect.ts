// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/transport_sockets/http_11_proxy/v3/upstream_http_11_connect.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { TransportSocket } from "../../../../config/core/v3/base";

export const protobufPackage = "envoy.extensions.transport_sockets.http_11_proxy.v3";

/**
 * HTTP/1.1 proxy transport socket establishes an upstream connection to a proxy address
 * instead of the target host's address. This behavior is triggered when the transport
 * socket is configured and proxy information is provided.
 *
 * Behavior when proxying:
 * =======================
 * When an upstream connection is established, instead of connecting directly to the endpoint
 * address, the client will connect to the specified proxy address, send an HTTP/1.1 ``CONNECT`` request
 * indicating the endpoint address, and process the response. If the response has HTTP status 200,
 * the connection will be passed down to the underlying transport socket.
 *
 * Configuring proxy information:
 * ==============================
 * Set ``typed_filter_metadata`` in :ref:`LbEndpoint.Metadata <envoy_v3_api_field_config.endpoint.v3.lbendpoint.metadata>` or :ref:`LocalityLbEndpoints.Metadata <envoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.metadata>`.
 * using the key ``envoy.http11_proxy_transport_socket.proxy_address`` and the
 * proxy address in ``config::core::v3::Address`` format.
 */
export interface Http11ProxyUpstreamTransport {
  $type: "envoy.extensions.transport_sockets.http_11_proxy.v3.Http11ProxyUpstreamTransport";
  /** The underlying transport socket being wrapped. Defaults to plaintext (raw_buffer) if unset. */
  transport_socket?: TransportSocket | undefined;
}

function createBaseHttp11ProxyUpstreamTransport(): Http11ProxyUpstreamTransport {
  return { $type: "envoy.extensions.transport_sockets.http_11_proxy.v3.Http11ProxyUpstreamTransport" };
}

export const Http11ProxyUpstreamTransport: MessageFns<
  Http11ProxyUpstreamTransport,
  "envoy.extensions.transport_sockets.http_11_proxy.v3.Http11ProxyUpstreamTransport"
> = {
  $type: "envoy.extensions.transport_sockets.http_11_proxy.v3.Http11ProxyUpstreamTransport" as const,

  encode(message: Http11ProxyUpstreamTransport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transport_socket !== undefined) {
      TransportSocket.encode(message.transport_socket, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Http11ProxyUpstreamTransport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttp11ProxyUpstreamTransport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transport_socket = TransportSocket.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Http11ProxyUpstreamTransport {
    return {
      $type: Http11ProxyUpstreamTransport.$type,
      transport_socket: isSet(object.transport_socket) ? TransportSocket.fromJSON(object.transport_socket) : undefined,
    };
  },

  toJSON(message: Http11ProxyUpstreamTransport): unknown {
    const obj: any = {};
    if (message.transport_socket !== undefined) {
      obj.transport_socket = TransportSocket.toJSON(message.transport_socket);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Http11ProxyUpstreamTransport>, I>>(base?: I): Http11ProxyUpstreamTransport {
    return Http11ProxyUpstreamTransport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Http11ProxyUpstreamTransport>, I>>(object: I): Http11ProxyUpstreamTransport {
    const message = createBaseHttp11ProxyUpstreamTransport();
    message.transport_socket = (object.transport_socket !== undefined && object.transport_socket !== null)
      ? TransportSocket.fromPartial(object.transport_socket)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Http11ProxyUpstreamTransport.$type, Http11ProxyUpstreamTransport);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
