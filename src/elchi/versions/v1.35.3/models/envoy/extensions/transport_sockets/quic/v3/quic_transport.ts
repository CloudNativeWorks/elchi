// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/extensions/transport_sockets/quic/v3/quic_transport.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { DownstreamTlsContext, UpstreamTlsContext } from "../../tls/v3/tls";

export const protobufPackage = "envoy.extensions.transport_sockets.quic.v3";

/** Configuration for Downstream QUIC transport socket. This provides Google's implementation of Google QUIC and IETF QUIC to Envoy. */
export interface QuicDownstreamTransport {
  $type: "envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport";
  downstream_tls_context?:
    | DownstreamTlsContext
    | undefined;
  /**
   * If false, QUIC will tell TLS to reject any early data and to stop issuing 0-RTT credentials with resumption session tickets. This will prevent clients from sending 0-RTT requests.
   * Default to true.
   */
  enable_early_data?: boolean | undefined;
}

/** Configuration for Upstream QUIC transport socket. This provides Google's implementation of Google QUIC and IETF QUIC to Envoy. */
export interface QuicUpstreamTransport {
  $type: "envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport";
  upstream_tls_context?: UpstreamTlsContext | undefined;
}

function createBaseQuicDownstreamTransport(): QuicDownstreamTransport {
  return { $type: "envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport" };
}

export const QuicDownstreamTransport: MessageFns<
  QuicDownstreamTransport,
  "envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport"
> = {
  $type: "envoy.extensions.transport_sockets.quic.v3.QuicDownstreamTransport" as const,

  encode(message: QuicDownstreamTransport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.downstream_tls_context !== undefined) {
      DownstreamTlsContext.encode(message.downstream_tls_context, writer.uint32(10).fork()).join();
    }
    if (message.enable_early_data !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.enable_early_data! },
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuicDownstreamTransport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuicDownstreamTransport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.downstream_tls_context = DownstreamTlsContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.enable_early_data = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuicDownstreamTransport {
    return {
      $type: QuicDownstreamTransport.$type,
      downstream_tls_context: isSet(object.downstream_tls_context)
        ? DownstreamTlsContext.fromJSON(object.downstream_tls_context)
        : undefined,
      enable_early_data: isSet(object.enable_early_data) ? Boolean(object.enable_early_data) : undefined,
    };
  },

  toJSON(message: QuicDownstreamTransport): unknown {
    const obj: any = {};
    if (message.downstream_tls_context !== undefined) {
      obj.downstream_tls_context = DownstreamTlsContext.toJSON(message.downstream_tls_context);
    }
    if (message.enable_early_data !== undefined) {
      obj.enable_early_data = message.enable_early_data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuicDownstreamTransport>, I>>(base?: I): QuicDownstreamTransport {
    return QuicDownstreamTransport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuicDownstreamTransport>, I>>(object: I): QuicDownstreamTransport {
    const message = createBaseQuicDownstreamTransport();
    message.downstream_tls_context =
      (object.downstream_tls_context !== undefined && object.downstream_tls_context !== null)
        ? DownstreamTlsContext.fromPartial(object.downstream_tls_context)
        : undefined;
    message.enable_early_data = object.enable_early_data ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(QuicDownstreamTransport.$type, QuicDownstreamTransport);

function createBaseQuicUpstreamTransport(): QuicUpstreamTransport {
  return { $type: "envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport" };
}

export const QuicUpstreamTransport: MessageFns<
  QuicUpstreamTransport,
  "envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport"
> = {
  $type: "envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport" as const,

  encode(message: QuicUpstreamTransport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upstream_tls_context !== undefined) {
      UpstreamTlsContext.encode(message.upstream_tls_context, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuicUpstreamTransport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuicUpstreamTransport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.upstream_tls_context = UpstreamTlsContext.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuicUpstreamTransport {
    return {
      $type: QuicUpstreamTransport.$type,
      upstream_tls_context: isSet(object.upstream_tls_context)
        ? UpstreamTlsContext.fromJSON(object.upstream_tls_context)
        : undefined,
    };
  },

  toJSON(message: QuicUpstreamTransport): unknown {
    const obj: any = {};
    if (message.upstream_tls_context !== undefined) {
      obj.upstream_tls_context = UpstreamTlsContext.toJSON(message.upstream_tls_context);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuicUpstreamTransport>, I>>(base?: I): QuicUpstreamTransport {
    return QuicUpstreamTransport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuicUpstreamTransport>, I>>(object: I): QuicUpstreamTransport {
    const message = createBaseQuicUpstreamTransport();
    message.upstream_tls_context = (object.upstream_tls_context !== undefined && object.upstream_tls_context !== null)
      ? UpstreamTlsContext.fromPartial(object.upstream_tls_context)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(QuicUpstreamTransport.$type, QuicUpstreamTransport);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
