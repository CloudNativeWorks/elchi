// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/route/v3/route.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../google/protobuf/any";
import { BoolValue, UInt32Value } from "../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { HeaderValueOption, Metadata } from "../../core/v3/base";
import { ConfigSource } from "../../core/v3/config_source";
import { ClusterSpecifierPlugin, RouteAction_RequestMirrorPolicy, VirtualHost } from "./route_components";

export const protobufPackage = "envoy.config.route.v3";

/** [#next-free-field: 18] */
export interface RouteConfiguration {
  $type: "envoy.config.route.v3.RouteConfiguration";
  /**
   * The name of the route configuration. For example, it might match
   * :ref:`route_config_name
   * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.Rds.route_config_name>` in
   * :ref:`envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.Rds`.
   */
  name?:
    | string
    | undefined;
  /** An array of virtual hosts that make up the route table. */
  virtual_hosts?:
    | VirtualHost[]
    | undefined;
  /**
   * An array of virtual hosts will be dynamically loaded via the VHDS API.
   * Both ``virtual_hosts`` and ``vhds`` fields will be used when present. ``virtual_hosts`` can be used
   * for a base routing table or for infrequently changing virtual hosts. ``vhds`` is used for
   * on-demand discovery of virtual hosts. The contents of these two fields will be merged to
   * generate a routing table for a given RouteConfiguration, with ``vhds`` derived configuration
   * taking precedence.
   */
  vhds?:
    | Vhds
    | undefined;
  /**
   * Optionally specifies a list of HTTP headers that the connection manager
   * will consider to be internal only. If they are found on external requests they will be cleaned
   * prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
   * information.
   */
  internal_only_headers?:
    | string[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be added to each response that
   * the connection manager encodes. Headers specified at this level are applied
   * after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * <config_http_conn_man_headers_custom_request_headers>`.
   */
  response_headers_to_add?:
    | HeaderValueOption[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be removed from each response
   * that the connection manager encodes.
   */
  response_headers_to_remove?:
    | string[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be added to each request
   * routed by the HTTP connection manager. Headers specified at this level are
   * applied after headers from any enclosed :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost` or
   * :ref:`envoy_v3_api_msg_config.route.v3.RouteAction`. For more information, including details on
   * header value syntax, see the documentation on :ref:`custom request headers
   * <config_http_conn_man_headers_custom_request_headers>`.
   */
  request_headers_to_add?:
    | HeaderValueOption[]
    | undefined;
  /**
   * Specifies a list of HTTP headers that should be removed from each request
   * routed by the HTTP connection manager.
   */
  request_headers_to_remove?:
    | string[]
    | undefined;
  /**
   * Headers mutations at all levels are evaluated, if specified. By default, the order is from most
   * specific (i.e. route entry level) to least specific (i.e. route configuration level). Later header
   * mutations may override earlier mutations.
   * This order can be reversed by setting this field to true. In other words, most specific level mutation
   * is evaluated last.
   */
  most_specific_header_mutations_wins?:
    | boolean
    | undefined;
  /**
   * An optional boolean that specifies whether the clusters that the route
   * table refers to will be validated by the cluster manager. If set to true
   * and a route refers to a non-existent cluster, the route table will not
   * load. If set to false and a route refers to a non-existent cluster, the
   * route table will load and the router filter will return a 404 if the route
   * is selected at runtime. This setting defaults to true if the route table
   * is statically defined via the :ref:`route_config
   * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.route_config>`
   * option. This setting default to false if the route table is loaded dynamically via the
   * :ref:`rds
   * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.rds>`
   * option. Users may wish to override the default behavior in certain cases (for example when
   * using CDS with a static route table).
   */
  validate_clusters?:
    | boolean
    | undefined;
  /**
   * The maximum bytes of the response :ref:`direct response body
   * <envoy_v3_api_field_config.route.v3.DirectResponseAction.body>` size. If not specified the default
   * is 4096.
   *
   * .. warning::
   *
   *   Envoy currently holds the content of :ref:`direct response body
   *   <envoy_v3_api_field_config.route.v3.DirectResponseAction.body>` in memory. Be careful setting
   *   this to be larger than the default 4KB, since the allocated memory for direct response body
   *   is not subject to data plane buffering controls.
   */
  max_direct_response_body_size_bytes?:
    | number
    | undefined;
  /**
   * A list of plugins and their configurations which may be used by a
   * :ref:`cluster specifier plugin name <envoy_v3_api_field_config.route.v3.RouteAction.cluster_specifier_plugin>`
   * within the route. All ``extension.name`` fields in this list must be unique.
   */
  cluster_specifier_plugins?:
    | ClusterSpecifierPlugin[]
    | undefined;
  /**
   * Specify a set of default request mirroring policies which apply to all routes under its virtual hosts.
   * Note that policies are not merged, the most specific non-empty one becomes the mirror policies.
   */
  request_mirror_policies?:
    | RouteAction_RequestMirrorPolicy[]
    | undefined;
  /**
   * By default, port in :authority header (if any) is used in host matching.
   * With this option enabled, Envoy will ignore the port number in the :authority header (if any) when picking VirtualHost.
   * NOTE: this option will not strip the port number (if any) contained in route config
   * :ref:`envoy_v3_api_msg_config.route.v3.VirtualHost`.domains field.
   */
  ignore_port_in_host_matching?:
    | boolean
    | undefined;
  /**
   * Ignore path-parameters in path-matching.
   * Before RFC3986, URI were like(RFC1808): <scheme>://<net_loc>/<path>;<params>?<query>#<fragment>
   * Envoy by default takes ":path" as "<path>;<params>".
   * For users who want to only match path on the "<path>" portion, this option should be true.
   */
  ignore_path_parameters_in_path_matching?:
    | boolean
    | undefined;
  /**
   * This field can be used to provide RouteConfiguration level per filter config. The key should match the
   * :ref:`filter config name
   * <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.name>`.
   * See :ref:`Http filter route specific config <arch_overview_http_filters_per_filter_config>`
   * for details.
   * [#comment: An entry's value may be wrapped in a
   * :ref:`FilterConfig<envoy_v3_api_msg_config.route.v3.FilterConfig>`
   * message to specify additional options.]
   */
  typed_per_filter_config?:
    | Map<string, Any>
    | undefined;
  /**
   * The metadata field can be used to provide additional information
   * about the route configuration. It can be used for configuration, stats, and logging.
   * The metadata should go under the filter namespace that will need it.
   * For instance, if the metadata is intended for the Router filter,
   * the filter name should be specified as ``envoy.filters.http.router``.
   */
  metadata?: Metadata | undefined;
}

export interface RouteConfiguration_TypedPerFilterConfigEntry {
  $type: "envoy.config.route.v3.RouteConfiguration.TypedPerFilterConfigEntry";
  key: string;
  value?: Any | undefined;
}

export interface Vhds {
  $type: "envoy.config.route.v3.Vhds";
  /** Configuration source specifier for VHDS. */
  config_source?: ConfigSource | undefined;
}

function createBaseRouteConfiguration(): RouteConfiguration {
  return { $type: "envoy.config.route.v3.RouteConfiguration" };
}

export const RouteConfiguration: MessageFns<RouteConfiguration, "envoy.config.route.v3.RouteConfiguration"> = {
  $type: "envoy.config.route.v3.RouteConfiguration" as const,

  encode(message: RouteConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.virtual_hosts !== undefined && message.virtual_hosts.length !== 0) {
      for (const v of message.virtual_hosts) {
        VirtualHost.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.vhds !== undefined) {
      Vhds.encode(message.vhds, writer.uint32(74).fork()).join();
    }
    if (message.internal_only_headers !== undefined && message.internal_only_headers.length !== 0) {
      for (const v of message.internal_only_headers) {
        writer.uint32(26).string(v!);
      }
    }
    if (message.response_headers_to_add !== undefined && message.response_headers_to_add.length !== 0) {
      for (const v of message.response_headers_to_add) {
        HeaderValueOption.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    if (message.response_headers_to_remove !== undefined && message.response_headers_to_remove.length !== 0) {
      for (const v of message.response_headers_to_remove) {
        writer.uint32(42).string(v!);
      }
    }
    if (message.request_headers_to_add !== undefined && message.request_headers_to_add.length !== 0) {
      for (const v of message.request_headers_to_add) {
        HeaderValueOption.encode(v!, writer.uint32(50).fork()).join();
      }
    }
    if (message.request_headers_to_remove !== undefined && message.request_headers_to_remove.length !== 0) {
      for (const v of message.request_headers_to_remove) {
        writer.uint32(66).string(v!);
      }
    }
    if (
      message.most_specific_header_mutations_wins !== undefined && message.most_specific_header_mutations_wins !== false
    ) {
      writer.uint32(80).bool(message.most_specific_header_mutations_wins);
    }
    if (message.validate_clusters !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.validate_clusters! },
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.max_direct_response_body_size_bytes !== undefined) {
      UInt32Value.encode(
        { $type: "google.protobuf.UInt32Value", value: message.max_direct_response_body_size_bytes! },
        writer.uint32(90).fork(),
      ).join();
    }
    if (message.cluster_specifier_plugins !== undefined && message.cluster_specifier_plugins.length !== 0) {
      for (const v of message.cluster_specifier_plugins) {
        ClusterSpecifierPlugin.encode(v!, writer.uint32(98).fork()).join();
      }
    }
    if (message.request_mirror_policies !== undefined && message.request_mirror_policies.length !== 0) {
      for (const v of message.request_mirror_policies) {
        RouteAction_RequestMirrorPolicy.encode(v!, writer.uint32(106).fork()).join();
      }
    }
    if (message.ignore_port_in_host_matching !== undefined && message.ignore_port_in_host_matching !== false) {
      writer.uint32(112).bool(message.ignore_port_in_host_matching);
    }
    if (
      message.ignore_path_parameters_in_path_matching !== undefined &&
      message.ignore_path_parameters_in_path_matching !== false
    ) {
      writer.uint32(120).bool(message.ignore_path_parameters_in_path_matching);
    }
    (message.typed_per_filter_config || new Map()).forEach((value, key) => {
      RouteConfiguration_TypedPerFilterConfigEntry.encode({
        $type: "envoy.config.route.v3.RouteConfiguration.TypedPerFilterConfigEntry",
        key: key as any,
        value,
      }, writer.uint32(130).fork()).join();
    });
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.virtual_hosts === undefined) {
            message.virtual_hosts = [];
          }
          const el = VirtualHost.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.virtual_hosts!.push(el);
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.vhds = Vhds.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.internal_only_headers === undefined) {
            message.internal_only_headers = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.internal_only_headers!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.response_headers_to_add === undefined) {
            message.response_headers_to_add = [];
          }
          const el = HeaderValueOption.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.response_headers_to_add!.push(el);
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.response_headers_to_remove === undefined) {
            message.response_headers_to_remove = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.response_headers_to_remove!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          if (message.request_headers_to_add === undefined) {
            message.request_headers_to_add = [];
          }
          const el = HeaderValueOption.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.request_headers_to_add!.push(el);
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          if (message.request_headers_to_remove === undefined) {
            message.request_headers_to_remove = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.request_headers_to_remove!.push(el);
          }
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.most_specific_header_mutations_wins = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.validate_clusters = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.max_direct_response_body_size_bytes = UInt32Value.decode(reader, reader.uint32()).value;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          if (message.cluster_specifier_plugins === undefined) {
            message.cluster_specifier_plugins = [];
          }
          const el = ClusterSpecifierPlugin.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.cluster_specifier_plugins!.push(el);
          }
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          if (message.request_mirror_policies === undefined) {
            message.request_mirror_policies = [];
          }
          const el = RouteAction_RequestMirrorPolicy.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.request_mirror_policies!.push(el);
          }
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.ignore_port_in_host_matching = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.ignore_path_parameters_in_path_matching = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          const entry16 = RouteConfiguration_TypedPerFilterConfigEntry.decode(reader, reader.uint32());
          if (entry16.value !== undefined) {
            if (message.typed_per_filter_config === undefined) {
              message.typed_per_filter_config = new Map();
            }
            message.typed_per_filter_config!.set(entry16.key, entry16.value);
          }
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteConfiguration {
    return {
      $type: RouteConfiguration.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      virtual_hosts: globalThis.Array.isArray(object?.virtual_hosts)
        ? object.virtual_hosts.map((e: any) => VirtualHost.fromJSON(e))
        : undefined,
      vhds: isSet(object.vhds) ? Vhds.fromJSON(object.vhds) : undefined,
      internal_only_headers: globalThis.Array.isArray(object?.internal_only_headers)
        ? object.internal_only_headers.map((e: any) => globalThis.String(e))
        : undefined,
      response_headers_to_add: globalThis.Array.isArray(object?.response_headers_to_add)
        ? object.response_headers_to_add.map((e: any) => HeaderValueOption.fromJSON(e))
        : undefined,
      response_headers_to_remove: globalThis.Array.isArray(object?.response_headers_to_remove)
        ? object.response_headers_to_remove.map((e: any) => globalThis.String(e))
        : undefined,
      request_headers_to_add: globalThis.Array.isArray(object?.request_headers_to_add)
        ? object.request_headers_to_add.map((e: any) => HeaderValueOption.fromJSON(e))
        : undefined,
      request_headers_to_remove: globalThis.Array.isArray(object?.request_headers_to_remove)
        ? object.request_headers_to_remove.map((e: any) => globalThis.String(e))
        : undefined,
      most_specific_header_mutations_wins: isSet(object.most_specific_header_mutations_wins)
        ? globalThis.Boolean(object.most_specific_header_mutations_wins)
        : undefined,
      validate_clusters: isSet(object.validate_clusters) ? Boolean(object.validate_clusters) : undefined,
      max_direct_response_body_size_bytes: isSet(object.max_direct_response_body_size_bytes)
        ? Number(object.max_direct_response_body_size_bytes)
        : undefined,
      cluster_specifier_plugins: globalThis.Array.isArray(object?.cluster_specifier_plugins)
        ? object.cluster_specifier_plugins.map((e: any) => ClusterSpecifierPlugin.fromJSON(e))
        : undefined,
      request_mirror_policies: globalThis.Array.isArray(object?.request_mirror_policies)
        ? object.request_mirror_policies.map((e: any) => RouteAction_RequestMirrorPolicy.fromJSON(e))
        : undefined,
      ignore_port_in_host_matching: isSet(object.ignore_port_in_host_matching)
        ? globalThis.Boolean(object.ignore_port_in_host_matching)
        : undefined,
      ignore_path_parameters_in_path_matching: isSet(object.ignore_path_parameters_in_path_matching)
        ? globalThis.Boolean(object.ignore_path_parameters_in_path_matching)
        : undefined,
      typed_per_filter_config: isObject(object.typed_per_filter_config)
        ? Object.entries(object.typed_per_filter_config).reduce<Map<string, Any>>((acc, [key, value]) => {
          acc.set(key, Any.fromJSON(value));
          return acc;
        }, new Map())
        : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: RouteConfiguration): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.virtual_hosts?.length) {
      obj.virtual_hosts = message.virtual_hosts.map((e) => VirtualHost.toJSON(e));
    }
    if (message.vhds !== undefined) {
      obj.vhds = Vhds.toJSON(message.vhds);
    }
    if (message.internal_only_headers?.length) {
      obj.internal_only_headers = message.internal_only_headers;
    }
    if (message.response_headers_to_add?.length) {
      obj.response_headers_to_add = message.response_headers_to_add.map((e) => HeaderValueOption.toJSON(e));
    }
    if (message.response_headers_to_remove?.length) {
      obj.response_headers_to_remove = message.response_headers_to_remove;
    }
    if (message.request_headers_to_add?.length) {
      obj.request_headers_to_add = message.request_headers_to_add.map((e) => HeaderValueOption.toJSON(e));
    }
    if (message.request_headers_to_remove?.length) {
      obj.request_headers_to_remove = message.request_headers_to_remove;
    }
    if (message.most_specific_header_mutations_wins !== undefined) {
      obj.most_specific_header_mutations_wins = message.most_specific_header_mutations_wins;
    }
    if (message.validate_clusters !== undefined) {
      obj.validate_clusters = message.validate_clusters;
    }
    if (message.max_direct_response_body_size_bytes !== undefined) {
      obj.max_direct_response_body_size_bytes = message.max_direct_response_body_size_bytes;
    }
    if (message.cluster_specifier_plugins?.length) {
      obj.cluster_specifier_plugins = message.cluster_specifier_plugins.map((e) => ClusterSpecifierPlugin.toJSON(e));
    }
    if (message.request_mirror_policies?.length) {
      obj.request_mirror_policies = message.request_mirror_policies.map((e) =>
        RouteAction_RequestMirrorPolicy.toJSON(e)
      );
    }
    if (message.ignore_port_in_host_matching !== undefined) {
      obj.ignore_port_in_host_matching = message.ignore_port_in_host_matching;
    }
    if (message.ignore_path_parameters_in_path_matching !== undefined) {
      obj.ignore_path_parameters_in_path_matching = message.ignore_path_parameters_in_path_matching;
    }
    if (message.typed_per_filter_config?.size) {
      obj.typed_per_filter_config = {};
      message.typed_per_filter_config.forEach((v, k) => {
        obj.typed_per_filter_config[k] = Any.toJSON(v);
      });
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteConfiguration>, I>>(base?: I): RouteConfiguration {
    return RouteConfiguration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteConfiguration>, I>>(object: I): RouteConfiguration {
    const message = createBaseRouteConfiguration();
    message.name = object.name ?? undefined;
    message.virtual_hosts = object.virtual_hosts?.map((e) => VirtualHost.fromPartial(e)) || undefined;
    message.vhds = (object.vhds !== undefined && object.vhds !== null) ? Vhds.fromPartial(object.vhds) : undefined;
    message.internal_only_headers = object.internal_only_headers?.map((e) => e) || undefined;
    message.response_headers_to_add = object.response_headers_to_add?.map((e) => HeaderValueOption.fromPartial(e)) ||
      undefined;
    message.response_headers_to_remove = object.response_headers_to_remove?.map((e) => e) || undefined;
    message.request_headers_to_add = object.request_headers_to_add?.map((e) => HeaderValueOption.fromPartial(e)) ||
      undefined;
    message.request_headers_to_remove = object.request_headers_to_remove?.map((e) => e) || undefined;
    message.most_specific_header_mutations_wins = object.most_specific_header_mutations_wins ?? undefined;
    message.validate_clusters = object.validate_clusters ?? undefined;
    message.max_direct_response_body_size_bytes = object.max_direct_response_body_size_bytes ?? undefined;
    message.cluster_specifier_plugins =
      object.cluster_specifier_plugins?.map((e) => ClusterSpecifierPlugin.fromPartial(e)) || undefined;
    message.request_mirror_policies =
      object.request_mirror_policies?.map((e) => RouteAction_RequestMirrorPolicy.fromPartial(e)) || undefined;
    message.ignore_port_in_host_matching = object.ignore_port_in_host_matching ?? undefined;
    message.ignore_path_parameters_in_path_matching = object.ignore_path_parameters_in_path_matching ?? undefined;
    message.typed_per_filter_config =
      (object.typed_per_filter_config === undefined || object.typed_per_filter_config === null) ? undefined : (() => {
        const m = new Map();
        (object.typed_per_filter_config as Map<string, Any> ?? new Map()).forEach((value, key) => {
          if (value !== undefined) {
            m.set(key, Any.fromPartial(value));
          }
        });
        return m;
      })();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(RouteConfiguration.$type, RouteConfiguration);

function createBaseRouteConfiguration_TypedPerFilterConfigEntry(): RouteConfiguration_TypedPerFilterConfigEntry {
  return { $type: "envoy.config.route.v3.RouteConfiguration.TypedPerFilterConfigEntry", key: "" };
}

export const RouteConfiguration_TypedPerFilterConfigEntry: MessageFns<
  RouteConfiguration_TypedPerFilterConfigEntry,
  "envoy.config.route.v3.RouteConfiguration.TypedPerFilterConfigEntry"
> = {
  $type: "envoy.config.route.v3.RouteConfiguration.TypedPerFilterConfigEntry" as const,

  encode(
    message: RouteConfiguration_TypedPerFilterConfigEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Any.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RouteConfiguration_TypedPerFilterConfigEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRouteConfiguration_TypedPerFilterConfigEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RouteConfiguration_TypedPerFilterConfigEntry {
    return {
      $type: RouteConfiguration_TypedPerFilterConfigEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Any.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RouteConfiguration_TypedPerFilterConfigEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Any.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RouteConfiguration_TypedPerFilterConfigEntry>, I>>(
    base?: I,
  ): RouteConfiguration_TypedPerFilterConfigEntry {
    return RouteConfiguration_TypedPerFilterConfigEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RouteConfiguration_TypedPerFilterConfigEntry>, I>>(
    object: I,
  ): RouteConfiguration_TypedPerFilterConfigEntry {
    const message = createBaseRouteConfiguration_TypedPerFilterConfigEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Any.fromPartial(object.value) : undefined;
    return message;
  },
};

messageTypeRegistry.set(
  RouteConfiguration_TypedPerFilterConfigEntry.$type,
  RouteConfiguration_TypedPerFilterConfigEntry,
);

function createBaseVhds(): Vhds {
  return { $type: "envoy.config.route.v3.Vhds" };
}

export const Vhds: MessageFns<Vhds, "envoy.config.route.v3.Vhds"> = {
  $type: "envoy.config.route.v3.Vhds" as const,

  encode(message: Vhds, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config_source !== undefined) {
      ConfigSource.encode(message.config_source, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vhds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVhds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config_source = ConfigSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vhds {
    return {
      $type: Vhds.$type,
      config_source: isSet(object.config_source) ? ConfigSource.fromJSON(object.config_source) : undefined,
    };
  },

  toJSON(message: Vhds): unknown {
    const obj: any = {};
    if (message.config_source !== undefined) {
      obj.config_source = ConfigSource.toJSON(message.config_source);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vhds>, I>>(base?: I): Vhds {
    return Vhds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vhds>, I>>(object: I): Vhds {
    const message = createBaseVhds();
    message.config_source = (object.config_source !== undefined && object.config_source !== null)
      ? ConfigSource.fromPartial(object.config_source)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Vhds.$type, Vhds);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
