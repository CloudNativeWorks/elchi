// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/common/mutation_rules/v3/mutation_rules.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BoolValue } from "../../../../../google/protobuf/wrappers";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { RegexMatcher } from "../../../../type/matcher/v3/regex";
import { HeaderValueOption } from "../../../core/v3/base";

export const protobufPackage = "envoy.config.common.mutation_rules.v3";

/**
 * The HeaderMutationRules structure specifies what headers may be
 * manipulated by a processing filter. This set of rules makes it
 * possible to control which modifications a filter may make.
 *
 * By default, an external processing server may add, modify, or remove
 * any header except for an "Envoy internal" header (which is typically
 * denoted by an x-envoy prefix) or specific headers that may affect
 * further filter processing:
 *
 * * ``host``
 * * ``:authority``
 * * ``:scheme``
 * * ``:method``
 *
 * Every attempt to add, change, append, or remove a header will be
 * tested against the rules here. Disallowed header mutations will be
 * ignored unless ``disallow_is_error`` is set to true.
 *
 * Attempts to remove headers are further constrained -- regardless of the
 * settings, system-defined headers (that start with ``:``) and the ``host``
 * header may never be removed.
 *
 * In addition, a counter will be incremented whenever a mutation is
 * rejected. In the ext_proc filter, that counter is named
 * ``rejected_header_mutations``.
 * [#next-free-field: 8]
 */
export interface HeaderMutationRules {
  $type: "envoy.config.common.mutation_rules.v3.HeaderMutationRules";
  /**
   * By default, certain headers that could affect processing of subsequent
   * filters or request routing cannot be modified. These headers are
   * ``host``, ``:authority``, ``:scheme``, and ``:method``. Setting this parameter
   * to true allows these headers to be modified as well.
   */
  allow_all_routing?:
    | boolean
    | undefined;
  /**
   * If true, allow modification of envoy internal headers. By default, these
   * start with ``x-envoy`` but this may be overridden in the ``Bootstrap``
   * configuration using the
   * :ref:`header_prefix <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.header_prefix>`
   * field. Default is false.
   */
  allow_envoy?:
    | boolean
    | undefined;
  /**
   * If true, prevent modification of any system header, defined as a header
   * that starts with a ``:`` character, regardless of any other settings.
   * A processing server may still override the ``:status`` of an HTTP response
   * using an ``ImmediateResponse`` message. Default is false.
   */
  disallow_system?:
    | boolean
    | undefined;
  /**
   * If true, prevent modifications of all header values, regardless of any
   * other settings. A processing server may still override the ``:status``
   * of an HTTP response using an ``ImmediateResponse`` message. Default is false.
   */
  disallow_all?:
    | boolean
    | undefined;
  /**
   * If set, specifically allow any header that matches this regular
   * expression. This overrides all other settings except for
   * ``disallow_expression``.
   */
  allow_expression?:
    | RegexMatcher
    | undefined;
  /**
   * If set, specifically disallow any header that matches this regular
   * expression regardless of any other settings.
   */
  disallow_expression?:
    | RegexMatcher
    | undefined;
  /**
   * If true, and if the rules in this list cause a header mutation to be
   * disallowed, then the filter using this configuration will terminate the
   * request with a 500 error. In addition, regardless of the setting of this
   * parameter, any attempt to set, add, or modify a disallowed header will
   * cause the ``rejected_header_mutations`` counter to be incremented.
   * Default is false.
   */
  disallow_is_error?: boolean | undefined;
}

/**
 * The HeaderMutation structure specifies an action that may be taken on HTTP
 * headers.
 */
export interface HeaderMutation {
  $type: "envoy.config.common.mutation_rules.v3.HeaderMutation";
  action?:
    | //
    /** Remove the specified header if it exists. */
    { $case: "remove"; remove: string }
    | //
    /** Append new header by the specified HeaderValueOption. */
    { $case: "append"; append: HeaderValueOption }
    | undefined;
}

function createBaseHeaderMutationRules(): HeaderMutationRules {
  return { $type: "envoy.config.common.mutation_rules.v3.HeaderMutationRules" };
}

export const HeaderMutationRules: MessageFns<
  HeaderMutationRules,
  "envoy.config.common.mutation_rules.v3.HeaderMutationRules"
> = {
  $type: "envoy.config.common.mutation_rules.v3.HeaderMutationRules" as const,

  encode(message: HeaderMutationRules, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allow_all_routing !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.allow_all_routing! },
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.allow_envoy !== undefined) {
      BoolValue.encode({ $type: "google.protobuf.BoolValue", value: message.allow_envoy! }, writer.uint32(18).fork())
        .join();
    }
    if (message.disallow_system !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.disallow_system! },
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.disallow_all !== undefined) {
      BoolValue.encode({ $type: "google.protobuf.BoolValue", value: message.disallow_all! }, writer.uint32(34).fork())
        .join();
    }
    if (message.allow_expression !== undefined) {
      RegexMatcher.encode(message.allow_expression, writer.uint32(42).fork()).join();
    }
    if (message.disallow_expression !== undefined) {
      RegexMatcher.encode(message.disallow_expression, writer.uint32(50).fork()).join();
    }
    if (message.disallow_is_error !== undefined) {
      BoolValue.encode(
        { $type: "google.protobuf.BoolValue", value: message.disallow_is_error! },
        writer.uint32(58).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderMutationRules {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderMutationRules();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allow_all_routing = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.allow_envoy = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.disallow_system = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.disallow_all = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.allow_expression = RegexMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.disallow_expression = RegexMatcher.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.disallow_is_error = BoolValue.decode(reader, reader.uint32()).value;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderMutationRules {
    return {
      $type: HeaderMutationRules.$type,
      allow_all_routing: isSet(object.allow_all_routing) ? Boolean(object.allow_all_routing) : undefined,
      allow_envoy: isSet(object.allow_envoy) ? Boolean(object.allow_envoy) : undefined,
      disallow_system: isSet(object.disallow_system) ? Boolean(object.disallow_system) : undefined,
      disallow_all: isSet(object.disallow_all) ? Boolean(object.disallow_all) : undefined,
      allow_expression: isSet(object.allow_expression) ? RegexMatcher.fromJSON(object.allow_expression) : undefined,
      disallow_expression: isSet(object.disallow_expression)
        ? RegexMatcher.fromJSON(object.disallow_expression)
        : undefined,
      disallow_is_error: isSet(object.disallow_is_error) ? Boolean(object.disallow_is_error) : undefined,
    };
  },

  toJSON(message: HeaderMutationRules): unknown {
    const obj: any = {};
    if (message.allow_all_routing !== undefined) {
      obj.allow_all_routing = message.allow_all_routing;
    }
    if (message.allow_envoy !== undefined) {
      obj.allow_envoy = message.allow_envoy;
    }
    if (message.disallow_system !== undefined) {
      obj.disallow_system = message.disallow_system;
    }
    if (message.disallow_all !== undefined) {
      obj.disallow_all = message.disallow_all;
    }
    if (message.allow_expression !== undefined) {
      obj.allow_expression = RegexMatcher.toJSON(message.allow_expression);
    }
    if (message.disallow_expression !== undefined) {
      obj.disallow_expression = RegexMatcher.toJSON(message.disallow_expression);
    }
    if (message.disallow_is_error !== undefined) {
      obj.disallow_is_error = message.disallow_is_error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderMutationRules>, I>>(base?: I): HeaderMutationRules {
    return HeaderMutationRules.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderMutationRules>, I>>(object: I): HeaderMutationRules {
    const message = createBaseHeaderMutationRules();
    message.allow_all_routing = object.allow_all_routing ?? undefined;
    message.allow_envoy = object.allow_envoy ?? undefined;
    message.disallow_system = object.disallow_system ?? undefined;
    message.disallow_all = object.disallow_all ?? undefined;
    message.allow_expression = (object.allow_expression !== undefined && object.allow_expression !== null)
      ? RegexMatcher.fromPartial(object.allow_expression)
      : undefined;
    message.disallow_expression = (object.disallow_expression !== undefined && object.disallow_expression !== null)
      ? RegexMatcher.fromPartial(object.disallow_expression)
      : undefined;
    message.disallow_is_error = object.disallow_is_error ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(HeaderMutationRules.$type, HeaderMutationRules);

function createBaseHeaderMutation(): HeaderMutation {
  return { $type: "envoy.config.common.mutation_rules.v3.HeaderMutation", action: undefined };
}

export const HeaderMutation: MessageFns<HeaderMutation, "envoy.config.common.mutation_rules.v3.HeaderMutation"> = {
  $type: "envoy.config.common.mutation_rules.v3.HeaderMutation" as const,

  encode(message: HeaderMutation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.action?.$case) {
      case "remove":
        writer.uint32(10).string(message.action.remove);
        break;
      case "append":
        HeaderValueOption.encode(message.action.append, writer.uint32(18).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HeaderMutation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHeaderMutation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.action = { $case: "remove", remove: reader.string() };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.action = { $case: "append", append: HeaderValueOption.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HeaderMutation {
    return {
      $type: HeaderMutation.$type,
      action: isSet(object.remove)
        ? { $case: "remove", remove: globalThis.String(object.remove) }
        : isSet(object.append)
        ? { $case: "append", append: HeaderValueOption.fromJSON(object.append) }
        : undefined,
    };
  },

  toJSON(message: HeaderMutation): unknown {
    const obj: any = {};
    if (message.action?.$case === "remove") {
      obj.remove = message.action.remove;
    }
    if (message.action?.$case === "append") {
      obj.append = HeaderValueOption.toJSON(message.action.append);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HeaderMutation>, I>>(base?: I): HeaderMutation {
    return HeaderMutation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HeaderMutation>, I>>(object: I): HeaderMutation {
    const message = createBaseHeaderMutation();
    if (object.action?.$case === "remove" && object.action?.remove !== undefined && object.action?.remove !== null) {
      message.action = { $case: "remove", remove: object.action.remove };
    }
    if (object.action?.$case === "append" && object.action?.append !== undefined && object.action?.append !== null) {
      message.action = { $case: "append", append: HeaderValueOption.fromPartial(object.action.append) };
    }
    return message;
  },
};

messageTypeRegistry.set(HeaderMutation.$type, HeaderMutation);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
