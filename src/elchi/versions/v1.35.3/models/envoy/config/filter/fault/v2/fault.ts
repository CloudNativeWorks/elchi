// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/fault/v2/fault.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { messageTypeRegistry } from "../../../../../typeRegistry";
import { FractionalPercent } from "../../../../type/percent";

export const protobufPackage = "envoy.config.filter.fault.v2";

/**
 * Delay specification is used to inject latency into the
 * HTTP/gRPC/Mongo/Redis operation or delay proxying of TCP connections.
 * [#next-free-field: 6]
 */
export interface FaultDelay {
  $type: "envoy.config.filter.fault.v2.FaultDelay";
  /**
   * Unused and deprecated. Will be removed in the next release.
   *
   * @deprecated
   */
  type?: FaultDelay_FaultDelayType | undefined;
  fault_delay_secifier?:
    | //
    /**
     * Add a fixed delay before forwarding the operation upstream. See
     * https://developers.google.com/protocol-buffers/docs/proto3#json for
     * the JSON/YAML Duration mapping. For HTTP/Mongo/Redis, the specified
     * delay will be injected before a new request/operation. For TCP
     * connections, the proxying of the connection upstream will be delayed
     * for the specified period. This is required if type is FIXED.
     */
    { $case: "fixed_delay"; fixed_delay: Duration }
    | //
    /** Fault delays are controlled via an HTTP header (if applicable). */
    { $case: "header_delay"; header_delay: FaultDelay_HeaderDelay }
    | undefined;
  /** The percentage of operations/connections/requests on which the delay will be injected. */
  percentage?: FractionalPercent | undefined;
}

export enum FaultDelay_FaultDelayType {
  /** FIXED - Unused and deprecated. */
  FIXED = "FIXED",
}

export function faultDelay_FaultDelayTypeFromJSON(object: any): FaultDelay_FaultDelayType {
  switch (object) {
    case 0:
    case "FIXED":
      return FaultDelay_FaultDelayType.FIXED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum FaultDelay_FaultDelayType");
  }
}

export function faultDelay_FaultDelayTypeToJSON(object: FaultDelay_FaultDelayType): string {
  switch (object) {
    case FaultDelay_FaultDelayType.FIXED:
      return "FIXED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum FaultDelay_FaultDelayType");
  }
}

export function faultDelay_FaultDelayTypeToNumber(object: FaultDelay_FaultDelayType): number {
  switch (object) {
    case FaultDelay_FaultDelayType.FIXED:
      return 0;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum FaultDelay_FaultDelayType");
  }
}

/**
 * Fault delays are controlled via an HTTP header (if applicable). See the
 * :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
 * more information.
 */
export interface FaultDelay_HeaderDelay {
  $type: "envoy.config.filter.fault.v2.FaultDelay.HeaderDelay";
}

/** Describes a rate limit to be applied. */
export interface FaultRateLimit {
  $type: "envoy.config.filter.fault.v2.FaultRateLimit";
  limit_type?:
    | //
    /** A fixed rate limit. */
    { $case: "fixed_limit"; fixed_limit: FaultRateLimit_FixedLimit }
    | //
    /** Rate limits are controlled via an HTTP header (if applicable). */
    { $case: "header_limit"; header_limit: FaultRateLimit_HeaderLimit }
    | undefined;
  /** The percentage of operations/connections/requests on which the rate limit will be injected. */
  percentage?: FractionalPercent | undefined;
}

/** Describes a fixed/constant rate limit. */
export interface FaultRateLimit_FixedLimit {
  $type: "envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit";
  /** The limit supplied in KiB/s. */
  limit_kbps?: number | undefined;
}

/**
 * Rate limits are controlled via an HTTP header (if applicable). See the
 * :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
 * more information.
 */
export interface FaultRateLimit_HeaderLimit {
  $type: "envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit";
}

function createBaseFaultDelay(): FaultDelay {
  return { $type: "envoy.config.filter.fault.v2.FaultDelay", fault_delay_secifier: undefined };
}

export const FaultDelay: MessageFns<FaultDelay, "envoy.config.filter.fault.v2.FaultDelay"> = {
  $type: "envoy.config.filter.fault.v2.FaultDelay" as const,

  encode(message: FaultDelay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined && message.type !== FaultDelay_FaultDelayType.FIXED) {
      writer.uint32(8).int32(faultDelay_FaultDelayTypeToNumber(message.type));
    }
    switch (message.fault_delay_secifier?.$case) {
      case "fixed_delay":
        Duration.encode(message.fault_delay_secifier.fixed_delay, writer.uint32(26).fork()).join();
        break;
      case "header_delay":
        FaultDelay_HeaderDelay.encode(message.fault_delay_secifier.header_delay, writer.uint32(42).fork()).join();
        break;
    }
    if (message.percentage !== undefined) {
      FractionalPercent.encode(message.percentage, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaultDelay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaultDelay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = faultDelay_FaultDelayTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fault_delay_secifier = {
            $case: "fixed_delay",
            fixed_delay: Duration.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fault_delay_secifier = {
            $case: "header_delay",
            header_delay: FaultDelay_HeaderDelay.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.percentage = FractionalPercent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaultDelay {
    return {
      $type: FaultDelay.$type,
      type: isSet(object.type) ? faultDelay_FaultDelayTypeFromJSON(object.type) : undefined,
      fault_delay_secifier: isSet(object.fixed_delay)
        ? { $case: "fixed_delay", fixed_delay: Duration.fromJSON(object.fixed_delay) }
        : isSet(object.header_delay)
        ? { $case: "header_delay", header_delay: FaultDelay_HeaderDelay.fromJSON(object.header_delay) }
        : undefined,
      percentage: isSet(object.percentage) ? FractionalPercent.fromJSON(object.percentage) : undefined,
    };
  },

  toJSON(message: FaultDelay): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = faultDelay_FaultDelayTypeToJSON(message.type);
    }
    if (message.fault_delay_secifier?.$case === "fixed_delay") {
      obj.fixed_delay = Duration.toJSON(message.fault_delay_secifier.fixed_delay);
    }
    if (message.fault_delay_secifier?.$case === "header_delay") {
      obj.header_delay = FaultDelay_HeaderDelay.toJSON(message.fault_delay_secifier.header_delay);
    }
    if (message.percentage !== undefined) {
      obj.percentage = FractionalPercent.toJSON(message.percentage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FaultDelay>, I>>(base?: I): FaultDelay {
    return FaultDelay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaultDelay>, I>>(object: I): FaultDelay {
    const message = createBaseFaultDelay();
    message.type = object.type ?? undefined;
    if (
      object.fault_delay_secifier?.$case === "fixed_delay" &&
      object.fault_delay_secifier?.fixed_delay !== undefined &&
      object.fault_delay_secifier?.fixed_delay !== null
    ) {
      message.fault_delay_secifier = {
        $case: "fixed_delay",
        fixed_delay: Duration.fromPartial(object.fault_delay_secifier.fixed_delay),
      };
    }
    if (
      object.fault_delay_secifier?.$case === "header_delay" &&
      object.fault_delay_secifier?.header_delay !== undefined &&
      object.fault_delay_secifier?.header_delay !== null
    ) {
      message.fault_delay_secifier = {
        $case: "header_delay",
        header_delay: FaultDelay_HeaderDelay.fromPartial(object.fault_delay_secifier.header_delay),
      };
    }
    message.percentage = (object.percentage !== undefined && object.percentage !== null)
      ? FractionalPercent.fromPartial(object.percentage)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(FaultDelay.$type, FaultDelay);

function createBaseFaultDelay_HeaderDelay(): FaultDelay_HeaderDelay {
  return { $type: "envoy.config.filter.fault.v2.FaultDelay.HeaderDelay" };
}

export const FaultDelay_HeaderDelay: MessageFns<
  FaultDelay_HeaderDelay,
  "envoy.config.filter.fault.v2.FaultDelay.HeaderDelay"
> = {
  $type: "envoy.config.filter.fault.v2.FaultDelay.HeaderDelay" as const,

  encode(_: FaultDelay_HeaderDelay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaultDelay_HeaderDelay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaultDelay_HeaderDelay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FaultDelay_HeaderDelay {
    return { $type: FaultDelay_HeaderDelay.$type };
  },

  toJSON(_: FaultDelay_HeaderDelay): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FaultDelay_HeaderDelay>, I>>(base?: I): FaultDelay_HeaderDelay {
    return FaultDelay_HeaderDelay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaultDelay_HeaderDelay>, I>>(_: I): FaultDelay_HeaderDelay {
    const message = createBaseFaultDelay_HeaderDelay();
    return message;
  },
};

messageTypeRegistry.set(FaultDelay_HeaderDelay.$type, FaultDelay_HeaderDelay);

function createBaseFaultRateLimit(): FaultRateLimit {
  return { $type: "envoy.config.filter.fault.v2.FaultRateLimit", limit_type: undefined };
}

export const FaultRateLimit: MessageFns<FaultRateLimit, "envoy.config.filter.fault.v2.FaultRateLimit"> = {
  $type: "envoy.config.filter.fault.v2.FaultRateLimit" as const,

  encode(message: FaultRateLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.limit_type?.$case) {
      case "fixed_limit":
        FaultRateLimit_FixedLimit.encode(message.limit_type.fixed_limit, writer.uint32(10).fork()).join();
        break;
      case "header_limit":
        FaultRateLimit_HeaderLimit.encode(message.limit_type.header_limit, writer.uint32(26).fork()).join();
        break;
    }
    if (message.percentage !== undefined) {
      FractionalPercent.encode(message.percentage, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaultRateLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaultRateLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.limit_type = {
            $case: "fixed_limit",
            fixed_limit: FaultRateLimit_FixedLimit.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.limit_type = {
            $case: "header_limit",
            header_limit: FaultRateLimit_HeaderLimit.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.percentage = FractionalPercent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaultRateLimit {
    return {
      $type: FaultRateLimit.$type,
      limit_type: isSet(object.fixed_limit)
        ? { $case: "fixed_limit", fixed_limit: FaultRateLimit_FixedLimit.fromJSON(object.fixed_limit) }
        : isSet(object.header_limit)
        ? { $case: "header_limit", header_limit: FaultRateLimit_HeaderLimit.fromJSON(object.header_limit) }
        : undefined,
      percentage: isSet(object.percentage) ? FractionalPercent.fromJSON(object.percentage) : undefined,
    };
  },

  toJSON(message: FaultRateLimit): unknown {
    const obj: any = {};
    if (message.limit_type?.$case === "fixed_limit") {
      obj.fixed_limit = FaultRateLimit_FixedLimit.toJSON(message.limit_type.fixed_limit);
    }
    if (message.limit_type?.$case === "header_limit") {
      obj.header_limit = FaultRateLimit_HeaderLimit.toJSON(message.limit_type.header_limit);
    }
    if (message.percentage !== undefined) {
      obj.percentage = FractionalPercent.toJSON(message.percentage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FaultRateLimit>, I>>(base?: I): FaultRateLimit {
    return FaultRateLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaultRateLimit>, I>>(object: I): FaultRateLimit {
    const message = createBaseFaultRateLimit();
    if (
      object.limit_type?.$case === "fixed_limit" &&
      object.limit_type?.fixed_limit !== undefined &&
      object.limit_type?.fixed_limit !== null
    ) {
      message.limit_type = {
        $case: "fixed_limit",
        fixed_limit: FaultRateLimit_FixedLimit.fromPartial(object.limit_type.fixed_limit),
      };
    }
    if (
      object.limit_type?.$case === "header_limit" &&
      object.limit_type?.header_limit !== undefined &&
      object.limit_type?.header_limit !== null
    ) {
      message.limit_type = {
        $case: "header_limit",
        header_limit: FaultRateLimit_HeaderLimit.fromPartial(object.limit_type.header_limit),
      };
    }
    message.percentage = (object.percentage !== undefined && object.percentage !== null)
      ? FractionalPercent.fromPartial(object.percentage)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(FaultRateLimit.$type, FaultRateLimit);

function createBaseFaultRateLimit_FixedLimit(): FaultRateLimit_FixedLimit {
  return { $type: "envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit" };
}

export const FaultRateLimit_FixedLimit: MessageFns<
  FaultRateLimit_FixedLimit,
  "envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit"
> = {
  $type: "envoy.config.filter.fault.v2.FaultRateLimit.FixedLimit" as const,

  encode(message: FaultRateLimit_FixedLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit_kbps !== undefined && message.limit_kbps !== 0) {
      writer.uint32(8).uint64(message.limit_kbps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaultRateLimit_FixedLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaultRateLimit_FixedLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit_kbps = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FaultRateLimit_FixedLimit {
    return {
      $type: FaultRateLimit_FixedLimit.$type,
      limit_kbps: isSet(object.limit_kbps) ? globalThis.Number(object.limit_kbps) : undefined,
    };
  },

  toJSON(message: FaultRateLimit_FixedLimit): unknown {
    const obj: any = {};
    if (message.limit_kbps !== undefined) {
      obj.limit_kbps = Math.round(message.limit_kbps);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FaultRateLimit_FixedLimit>, I>>(base?: I): FaultRateLimit_FixedLimit {
    return FaultRateLimit_FixedLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaultRateLimit_FixedLimit>, I>>(object: I): FaultRateLimit_FixedLimit {
    const message = createBaseFaultRateLimit_FixedLimit();
    message.limit_kbps = object.limit_kbps ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FaultRateLimit_FixedLimit.$type, FaultRateLimit_FixedLimit);

function createBaseFaultRateLimit_HeaderLimit(): FaultRateLimit_HeaderLimit {
  return { $type: "envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit" };
}

export const FaultRateLimit_HeaderLimit: MessageFns<
  FaultRateLimit_HeaderLimit,
  "envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit"
> = {
  $type: "envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimit" as const,

  encode(_: FaultRateLimit_HeaderLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FaultRateLimit_HeaderLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFaultRateLimit_HeaderLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): FaultRateLimit_HeaderLimit {
    return { $type: FaultRateLimit_HeaderLimit.$type };
  },

  toJSON(_: FaultRateLimit_HeaderLimit): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<FaultRateLimit_HeaderLimit>, I>>(base?: I): FaultRateLimit_HeaderLimit {
    return FaultRateLimit_HeaderLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FaultRateLimit_HeaderLimit>, I>>(_: I): FaultRateLimit_HeaderLimit {
    const message = createBaseFaultRateLimit_HeaderLimit();
    return message;
  },
};

messageTypeRegistry.set(FaultRateLimit_HeaderLimit.$type, FaultRateLimit_HeaderLimit);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
