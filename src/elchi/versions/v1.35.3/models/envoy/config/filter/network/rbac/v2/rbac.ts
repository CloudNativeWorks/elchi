// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/filter/network/rbac/v2/rbac.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../../typeRegistry";
import { RBAC as RBAC1 } from "../../../../rbac/v2/rbac";

export const protobufPackage = "envoy.config.filter.network.rbac.v2";

/**
 * RBAC network filter config.
 *
 * Header should not be used in rules/shadow_rules in RBAC network filter as
 * this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.
 */
export interface RBAC {
  $type: "envoy.config.filter.network.rbac.v2.RBAC";
  /**
   * Specify the RBAC rules to be applied globally.
   * If absent, no enforcing RBAC policy will be applied.
   */
  rules?:
    | RBAC1
    | undefined;
  /**
   * Shadow rules are not enforced by the filter but will emit stats and logs
   * and can be used for rule testing.
   * If absent, no shadow RBAC policy will be applied.
   */
  shadow_rules?:
    | RBAC1
    | undefined;
  /** The prefix to use when emitting statistics. */
  stat_prefix?:
    | string
    | undefined;
  /**
   * RBAC enforcement strategy. By default RBAC will be enforced only once
   * when the first byte of data arrives from the downstream. When used in
   * conjunction with filters that emit dynamic metadata after decoding
   * every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
   * CONTINUOUS to enforce RBAC policies on every message boundary.
   */
  enforcement_type?: RBAC_EnforcementType | undefined;
}

export enum RBAC_EnforcementType {
  /** ONE_TIME_ON_FIRST_BYTE - Apply RBAC policies when the first byte of data arrives on the connection. */
  ONE_TIME_ON_FIRST_BYTE = "ONE_TIME_ON_FIRST_BYTE",
  /**
   * CONTINUOUS - Continuously apply RBAC policies as data arrives. Use this mode when
   * using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
   * etc. when the protocol decoders emit dynamic metadata such as the
   * resources being accessed and the operations on the resources.
   */
  CONTINUOUS = "CONTINUOUS",
}

export function rBAC_EnforcementTypeFromJSON(object: any): RBAC_EnforcementType {
  switch (object) {
    case 0:
    case "ONE_TIME_ON_FIRST_BYTE":
      return RBAC_EnforcementType.ONE_TIME_ON_FIRST_BYTE;
    case 1:
    case "CONTINUOUS":
      return RBAC_EnforcementType.CONTINUOUS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RBAC_EnforcementType");
  }
}

export function rBAC_EnforcementTypeToJSON(object: RBAC_EnforcementType): string {
  switch (object) {
    case RBAC_EnforcementType.ONE_TIME_ON_FIRST_BYTE:
      return "ONE_TIME_ON_FIRST_BYTE";
    case RBAC_EnforcementType.CONTINUOUS:
      return "CONTINUOUS";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RBAC_EnforcementType");
  }
}

export function rBAC_EnforcementTypeToNumber(object: RBAC_EnforcementType): number {
  switch (object) {
    case RBAC_EnforcementType.ONE_TIME_ON_FIRST_BYTE:
      return 0;
    case RBAC_EnforcementType.CONTINUOUS:
      return 1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RBAC_EnforcementType");
  }
}

function createBaseRBAC(): RBAC {
  return { $type: "envoy.config.filter.network.rbac.v2.RBAC" };
}

export const RBAC: MessageFns<RBAC, "envoy.config.filter.network.rbac.v2.RBAC"> = {
  $type: "envoy.config.filter.network.rbac.v2.RBAC" as const,

  encode(message: RBAC, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rules !== undefined) {
      RBAC1.encode(message.rules, writer.uint32(10).fork()).join();
    }
    if (message.shadow_rules !== undefined) {
      RBAC1.encode(message.shadow_rules, writer.uint32(18).fork()).join();
    }
    if (message.stat_prefix !== undefined && message.stat_prefix !== "") {
      writer.uint32(26).string(message.stat_prefix);
    }
    if (
      message.enforcement_type !== undefined && message.enforcement_type !== RBAC_EnforcementType.ONE_TIME_ON_FIRST_BYTE
    ) {
      writer.uint32(32).int32(rBAC_EnforcementTypeToNumber(message.enforcement_type));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RBAC {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRBAC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rules = RBAC1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shadow_rules = RBAC1.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stat_prefix = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enforcement_type = rBAC_EnforcementTypeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RBAC {
    return {
      $type: RBAC.$type,
      rules: isSet(object.rules) ? RBAC1.fromJSON(object.rules) : undefined,
      shadow_rules: isSet(object.shadow_rules) ? RBAC1.fromJSON(object.shadow_rules) : undefined,
      stat_prefix: isSet(object.stat_prefix) ? globalThis.String(object.stat_prefix) : undefined,
      enforcement_type: isSet(object.enforcement_type)
        ? rBAC_EnforcementTypeFromJSON(object.enforcement_type)
        : undefined,
    };
  },

  toJSON(message: RBAC): unknown {
    const obj: any = {};
    if (message.rules !== undefined) {
      obj.rules = RBAC1.toJSON(message.rules);
    }
    if (message.shadow_rules !== undefined) {
      obj.shadow_rules = RBAC1.toJSON(message.shadow_rules);
    }
    if (message.stat_prefix !== undefined) {
      obj.stat_prefix = message.stat_prefix;
    }
    if (message.enforcement_type !== undefined) {
      obj.enforcement_type = rBAC_EnforcementTypeToJSON(message.enforcement_type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RBAC>, I>>(base?: I): RBAC {
    return RBAC.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RBAC>, I>>(object: I): RBAC {
    const message = createBaseRBAC();
    message.rules = (object.rules !== undefined && object.rules !== null) ? RBAC1.fromPartial(object.rules) : undefined;
    message.shadow_rules = (object.shadow_rules !== undefined && object.shadow_rules !== null)
      ? RBAC1.fromPartial(object.shadow_rules)
      : undefined;
    message.stat_prefix = object.stat_prefix ?? undefined;
    message.enforcement_type = object.enforcement_type ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(RBAC.$type, RBAC);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
