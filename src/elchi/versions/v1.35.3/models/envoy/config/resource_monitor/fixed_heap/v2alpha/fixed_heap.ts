// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/resource_monitor/fixed_heap/v2alpha/fixed_heap.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../../typeRegistry";

export const protobufPackage = "envoy.config.resource_monitor.fixed_heap.v2alpha";

/**
 * The fixed heap resource monitor reports the Envoy process memory pressure, computed as a
 * fraction of currently reserved heap memory divided by a statically configured maximum
 * specified in the FixedHeapConfig.
 */
export interface FixedHeapConfig {
  $type: "envoy.config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig";
  max_heap_size_bytes?: number | undefined;
}

function createBaseFixedHeapConfig(): FixedHeapConfig {
  return { $type: "envoy.config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig" };
}

export const FixedHeapConfig: MessageFns<
  FixedHeapConfig,
  "envoy.config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig"
> = {
  $type: "envoy.config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig" as const,

  encode(message: FixedHeapConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.max_heap_size_bytes !== undefined && message.max_heap_size_bytes !== 0) {
      writer.uint32(8).uint64(message.max_heap_size_bytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FixedHeapConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFixedHeapConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.max_heap_size_bytes = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FixedHeapConfig {
    return {
      $type: FixedHeapConfig.$type,
      max_heap_size_bytes: isSet(object.max_heap_size_bytes)
        ? globalThis.Number(object.max_heap_size_bytes)
        : undefined,
    };
  },

  toJSON(message: FixedHeapConfig): unknown {
    const obj: any = {};
    if (message.max_heap_size_bytes !== undefined) {
      obj.max_heap_size_bytes = Math.round(message.max_heap_size_bytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FixedHeapConfig>, I>>(base?: I): FixedHeapConfig {
    return FixedHeapConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FixedHeapConfig>, I>>(object: I): FixedHeapConfig {
    const message = createBaseFixedHeapConfig();
    message.max_heap_size_bytes = object.max_heap_size_bytes ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(FixedHeapConfig.$type, FixedHeapConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
