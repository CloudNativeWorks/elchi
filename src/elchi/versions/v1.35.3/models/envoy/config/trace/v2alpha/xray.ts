// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v2alpha/xray.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { SocketAddress } from "../../../api/v2/core/address";
import { DataSource } from "../../../api/v2/core/base";

export const protobufPackage = "envoy.config.trace.v2alpha";

export interface XRayConfig {
  $type: "envoy.config.trace.v2alpha.XRayConfig";
  /**
   * The UDP endpoint of the X-Ray Daemon where the spans will be sent.
   * If this value is not set, the default value of 127.0.0.1:2000 will be used.
   */
  daemon_endpoint?:
    | SocketAddress
    | undefined;
  /** The name of the X-Ray segment. */
  segment_name?:
    | string
    | undefined;
  /**
   * The location of a local custom sampling rules JSON file.
   * For an example of the sampling rules see:
   * `X-Ray SDK documentation
   * <https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-configuration.html#xray-sdk-go-configuration-sampling>`_
   */
  sampling_rule_manifest?: DataSource | undefined;
}

function createBaseXRayConfig(): XRayConfig {
  return { $type: "envoy.config.trace.v2alpha.XRayConfig" };
}

export const XRayConfig: MessageFns<XRayConfig, "envoy.config.trace.v2alpha.XRayConfig"> = {
  $type: "envoy.config.trace.v2alpha.XRayConfig" as const,

  encode(message: XRayConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.daemon_endpoint !== undefined) {
      SocketAddress.encode(message.daemon_endpoint, writer.uint32(10).fork()).join();
    }
    if (message.segment_name !== undefined && message.segment_name !== "") {
      writer.uint32(18).string(message.segment_name);
    }
    if (message.sampling_rule_manifest !== undefined) {
      DataSource.encode(message.sampling_rule_manifest, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): XRayConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseXRayConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.daemon_endpoint = SocketAddress.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.segment_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sampling_rule_manifest = DataSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): XRayConfig {
    return {
      $type: XRayConfig.$type,
      daemon_endpoint: isSet(object.daemon_endpoint) ? SocketAddress.fromJSON(object.daemon_endpoint) : undefined,
      segment_name: isSet(object.segment_name) ? globalThis.String(object.segment_name) : undefined,
      sampling_rule_manifest: isSet(object.sampling_rule_manifest)
        ? DataSource.fromJSON(object.sampling_rule_manifest)
        : undefined,
    };
  },

  toJSON(message: XRayConfig): unknown {
    const obj: any = {};
    if (message.daemon_endpoint !== undefined) {
      obj.daemon_endpoint = SocketAddress.toJSON(message.daemon_endpoint);
    }
    if (message.segment_name !== undefined) {
      obj.segment_name = message.segment_name;
    }
    if (message.sampling_rule_manifest !== undefined) {
      obj.sampling_rule_manifest = DataSource.toJSON(message.sampling_rule_manifest);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<XRayConfig>, I>>(base?: I): XRayConfig {
    return XRayConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<XRayConfig>, I>>(object: I): XRayConfig {
    const message = createBaseXRayConfig();
    message.daemon_endpoint = (object.daemon_endpoint !== undefined && object.daemon_endpoint !== null)
      ? SocketAddress.fromPartial(object.daemon_endpoint)
      : undefined;
    message.segment_name = object.segment_name ?? undefined;
    message.sampling_rule_manifest =
      (object.sampling_rule_manifest !== undefined && object.sampling_rule_manifest !== null)
        ? DataSource.fromPartial(object.sampling_rule_manifest)
        : undefined;
    return message;
  },
};

messageTypeRegistry.set(XRayConfig.$type, XRayConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
