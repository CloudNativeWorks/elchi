// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: envoy/config/trace/v2/datadog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "envoy.config.trace.v2";

/**
 * Configuration for the Datadog tracer.
 * [#extension: envoy.tracers.datadog]
 */
export interface DatadogConfig {
  $type: "envoy.config.trace.v2.DatadogConfig";
  /** The cluster to use for submitting traces to the Datadog agent. */
  collector_cluster?:
    | string
    | undefined;
  /** The name used for the service when traces are generated by envoy. */
  service_name?: string | undefined;
}

function createBaseDatadogConfig(): DatadogConfig {
  return { $type: "envoy.config.trace.v2.DatadogConfig" };
}

export const DatadogConfig: MessageFns<DatadogConfig, "envoy.config.trace.v2.DatadogConfig"> = {
  $type: "envoy.config.trace.v2.DatadogConfig" as const,

  encode(message: DatadogConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.collector_cluster !== undefined && message.collector_cluster !== "") {
      writer.uint32(10).string(message.collector_cluster);
    }
    if (message.service_name !== undefined && message.service_name !== "") {
      writer.uint32(18).string(message.service_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatadogConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatadogConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.collector_cluster = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.service_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatadogConfig {
    return {
      $type: DatadogConfig.$type,
      collector_cluster: isSet(object.collector_cluster) ? globalThis.String(object.collector_cluster) : undefined,
      service_name: isSet(object.service_name) ? globalThis.String(object.service_name) : undefined,
    };
  },

  toJSON(message: DatadogConfig): unknown {
    const obj: any = {};
    if (message.collector_cluster !== undefined) {
      obj.collector_cluster = message.collector_cluster;
    }
    if (message.service_name !== undefined) {
      obj.service_name = message.service_name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DatadogConfig>, I>>(base?: I): DatadogConfig {
    return DatadogConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DatadogConfig>, I>>(object: I): DatadogConfig {
    const message = createBaseDatadogConfig();
    message.collector_cluster = object.collector_cluster ?? undefined;
    message.service_name = object.service_name ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(DatadogConfig.$type, DatadogConfig);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
