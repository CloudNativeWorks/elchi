// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: google/api/expr/v1alpha1/checked.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Empty } from "../../../protobuf/empty";
import { NullValue, nullValueFromJSON, nullValueToJSON, nullValueToNumber } from "../../../protobuf/struct";
import { Constant, Expr, SourceInfo } from "./syntax";

export const protobufPackage = "google.api.expr.v1alpha1";

/** A CEL expression which has been successfully type checked. */
export interface CheckedExpr {
  $type: "google.api.expr.v1alpha1.CheckedExpr";
  /**
   * A map from expression ids to resolved references.
   *
   * The following entries are in this table:
   *
   * - An Ident or Select expression is represented here if it resolves to a
   *   declaration. For instance, if `a.b.c` is represented by
   *   `select(select(id(a), b), c)`, and `a.b` resolves to a declaration,
   *   while `c` is a field selection, then the reference is attached to the
   *   nested select expression (but not to the id or or the outer select).
   *   In turn, if `a` resolves to a declaration and `b.c` are field selections,
   *   the reference is attached to the ident expression.
   * - Every Call expression has an entry here, identifying the function being
   *   called.
   * - Every CreateStruct expression for a message has an entry, identifying
   *   the message.
   */
  reference_map?:
    | Map<number, Reference>
    | undefined;
  /**
   * A map from expression ids to types.
   *
   * Every expression node which has a type different than DYN has a mapping
   * here. If an expression has type DYN, it is omitted from this map to save
   * space.
   */
  type_map?:
    | Map<number, Type>
    | undefined;
  /**
   * The source info derived from input that generated the parsed `expr` and
   * any optimizations made during the type-checking pass.
   */
  source_info?:
    | SourceInfo
    | undefined;
  /**
   * The expr version indicates the major / minor version number of the `expr`
   * representation.
   *
   * The most common reason for a version change will be to indicate to the CEL
   * runtimes that transformations have been performed on the expr during static
   * analysis. In some cases, this will save the runtime the work of applying
   * the same or similar transformations prior to evaluation.
   */
  expr_version?:
    | string
    | undefined;
  /**
   * The checked expression. Semantically equivalent to the parsed `expr`, but
   * may have structural differences.
   */
  expr?: Expr | undefined;
}

export interface CheckedExpr_ReferenceMapEntry {
  $type: "google.api.expr.v1alpha1.CheckedExpr.ReferenceMapEntry";
  key: number;
  value?: Reference | undefined;
}

export interface CheckedExpr_TypeMapEntry {
  $type: "google.api.expr.v1alpha1.CheckedExpr.TypeMapEntry";
  key: number;
  value?: Type | undefined;
}

/** Represents a CEL type. */
export interface Type {
  $type: "google.api.expr.v1alpha1.Type";
  /** The kind of type. */
  type_kind?:
    | //
    /** Dynamic type. */
    { $case: "dyn"; dyn: Empty }
    | //
    /** Null value. */
    { $case: "null"; null: NullValue }
    | //
    /** Primitive types: `true`, `1u`, `-2.0`, `'string'`, `b'bytes'`. */
    { $case: "primitive"; primitive: Type_PrimitiveType }
    | //
    /** Wrapper of a primitive type, e.g. `google.protobuf.Int64Value`. */
    { $case: "wrapper"; wrapper: Type_PrimitiveType }
    | //
    /** Well-known protobuf type such as `google.protobuf.Timestamp`. */
    { $case: "well_known"; well_known: Type_WellKnownType }
    | //
    /** Parameterized list with elements of `list_type`, e.g. `list<timestamp>`. */
    { $case: "list_type"; list_type: Type_ListType }
    | //
    /** Parameterized map with typed keys and values. */
    { $case: "map_type"; map_type: Type_MapType }
    | //
    /** Function type. */
    { $case: "function"; function: Type_FunctionType }
    | //
    /**
     * Protocol buffer message type.
     *
     * The `message_type` string specifies the qualified message type name. For
     * example, `google.plus.Profile`.
     */
    { $case: "message_type"; message_type: string }
    | //
    /**
     * Type param type.
     *
     * The `type_param` string specifies the type parameter name, e.g. `list<E>`
     * would be a `list_type` whose element type was a `type_param` type
     * named `E`.
     */
    { $case: "type_param"; type_param: string }
    | //
    /**
     * Type type.
     *
     * The `type` value specifies the target type. e.g. int is type with a
     * target type of `Primitive.INT`.
     */
    { $case: "type"; type: Type }
    | //
    /**
     * Error type.
     *
     * During type-checking if an expression is an error, its type is propagated
     * as the `ERROR` type. This permits the type-checker to discover other
     * errors present in the expression.
     */
    { $case: "error"; error: Empty }
    | //
    /** Abstract, application defined type. */
    { $case: "abstract_type"; abstract_type: Type_AbstractType }
    | undefined;
}

/** CEL primitive types. */
export enum Type_PrimitiveType {
  /** PRIMITIVE_TYPE_UNSPECIFIED - Unspecified type. */
  PRIMITIVE_TYPE_UNSPECIFIED = "PRIMITIVE_TYPE_UNSPECIFIED",
  /** BOOL - Boolean type. */
  BOOL = "BOOL",
  /**
   * INT64 - Int64 type.
   *
   * Proto-based integer values are widened to int64.
   */
  INT64 = "INT64",
  /**
   * UINT64 - Uint64 type.
   *
   * Proto-based unsigned integer values are widened to uint64.
   */
  UINT64 = "UINT64",
  /**
   * DOUBLE - Double type.
   *
   * Proto-based float values are widened to double values.
   */
  DOUBLE = "DOUBLE",
  /** STRING - String type. */
  STRING = "STRING",
  /** BYTES - Bytes type. */
  BYTES = "BYTES",
}

export function type_PrimitiveTypeFromJSON(object: any): Type_PrimitiveType {
  switch (object) {
    case 0:
    case "PRIMITIVE_TYPE_UNSPECIFIED":
      return Type_PrimitiveType.PRIMITIVE_TYPE_UNSPECIFIED;
    case 1:
    case "BOOL":
      return Type_PrimitiveType.BOOL;
    case 2:
    case "INT64":
      return Type_PrimitiveType.INT64;
    case 3:
    case "UINT64":
      return Type_PrimitiveType.UINT64;
    case 4:
    case "DOUBLE":
      return Type_PrimitiveType.DOUBLE;
    case 5:
    case "STRING":
      return Type_PrimitiveType.STRING;
    case 6:
    case "BYTES":
      return Type_PrimitiveType.BYTES;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Type_PrimitiveType");
  }
}

export function type_PrimitiveTypeToJSON(object: Type_PrimitiveType): string {
  switch (object) {
    case Type_PrimitiveType.PRIMITIVE_TYPE_UNSPECIFIED:
      return "PRIMITIVE_TYPE_UNSPECIFIED";
    case Type_PrimitiveType.BOOL:
      return "BOOL";
    case Type_PrimitiveType.INT64:
      return "INT64";
    case Type_PrimitiveType.UINT64:
      return "UINT64";
    case Type_PrimitiveType.DOUBLE:
      return "DOUBLE";
    case Type_PrimitiveType.STRING:
      return "STRING";
    case Type_PrimitiveType.BYTES:
      return "BYTES";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Type_PrimitiveType");
  }
}

export function type_PrimitiveTypeToNumber(object: Type_PrimitiveType): number {
  switch (object) {
    case Type_PrimitiveType.PRIMITIVE_TYPE_UNSPECIFIED:
      return 0;
    case Type_PrimitiveType.BOOL:
      return 1;
    case Type_PrimitiveType.INT64:
      return 2;
    case Type_PrimitiveType.UINT64:
      return 3;
    case Type_PrimitiveType.DOUBLE:
      return 4;
    case Type_PrimitiveType.STRING:
      return 5;
    case Type_PrimitiveType.BYTES:
      return 6;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Type_PrimitiveType");
  }
}

/** Well-known protobuf types treated with first-class support in CEL. */
export enum Type_WellKnownType {
  /** WELL_KNOWN_TYPE_UNSPECIFIED - Unspecified type. */
  WELL_KNOWN_TYPE_UNSPECIFIED = "WELL_KNOWN_TYPE_UNSPECIFIED",
  /**
   * ANY - Well-known protobuf.Any type.
   *
   * Any types are a polymorphic message type. During type-checking they are
   * treated like `DYN` types, but at runtime they are resolved to a specific
   * message type specified at evaluation time.
   */
  ANY = "ANY",
  /** TIMESTAMP - Well-known protobuf.Timestamp type, internally referenced as `timestamp`. */
  TIMESTAMP = "TIMESTAMP",
  /** DURATION - Well-known protobuf.Duration type, internally referenced as `duration`. */
  DURATION = "DURATION",
}

export function type_WellKnownTypeFromJSON(object: any): Type_WellKnownType {
  switch (object) {
    case 0:
    case "WELL_KNOWN_TYPE_UNSPECIFIED":
      return Type_WellKnownType.WELL_KNOWN_TYPE_UNSPECIFIED;
    case 1:
    case "ANY":
      return Type_WellKnownType.ANY;
    case 2:
    case "TIMESTAMP":
      return Type_WellKnownType.TIMESTAMP;
    case 3:
    case "DURATION":
      return Type_WellKnownType.DURATION;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Type_WellKnownType");
  }
}

export function type_WellKnownTypeToJSON(object: Type_WellKnownType): string {
  switch (object) {
    case Type_WellKnownType.WELL_KNOWN_TYPE_UNSPECIFIED:
      return "WELL_KNOWN_TYPE_UNSPECIFIED";
    case Type_WellKnownType.ANY:
      return "ANY";
    case Type_WellKnownType.TIMESTAMP:
      return "TIMESTAMP";
    case Type_WellKnownType.DURATION:
      return "DURATION";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Type_WellKnownType");
  }
}

export function type_WellKnownTypeToNumber(object: Type_WellKnownType): number {
  switch (object) {
    case Type_WellKnownType.WELL_KNOWN_TYPE_UNSPECIFIED:
      return 0;
    case Type_WellKnownType.ANY:
      return 1;
    case Type_WellKnownType.TIMESTAMP:
      return 2;
    case Type_WellKnownType.DURATION:
      return 3;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum Type_WellKnownType");
  }
}

/** List type with typed elements, e.g. `list<example.proto.MyMessage>`. */
export interface Type_ListType {
  $type: "google.api.expr.v1alpha1.Type.ListType";
  /** The element type. */
  elem_type?: Type | undefined;
}

/** Map type with parameterized key and value types, e.g. `map<string, int>`. */
export interface Type_MapType {
  $type: "google.api.expr.v1alpha1.Type.MapType";
  /** The type of the key. */
  key_type?:
    | Type
    | undefined;
  /** The type of the value. */
  value_type?: Type | undefined;
}

/** Function type with result and arg types. */
export interface Type_FunctionType {
  $type: "google.api.expr.v1alpha1.Type.FunctionType";
  /** Result type of the function. */
  result_type?:
    | Type
    | undefined;
  /** Argument types of the function. */
  arg_types?: Type[] | undefined;
}

/** Application defined abstract type. */
export interface Type_AbstractType {
  $type: "google.api.expr.v1alpha1.Type.AbstractType";
  /** The fully qualified name of this abstract type. */
  name?:
    | string
    | undefined;
  /** Parameter types for this abstract type. */
  parameter_types?: Type[] | undefined;
}

/**
 * Represents a declaration of a named value or function.
 *
 * A declaration is part of the contract between the expression, the agent
 * evaluating that expression, and the caller requesting evaluation.
 */
export interface Decl {
  $type: "google.api.expr.v1alpha1.Decl";
  /**
   * The fully qualified name of the declaration.
   *
   * Declarations are organized in containers and this represents the full path
   * to the declaration in its container, as in `google.api.expr.Decl`.
   *
   * Declarations used as [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload] parameters may or may not
   * have a name depending on whether the overload is function declaration or a
   * function definition containing a result [Expr][google.api.expr.v1alpha1.Expr].
   */
  name?:
    | string
    | undefined;
  /** Required. The declaration kind. */
  decl_kind?:
    | //
    /** Identifier declaration. */
    { $case: "ident"; ident: Decl_IdentDecl }
    | //
    /** Function declaration. */
    { $case: "function"; function: Decl_FunctionDecl }
    | undefined;
}

/**
 * Identifier declaration which specifies its type and optional `Expr` value.
 *
 * An identifier without a value is a declaration that must be provided at
 * evaluation time. An identifier with a value should resolve to a constant,
 * but may be used in conjunction with other identifiers bound at evaluation
 * time.
 */
export interface Decl_IdentDecl {
  $type: "google.api.expr.v1alpha1.Decl.IdentDecl";
  /** Required. The type of the identifier. */
  type?:
    | Type
    | undefined;
  /**
   * The constant value of the identifier. If not specified, the identifier
   * must be supplied at evaluation time.
   */
  value?:
    | Constant
    | undefined;
  /** Documentation string for the identifier. */
  doc?: string | undefined;
}

/**
 * Function declaration specifies one or more overloads which indicate the
 * function's parameter types and return type.
 *
 * Functions have no observable side-effects (there may be side-effects like
 * logging which are not observable from CEL).
 */
export interface Decl_FunctionDecl {
  $type: "google.api.expr.v1alpha1.Decl.FunctionDecl";
  /** Required. List of function overloads, must contain at least one overload. */
  overloads?: Decl_FunctionDecl_Overload[] | undefined;
}

/**
 * An overload indicates a function's parameter types and return type, and
 * may optionally include a function body described in terms of [Expr][google.api.expr.v1alpha1.Expr]
 * values.
 *
 * Functions overloads are declared in either a function or method
 * call-style. For methods, the `params[0]` is the expected type of the
 * target receiver.
 *
 * Overloads must have non-overlapping argument types after erasure of all
 * parameterized type variables (similar as type erasure in Java).
 */
export interface Decl_FunctionDecl_Overload {
  $type: "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload";
  /**
   * Required. Globally unique overload name of the function which reflects
   * the function name and argument types.
   *
   * This will be used by a [Reference][google.api.expr.v1alpha1.Reference] to indicate the `overload_id` that
   * was resolved for the function `name`.
   */
  overload_id?:
    | string
    | undefined;
  /**
   * List of function parameter [Type][google.api.expr.v1alpha1.Type] values.
   *
   * Param types are disjoint after generic type parameters have been
   * replaced with the type `DYN`. Since the `DYN` type is compatible with
   * any other type, this means that if `A` is a type parameter, the
   * function types `int<A>` and `int<int>` are not disjoint. Likewise,
   * `map<string, string>` is not disjoint from `map<K, V>`.
   *
   * When the `result_type` of a function is a generic type param, the
   * type param name also appears as the `type` of on at least one params.
   */
  params?:
    | Type[]
    | undefined;
  /**
   * The type param names associated with the function declaration.
   *
   * For example, `function ex<K,V>(K key, map<K, V> map) : V` would yield
   * the type params of `K, V`.
   */
  type_params?:
    | string[]
    | undefined;
  /**
   * Required. The result type of the function. For example, the operator
   * `string.isEmpty()` would have `result_type` of `kind: BOOL`.
   */
  result_type?:
    | Type
    | undefined;
  /**
   * Whether the function is to be used in a method call-style `x.f(...)`
   * or a function call-style `f(x, ...)`.
   *
   * For methods, the first parameter declaration, `params[0]` is the
   * expected type of the target receiver.
   */
  is_instance_function?:
    | boolean
    | undefined;
  /** Documentation string for the overload. */
  doc?: string | undefined;
}

/** Describes a resolved reference to a declaration. */
export interface Reference {
  $type: "google.api.expr.v1alpha1.Reference";
  /** The fully qualified name of the declaration. */
  name?:
    | string
    | undefined;
  /**
   * For references to functions, this is a list of `Overload.overload_id`
   * values which match according to typing rules.
   *
   * If the list has more than one element, overload resolution among the
   * presented candidates must happen at runtime because of dynamic types. The
   * type checker attempts to narrow down this list as much as possible.
   *
   * Empty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl].
   */
  overload_id?:
    | string[]
    | undefined;
  /**
   * For references to constants, this may contain the value of the
   * constant if known at compile time.
   */
  value?: Constant | undefined;
}

function createBaseCheckedExpr(): CheckedExpr {
  return { $type: "google.api.expr.v1alpha1.CheckedExpr" };
}

export const CheckedExpr: MessageFns<CheckedExpr, "google.api.expr.v1alpha1.CheckedExpr"> = {
  $type: "google.api.expr.v1alpha1.CheckedExpr" as const,

  encode(message: CheckedExpr, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    (message.reference_map || new Map()).forEach((value, key) => {
      CheckedExpr_ReferenceMapEntry.encode({
        $type: "google.api.expr.v1alpha1.CheckedExpr.ReferenceMapEntry",
        key: key as any,
        value,
      }, writer.uint32(18).fork()).join();
    });
    (message.type_map || new Map()).forEach((value, key) => {
      CheckedExpr_TypeMapEntry.encode({
        $type: "google.api.expr.v1alpha1.CheckedExpr.TypeMapEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).join();
    });
    if (message.source_info !== undefined) {
      SourceInfo.encode(message.source_info, writer.uint32(42).fork()).join();
    }
    if (message.expr_version !== undefined && message.expr_version !== "") {
      writer.uint32(50).string(message.expr_version);
    }
    if (message.expr !== undefined) {
      Expr.encode(message.expr, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckedExpr {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckedExpr();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = CheckedExpr_ReferenceMapEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            if (message.reference_map === undefined) {
              message.reference_map = new Map();
            }
            message.reference_map!.set(entry2.key, entry2.value);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = CheckedExpr_TypeMapEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            if (message.type_map === undefined) {
              message.type_map = new Map();
            }
            message.type_map!.set(entry3.key, entry3.value);
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.source_info = SourceInfo.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.expr_version = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expr = Expr.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckedExpr {
    return {
      $type: CheckedExpr.$type,
      reference_map: isObject(object.reference_map)
        ? Object.entries(object.reference_map).reduce<Map<number, Reference>>((acc, [key, value]) => {
          acc.set(globalThis.Number(key), Reference.fromJSON(value));
          return acc;
        }, new Map())
        : undefined,
      type_map: isObject(object.type_map)
        ? Object.entries(object.type_map).reduce<Map<number, Type>>((acc, [key, value]) => {
          acc.set(globalThis.Number(key), Type.fromJSON(value));
          return acc;
        }, new Map())
        : undefined,
      source_info: isSet(object.source_info) ? SourceInfo.fromJSON(object.source_info) : undefined,
      expr_version: isSet(object.expr_version) ? globalThis.String(object.expr_version) : undefined,
      expr: isSet(object.expr) ? Expr.fromJSON(object.expr) : undefined,
    };
  },

  toJSON(message: CheckedExpr): unknown {
    const obj: any = {};
    if (message.reference_map?.size) {
      obj.reference_map = {};
      message.reference_map.forEach((v, k) => {
        obj.reference_map[k] = Reference.toJSON(v);
      });
    }
    if (message.type_map?.size) {
      obj.type_map = {};
      message.type_map.forEach((v, k) => {
        obj.type_map[k] = Type.toJSON(v);
      });
    }
    if (message.source_info !== undefined) {
      obj.source_info = SourceInfo.toJSON(message.source_info);
    }
    if (message.expr_version !== undefined) {
      obj.expr_version = message.expr_version;
    }
    if (message.expr !== undefined) {
      obj.expr = Expr.toJSON(message.expr);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckedExpr>, I>>(base?: I): CheckedExpr {
    return CheckedExpr.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckedExpr>, I>>(object: I): CheckedExpr {
    const message = createBaseCheckedExpr();
    message.reference_map = (object.reference_map === undefined || object.reference_map === null) ? undefined : (() => {
      const m = new Map();
      (object.reference_map as Map<number, Reference> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, Reference.fromPartial(value));
        }
      });
      return m;
    })();
    message.type_map = (object.type_map === undefined || object.type_map === null) ? undefined : (() => {
      const m = new Map();
      (object.type_map as Map<number, Type> ?? new Map()).forEach((value, key) => {
        if (value !== undefined) {
          m.set(key, Type.fromPartial(value));
        }
      });
      return m;
    })();
    message.source_info = (object.source_info !== undefined && object.source_info !== null)
      ? SourceInfo.fromPartial(object.source_info)
      : undefined;
    message.expr_version = object.expr_version ?? undefined;
    message.expr = (object.expr !== undefined && object.expr !== null) ? Expr.fromPartial(object.expr) : undefined;
    return message;
  },
};

messageTypeRegistry.set(CheckedExpr.$type, CheckedExpr);

function createBaseCheckedExpr_ReferenceMapEntry(): CheckedExpr_ReferenceMapEntry {
  return { $type: "google.api.expr.v1alpha1.CheckedExpr.ReferenceMapEntry", key: 0 };
}

export const CheckedExpr_ReferenceMapEntry: MessageFns<
  CheckedExpr_ReferenceMapEntry,
  "google.api.expr.v1alpha1.CheckedExpr.ReferenceMapEntry"
> = {
  $type: "google.api.expr.v1alpha1.CheckedExpr.ReferenceMapEntry" as const,

  encode(message: CheckedExpr_ReferenceMapEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      Reference.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckedExpr_ReferenceMapEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckedExpr_ReferenceMapEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Reference.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckedExpr_ReferenceMapEntry {
    return {
      $type: CheckedExpr_ReferenceMapEntry.$type,
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Reference.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CheckedExpr_ReferenceMapEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Reference.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckedExpr_ReferenceMapEntry>, I>>(base?: I): CheckedExpr_ReferenceMapEntry {
    return CheckedExpr_ReferenceMapEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckedExpr_ReferenceMapEntry>, I>>(
    object: I,
  ): CheckedExpr_ReferenceMapEntry {
    const message = createBaseCheckedExpr_ReferenceMapEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? Reference.fromPartial(object.value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(CheckedExpr_ReferenceMapEntry.$type, CheckedExpr_ReferenceMapEntry);

function createBaseCheckedExpr_TypeMapEntry(): CheckedExpr_TypeMapEntry {
  return { $type: "google.api.expr.v1alpha1.CheckedExpr.TypeMapEntry", key: 0 };
}

export const CheckedExpr_TypeMapEntry: MessageFns<
  CheckedExpr_TypeMapEntry,
  "google.api.expr.v1alpha1.CheckedExpr.TypeMapEntry"
> = {
  $type: "google.api.expr.v1alpha1.CheckedExpr.TypeMapEntry" as const,

  encode(message: CheckedExpr_TypeMapEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int64(message.key);
    }
    if (message.value !== undefined) {
      Type.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckedExpr_TypeMapEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckedExpr_TypeMapEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Type.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckedExpr_TypeMapEntry {
    return {
      $type: CheckedExpr_TypeMapEntry.$type,
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Type.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CheckedExpr_TypeMapEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Type.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckedExpr_TypeMapEntry>, I>>(base?: I): CheckedExpr_TypeMapEntry {
    return CheckedExpr_TypeMapEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckedExpr_TypeMapEntry>, I>>(object: I): CheckedExpr_TypeMapEntry {
    const message = createBaseCheckedExpr_TypeMapEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null) ? Type.fromPartial(object.value) : undefined;
    return message;
  },
};

messageTypeRegistry.set(CheckedExpr_TypeMapEntry.$type, CheckedExpr_TypeMapEntry);

function createBaseType(): Type {
  return { $type: "google.api.expr.v1alpha1.Type", type_kind: undefined };
}

export const Type: MessageFns<Type, "google.api.expr.v1alpha1.Type"> = {
  $type: "google.api.expr.v1alpha1.Type" as const,

  encode(message: Type, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.type_kind?.$case) {
      case "dyn":
        Empty.encode(message.type_kind.dyn, writer.uint32(10).fork()).join();
        break;
      case "null":
        writer.uint32(16).int32(nullValueToNumber(message.type_kind.null));
        break;
      case "primitive":
        writer.uint32(24).int32(type_PrimitiveTypeToNumber(message.type_kind.primitive));
        break;
      case "wrapper":
        writer.uint32(32).int32(type_PrimitiveTypeToNumber(message.type_kind.wrapper));
        break;
      case "well_known":
        writer.uint32(40).int32(type_WellKnownTypeToNumber(message.type_kind.well_known));
        break;
      case "list_type":
        Type_ListType.encode(message.type_kind.list_type, writer.uint32(50).fork()).join();
        break;
      case "map_type":
        Type_MapType.encode(message.type_kind.map_type, writer.uint32(58).fork()).join();
        break;
      case "function":
        Type_FunctionType.encode(message.type_kind.function, writer.uint32(66).fork()).join();
        break;
      case "message_type":
        writer.uint32(74).string(message.type_kind.message_type);
        break;
      case "type_param":
        writer.uint32(82).string(message.type_kind.type_param);
        break;
      case "type":
        Type.encode(message.type_kind.type, writer.uint32(90).fork()).join();
        break;
      case "error":
        Empty.encode(message.type_kind.error, writer.uint32(98).fork()).join();
        break;
      case "abstract_type":
        Type_AbstractType.encode(message.type_kind.abstract_type, writer.uint32(114).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Type {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type_kind = { $case: "dyn", dyn: Empty.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type_kind = { $case: "null", null: nullValueFromJSON(reader.int32()) };
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type_kind = { $case: "primitive", primitive: type_PrimitiveTypeFromJSON(reader.int32()) };
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type_kind = { $case: "wrapper", wrapper: type_PrimitiveTypeFromJSON(reader.int32()) };
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type_kind = { $case: "well_known", well_known: type_WellKnownTypeFromJSON(reader.int32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.type_kind = { $case: "list_type", list_type: Type_ListType.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.type_kind = { $case: "map_type", map_type: Type_MapType.decode(reader, reader.uint32()) };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.type_kind = { $case: "function", function: Type_FunctionType.decode(reader, reader.uint32()) };
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.type_kind = { $case: "message_type", message_type: reader.string() };
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.type_kind = { $case: "type_param", type_param: reader.string() };
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.type_kind = { $case: "type", type: Type.decode(reader, reader.uint32()) };
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.type_kind = { $case: "error", error: Empty.decode(reader, reader.uint32()) };
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.type_kind = {
            $case: "abstract_type",
            abstract_type: Type_AbstractType.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Type {
    return {
      $type: Type.$type,
      type_kind: isSet(object.dyn)
        ? { $case: "dyn", dyn: Empty.fromJSON(object.dyn) }
        : isSet(object.null)
        ? { $case: "null", null: nullValueFromJSON(object.null) }
        : isSet(object.primitive)
        ? { $case: "primitive", primitive: type_PrimitiveTypeFromJSON(object.primitive) }
        : isSet(object.wrapper)
        ? { $case: "wrapper", wrapper: type_PrimitiveTypeFromJSON(object.wrapper) }
        : isSet(object.well_known)
        ? { $case: "well_known", well_known: type_WellKnownTypeFromJSON(object.well_known) }
        : isSet(object.list_type)
        ? { $case: "list_type", list_type: Type_ListType.fromJSON(object.list_type) }
        : isSet(object.map_type)
        ? { $case: "map_type", map_type: Type_MapType.fromJSON(object.map_type) }
        : isSet(object.function)
        ? { $case: "function", function: Type_FunctionType.fromJSON(object.function) }
        : isSet(object.message_type)
        ? { $case: "message_type", message_type: globalThis.String(object.message_type) }
        : isSet(object.type_param)
        ? { $case: "type_param", type_param: globalThis.String(object.type_param) }
        : isSet(object.type)
        ? { $case: "type", type: Type.fromJSON(object.type) }
        : isSet(object.error)
        ? { $case: "error", error: Empty.fromJSON(object.error) }
        : isSet(object.abstract_type)
        ? { $case: "abstract_type", abstract_type: Type_AbstractType.fromJSON(object.abstract_type) }
        : undefined,
    };
  },

  toJSON(message: Type): unknown {
    const obj: any = {};
    if (message.type_kind?.$case === "dyn") {
      obj.dyn = Empty.toJSON(message.type_kind.dyn);
    }
    if (message.type_kind?.$case === "null") {
      obj.null = nullValueToJSON(message.type_kind.null);
    }
    if (message.type_kind?.$case === "primitive") {
      obj.primitive = type_PrimitiveTypeToJSON(message.type_kind.primitive);
    }
    if (message.type_kind?.$case === "wrapper") {
      obj.wrapper = type_PrimitiveTypeToJSON(message.type_kind.wrapper);
    }
    if (message.type_kind?.$case === "well_known") {
      obj.well_known = type_WellKnownTypeToJSON(message.type_kind.well_known);
    }
    if (message.type_kind?.$case === "list_type") {
      obj.list_type = Type_ListType.toJSON(message.type_kind.list_type);
    }
    if (message.type_kind?.$case === "map_type") {
      obj.map_type = Type_MapType.toJSON(message.type_kind.map_type);
    }
    if (message.type_kind?.$case === "function") {
      obj.function = Type_FunctionType.toJSON(message.type_kind.function);
    }
    if (message.type_kind?.$case === "message_type") {
      obj.message_type = message.type_kind.message_type;
    }
    if (message.type_kind?.$case === "type_param") {
      obj.type_param = message.type_kind.type_param;
    }
    if (message.type_kind?.$case === "type") {
      obj.type = Type.toJSON(message.type_kind.type);
    }
    if (message.type_kind?.$case === "error") {
      obj.error = Empty.toJSON(message.type_kind.error);
    }
    if (message.type_kind?.$case === "abstract_type") {
      obj.abstract_type = Type_AbstractType.toJSON(message.type_kind.abstract_type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Type>, I>>(base?: I): Type {
    return Type.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Type>, I>>(object: I): Type {
    const message = createBaseType();
    if (object.type_kind?.$case === "dyn" && object.type_kind?.dyn !== undefined && object.type_kind?.dyn !== null) {
      message.type_kind = { $case: "dyn", dyn: Empty.fromPartial(object.type_kind.dyn) };
    }
    if (object.type_kind?.$case === "null" && object.type_kind?.null !== undefined && object.type_kind?.null !== null) {
      message.type_kind = { $case: "null", null: object.type_kind.null };
    }
    if (
      object.type_kind?.$case === "primitive" &&
      object.type_kind?.primitive !== undefined &&
      object.type_kind?.primitive !== null
    ) {
      message.type_kind = { $case: "primitive", primitive: object.type_kind.primitive };
    }
    if (
      object.type_kind?.$case === "wrapper" &&
      object.type_kind?.wrapper !== undefined &&
      object.type_kind?.wrapper !== null
    ) {
      message.type_kind = { $case: "wrapper", wrapper: object.type_kind.wrapper };
    }
    if (
      object.type_kind?.$case === "well_known" &&
      object.type_kind?.well_known !== undefined &&
      object.type_kind?.well_known !== null
    ) {
      message.type_kind = { $case: "well_known", well_known: object.type_kind.well_known };
    }
    if (
      object.type_kind?.$case === "list_type" &&
      object.type_kind?.list_type !== undefined &&
      object.type_kind?.list_type !== null
    ) {
      message.type_kind = { $case: "list_type", list_type: Type_ListType.fromPartial(object.type_kind.list_type) };
    }
    if (
      object.type_kind?.$case === "map_type" &&
      object.type_kind?.map_type !== undefined &&
      object.type_kind?.map_type !== null
    ) {
      message.type_kind = { $case: "map_type", map_type: Type_MapType.fromPartial(object.type_kind.map_type) };
    }
    if (
      object.type_kind?.$case === "function" &&
      object.type_kind?.function !== undefined &&
      object.type_kind?.function !== null
    ) {
      message.type_kind = { $case: "function", function: Type_FunctionType.fromPartial(object.type_kind.function) };
    }
    if (
      object.type_kind?.$case === "message_type" &&
      object.type_kind?.message_type !== undefined &&
      object.type_kind?.message_type !== null
    ) {
      message.type_kind = { $case: "message_type", message_type: object.type_kind.message_type };
    }
    if (
      object.type_kind?.$case === "type_param" &&
      object.type_kind?.type_param !== undefined &&
      object.type_kind?.type_param !== null
    ) {
      message.type_kind = { $case: "type_param", type_param: object.type_kind.type_param };
    }
    if (object.type_kind?.$case === "type" && object.type_kind?.type !== undefined && object.type_kind?.type !== null) {
      message.type_kind = { $case: "type", type: Type.fromPartial(object.type_kind.type) };
    }
    if (
      object.type_kind?.$case === "error" && object.type_kind?.error !== undefined && object.type_kind?.error !== null
    ) {
      message.type_kind = { $case: "error", error: Empty.fromPartial(object.type_kind.error) };
    }
    if (
      object.type_kind?.$case === "abstract_type" &&
      object.type_kind?.abstract_type !== undefined &&
      object.type_kind?.abstract_type !== null
    ) {
      message.type_kind = {
        $case: "abstract_type",
        abstract_type: Type_AbstractType.fromPartial(object.type_kind.abstract_type),
      };
    }
    return message;
  },
};

messageTypeRegistry.set(Type.$type, Type);

function createBaseType_ListType(): Type_ListType {
  return { $type: "google.api.expr.v1alpha1.Type.ListType" };
}

export const Type_ListType: MessageFns<Type_ListType, "google.api.expr.v1alpha1.Type.ListType"> = {
  $type: "google.api.expr.v1alpha1.Type.ListType" as const,

  encode(message: Type_ListType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.elem_type !== undefined) {
      Type.encode(message.elem_type, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Type_ListType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_ListType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.elem_type = Type.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Type_ListType {
    return {
      $type: Type_ListType.$type,
      elem_type: isSet(object.elem_type) ? Type.fromJSON(object.elem_type) : undefined,
    };
  },

  toJSON(message: Type_ListType): unknown {
    const obj: any = {};
    if (message.elem_type !== undefined) {
      obj.elem_type = Type.toJSON(message.elem_type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Type_ListType>, I>>(base?: I): Type_ListType {
    return Type_ListType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Type_ListType>, I>>(object: I): Type_ListType {
    const message = createBaseType_ListType();
    message.elem_type = (object.elem_type !== undefined && object.elem_type !== null)
      ? Type.fromPartial(object.elem_type)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Type_ListType.$type, Type_ListType);

function createBaseType_MapType(): Type_MapType {
  return { $type: "google.api.expr.v1alpha1.Type.MapType" };
}

export const Type_MapType: MessageFns<Type_MapType, "google.api.expr.v1alpha1.Type.MapType"> = {
  $type: "google.api.expr.v1alpha1.Type.MapType" as const,

  encode(message: Type_MapType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key_type !== undefined) {
      Type.encode(message.key_type, writer.uint32(10).fork()).join();
    }
    if (message.value_type !== undefined) {
      Type.encode(message.value_type, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Type_MapType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_MapType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key_type = Type.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value_type = Type.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Type_MapType {
    return {
      $type: Type_MapType.$type,
      key_type: isSet(object.key_type) ? Type.fromJSON(object.key_type) : undefined,
      value_type: isSet(object.value_type) ? Type.fromJSON(object.value_type) : undefined,
    };
  },

  toJSON(message: Type_MapType): unknown {
    const obj: any = {};
    if (message.key_type !== undefined) {
      obj.key_type = Type.toJSON(message.key_type);
    }
    if (message.value_type !== undefined) {
      obj.value_type = Type.toJSON(message.value_type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Type_MapType>, I>>(base?: I): Type_MapType {
    return Type_MapType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Type_MapType>, I>>(object: I): Type_MapType {
    const message = createBaseType_MapType();
    message.key_type = (object.key_type !== undefined && object.key_type !== null)
      ? Type.fromPartial(object.key_type)
      : undefined;
    message.value_type = (object.value_type !== undefined && object.value_type !== null)
      ? Type.fromPartial(object.value_type)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Type_MapType.$type, Type_MapType);

function createBaseType_FunctionType(): Type_FunctionType {
  return { $type: "google.api.expr.v1alpha1.Type.FunctionType" };
}

export const Type_FunctionType: MessageFns<Type_FunctionType, "google.api.expr.v1alpha1.Type.FunctionType"> = {
  $type: "google.api.expr.v1alpha1.Type.FunctionType" as const,

  encode(message: Type_FunctionType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result_type !== undefined) {
      Type.encode(message.result_type, writer.uint32(10).fork()).join();
    }
    if (message.arg_types !== undefined && message.arg_types.length !== 0) {
      for (const v of message.arg_types) {
        Type.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Type_FunctionType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_FunctionType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result_type = Type.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.arg_types === undefined) {
            message.arg_types = [];
          }
          const el = Type.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.arg_types!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Type_FunctionType {
    return {
      $type: Type_FunctionType.$type,
      result_type: isSet(object.result_type) ? Type.fromJSON(object.result_type) : undefined,
      arg_types: globalThis.Array.isArray(object?.arg_types)
        ? object.arg_types.map((e: any) => Type.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Type_FunctionType): unknown {
    const obj: any = {};
    if (message.result_type !== undefined) {
      obj.result_type = Type.toJSON(message.result_type);
    }
    if (message.arg_types?.length) {
      obj.arg_types = message.arg_types.map((e) => Type.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Type_FunctionType>, I>>(base?: I): Type_FunctionType {
    return Type_FunctionType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Type_FunctionType>, I>>(object: I): Type_FunctionType {
    const message = createBaseType_FunctionType();
    message.result_type = (object.result_type !== undefined && object.result_type !== null)
      ? Type.fromPartial(object.result_type)
      : undefined;
    message.arg_types = object.arg_types?.map((e) => Type.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Type_FunctionType.$type, Type_FunctionType);

function createBaseType_AbstractType(): Type_AbstractType {
  return { $type: "google.api.expr.v1alpha1.Type.AbstractType" };
}

export const Type_AbstractType: MessageFns<Type_AbstractType, "google.api.expr.v1alpha1.Type.AbstractType"> = {
  $type: "google.api.expr.v1alpha1.Type.AbstractType" as const,

  encode(message: Type_AbstractType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.parameter_types !== undefined && message.parameter_types.length !== 0) {
      for (const v of message.parameter_types) {
        Type.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Type_AbstractType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseType_AbstractType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.parameter_types === undefined) {
            message.parameter_types = [];
          }
          const el = Type.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.parameter_types!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Type_AbstractType {
    return {
      $type: Type_AbstractType.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      parameter_types: globalThis.Array.isArray(object?.parameter_types)
        ? object.parameter_types.map((e: any) => Type.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Type_AbstractType): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.parameter_types?.length) {
      obj.parameter_types = message.parameter_types.map((e) => Type.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Type_AbstractType>, I>>(base?: I): Type_AbstractType {
    return Type_AbstractType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Type_AbstractType>, I>>(object: I): Type_AbstractType {
    const message = createBaseType_AbstractType();
    message.name = object.name ?? undefined;
    message.parameter_types = object.parameter_types?.map((e) => Type.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Type_AbstractType.$type, Type_AbstractType);

function createBaseDecl(): Decl {
  return { $type: "google.api.expr.v1alpha1.Decl", decl_kind: undefined };
}

export const Decl: MessageFns<Decl, "google.api.expr.v1alpha1.Decl"> = {
  $type: "google.api.expr.v1alpha1.Decl" as const,

  encode(message: Decl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    switch (message.decl_kind?.$case) {
      case "ident":
        Decl_IdentDecl.encode(message.decl_kind.ident, writer.uint32(18).fork()).join();
        break;
      case "function":
        Decl_FunctionDecl.encode(message.decl_kind.function, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Decl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.decl_kind = { $case: "ident", ident: Decl_IdentDecl.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.decl_kind = { $case: "function", function: Decl_FunctionDecl.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Decl {
    return {
      $type: Decl.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      decl_kind: isSet(object.ident)
        ? { $case: "ident", ident: Decl_IdentDecl.fromJSON(object.ident) }
        : isSet(object.function)
        ? { $case: "function", function: Decl_FunctionDecl.fromJSON(object.function) }
        : undefined,
    };
  },

  toJSON(message: Decl): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.decl_kind?.$case === "ident") {
      obj.ident = Decl_IdentDecl.toJSON(message.decl_kind.ident);
    }
    if (message.decl_kind?.$case === "function") {
      obj.function = Decl_FunctionDecl.toJSON(message.decl_kind.function);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Decl>, I>>(base?: I): Decl {
    return Decl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Decl>, I>>(object: I): Decl {
    const message = createBaseDecl();
    message.name = object.name ?? undefined;
    if (
      object.decl_kind?.$case === "ident" && object.decl_kind?.ident !== undefined && object.decl_kind?.ident !== null
    ) {
      message.decl_kind = { $case: "ident", ident: Decl_IdentDecl.fromPartial(object.decl_kind.ident) };
    }
    if (
      object.decl_kind?.$case === "function" &&
      object.decl_kind?.function !== undefined &&
      object.decl_kind?.function !== null
    ) {
      message.decl_kind = { $case: "function", function: Decl_FunctionDecl.fromPartial(object.decl_kind.function) };
    }
    return message;
  },
};

messageTypeRegistry.set(Decl.$type, Decl);

function createBaseDecl_IdentDecl(): Decl_IdentDecl {
  return { $type: "google.api.expr.v1alpha1.Decl.IdentDecl" };
}

export const Decl_IdentDecl: MessageFns<Decl_IdentDecl, "google.api.expr.v1alpha1.Decl.IdentDecl"> = {
  $type: "google.api.expr.v1alpha1.Decl.IdentDecl" as const,

  encode(message: Decl_IdentDecl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== undefined) {
      Type.encode(message.type, writer.uint32(10).fork()).join();
    }
    if (message.value !== undefined) {
      Constant.encode(message.value, writer.uint32(18).fork()).join();
    }
    if (message.doc !== undefined && message.doc !== "") {
      writer.uint32(26).string(message.doc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Decl_IdentDecl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecl_IdentDecl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = Type.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Constant.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.doc = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Decl_IdentDecl {
    return {
      $type: Decl_IdentDecl.$type,
      type: isSet(object.type) ? Type.fromJSON(object.type) : undefined,
      value: isSet(object.value) ? Constant.fromJSON(object.value) : undefined,
      doc: isSet(object.doc) ? globalThis.String(object.doc) : undefined,
    };
  },

  toJSON(message: Decl_IdentDecl): unknown {
    const obj: any = {};
    if (message.type !== undefined) {
      obj.type = Type.toJSON(message.type);
    }
    if (message.value !== undefined) {
      obj.value = Constant.toJSON(message.value);
    }
    if (message.doc !== undefined) {
      obj.doc = message.doc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Decl_IdentDecl>, I>>(base?: I): Decl_IdentDecl {
    return Decl_IdentDecl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Decl_IdentDecl>, I>>(object: I): Decl_IdentDecl {
    const message = createBaseDecl_IdentDecl();
    message.type = (object.type !== undefined && object.type !== null) ? Type.fromPartial(object.type) : undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? Constant.fromPartial(object.value)
      : undefined;
    message.doc = object.doc ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Decl_IdentDecl.$type, Decl_IdentDecl);

function createBaseDecl_FunctionDecl(): Decl_FunctionDecl {
  return { $type: "google.api.expr.v1alpha1.Decl.FunctionDecl" };
}

export const Decl_FunctionDecl: MessageFns<Decl_FunctionDecl, "google.api.expr.v1alpha1.Decl.FunctionDecl"> = {
  $type: "google.api.expr.v1alpha1.Decl.FunctionDecl" as const,

  encode(message: Decl_FunctionDecl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.overloads !== undefined && message.overloads.length !== 0) {
      for (const v of message.overloads) {
        Decl_FunctionDecl_Overload.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Decl_FunctionDecl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecl_FunctionDecl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.overloads === undefined) {
            message.overloads = [];
          }
          const el = Decl_FunctionDecl_Overload.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.overloads!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Decl_FunctionDecl {
    return {
      $type: Decl_FunctionDecl.$type,
      overloads: globalThis.Array.isArray(object?.overloads)
        ? object.overloads.map((e: any) => Decl_FunctionDecl_Overload.fromJSON(e))
        : undefined,
    };
  },

  toJSON(message: Decl_FunctionDecl): unknown {
    const obj: any = {};
    if (message.overloads?.length) {
      obj.overloads = message.overloads.map((e) => Decl_FunctionDecl_Overload.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Decl_FunctionDecl>, I>>(base?: I): Decl_FunctionDecl {
    return Decl_FunctionDecl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Decl_FunctionDecl>, I>>(object: I): Decl_FunctionDecl {
    const message = createBaseDecl_FunctionDecl();
    message.overloads = object.overloads?.map((e) => Decl_FunctionDecl_Overload.fromPartial(e)) || undefined;
    return message;
  },
};

messageTypeRegistry.set(Decl_FunctionDecl.$type, Decl_FunctionDecl);

function createBaseDecl_FunctionDecl_Overload(): Decl_FunctionDecl_Overload {
  return { $type: "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload" };
}

export const Decl_FunctionDecl_Overload: MessageFns<
  Decl_FunctionDecl_Overload,
  "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload"
> = {
  $type: "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload" as const,

  encode(message: Decl_FunctionDecl_Overload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.overload_id !== undefined && message.overload_id !== "") {
      writer.uint32(10).string(message.overload_id);
    }
    if (message.params !== undefined && message.params.length !== 0) {
      for (const v of message.params) {
        Type.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.type_params !== undefined && message.type_params.length !== 0) {
      for (const v of message.type_params) {
        writer.uint32(26).string(v!);
      }
    }
    if (message.result_type !== undefined) {
      Type.encode(message.result_type, writer.uint32(34).fork()).join();
    }
    if (message.is_instance_function !== undefined && message.is_instance_function !== false) {
      writer.uint32(40).bool(message.is_instance_function);
    }
    if (message.doc !== undefined && message.doc !== "") {
      writer.uint32(50).string(message.doc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Decl_FunctionDecl_Overload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDecl_FunctionDecl_Overload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.overload_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.params === undefined) {
            message.params = [];
          }
          const el = Type.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.params!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.type_params === undefined) {
            message.type_params = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.type_params!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.result_type = Type.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.is_instance_function = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.doc = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Decl_FunctionDecl_Overload {
    return {
      $type: Decl_FunctionDecl_Overload.$type,
      overload_id: isSet(object.overload_id) ? globalThis.String(object.overload_id) : undefined,
      params: globalThis.Array.isArray(object?.params) ? object.params.map((e: any) => Type.fromJSON(e)) : undefined,
      type_params: globalThis.Array.isArray(object?.type_params)
        ? object.type_params.map((e: any) => globalThis.String(e))
        : undefined,
      result_type: isSet(object.result_type) ? Type.fromJSON(object.result_type) : undefined,
      is_instance_function: isSet(object.is_instance_function)
        ? globalThis.Boolean(object.is_instance_function)
        : undefined,
      doc: isSet(object.doc) ? globalThis.String(object.doc) : undefined,
    };
  },

  toJSON(message: Decl_FunctionDecl_Overload): unknown {
    const obj: any = {};
    if (message.overload_id !== undefined) {
      obj.overload_id = message.overload_id;
    }
    if (message.params?.length) {
      obj.params = message.params.map((e) => Type.toJSON(e));
    }
    if (message.type_params?.length) {
      obj.type_params = message.type_params;
    }
    if (message.result_type !== undefined) {
      obj.result_type = Type.toJSON(message.result_type);
    }
    if (message.is_instance_function !== undefined) {
      obj.is_instance_function = message.is_instance_function;
    }
    if (message.doc !== undefined) {
      obj.doc = message.doc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Decl_FunctionDecl_Overload>, I>>(base?: I): Decl_FunctionDecl_Overload {
    return Decl_FunctionDecl_Overload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Decl_FunctionDecl_Overload>, I>>(object: I): Decl_FunctionDecl_Overload {
    const message = createBaseDecl_FunctionDecl_Overload();
    message.overload_id = object.overload_id ?? undefined;
    message.params = object.params?.map((e) => Type.fromPartial(e)) || undefined;
    message.type_params = object.type_params?.map((e) => e) || undefined;
    message.result_type = (object.result_type !== undefined && object.result_type !== null)
      ? Type.fromPartial(object.result_type)
      : undefined;
    message.is_instance_function = object.is_instance_function ?? undefined;
    message.doc = object.doc ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(Decl_FunctionDecl_Overload.$type, Decl_FunctionDecl_Overload);

function createBaseReference(): Reference {
  return { $type: "google.api.expr.v1alpha1.Reference" };
}

export const Reference: MessageFns<Reference, "google.api.expr.v1alpha1.Reference"> = {
  $type: "google.api.expr.v1alpha1.Reference" as const,

  encode(message: Reference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.overload_id !== undefined && message.overload_id.length !== 0) {
      for (const v of message.overload_id) {
        writer.uint32(26).string(v!);
      }
    }
    if (message.value !== undefined) {
      Constant.encode(message.value, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.overload_id === undefined) {
            message.overload_id = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.overload_id!.push(el);
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = Constant.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reference {
    return {
      $type: Reference.$type,
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      overload_id: globalThis.Array.isArray(object?.overload_id)
        ? object.overload_id.map((e: any) => globalThis.String(e))
        : undefined,
      value: isSet(object.value) ? Constant.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Reference): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.overload_id?.length) {
      obj.overload_id = message.overload_id;
    }
    if (message.value !== undefined) {
      obj.value = Constant.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reference>, I>>(base?: I): Reference {
    return Reference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reference>, I>>(object: I): Reference {
    const message = createBaseReference();
    message.name = object.name ?? undefined;
    message.overload_id = object.overload_id?.map((e) => e) || undefined;
    message.value = (object.value !== undefined && object.value !== null)
      ? Constant.fromPartial(object.value)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Reference.$type, Reference);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
