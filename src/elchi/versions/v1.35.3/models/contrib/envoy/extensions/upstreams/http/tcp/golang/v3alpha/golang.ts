// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               unknown
// source: contrib/envoy/extensions/upstreams/http/tcp/golang/v3alpha/golang.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../../../../../../google/protobuf/any";
import { messageTypeRegistry } from "../../../../../../../../typeRegistry";

export const protobufPackage = "envoy.extensions.upstreams.http.tcp.golang.v3alpha";

/** [#extension-category: envoy.upstreams] */
export interface Config {
  $type: "envoy.extensions.upstreams.http.tcp.golang.v3alpha.Config";
  /** Globally unique ID for a dynamic library file. */
  library_id?:
    | string
    | undefined;
  /**
   * Path to a dynamic library implementing the
   * :repo:`HttpTcpBridge API <contrib/golang/common/go/api.HttpTcpBridge>`
   * interface.
   */
  library_path?:
    | string
    | undefined;
  /**
   * Globally unique name of the Go plugin.
   *
   * This name **must** be consistent with the name registered in ``tcp::RegisterHttpTcpBridgeFactoryAndConfigParser``
   */
  plugin_name?:
    | string
    | undefined;
  /**
   * Configuration for the Go plugin.
   *
   * .. note::
   *     This configuration is only parsed in the Golang plugin, and is therefore not validated
   *     by Envoy.
   *
   *     See the :repo:`HttpTcpBridge API <contrib/golang/common/go/api/filter.go>`
   *     for more information about how the plugin's configuration data can be accessed.
   */
  plugin_config?: Any | undefined;
}

function createBaseConfig(): Config {
  return { $type: "envoy.extensions.upstreams.http.tcp.golang.v3alpha.Config" };
}

export const Config: MessageFns<Config, "envoy.extensions.upstreams.http.tcp.golang.v3alpha.Config"> = {
  $type: "envoy.extensions.upstreams.http.tcp.golang.v3alpha.Config" as const,

  encode(message: Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.library_id !== undefined && message.library_id !== "") {
      writer.uint32(10).string(message.library_id);
    }
    if (message.library_path !== undefined && message.library_path !== "") {
      writer.uint32(18).string(message.library_path);
    }
    if (message.plugin_name !== undefined && message.plugin_name !== "") {
      writer.uint32(26).string(message.plugin_name);
    }
    if (message.plugin_config !== undefined) {
      Any.encode(message.plugin_config, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.library_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.library_path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.plugin_name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.plugin_config = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Config {
    return {
      $type: Config.$type,
      library_id: isSet(object.library_id) ? globalThis.String(object.library_id) : undefined,
      library_path: isSet(object.library_path) ? globalThis.String(object.library_path) : undefined,
      plugin_name: isSet(object.plugin_name) ? globalThis.String(object.plugin_name) : undefined,
      plugin_config: isSet(object.plugin_config) ? Any.fromJSON(object.plugin_config) : undefined,
    };
  },

  toJSON(message: Config): unknown {
    const obj: any = {};
    if (message.library_id !== undefined) {
      obj.library_id = message.library_id;
    }
    if (message.library_path !== undefined) {
      obj.library_path = message.library_path;
    }
    if (message.plugin_name !== undefined) {
      obj.plugin_name = message.plugin_name;
    }
    if (message.plugin_config !== undefined) {
      obj.plugin_config = Any.toJSON(message.plugin_config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Config>, I>>(base?: I): Config {
    return Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Config>, I>>(object: I): Config {
    const message = createBaseConfig();
    message.library_id = object.library_id ?? undefined;
    message.library_path = object.library_path ?? undefined;
    message.plugin_name = object.plugin_name ?? undefined;
    message.plugin_config = (object.plugin_config !== undefined && object.plugin_config !== null)
      ? Any.fromPartial(object.plugin_config)
      : undefined;
    return message;
  },
};

messageTypeRegistry.set(Config.$type, Config);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
